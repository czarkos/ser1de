// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/Message1.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fMessage1_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fMessage1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fMessage1_2eproto;
namespace fleetbench {
namespace proto {
class Message1;
struct Message1DefaultTypeInternal;
extern Message1DefaultTypeInternal _Message1_default_instance_;
class Message1_M1;
struct Message1_M1DefaultTypeInternal;
extern Message1_M1DefaultTypeInternal _Message1_M1_default_instance_;
class Message1_M10;
struct Message1_M10DefaultTypeInternal;
extern Message1_M10DefaultTypeInternal _Message1_M10_default_instance_;
class Message1_M10_M19;
struct Message1_M10_M19DefaultTypeInternal;
extern Message1_M10_M19DefaultTypeInternal _Message1_M10_M19_default_instance_;
class Message1_M10_M19_M40;
struct Message1_M10_M19_M40DefaultTypeInternal;
extern Message1_M10_M19_M40DefaultTypeInternal _Message1_M10_M19_M40_default_instance_;
class Message1_M10_M19_M40_M49;
struct Message1_M10_M19_M40_M49DefaultTypeInternal;
extern Message1_M10_M19_M40_M49DefaultTypeInternal _Message1_M10_M19_M40_M49_default_instance_;
class Message1_M10_M19_M40_M49_M56;
struct Message1_M10_M19_M40_M49_M56DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M56DefaultTypeInternal _Message1_M10_M19_M40_M49_M56_default_instance_;
class Message1_M10_M19_M40_M49_M57;
struct Message1_M10_M19_M40_M49_M57DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M57DefaultTypeInternal _Message1_M10_M19_M40_M49_M57_default_instance_;
class Message1_M10_M19_M40_M49_M57_M71;
struct Message1_M10_M19_M40_M49_M57_M71DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M57_M71DefaultTypeInternal _Message1_M10_M19_M40_M49_M57_M71_default_instance_;
class Message1_M10_M19_M40_M49_M57_M72;
struct Message1_M10_M19_M40_M49_M57_M72DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M57_M72DefaultTypeInternal _Message1_M10_M19_M40_M49_M57_M72_default_instance_;
class Message1_M10_M19_M40_M49_M57_M72_M84;
struct Message1_M10_M19_M40_M49_M57_M72_M84DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M57_M72_M84DefaultTypeInternal _Message1_M10_M19_M40_M49_M57_M72_M84_default_instance_;
class Message1_M10_M19_M40_M49_M57_M75;
struct Message1_M10_M19_M40_M49_M57_M75DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M57_M75DefaultTypeInternal _Message1_M10_M19_M40_M49_M57_M75_default_instance_;
class Message1_M10_M19_M40_M49_M61;
struct Message1_M10_M19_M40_M49_M61DefaultTypeInternal;
extern Message1_M10_M19_M40_M49_M61DefaultTypeInternal _Message1_M10_M19_M40_M49_M61_default_instance_;
class Message1_M10_M19_M42;
struct Message1_M10_M19_M42DefaultTypeInternal;
extern Message1_M10_M19_M42DefaultTypeInternal _Message1_M10_M19_M42_default_instance_;
class Message1_M11;
struct Message1_M11DefaultTypeInternal;
extern Message1_M11DefaultTypeInternal _Message1_M11_default_instance_;
class Message1_M11_M20;
struct Message1_M11_M20DefaultTypeInternal;
extern Message1_M11_M20DefaultTypeInternal _Message1_M11_M20_default_instance_;
class Message1_M11_M23;
struct Message1_M11_M23DefaultTypeInternal;
extern Message1_M11_M23DefaultTypeInternal _Message1_M11_M23_default_instance_;
class Message1_M11_M23_M37;
struct Message1_M11_M23_M37DefaultTypeInternal;
extern Message1_M11_M23_M37DefaultTypeInternal _Message1_M11_M23_M37_default_instance_;
class Message1_M11_M23_M37_M43;
struct Message1_M11_M23_M37_M43DefaultTypeInternal;
extern Message1_M11_M23_M37_M43DefaultTypeInternal _Message1_M11_M23_M37_M43_default_instance_;
class Message1_M11_M23_M37_M43_M58;
struct Message1_M11_M23_M37_M43_M58DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M58DefaultTypeInternal _Message1_M11_M23_M37_M43_M58_default_instance_;
class Message1_M11_M23_M37_M43_M58_M81;
struct Message1_M11_M23_M37_M43_M58_M81DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M58_M81DefaultTypeInternal _Message1_M11_M23_M37_M43_M58_M81_default_instance_;
class Message1_M11_M23_M37_M43_M58_M83;
struct Message1_M11_M23_M37_M43_M58_M83DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M58_M83DefaultTypeInternal _Message1_M11_M23_M37_M43_M58_M83_default_instance_;
class Message1_M11_M23_M37_M43_M58_M83_M92;
struct Message1_M11_M23_M37_M43_M58_M83_M92DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M58_M83_M92DefaultTypeInternal _Message1_M11_M23_M37_M43_M58_M83_M92_default_instance_;
class Message1_M11_M23_M37_M43_M62;
struct Message1_M11_M23_M37_M43_M62DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M62DefaultTypeInternal _Message1_M11_M23_M37_M43_M62_default_instance_;
class Message1_M11_M23_M37_M43_M62_M68;
struct Message1_M11_M23_M37_M43_M62_M68DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M62_M68DefaultTypeInternal _Message1_M11_M23_M37_M43_M62_M68_default_instance_;
class Message1_M11_M23_M37_M43_M62_M68_M90;
struct Message1_M11_M23_M37_M43_M62_M68_M90DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M62_M68_M90DefaultTypeInternal _Message1_M11_M23_M37_M43_M62_M68_M90_default_instance_;
class Message1_M11_M23_M37_M43_M62_M78;
struct Message1_M11_M23_M37_M43_M62_M78DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M62_M78DefaultTypeInternal _Message1_M11_M23_M37_M43_M62_M78_default_instance_;
class Message1_M11_M23_M37_M43_M62_M78_M86;
struct Message1_M11_M23_M37_M43_M62_M78_M86DefaultTypeInternal;
extern Message1_M11_M23_M37_M43_M62_M78_M86DefaultTypeInternal _Message1_M11_M23_M37_M43_M62_M78_M86_default_instance_;
class Message1_M12;
struct Message1_M12DefaultTypeInternal;
extern Message1_M12DefaultTypeInternal _Message1_M12_default_instance_;
class Message1_M13;
struct Message1_M13DefaultTypeInternal;
extern Message1_M13DefaultTypeInternal _Message1_M13_default_instance_;
class Message1_M13_M15;
struct Message1_M13_M15DefaultTypeInternal;
extern Message1_M13_M15DefaultTypeInternal _Message1_M13_M15_default_instance_;
class Message1_M13_M15_M33;
struct Message1_M13_M15_M33DefaultTypeInternal;
extern Message1_M13_M15_M33DefaultTypeInternal _Message1_M13_M15_M33_default_instance_;
class Message1_M13_M15_M36;
struct Message1_M13_M15_M36DefaultTypeInternal;
extern Message1_M13_M15_M36DefaultTypeInternal _Message1_M13_M15_M36_default_instance_;
class Message1_M13_M30;
struct Message1_M13_M30DefaultTypeInternal;
extern Message1_M13_M30DefaultTypeInternal _Message1_M13_M30_default_instance_;
class Message1_M1_M21;
struct Message1_M1_M21DefaultTypeInternal;
extern Message1_M1_M21DefaultTypeInternal _Message1_M1_M21_default_instance_;
class Message1_M1_M25;
struct Message1_M1_M25DefaultTypeInternal;
extern Message1_M1_M25DefaultTypeInternal _Message1_M1_M25_default_instance_;
class Message1_M1_M25_M31;
struct Message1_M1_M25_M31DefaultTypeInternal;
extern Message1_M1_M25_M31DefaultTypeInternal _Message1_M1_M25_M31_default_instance_;
class Message1_M1_M25_M31_M51;
struct Message1_M1_M25_M31_M51DefaultTypeInternal;
extern Message1_M1_M25_M31_M51DefaultTypeInternal _Message1_M1_M25_M31_M51_default_instance_;
class Message1_M1_M25_M31_M51_M65;
struct Message1_M1_M25_M31_M51_M65DefaultTypeInternal;
extern Message1_M1_M25_M31_M51_M65DefaultTypeInternal _Message1_M1_M25_M31_M51_M65_default_instance_;
class Message1_M1_M25_M31_M51_M65_M76;
struct Message1_M1_M25_M31_M51_M65_M76DefaultTypeInternal;
extern Message1_M1_M25_M31_M51_M65_M76DefaultTypeInternal _Message1_M1_M25_M31_M51_M65_M76_default_instance_;
class Message1_M1_M26;
struct Message1_M1_M26DefaultTypeInternal;
extern Message1_M1_M26DefaultTypeInternal _Message1_M1_M26_default_instance_;
class Message1_M2;
struct Message1_M2DefaultTypeInternal;
extern Message1_M2DefaultTypeInternal _Message1_M2_default_instance_;
class Message1_M2_M22;
struct Message1_M2_M22DefaultTypeInternal;
extern Message1_M2_M22DefaultTypeInternal _Message1_M2_M22_default_instance_;
class Message1_M2_M22_M34;
struct Message1_M2_M22_M34DefaultTypeInternal;
extern Message1_M2_M22_M34DefaultTypeInternal _Message1_M2_M22_M34_default_instance_;
class Message1_M2_M22_M34_M44;
struct Message1_M2_M22_M34_M44DefaultTypeInternal;
extern Message1_M2_M22_M34_M44DefaultTypeInternal _Message1_M2_M22_M34_M44_default_instance_;
class Message1_M2_M22_M34_M48;
struct Message1_M2_M22_M34_M48DefaultTypeInternal;
extern Message1_M2_M22_M34_M48DefaultTypeInternal _Message1_M2_M22_M34_M48_default_instance_;
class Message1_M2_M22_M34_M48_M60;
struct Message1_M2_M22_M34_M48_M60DefaultTypeInternal;
extern Message1_M2_M22_M34_M48_M60DefaultTypeInternal _Message1_M2_M22_M34_M48_M60_default_instance_;
class Message1_M2_M22_M34_M48_M60_M69;
struct Message1_M2_M22_M34_M48_M60_M69DefaultTypeInternal;
extern Message1_M2_M22_M34_M48_M60_M69DefaultTypeInternal _Message1_M2_M22_M34_M48_M60_M69_default_instance_;
class Message1_M2_M29;
struct Message1_M2_M29DefaultTypeInternal;
extern Message1_M2_M29DefaultTypeInternal _Message1_M2_M29_default_instance_;
class Message1_M2_M29_M35;
struct Message1_M2_M29_M35DefaultTypeInternal;
extern Message1_M2_M29_M35DefaultTypeInternal _Message1_M2_M29_M35_default_instance_;
class Message1_M3;
struct Message1_M3DefaultTypeInternal;
extern Message1_M3DefaultTypeInternal _Message1_M3_default_instance_;
class Message1_M4;
struct Message1_M4DefaultTypeInternal;
extern Message1_M4DefaultTypeInternal _Message1_M4_default_instance_;
class Message1_M4_M28;
struct Message1_M4_M28DefaultTypeInternal;
extern Message1_M4_M28DefaultTypeInternal _Message1_M4_M28_default_instance_;
class Message1_M5;
struct Message1_M5DefaultTypeInternal;
extern Message1_M5DefaultTypeInternal _Message1_M5_default_instance_;
class Message1_M6;
struct Message1_M6DefaultTypeInternal;
extern Message1_M6DefaultTypeInternal _Message1_M6_default_instance_;
class Message1_M6_M16;
struct Message1_M6_M16DefaultTypeInternal;
extern Message1_M6_M16DefaultTypeInternal _Message1_M6_M16_default_instance_;
class Message1_M6_M16_M38;
struct Message1_M6_M16_M38DefaultTypeInternal;
extern Message1_M6_M16_M38DefaultTypeInternal _Message1_M6_M16_M38_default_instance_;
class Message1_M6_M16_M38_M46;
struct Message1_M6_M16_M38_M46DefaultTypeInternal;
extern Message1_M6_M16_M38_M46DefaultTypeInternal _Message1_M6_M16_M38_M46_default_instance_;
class Message1_M6_M16_M38_M46_M55;
struct Message1_M6_M16_M38_M46_M55DefaultTypeInternal;
extern Message1_M6_M16_M38_M46_M55DefaultTypeInternal _Message1_M6_M16_M38_M46_M55_default_instance_;
class Message1_M6_M16_M38_M50;
struct Message1_M6_M16_M38_M50DefaultTypeInternal;
extern Message1_M6_M16_M38_M50DefaultTypeInternal _Message1_M6_M16_M38_M50_default_instance_;
class Message1_M6_M16_M38_M50_M64;
struct Message1_M6_M16_M38_M50_M64DefaultTypeInternal;
extern Message1_M6_M16_M38_M50_M64DefaultTypeInternal _Message1_M6_M16_M38_M50_M64_default_instance_;
class Message1_M6_M24;
struct Message1_M6_M24DefaultTypeInternal;
extern Message1_M6_M24DefaultTypeInternal _Message1_M6_M24_default_instance_;
class Message1_M6_M27;
struct Message1_M6_M27DefaultTypeInternal;
extern Message1_M6_M27DefaultTypeInternal _Message1_M6_M27_default_instance_;
class Message1_M7;
struct Message1_M7DefaultTypeInternal;
extern Message1_M7DefaultTypeInternal _Message1_M7_default_instance_;
class Message1_M7_M14;
struct Message1_M7_M14DefaultTypeInternal;
extern Message1_M7_M14DefaultTypeInternal _Message1_M7_M14_default_instance_;
class Message1_M7_M14_M41;
struct Message1_M7_M14_M41DefaultTypeInternal;
extern Message1_M7_M14_M41DefaultTypeInternal _Message1_M7_M14_M41_default_instance_;
class Message1_M7_M14_M41_M47;
struct Message1_M7_M14_M41_M47DefaultTypeInternal;
extern Message1_M7_M14_M41_M47DefaultTypeInternal _Message1_M7_M14_M41_M47_default_instance_;
class Message1_M7_M14_M41_M47_M63;
struct Message1_M7_M14_M41_M47_M63DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70;
struct Message1_M7_M14_M41_M47_M63_M70DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M88;
struct Message1_M7_M14_M41_M47_M63_M70_M88DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M88DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M88_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89;
struct Message1_M7_M14_M41_M47_M63_M70_M89DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104_default_instance_;
class Message1_M7_M14_M41_M47_M63_M70_M89_M99;
struct Message1_M7_M14_M41_M47_M63_M70_M89_M99DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M70_M89_M99DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M70_M89_M99_default_instance_;
class Message1_M7_M14_M41_M47_M63_M74;
struct Message1_M7_M14_M41_M47_M63_M74DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M74DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M74_default_instance_;
class Message1_M7_M14_M41_M47_M63_M79;
struct Message1_M7_M14_M41_M47_M63_M79DefaultTypeInternal;
extern Message1_M7_M14_M41_M47_M63_M79DefaultTypeInternal _Message1_M7_M14_M41_M47_M63_M79_default_instance_;
class Message1_M7_M14_M41_M52;
struct Message1_M7_M14_M41_M52DefaultTypeInternal;
extern Message1_M7_M14_M41_M52DefaultTypeInternal _Message1_M7_M14_M41_M52_default_instance_;
class Message1_M7_M14_M41_M52_M66;
struct Message1_M7_M14_M41_M52_M66DefaultTypeInternal;
extern Message1_M7_M14_M41_M52_M66DefaultTypeInternal _Message1_M7_M14_M41_M52_M66_default_instance_;
class Message1_M7_M18;
struct Message1_M7_M18DefaultTypeInternal;
extern Message1_M7_M18DefaultTypeInternal _Message1_M7_M18_default_instance_;
class Message1_M7_M18_M32;
struct Message1_M7_M18_M32DefaultTypeInternal;
extern Message1_M7_M18_M32DefaultTypeInternal _Message1_M7_M18_M32_default_instance_;
class Message1_M7_M18_M32_M53;
struct Message1_M7_M18_M32_M53DefaultTypeInternal;
extern Message1_M7_M18_M32_M53DefaultTypeInternal _Message1_M7_M18_M32_M53_default_instance_;
class Message1_M7_M18_M39;
struct Message1_M7_M18_M39DefaultTypeInternal;
extern Message1_M7_M18_M39DefaultTypeInternal _Message1_M7_M18_M39_default_instance_;
class Message1_M7_M18_M39_M45;
struct Message1_M7_M18_M39_M45DefaultTypeInternal;
extern Message1_M7_M18_M39_M45DefaultTypeInternal _Message1_M7_M18_M39_M45_default_instance_;
class Message1_M7_M18_M39_M45_M54;
struct Message1_M7_M18_M39_M45_M54DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_default_instance_;
class Message1_M7_M18_M39_M45_M54_M77;
struct Message1_M7_M18_M39_M45_M54_M77DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M77DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M77_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80;
struct Message1_M7_M18_M39_M45_M54_M80DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M91;
struct Message1_M7_M18_M39_M45_M54_M80_M91DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M91DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M91_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M91_M96;
struct Message1_M7_M18_M39_M45_M54_M80_M91_M96DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M91_M96DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M91_M96_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M91_M97;
struct Message1_M7_M18_M39_M45_M54_M80_M91_M97DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M91_M97DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M91_M97_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102;
struct Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106;
struct Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106_default_instance_;
class Message1_M7_M18_M39_M45_M54_M80_M94;
struct Message1_M7_M18_M39_M45_M54_M80_M94DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M80_M94DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M80_M94_default_instance_;
class Message1_M7_M18_M39_M45_M54_M82;
struct Message1_M7_M18_M39_M45_M54_M82DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M82DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M82_default_instance_;
class Message1_M7_M18_M39_M45_M54_M82_M93;
struct Message1_M7_M18_M39_M45_M54_M82_M93DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M54_M82_M93DefaultTypeInternal _Message1_M7_M18_M39_M45_M54_M82_M93_default_instance_;
class Message1_M7_M18_M39_M45_M59;
struct Message1_M7_M18_M39_M45_M59DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_default_instance_;
class Message1_M7_M18_M39_M45_M59_M67;
struct Message1_M7_M18_M39_M45_M59_M67DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M67DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M67_default_instance_;
class Message1_M7_M18_M39_M45_M59_M67_M85;
struct Message1_M7_M18_M39_M45_M59_M67_M85DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M67_M85DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M67_M85_default_instance_;
class Message1_M7_M18_M39_M45_M59_M67_M85_M100;
struct Message1_M7_M18_M39_M45_M59_M67_M85_M100DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M67_M85_M100DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M67_M85_M100_default_instance_;
class Message1_M7_M18_M39_M45_M59_M67_M85_M98;
struct Message1_M7_M18_M39_M45_M59_M67_M85_M98DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M67_M85_M98DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M67_M85_M98_default_instance_;
class Message1_M7_M18_M39_M45_M59_M73;
struct Message1_M7_M18_M39_M45_M59_M73DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M73DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M73_default_instance_;
class Message1_M7_M18_M39_M45_M59_M73_M87;
struct Message1_M7_M18_M39_M45_M59_M73_M87DefaultTypeInternal;
extern Message1_M7_M18_M39_M45_M59_M73_M87DefaultTypeInternal _Message1_M7_M18_M39_M45_M59_M73_M87_default_instance_;
class Message1_M8;
struct Message1_M8DefaultTypeInternal;
extern Message1_M8DefaultTypeInternal _Message1_M8_default_instance_;
class Message1_M9;
struct Message1_M9DefaultTypeInternal;
extern Message1_M9DefaultTypeInternal _Message1_M9_default_instance_;
class Message1_M9_M17;
struct Message1_M9_M17DefaultTypeInternal;
extern Message1_M9_M17DefaultTypeInternal _Message1_M9_M17_default_instance_;
}  // namespace proto
}  // namespace fleetbench
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fleetbench {
namespace proto {
enum Message1_M1_M25_E4 : int {
  Message1_M1_M25_E4_E4_UNSPECIFIED = 0,
  Message1_M1_M25_E4_E4_CONST_1 = 67,
  Message1_M1_M25_E4_E4_CONST_2 = 46,
  Message1_M1_M25_E4_E4_CONST_3 = 53,
  Message1_M1_M25_E4_E4_CONST_4 = 100,
  Message1_M1_M25_E4_E4_CONST_5 = 54,
};

bool Message1_M1_M25_E4_IsValid(int value);
extern const uint32_t Message1_M1_M25_E4_internal_data_[];
constexpr Message1_M1_M25_E4 Message1_M1_M25_E4_E4_MIN = static_cast<Message1_M1_M25_E4>(0);
constexpr Message1_M1_M25_E4 Message1_M1_M25_E4_E4_MAX = static_cast<Message1_M1_M25_E4>(100);
constexpr int Message1_M1_M25_E4_E4_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M1_M25_E4_descriptor();
template <typename T>
const std::string& Message1_M1_M25_E4_Name(T value) {
  static_assert(std::is_same<T, Message1_M1_M25_E4>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E4_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M1_M25_E4_descriptor(), value);
}
inline bool Message1_M1_M25_E4_Parse(absl::string_view name, Message1_M1_M25_E4* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M1_M25_E4>(
      Message1_M1_M25_E4_descriptor(), name, value);
}
enum Message1_M1_M26_E5 : int {
  Message1_M1_M26_E5_E5_UNSPECIFIED = 0,
  Message1_M1_M26_E5_E5_CONST_1 = 109,
  Message1_M1_M26_E5_E5_CONST_2 = 110,
  Message1_M1_M26_E5_E5_CONST_3 = 108,
  Message1_M1_M26_E5_E5_CONST_4 = 33,
  Message1_M1_M26_E5_E5_CONST_5 = 66,
};

bool Message1_M1_M26_E5_IsValid(int value);
extern const uint32_t Message1_M1_M26_E5_internal_data_[];
constexpr Message1_M1_M26_E5 Message1_M1_M26_E5_E5_MIN = static_cast<Message1_M1_M26_E5>(0);
constexpr Message1_M1_M26_E5 Message1_M1_M26_E5_E5_MAX = static_cast<Message1_M1_M26_E5>(110);
constexpr int Message1_M1_M26_E5_E5_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M1_M26_E5_descriptor();
template <typename T>
const std::string& Message1_M1_M26_E5_Name(T value) {
  static_assert(std::is_same<T, Message1_M1_M26_E5>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E5_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M1_M26_E5_descriptor(), value);
}
inline bool Message1_M1_M26_E5_Parse(absl::string_view name, Message1_M1_M26_E5* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M1_M26_E5>(
      Message1_M1_M26_E5_descriptor(), name, value);
}
enum Message1_M1_M26_E6 : int {
  Message1_M1_M26_E6_E6_UNSPECIFIED = 0,
  Message1_M1_M26_E6_E6_CONST_1 = 41,
  Message1_M1_M26_E6_E6_CONST_2 = 60,
  Message1_M1_M26_E6_E6_CONST_3 = 90,
  Message1_M1_M26_E6_E6_CONST_4 = 104,
  Message1_M1_M26_E6_E6_CONST_5 = 108,
};

bool Message1_M1_M26_E6_IsValid(int value);
extern const uint32_t Message1_M1_M26_E6_internal_data_[];
constexpr Message1_M1_M26_E6 Message1_M1_M26_E6_E6_MIN = static_cast<Message1_M1_M26_E6>(0);
constexpr Message1_M1_M26_E6 Message1_M1_M26_E6_E6_MAX = static_cast<Message1_M1_M26_E6>(108);
constexpr int Message1_M1_M26_E6_E6_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M1_M26_E6_descriptor();
template <typename T>
const std::string& Message1_M1_M26_E6_Name(T value) {
  static_assert(std::is_same<T, Message1_M1_M26_E6>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E6_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M1_M26_E6_descriptor(), value);
}
inline bool Message1_M1_M26_E6_Parse(absl::string_view name, Message1_M1_M26_E6* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M1_M26_E6>(
      Message1_M1_M26_E6_descriptor(), name, value);
}
enum Message1_M4_M28_E7 : int {
  Message1_M4_M28_E7_E7_UNSPECIFIED = 0,
  Message1_M4_M28_E7_E7_CONST_1 = 126,
  Message1_M4_M28_E7_E7_CONST_2 = 112,
  Message1_M4_M28_E7_E7_CONST_3 = 18,
  Message1_M4_M28_E7_E7_CONST_4 = 80,
  Message1_M4_M28_E7_E7_CONST_5 = 109,
};

bool Message1_M4_M28_E7_IsValid(int value);
extern const uint32_t Message1_M4_M28_E7_internal_data_[];
constexpr Message1_M4_M28_E7 Message1_M4_M28_E7_E7_MIN = static_cast<Message1_M4_M28_E7>(0);
constexpr Message1_M4_M28_E7 Message1_M4_M28_E7_E7_MAX = static_cast<Message1_M4_M28_E7>(126);
constexpr int Message1_M4_M28_E7_E7_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M4_M28_E7_descriptor();
template <typename T>
const std::string& Message1_M4_M28_E7_Name(T value) {
  static_assert(std::is_same<T, Message1_M4_M28_E7>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E7_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M4_M28_E7_descriptor(), value);
}
inline bool Message1_M4_M28_E7_Parse(absl::string_view name, Message1_M4_M28_E7* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M4_M28_E7>(
      Message1_M4_M28_E7_descriptor(), name, value);
}
enum Message1_M6_M16_M38_M46_M55_E22 : int {
  Message1_M6_M16_M38_M46_M55_E22_E22_UNSPECIFIED = 0,
  Message1_M6_M16_M38_M46_M55_E22_E22_CONST_1 = 89,
  Message1_M6_M16_M38_M46_M55_E22_E22_CONST_2 = 70,
  Message1_M6_M16_M38_M46_M55_E22_E22_CONST_3 = 62,
  Message1_M6_M16_M38_M46_M55_E22_E22_CONST_4 = 68,
  Message1_M6_M16_M38_M46_M55_E22_E22_CONST_5 = 71,
};

bool Message1_M6_M16_M38_M46_M55_E22_IsValid(int value);
extern const uint32_t Message1_M6_M16_M38_M46_M55_E22_internal_data_[];
constexpr Message1_M6_M16_M38_M46_M55_E22 Message1_M6_M16_M38_M46_M55_E22_E22_MIN = static_cast<Message1_M6_M16_M38_M46_M55_E22>(0);
constexpr Message1_M6_M16_M38_M46_M55_E22 Message1_M6_M16_M38_M46_M55_E22_E22_MAX = static_cast<Message1_M6_M16_M38_M46_M55_E22>(89);
constexpr int Message1_M6_M16_M38_M46_M55_E22_E22_ARRAYSIZE = 89 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M6_M16_M38_M46_M55_E22_descriptor();
template <typename T>
const std::string& Message1_M6_M16_M38_M46_M55_E22_Name(T value) {
  static_assert(std::is_same<T, Message1_M6_M16_M38_M46_M55_E22>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E22_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M6_M16_M38_M46_M55_E22_descriptor(), value);
}
inline bool Message1_M6_M16_M38_M46_M55_E22_Parse(absl::string_view name, Message1_M6_M16_M38_M46_M55_E22* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M6_M16_M38_M46_M55_E22>(
      Message1_M6_M16_M38_M46_M55_E22_descriptor(), name, value);
}
enum Message1_M6_M16_M38_M50_M64_E23 : int {
  Message1_M6_M16_M38_M50_M64_E23_E23_UNSPECIFIED = 0,
  Message1_M6_M16_M38_M50_M64_E23_E23_CONST_1 = 78,
  Message1_M6_M16_M38_M50_M64_E23_E23_CONST_2 = 37,
  Message1_M6_M16_M38_M50_M64_E23_E23_CONST_3 = 54,
  Message1_M6_M16_M38_M50_M64_E23_E23_CONST_4 = 1,
  Message1_M6_M16_M38_M50_M64_E23_E23_CONST_5 = 57,
};

bool Message1_M6_M16_M38_M50_M64_E23_IsValid(int value);
extern const uint32_t Message1_M6_M16_M38_M50_M64_E23_internal_data_[];
constexpr Message1_M6_M16_M38_M50_M64_E23 Message1_M6_M16_M38_M50_M64_E23_E23_MIN = static_cast<Message1_M6_M16_M38_M50_M64_E23>(0);
constexpr Message1_M6_M16_M38_M50_M64_E23 Message1_M6_M16_M38_M50_M64_E23_E23_MAX = static_cast<Message1_M6_M16_M38_M50_M64_E23>(78);
constexpr int Message1_M6_M16_M38_M50_M64_E23_E23_ARRAYSIZE = 78 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M6_M16_M38_M50_M64_E23_descriptor();
template <typename T>
const std::string& Message1_M6_M16_M38_M50_M64_E23_Name(T value) {
  static_assert(std::is_same<T, Message1_M6_M16_M38_M50_M64_E23>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E23_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M6_M16_M38_M50_M64_E23_descriptor(), value);
}
inline bool Message1_M6_M16_M38_M50_M64_E23_Parse(absl::string_view name, Message1_M6_M16_M38_M50_M64_E23* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M6_M16_M38_M50_M64_E23>(
      Message1_M6_M16_M38_M50_M64_E23_descriptor(), name, value);
}
enum Message1_M6_M24_E2 : int {
  Message1_M6_M24_E2_E2_UNSPECIFIED = 0,
  Message1_M6_M24_E2_E2_CONST_1 = 9,
  Message1_M6_M24_E2_E2_CONST_2 = 54,
  Message1_M6_M24_E2_E2_CONST_3 = 14,
  Message1_M6_M24_E2_E2_CONST_4 = 80,
  Message1_M6_M24_E2_E2_CONST_5 = 30,
};

bool Message1_M6_M24_E2_IsValid(int value);
extern const uint32_t Message1_M6_M24_E2_internal_data_[];
constexpr Message1_M6_M24_E2 Message1_M6_M24_E2_E2_MIN = static_cast<Message1_M6_M24_E2>(0);
constexpr Message1_M6_M24_E2 Message1_M6_M24_E2_E2_MAX = static_cast<Message1_M6_M24_E2>(80);
constexpr int Message1_M6_M24_E2_E2_ARRAYSIZE = 80 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M6_M24_E2_descriptor();
template <typename T>
const std::string& Message1_M6_M24_E2_Name(T value) {
  static_assert(std::is_same<T, Message1_M6_M24_E2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E2_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M6_M24_E2_descriptor(), value);
}
inline bool Message1_M6_M24_E2_Parse(absl::string_view name, Message1_M6_M24_E2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M6_M24_E2>(
      Message1_M6_M24_E2_descriptor(), name, value);
}
enum Message1_M6_M24_E3 : int {
  Message1_M6_M24_E3_E3_UNSPECIFIED = 0,
  Message1_M6_M24_E3_E3_CONST_1 = 71,
  Message1_M6_M24_E3_E3_CONST_2 = 32,
  Message1_M6_M24_E3_E3_CONST_3 = 12,
  Message1_M6_M24_E3_E3_CONST_4 = 119,
  Message1_M6_M24_E3_E3_CONST_5 = 31,
};

bool Message1_M6_M24_E3_IsValid(int value);
extern const uint32_t Message1_M6_M24_E3_internal_data_[];
constexpr Message1_M6_M24_E3 Message1_M6_M24_E3_E3_MIN = static_cast<Message1_M6_M24_E3>(0);
constexpr Message1_M6_M24_E3 Message1_M6_M24_E3_E3_MAX = static_cast<Message1_M6_M24_E3>(119);
constexpr int Message1_M6_M24_E3_E3_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M6_M24_E3_descriptor();
template <typename T>
const std::string& Message1_M6_M24_E3_Name(T value) {
  static_assert(std::is_same<T, Message1_M6_M24_E3>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E3_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M6_M24_E3_descriptor(), value);
}
inline bool Message1_M6_M24_E3_Parse(absl::string_view name, Message1_M6_M24_E3* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M6_M24_E3>(
      Message1_M6_M24_E3_descriptor(), name, value);
}
enum Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 : int {
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_UNSPECIFIED = 0,
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_1 = 69,
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_2 = 105,
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_3 = 93,
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_4 = 75,
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_5 = 43,
};

bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_IsValid(int value);
extern const uint32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_internal_data_[];
constexpr Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_MIN = static_cast<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>(0);
constexpr Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_MAX = static_cast<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>(105);
constexpr int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_descriptor();
template <typename T>
const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E49_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_descriptor(), value);
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_Parse(absl::string_view name, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>(
      Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_descriptor(), name, value);
}
enum Message1_M7_M18_M32_M53_E21 : int {
  Message1_M7_M18_M32_M53_E21_E21_UNSPECIFIED = 0,
  Message1_M7_M18_M32_M53_E21_E21_CONST_1 = 9,
  Message1_M7_M18_M32_M53_E21_E21_CONST_2 = 3,
  Message1_M7_M18_M32_M53_E21_E21_CONST_3 = 64,
  Message1_M7_M18_M32_M53_E21_E21_CONST_4 = 29,
  Message1_M7_M18_M32_M53_E21_E21_CONST_5 = 124,
};

bool Message1_M7_M18_M32_M53_E21_IsValid(int value);
extern const uint32_t Message1_M7_M18_M32_M53_E21_internal_data_[];
constexpr Message1_M7_M18_M32_M53_E21 Message1_M7_M18_M32_M53_E21_E21_MIN = static_cast<Message1_M7_M18_M32_M53_E21>(0);
constexpr Message1_M7_M18_M32_M53_E21 Message1_M7_M18_M32_M53_E21_E21_MAX = static_cast<Message1_M7_M18_M32_M53_E21>(124);
constexpr int Message1_M7_M18_M32_M53_E21_E21_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M32_M53_E21_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M32_M53_E21_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M32_M53_E21>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E21_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M32_M53_E21_descriptor(), value);
}
inline bool Message1_M7_M18_M32_M53_E21_Parse(absl::string_view name, Message1_M7_M18_M32_M53_E21* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M32_M53_E21>(
      Message1_M7_M18_M32_M53_E21_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M54_M80_E24 : int {
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_1 = 63,
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_2 = 112,
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_3 = 119,
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_4 = 109,
  Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_5 = 104,
};

bool Message1_M7_M18_M39_M45_M54_M80_E24_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M54_M80_E24_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M54_M80_E24 Message1_M7_M18_M39_M45_M54_M80_E24_E24_MIN = static_cast<Message1_M7_M18_M39_M45_M54_M80_E24>(0);
constexpr Message1_M7_M18_M39_M45_M54_M80_E24 Message1_M7_M18_M39_M45_M54_M80_E24_E24_MAX = static_cast<Message1_M7_M18_M39_M45_M54_M80_E24>(119);
constexpr int Message1_M7_M18_M39_M45_M54_M80_E24_E24_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M54_M80_E24_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M54_M80_E24_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M54_M80_E24>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E24_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M54_M80_E24_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M54_M80_E24_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M54_M80_E24* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M54_M80_E24>(
      Message1_M7_M18_M39_M45_M54_M80_E24_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M54_M82_M93_E29 : int {
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_1 = 86,
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_2 = 49,
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_3 = 65,
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_4 = 67,
  Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_5 = 110,
};

bool Message1_M7_M18_M39_M45_M54_M82_M93_E29_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M54_M82_M93_E29_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M54_M82_M93_E29 Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_MIN = static_cast<Message1_M7_M18_M39_M45_M54_M82_M93_E29>(0);
constexpr Message1_M7_M18_M39_M45_M54_M82_M93_E29 Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_MAX = static_cast<Message1_M7_M18_M39_M45_M54_M82_M93_E29>(110);
constexpr int Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M54_M82_M93_E29_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M54_M82_M93_E29_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M54_M82_M93_E29>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E29_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M54_M82_M93_E29_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M54_M82_M93_E29_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M54_M82_M93_E29* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M54_M82_M93_E29>(
      Message1_M7_M18_M39_M45_M54_M82_M93_E29_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_1 = 59,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_2 = 64,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_3 = 14,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_4 = 48,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_5 = 11408,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>(11408);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_ARRAYSIZE = 11408 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E30_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_1 = 66,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_2 = 101,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_3 = 11,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_4 = 65,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_5 = 103,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>(103);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_ARRAYSIZE = 103 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E31_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_1 = 44,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_2 = 106,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_3 = 100,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_4 = 9,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_5 = 70,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>(106);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_ARRAYSIZE = 106 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E32_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_1 = 57,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_2 = 104,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_3 = 50,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_4 = 53,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_5 = 62,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>(104);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E33_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_1 = 49,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_2 = 94,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_3 = 16,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_4 = 62,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_5 = 32,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>(94);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_ARRAYSIZE = 94 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E34_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_1 = 123,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_2 = 105,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_3 = 94,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_4 = 45,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_5 = 122,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>(123);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E35_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_1 = 110,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_2 = 16,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_3 = 77,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_4 = 26,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_5 = 71,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>(110);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E36_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_1 = 103,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_2 = 89,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_3 = 88,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_4 = 121,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_5 = 125,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>(125);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E37_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_1 = 112,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_2 = 1,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_3 = 28,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_4 = 119,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_5 = 124,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>(124);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E38_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_1 = 46,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_2 = 99,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_3 = 8,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_4 = 123,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_5 = 115,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>(123);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E39_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_1 = 36,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_2 = 19,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_3 = 117,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_4 = 13,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_5 = 49,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>(117);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E40_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_1 = 4,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_2 = 34,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_3 = 66,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_4 = 97,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_5 = 48,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>(97);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_ARRAYSIZE = 97 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E41_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_1 = 95,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_2 = 51,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_3 = 59,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_4 = 5,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_5 = 88,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>(95);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_ARRAYSIZE = 95 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E42_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_1 = 115,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_2 = 63,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_3 = 107,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_4 = 108,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_5 = 95,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>(115);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E43_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_1 = 17,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_2 = 32,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_3 = 26,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_4 = 121,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_5 = 35,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>(121);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E44_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_1 = 45,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_2 = 101,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_3 = 29,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_4 = 28,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_5 = 65,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>(101);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E45_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_1 = 29,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_2 = 87,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_3 = 69,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_4 = 68,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_5 = 22,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>(87);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_ARRAYSIZE = 87 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E46_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_1 = 93,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_2 = 12,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_3 = 58,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_4 = 71,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_5 = 122,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>(122);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E47_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_1 = 114,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_2 = 85,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_3 = 54,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_4 = 125,
  Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_5 = 55,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>(125);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E48_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>(
      Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_M59_M67_M85_E26 : int {
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_1 = 112,
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_2 = 25,
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_3 = 35,
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_4 = 109,
  Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_5 = 118,
};

bool Message1_M7_M18_M39_M45_M59_M67_M85_E26_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_E26_internal_data_[];
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_E26 Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_MIN = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_E26>(0);
constexpr Message1_M7_M18_M39_M45_M59_M67_M85_E26 Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_MAX = static_cast<Message1_M7_M18_M39_M45_M59_M67_M85_E26>(118);
constexpr int Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_M59_M67_M85_E26_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_E26_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_M59_M67_M85_E26>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E26_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_M59_M67_M85_E26_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_E26_Parse(absl::string_view name, Message1_M7_M18_M39_M45_M59_M67_M85_E26* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_M59_M67_M85_E26>(
      Message1_M7_M18_M39_M45_M59_M67_M85_E26_descriptor(), name, value);
}
enum Message1_M7_M18_M39_M45_E20 : int {
  Message1_M7_M18_M39_M45_E20_E20_UNSPECIFIED = 0,
  Message1_M7_M18_M39_M45_E20_E20_CONST_1 = 60,
  Message1_M7_M18_M39_M45_E20_E20_CONST_2 = 23,
  Message1_M7_M18_M39_M45_E20_E20_CONST_3 = 72,
  Message1_M7_M18_M39_M45_E20_E20_CONST_4 = 61,
  Message1_M7_M18_M39_M45_E20_E20_CONST_5 = 3,
};

bool Message1_M7_M18_M39_M45_E20_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_M45_E20_internal_data_[];
constexpr Message1_M7_M18_M39_M45_E20 Message1_M7_M18_M39_M45_E20_E20_MIN = static_cast<Message1_M7_M18_M39_M45_E20>(0);
constexpr Message1_M7_M18_M39_M45_E20 Message1_M7_M18_M39_M45_E20_E20_MAX = static_cast<Message1_M7_M18_M39_M45_E20>(72);
constexpr int Message1_M7_M18_M39_M45_E20_E20_ARRAYSIZE = 72 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_M45_E20_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_M45_E20_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_M45_E20>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E20_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_M45_E20_descriptor(), value);
}
inline bool Message1_M7_M18_M39_M45_E20_Parse(absl::string_view name, Message1_M7_M18_M39_M45_E20* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_M45_E20>(
      Message1_M7_M18_M39_M45_E20_descriptor(), name, value);
}
enum Message1_M7_M18_M39_E8 : int {
  Message1_M7_M18_M39_E8_E8_UNSPECIFIED = 0,
  Message1_M7_M18_M39_E8_E8_CONST_1 = 88,
  Message1_M7_M18_M39_E8_E8_CONST_2 = 20,
  Message1_M7_M18_M39_E8_E8_CONST_3 = 87,
  Message1_M7_M18_M39_E8_E8_CONST_4 = 98,
  Message1_M7_M18_M39_E8_E8_CONST_5 = 23,
};

bool Message1_M7_M18_M39_E8_IsValid(int value);
extern const uint32_t Message1_M7_M18_M39_E8_internal_data_[];
constexpr Message1_M7_M18_M39_E8 Message1_M7_M18_M39_E8_E8_MIN = static_cast<Message1_M7_M18_M39_E8>(0);
constexpr Message1_M7_M18_M39_E8 Message1_M7_M18_M39_E8_E8_MAX = static_cast<Message1_M7_M18_M39_E8>(98);
constexpr int Message1_M7_M18_M39_E8_E8_ARRAYSIZE = 98 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M7_M18_M39_E8_descriptor();
template <typename T>
const std::string& Message1_M7_M18_M39_E8_Name(T value) {
  static_assert(std::is_same<T, Message1_M7_M18_M39_E8>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E8_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M7_M18_M39_E8_descriptor(), value);
}
inline bool Message1_M7_M18_M39_E8_Parse(absl::string_view name, Message1_M7_M18_M39_E8* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M7_M18_M39_E8>(
      Message1_M7_M18_M39_E8_descriptor(), name, value);
}
enum Message1_M10_M19_M40_E9 : int {
  Message1_M10_M19_M40_E9_E9_UNSPECIFIED = 0,
  Message1_M10_M19_M40_E9_E9_CONST_1 = 50,
  Message1_M10_M19_M40_E9_E9_CONST_2 = 101,
  Message1_M10_M19_M40_E9_E9_CONST_3 = 8,
  Message1_M10_M19_M40_E9_E9_CONST_4 = 87,
  Message1_M10_M19_M40_E9_E9_CONST_5 = 21,
};

bool Message1_M10_M19_M40_E9_IsValid(int value);
extern const uint32_t Message1_M10_M19_M40_E9_internal_data_[];
constexpr Message1_M10_M19_M40_E9 Message1_M10_M19_M40_E9_E9_MIN = static_cast<Message1_M10_M19_M40_E9>(0);
constexpr Message1_M10_M19_M40_E9 Message1_M10_M19_M40_E9_E9_MAX = static_cast<Message1_M10_M19_M40_E9>(101);
constexpr int Message1_M10_M19_M40_E9_E9_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M40_E9_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M40_E9_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M40_E9>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E9_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M40_E9_descriptor(), value);
}
inline bool Message1_M10_M19_M40_E9_Parse(absl::string_view name, Message1_M10_M19_M40_E9* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M40_E9>(
      Message1_M10_M19_M40_E9_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E10 : int {
  Message1_M10_M19_M42_E10_E10_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E10_E10_CONST_1 = 119,
  Message1_M10_M19_M42_E10_E10_CONST_2 = 32,
  Message1_M10_M19_M42_E10_E10_CONST_3 = 113,
  Message1_M10_M19_M42_E10_E10_CONST_4 = 22,
  Message1_M10_M19_M42_E10_E10_CONST_5 = 76,
};

bool Message1_M10_M19_M42_E10_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E10_internal_data_[];
constexpr Message1_M10_M19_M42_E10 Message1_M10_M19_M42_E10_E10_MIN = static_cast<Message1_M10_M19_M42_E10>(0);
constexpr Message1_M10_M19_M42_E10 Message1_M10_M19_M42_E10_E10_MAX = static_cast<Message1_M10_M19_M42_E10>(119);
constexpr int Message1_M10_M19_M42_E10_E10_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E10_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E10_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E10>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E10_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E10_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E10_Parse(absl::string_view name, Message1_M10_M19_M42_E10* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E10>(
      Message1_M10_M19_M42_E10_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E11 : int {
  Message1_M10_M19_M42_E11_E11_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E11_E11_CONST_1 = 50,
  Message1_M10_M19_M42_E11_E11_CONST_2 = 22,
  Message1_M10_M19_M42_E11_E11_CONST_3 = 66,
  Message1_M10_M19_M42_E11_E11_CONST_4 = 72,
  Message1_M10_M19_M42_E11_E11_CONST_5 = 15,
};

bool Message1_M10_M19_M42_E11_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E11_internal_data_[];
constexpr Message1_M10_M19_M42_E11 Message1_M10_M19_M42_E11_E11_MIN = static_cast<Message1_M10_M19_M42_E11>(0);
constexpr Message1_M10_M19_M42_E11 Message1_M10_M19_M42_E11_E11_MAX = static_cast<Message1_M10_M19_M42_E11>(72);
constexpr int Message1_M10_M19_M42_E11_E11_ARRAYSIZE = 72 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E11_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E11_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E11>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E11_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E11_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E11_Parse(absl::string_view name, Message1_M10_M19_M42_E11* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E11>(
      Message1_M10_M19_M42_E11_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E12 : int {
  Message1_M10_M19_M42_E12_E12_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E12_E12_CONST_1 = 4,
  Message1_M10_M19_M42_E12_E12_CONST_2 = 33,
  Message1_M10_M19_M42_E12_E12_CONST_3 = 35,
  Message1_M10_M19_M42_E12_E12_CONST_4 = 22,
  Message1_M10_M19_M42_E12_E12_CONST_5 = 74,
};

bool Message1_M10_M19_M42_E12_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E12_internal_data_[];
constexpr Message1_M10_M19_M42_E12 Message1_M10_M19_M42_E12_E12_MIN = static_cast<Message1_M10_M19_M42_E12>(0);
constexpr Message1_M10_M19_M42_E12 Message1_M10_M19_M42_E12_E12_MAX = static_cast<Message1_M10_M19_M42_E12>(74);
constexpr int Message1_M10_M19_M42_E12_E12_ARRAYSIZE = 74 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E12_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E12_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E12>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E12_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E12_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E12_Parse(absl::string_view name, Message1_M10_M19_M42_E12* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E12>(
      Message1_M10_M19_M42_E12_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E13 : int {
  Message1_M10_M19_M42_E13_E13_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E13_E13_CONST_1 = 37,
  Message1_M10_M19_M42_E13_E13_CONST_2 = 88,
  Message1_M10_M19_M42_E13_E13_CONST_3 = 69,
  Message1_M10_M19_M42_E13_E13_CONST_4 = 87,
  Message1_M10_M19_M42_E13_E13_CONST_5 = 45,
};

bool Message1_M10_M19_M42_E13_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E13_internal_data_[];
constexpr Message1_M10_M19_M42_E13 Message1_M10_M19_M42_E13_E13_MIN = static_cast<Message1_M10_M19_M42_E13>(0);
constexpr Message1_M10_M19_M42_E13 Message1_M10_M19_M42_E13_E13_MAX = static_cast<Message1_M10_M19_M42_E13>(88);
constexpr int Message1_M10_M19_M42_E13_E13_ARRAYSIZE = 88 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E13_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E13_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E13>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E13_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E13_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E13_Parse(absl::string_view name, Message1_M10_M19_M42_E13* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E13>(
      Message1_M10_M19_M42_E13_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E14 : int {
  Message1_M10_M19_M42_E14_E14_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E14_E14_CONST_1 = 24,
  Message1_M10_M19_M42_E14_E14_CONST_2 = 18,
  Message1_M10_M19_M42_E14_E14_CONST_3 = 58,
  Message1_M10_M19_M42_E14_E14_CONST_4 = 83,
  Message1_M10_M19_M42_E14_E14_CONST_5 = 56,
};

bool Message1_M10_M19_M42_E14_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E14_internal_data_[];
constexpr Message1_M10_M19_M42_E14 Message1_M10_M19_M42_E14_E14_MIN = static_cast<Message1_M10_M19_M42_E14>(0);
constexpr Message1_M10_M19_M42_E14 Message1_M10_M19_M42_E14_E14_MAX = static_cast<Message1_M10_M19_M42_E14>(83);
constexpr int Message1_M10_M19_M42_E14_E14_ARRAYSIZE = 83 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E14_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E14_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E14>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E14_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E14_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E14_Parse(absl::string_view name, Message1_M10_M19_M42_E14* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E14>(
      Message1_M10_M19_M42_E14_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E15 : int {
  Message1_M10_M19_M42_E15_E15_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E15_E15_CONST_1 = 89,
  Message1_M10_M19_M42_E15_E15_CONST_2 = 49,
  Message1_M10_M19_M42_E15_E15_CONST_3 = 37,
  Message1_M10_M19_M42_E15_E15_CONST_4 = 75,
  Message1_M10_M19_M42_E15_E15_CONST_5 = 125,
};

bool Message1_M10_M19_M42_E15_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E15_internal_data_[];
constexpr Message1_M10_M19_M42_E15 Message1_M10_M19_M42_E15_E15_MIN = static_cast<Message1_M10_M19_M42_E15>(0);
constexpr Message1_M10_M19_M42_E15 Message1_M10_M19_M42_E15_E15_MAX = static_cast<Message1_M10_M19_M42_E15>(125);
constexpr int Message1_M10_M19_M42_E15_E15_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E15_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E15_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E15>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E15_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E15_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E15_Parse(absl::string_view name, Message1_M10_M19_M42_E15* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E15>(
      Message1_M10_M19_M42_E15_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E16 : int {
  Message1_M10_M19_M42_E16_E16_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E16_E16_CONST_1 = 99,
  Message1_M10_M19_M42_E16_E16_CONST_2 = 92,
  Message1_M10_M19_M42_E16_E16_CONST_3 = 85,
  Message1_M10_M19_M42_E16_E16_CONST_4 = 98,
  Message1_M10_M19_M42_E16_E16_CONST_5 = 43,
};

bool Message1_M10_M19_M42_E16_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E16_internal_data_[];
constexpr Message1_M10_M19_M42_E16 Message1_M10_M19_M42_E16_E16_MIN = static_cast<Message1_M10_M19_M42_E16>(0);
constexpr Message1_M10_M19_M42_E16 Message1_M10_M19_M42_E16_E16_MAX = static_cast<Message1_M10_M19_M42_E16>(99);
constexpr int Message1_M10_M19_M42_E16_E16_ARRAYSIZE = 99 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E16_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E16_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E16>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E16_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E16_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E16_Parse(absl::string_view name, Message1_M10_M19_M42_E16* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E16>(
      Message1_M10_M19_M42_E16_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E17 : int {
  Message1_M10_M19_M42_E17_E17_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E17_E17_CONST_1 = 91,
  Message1_M10_M19_M42_E17_E17_CONST_2 = 85,
  Message1_M10_M19_M42_E17_E17_CONST_3 = 74,
  Message1_M10_M19_M42_E17_E17_CONST_4 = 12,
  Message1_M10_M19_M42_E17_E17_CONST_5 = 4,
};

bool Message1_M10_M19_M42_E17_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E17_internal_data_[];
constexpr Message1_M10_M19_M42_E17 Message1_M10_M19_M42_E17_E17_MIN = static_cast<Message1_M10_M19_M42_E17>(0);
constexpr Message1_M10_M19_M42_E17 Message1_M10_M19_M42_E17_E17_MAX = static_cast<Message1_M10_M19_M42_E17>(91);
constexpr int Message1_M10_M19_M42_E17_E17_ARRAYSIZE = 91 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E17_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E17_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E17>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E17_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E17_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E17_Parse(absl::string_view name, Message1_M10_M19_M42_E17* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E17>(
      Message1_M10_M19_M42_E17_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E18 : int {
  Message1_M10_M19_M42_E18_E18_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E18_E18_CONST_1 = 6,
  Message1_M10_M19_M42_E18_E18_CONST_2 = 79,
  Message1_M10_M19_M42_E18_E18_CONST_3 = 95,
  Message1_M10_M19_M42_E18_E18_CONST_4 = 84,
  Message1_M10_M19_M42_E18_E18_CONST_5 = 101,
};

bool Message1_M10_M19_M42_E18_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E18_internal_data_[];
constexpr Message1_M10_M19_M42_E18 Message1_M10_M19_M42_E18_E18_MIN = static_cast<Message1_M10_M19_M42_E18>(0);
constexpr Message1_M10_M19_M42_E18 Message1_M10_M19_M42_E18_E18_MAX = static_cast<Message1_M10_M19_M42_E18>(101);
constexpr int Message1_M10_M19_M42_E18_E18_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E18_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E18_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E18>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E18_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E18_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E18_Parse(absl::string_view name, Message1_M10_M19_M42_E18* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E18>(
      Message1_M10_M19_M42_E18_descriptor(), name, value);
}
enum Message1_M10_M19_M42_E19 : int {
  Message1_M10_M19_M42_E19_E19_UNSPECIFIED = 0,
  Message1_M10_M19_M42_E19_E19_CONST_1 = 68,
  Message1_M10_M19_M42_E19_E19_CONST_2 = 25,
  Message1_M10_M19_M42_E19_E19_CONST_3 = 67,
  Message1_M10_M19_M42_E19_E19_CONST_4 = 15,
  Message1_M10_M19_M42_E19_E19_CONST_5 = 58,
};

bool Message1_M10_M19_M42_E19_IsValid(int value);
extern const uint32_t Message1_M10_M19_M42_E19_internal_data_[];
constexpr Message1_M10_M19_M42_E19 Message1_M10_M19_M42_E19_E19_MIN = static_cast<Message1_M10_M19_M42_E19>(0);
constexpr Message1_M10_M19_M42_E19 Message1_M10_M19_M42_E19_E19_MAX = static_cast<Message1_M10_M19_M42_E19>(68);
constexpr int Message1_M10_M19_M42_E19_E19_ARRAYSIZE = 68 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M10_M19_M42_E19_descriptor();
template <typename T>
const std::string& Message1_M10_M19_M42_E19_Name(T value) {
  static_assert(std::is_same<T, Message1_M10_M19_M42_E19>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E19_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M10_M19_M42_E19_descriptor(), value);
}
inline bool Message1_M10_M19_M42_E19_Parse(absl::string_view name, Message1_M10_M19_M42_E19* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M10_M19_M42_E19>(
      Message1_M10_M19_M42_E19_descriptor(), name, value);
}
enum Message1_M11_M23_M37_M43_M58_M83_M92_E27 : int {
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_UNSPECIFIED = 0,
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_1 = 43,
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_2 = 100,
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_3 = 87,
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_4 = 40,
  Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_5 = 108,
};

bool Message1_M11_M23_M37_M43_M58_M83_M92_E27_IsValid(int value);
extern const uint32_t Message1_M11_M23_M37_M43_M58_M83_M92_E27_internal_data_[];
constexpr Message1_M11_M23_M37_M43_M58_M83_M92_E27 Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_MIN = static_cast<Message1_M11_M23_M37_M43_M58_M83_M92_E27>(0);
constexpr Message1_M11_M23_M37_M43_M58_M83_M92_E27 Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_MAX = static_cast<Message1_M11_M23_M37_M43_M58_M83_M92_E27>(108);
constexpr int Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M11_M23_M37_M43_M58_M83_M92_E27_descriptor();
template <typename T>
const std::string& Message1_M11_M23_M37_M43_M58_M83_M92_E27_Name(T value) {
  static_assert(std::is_same<T, Message1_M11_M23_M37_M43_M58_M83_M92_E27>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E27_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M11_M23_M37_M43_M58_M83_M92_E27_descriptor(), value);
}
inline bool Message1_M11_M23_M37_M43_M58_M83_M92_E27_Parse(absl::string_view name, Message1_M11_M23_M37_M43_M58_M83_M92_E27* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M11_M23_M37_M43_M58_M83_M92_E27>(
      Message1_M11_M23_M37_M43_M58_M83_M92_E27_descriptor(), name, value);
}
enum Message1_M11_M23_M37_M43_M58_M83_M92_E28 : int {
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_UNSPECIFIED = 0,
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_1 = 14,
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_2 = 99,
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_3 = 67,
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_4 = 100,
  Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_5 = 110,
};

bool Message1_M11_M23_M37_M43_M58_M83_M92_E28_IsValid(int value);
extern const uint32_t Message1_M11_M23_M37_M43_M58_M83_M92_E28_internal_data_[];
constexpr Message1_M11_M23_M37_M43_M58_M83_M92_E28 Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_MIN = static_cast<Message1_M11_M23_M37_M43_M58_M83_M92_E28>(0);
constexpr Message1_M11_M23_M37_M43_M58_M83_M92_E28 Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_MAX = static_cast<Message1_M11_M23_M37_M43_M58_M83_M92_E28>(110);
constexpr int Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M11_M23_M37_M43_M58_M83_M92_E28_descriptor();
template <typename T>
const std::string& Message1_M11_M23_M37_M43_M58_M83_M92_E28_Name(T value) {
  static_assert(std::is_same<T, Message1_M11_M23_M37_M43_M58_M83_M92_E28>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E28_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M11_M23_M37_M43_M58_M83_M92_E28_descriptor(), value);
}
inline bool Message1_M11_M23_M37_M43_M58_M83_M92_E28_Parse(absl::string_view name, Message1_M11_M23_M37_M43_M58_M83_M92_E28* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M11_M23_M37_M43_M58_M83_M92_E28>(
      Message1_M11_M23_M37_M43_M58_M83_M92_E28_descriptor(), name, value);
}
enum Message1_M11_M23_M37_M43_M58_M83_E25 : int {
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_UNSPECIFIED = 0,
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_1 = 9,
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_2 = 124,
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_3 = 33,
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_4 = 105,
  Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_5 = 16,
};

bool Message1_M11_M23_M37_M43_M58_M83_E25_IsValid(int value);
extern const uint32_t Message1_M11_M23_M37_M43_M58_M83_E25_internal_data_[];
constexpr Message1_M11_M23_M37_M43_M58_M83_E25 Message1_M11_M23_M37_M43_M58_M83_E25_E25_MIN = static_cast<Message1_M11_M23_M37_M43_M58_M83_E25>(0);
constexpr Message1_M11_M23_M37_M43_M58_M83_E25 Message1_M11_M23_M37_M43_M58_M83_E25_E25_MAX = static_cast<Message1_M11_M23_M37_M43_M58_M83_E25>(124);
constexpr int Message1_M11_M23_M37_M43_M58_M83_E25_E25_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M11_M23_M37_M43_M58_M83_E25_descriptor();
template <typename T>
const std::string& Message1_M11_M23_M37_M43_M58_M83_E25_Name(T value) {
  static_assert(std::is_same<T, Message1_M11_M23_M37_M43_M58_M83_E25>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E25_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M11_M23_M37_M43_M58_M83_E25_descriptor(), value);
}
inline bool Message1_M11_M23_M37_M43_M58_M83_E25_Parse(absl::string_view name, Message1_M11_M23_M37_M43_M58_M83_E25* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M11_M23_M37_M43_M58_M83_E25>(
      Message1_M11_M23_M37_M43_M58_M83_E25_descriptor(), name, value);
}
enum Message1_M13_E1 : int {
  Message1_M13_E1_E1_UNSPECIFIED = 0,
  Message1_M13_E1_E1_CONST_1 = 65,
  Message1_M13_E1_E1_CONST_2 = 66,
  Message1_M13_E1_E1_CONST_3 = 105,
  Message1_M13_E1_E1_CONST_4 = 79,
  Message1_M13_E1_E1_CONST_5 = 15,
};

bool Message1_M13_E1_IsValid(int value);
extern const uint32_t Message1_M13_E1_internal_data_[];
constexpr Message1_M13_E1 Message1_M13_E1_E1_MIN = static_cast<Message1_M13_E1>(0);
constexpr Message1_M13_E1 Message1_M13_E1_E1_MAX = static_cast<Message1_M13_E1>(105);
constexpr int Message1_M13_E1_E1_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
Message1_M13_E1_descriptor();
template <typename T>
const std::string& Message1_M13_E1_Name(T value) {
  static_assert(std::is_same<T, Message1_M13_E1>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E1_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message1_M13_E1_descriptor(), value);
}
inline bool Message1_M13_E1_Parse(absl::string_view name, Message1_M13_E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message1_M13_E1>(
      Message1_M13_E1_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message1_M9_M17 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M9.M17) */ {
 public:
  inline Message1_M9_M17() : Message1_M9_M17(nullptr) {}
  ~Message1_M9_M17() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M9_M17(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M9_M17(const Message1_M9_M17& from) : Message1_M9_M17(nullptr, from) {}
  inline Message1_M9_M17(Message1_M9_M17&& from) noexcept
      : Message1_M9_M17(nullptr, std::move(from)) {}
  inline Message1_M9_M17& operator=(const Message1_M9_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M9_M17& operator=(Message1_M9_M17&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M9_M17& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M9_M17* internal_default_instance() {
    return reinterpret_cast<const Message1_M9_M17*>(
        &_Message1_M9_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 85;
  friend void swap(Message1_M9_M17& a, Message1_M9_M17& b) { a.Swap(&b); }
  inline void Swap(Message1_M9_M17* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M9_M17* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M9_M17* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M9_M17>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M9_M17& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M9_M17& from) { Message1_M9_M17::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M9_M17* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M9.M17"; }

 protected:
  explicit Message1_M9_M17(::google::protobuf::Arena* arena);
  Message1_M9_M17(::google::protobuf::Arena* arena, const Message1_M9_M17& from);
  Message1_M9_M17(::google::protobuf::Arena* arena, Message1_M9_M17&& from) noexcept
      : Message1_M9_M17(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional double f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M9.M17)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M9_M17_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M8) */ {
 public:
  inline Message1_M8() : Message1_M8(nullptr) {}
  ~Message1_M8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M8(const Message1_M8& from) : Message1_M8(nullptr, from) {}
  inline Message1_M8(Message1_M8&& from) noexcept
      : Message1_M8(nullptr, std::move(from)) {}
  inline Message1_M8& operator=(const Message1_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M8& operator=(Message1_M8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M8* internal_default_instance() {
    return reinterpret_cast<const Message1_M8*>(
        &_Message1_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 84;
  friend void swap(Message1_M8& a, Message1_M8& b) { a.Swap(&b); }
  inline void Swap(Message1_M8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M8& from) { Message1_M8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M8"; }

 protected:
  explicit Message1_M8(::google::protobuf::Arena* arena);
  Message1_M8(::google::protobuf::Arena* arena, const Message1_M8& from);
  Message1_M8(::google::protobuf::Arena* arena, Message1_M8&& from) noexcept
      : Message1_M8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional fixed32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    ::uint32_t f_1_;
    ::int32_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M73_M87 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M73_M87() : Message1_M7_M18_M39_M45_M59_M73_M87(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M73_M87() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M73_M87(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M73_M87(const Message1_M7_M18_M39_M45_M59_M73_M87& from) : Message1_M7_M18_M39_M45_M59_M73_M87(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M73_M87(Message1_M7_M18_M39_M45_M59_M73_M87&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M73_M87(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M73_M87& operator=(const Message1_M7_M18_M39_M45_M59_M73_M87& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M73_M87& operator=(Message1_M7_M18_M39_M45_M59_M73_M87&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M73_M87& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M73_M87* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M73_M87*>(
        &_Message1_M7_M18_M39_M45_M59_M73_M87_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 77;
  friend void swap(Message1_M7_M18_M39_M45_M59_M73_M87& a, Message1_M7_M18_M39_M45_M59_M73_M87& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M73_M87* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M73_M87* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M73_M87* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M73_M87>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M73_M87& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M73_M87& from) { Message1_M7_M18_M39_M45_M59_M73_M87::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M73_M87* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M73_M87(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M73_M87(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M73_M87& from);
  Message1_M7_M18_M39_M45_M59_M73_M87(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M73_M87&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M73_M87(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M73_M87_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M67_M85_M98 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M98() : Message1_M7_M18_M39_M45_M59_M67_M85_M98(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M67_M85_M98() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M67_M85_M98(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M67_M85_M98(const Message1_M7_M18_M39_M45_M59_M67_M85_M98& from) : Message1_M7_M18_M39_M45_M59_M67_M85_M98(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M98(Message1_M7_M18_M39_M45_M59_M67_M85_M98&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85_M98(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M98& operator=(const Message1_M7_M18_M39_M45_M59_M67_M85_M98& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M98& operator=(Message1_M7_M18_M39_M45_M59_M67_M85_M98&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M67_M85_M98& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M67_M85_M98* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M67_M85_M98*>(
        &_Message1_M7_M18_M39_M45_M59_M67_M85_M98_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 73;
  friend void swap(Message1_M7_M18_M39_M45_M59_M67_M85_M98& a, Message1_M7_M18_M39_M45_M59_M67_M85_M98& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M67_M85_M98* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M67_M85_M98* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M67_M85_M98* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M67_M85_M98>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M67_M85_M98& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M67_M85_M98& from) { Message1_M7_M18_M39_M45_M59_M67_M85_M98::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M67_M85_M98* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M67_M85_M98(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M67_M85_M98(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M67_M85_M98& from);
  Message1_M7_M18_M39_M45_M59_M67_M85_M98(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M67_M85_M98&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85_M98(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional string f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M67_M85_M98_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M67_M85_M100 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M100() : Message1_M7_M18_M39_M45_M59_M67_M85_M100(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M67_M85_M100() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M67_M85_M100(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M67_M85_M100(const Message1_M7_M18_M39_M45_M59_M67_M85_M100& from) : Message1_M7_M18_M39_M45_M59_M67_M85_M100(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M100(Message1_M7_M18_M39_M45_M59_M67_M85_M100&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85_M100(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M100& operator=(const Message1_M7_M18_M39_M45_M59_M67_M85_M100& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M67_M85_M100& operator=(Message1_M7_M18_M39_M45_M59_M67_M85_M100&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M67_M85_M100& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M67_M85_M100* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M67_M85_M100*>(
        &_Message1_M7_M18_M39_M45_M59_M67_M85_M100_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 74;
  friend void swap(Message1_M7_M18_M39_M45_M59_M67_M85_M100& a, Message1_M7_M18_M39_M45_M59_M67_M85_M100& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M67_M85_M100* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M67_M85_M100* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M67_M85_M100* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M67_M85_M100>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M67_M85_M100& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M67_M85_M100& from) { Message1_M7_M18_M39_M45_M59_M67_M85_M100::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M67_M85_M100* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M67_M85_M100(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M67_M85_M100(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M67_M85_M100& from);
  Message1_M7_M18_M39_M45_M59_M67_M85_M100(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M67_M85_M100&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85_M100(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E30 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30;
  static constexpr E30 E30_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_UNSPECIFIED;
  static constexpr E30 E30_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_1;
  static constexpr E30 E30_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_2;
  static constexpr E30 E30_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_3;
  static constexpr E30 E30_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_4;
  static constexpr E30 E30_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_CONST_5;
  static inline bool E30_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_IsValid(value);
  }
  static constexpr E30 E30_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_MIN;
  static constexpr E30 E30_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_MAX;
  static constexpr int E30_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_E30_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E30_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_descriptor();
  }
  template <typename T>
  static inline const std::string& E30_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_Name(value);
  }
  static inline bool E30_Parse(absl::string_view name, E30* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_Parse(name, value);
  }
  using E31 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31;
  static constexpr E31 E31_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_UNSPECIFIED;
  static constexpr E31 E31_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_1;
  static constexpr E31 E31_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_2;
  static constexpr E31 E31_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_3;
  static constexpr E31 E31_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_4;
  static constexpr E31 E31_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_CONST_5;
  static inline bool E31_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_IsValid(value);
  }
  static constexpr E31 E31_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_MIN;
  static constexpr E31 E31_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_MAX;
  static constexpr int E31_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_E31_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E31_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_descriptor();
  }
  template <typename T>
  static inline const std::string& E31_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_Name(value);
  }
  static inline bool E31_Parse(absl::string_view name, E31* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_Parse(name, value);
  }
  using E32 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32;
  static constexpr E32 E32_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_UNSPECIFIED;
  static constexpr E32 E32_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_1;
  static constexpr E32 E32_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_2;
  static constexpr E32 E32_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_3;
  static constexpr E32 E32_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_4;
  static constexpr E32 E32_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_CONST_5;
  static inline bool E32_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_IsValid(value);
  }
  static constexpr E32 E32_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_MIN;
  static constexpr E32 E32_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_MAX;
  static constexpr int E32_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_E32_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E32_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_descriptor();
  }
  template <typename T>
  static inline const std::string& E32_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_Name(value);
  }
  static inline bool E32_Parse(absl::string_view name, E32* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_Parse(name, value);
  }
  using E33 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33;
  static constexpr E33 E33_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_UNSPECIFIED;
  static constexpr E33 E33_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_1;
  static constexpr E33 E33_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_2;
  static constexpr E33 E33_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_3;
  static constexpr E33 E33_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_4;
  static constexpr E33 E33_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_CONST_5;
  static inline bool E33_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_IsValid(value);
  }
  static constexpr E33 E33_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_MIN;
  static constexpr E33 E33_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_MAX;
  static constexpr int E33_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_E33_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E33_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_descriptor();
  }
  template <typename T>
  static inline const std::string& E33_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_Name(value);
  }
  static inline bool E33_Parse(absl::string_view name, E33* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_Parse(name, value);
  }
  using E34 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34;
  static constexpr E34 E34_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_UNSPECIFIED;
  static constexpr E34 E34_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_1;
  static constexpr E34 E34_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_2;
  static constexpr E34 E34_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_3;
  static constexpr E34 E34_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_4;
  static constexpr E34 E34_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_CONST_5;
  static inline bool E34_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_IsValid(value);
  }
  static constexpr E34 E34_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_MIN;
  static constexpr E34 E34_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_MAX;
  static constexpr int E34_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_E34_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E34_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_descriptor();
  }
  template <typename T>
  static inline const std::string& E34_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_Name(value);
  }
  static inline bool E34_Parse(absl::string_view name, E34* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_Parse(name, value);
  }
  using E35 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35;
  static constexpr E35 E35_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_UNSPECIFIED;
  static constexpr E35 E35_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_1;
  static constexpr E35 E35_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_2;
  static constexpr E35 E35_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_3;
  static constexpr E35 E35_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_4;
  static constexpr E35 E35_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_CONST_5;
  static inline bool E35_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_IsValid(value);
  }
  static constexpr E35 E35_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_MIN;
  static constexpr E35 E35_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_MAX;
  static constexpr int E35_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_E35_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E35_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_descriptor();
  }
  template <typename T>
  static inline const std::string& E35_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_Name(value);
  }
  static inline bool E35_Parse(absl::string_view name, E35* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_Parse(name, value);
  }
  using E36 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36;
  static constexpr E36 E36_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_UNSPECIFIED;
  static constexpr E36 E36_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_1;
  static constexpr E36 E36_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_2;
  static constexpr E36 E36_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_3;
  static constexpr E36 E36_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_4;
  static constexpr E36 E36_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_CONST_5;
  static inline bool E36_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_IsValid(value);
  }
  static constexpr E36 E36_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_MIN;
  static constexpr E36 E36_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_MAX;
  static constexpr int E36_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_E36_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E36_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_descriptor();
  }
  template <typename T>
  static inline const std::string& E36_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_Name(value);
  }
  static inline bool E36_Parse(absl::string_view name, E36* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_Parse(name, value);
  }
  using E37 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37;
  static constexpr E37 E37_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_UNSPECIFIED;
  static constexpr E37 E37_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_1;
  static constexpr E37 E37_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_2;
  static constexpr E37 E37_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_3;
  static constexpr E37 E37_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_4;
  static constexpr E37 E37_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_CONST_5;
  static inline bool E37_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_IsValid(value);
  }
  static constexpr E37 E37_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_MIN;
  static constexpr E37 E37_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_MAX;
  static constexpr int E37_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_E37_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E37_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_descriptor();
  }
  template <typename T>
  static inline const std::string& E37_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_Name(value);
  }
  static inline bool E37_Parse(absl::string_view name, E37* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_Parse(name, value);
  }
  using E38 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38;
  static constexpr E38 E38_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_UNSPECIFIED;
  static constexpr E38 E38_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_1;
  static constexpr E38 E38_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_2;
  static constexpr E38 E38_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_3;
  static constexpr E38 E38_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_4;
  static constexpr E38 E38_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_CONST_5;
  static inline bool E38_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_IsValid(value);
  }
  static constexpr E38 E38_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_MIN;
  static constexpr E38 E38_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_MAX;
  static constexpr int E38_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_E38_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E38_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_descriptor();
  }
  template <typename T>
  static inline const std::string& E38_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_Name(value);
  }
  static inline bool E38_Parse(absl::string_view name, E38* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_Parse(name, value);
  }
  using E39 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39;
  static constexpr E39 E39_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_UNSPECIFIED;
  static constexpr E39 E39_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_1;
  static constexpr E39 E39_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_2;
  static constexpr E39 E39_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_3;
  static constexpr E39 E39_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_4;
  static constexpr E39 E39_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_CONST_5;
  static inline bool E39_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_IsValid(value);
  }
  static constexpr E39 E39_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_MIN;
  static constexpr E39 E39_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_MAX;
  static constexpr int E39_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_E39_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E39_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_descriptor();
  }
  template <typename T>
  static inline const std::string& E39_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_Name(value);
  }
  static inline bool E39_Parse(absl::string_view name, E39* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_Parse(name, value);
  }
  using E40 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40;
  static constexpr E40 E40_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_UNSPECIFIED;
  static constexpr E40 E40_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_1;
  static constexpr E40 E40_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_2;
  static constexpr E40 E40_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_3;
  static constexpr E40 E40_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_4;
  static constexpr E40 E40_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_CONST_5;
  static inline bool E40_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_IsValid(value);
  }
  static constexpr E40 E40_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_MIN;
  static constexpr E40 E40_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_MAX;
  static constexpr int E40_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_E40_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E40_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_descriptor();
  }
  template <typename T>
  static inline const std::string& E40_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_Name(value);
  }
  static inline bool E40_Parse(absl::string_view name, E40* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_Parse(name, value);
  }
  using E41 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41;
  static constexpr E41 E41_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_UNSPECIFIED;
  static constexpr E41 E41_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_1;
  static constexpr E41 E41_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_2;
  static constexpr E41 E41_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_3;
  static constexpr E41 E41_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_4;
  static constexpr E41 E41_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_CONST_5;
  static inline bool E41_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_IsValid(value);
  }
  static constexpr E41 E41_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_MIN;
  static constexpr E41 E41_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_MAX;
  static constexpr int E41_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_E41_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E41_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_descriptor();
  }
  template <typename T>
  static inline const std::string& E41_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_Name(value);
  }
  static inline bool E41_Parse(absl::string_view name, E41* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_Parse(name, value);
  }
  using E42 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42;
  static constexpr E42 E42_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_UNSPECIFIED;
  static constexpr E42 E42_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_1;
  static constexpr E42 E42_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_2;
  static constexpr E42 E42_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_3;
  static constexpr E42 E42_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_4;
  static constexpr E42 E42_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_CONST_5;
  static inline bool E42_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_IsValid(value);
  }
  static constexpr E42 E42_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_MIN;
  static constexpr E42 E42_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_MAX;
  static constexpr int E42_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_E42_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E42_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_descriptor();
  }
  template <typename T>
  static inline const std::string& E42_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_Name(value);
  }
  static inline bool E42_Parse(absl::string_view name, E42* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_Parse(name, value);
  }
  using E43 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43;
  static constexpr E43 E43_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_UNSPECIFIED;
  static constexpr E43 E43_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_1;
  static constexpr E43 E43_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_2;
  static constexpr E43 E43_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_3;
  static constexpr E43 E43_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_4;
  static constexpr E43 E43_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_CONST_5;
  static inline bool E43_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_IsValid(value);
  }
  static constexpr E43 E43_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_MIN;
  static constexpr E43 E43_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_MAX;
  static constexpr int E43_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_E43_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E43_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_descriptor();
  }
  template <typename T>
  static inline const std::string& E43_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_Name(value);
  }
  static inline bool E43_Parse(absl::string_view name, E43* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_Parse(name, value);
  }
  using E44 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44;
  static constexpr E44 E44_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_UNSPECIFIED;
  static constexpr E44 E44_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_1;
  static constexpr E44 E44_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_2;
  static constexpr E44 E44_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_3;
  static constexpr E44 E44_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_4;
  static constexpr E44 E44_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_CONST_5;
  static inline bool E44_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_IsValid(value);
  }
  static constexpr E44 E44_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_MIN;
  static constexpr E44 E44_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_MAX;
  static constexpr int E44_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_E44_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E44_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_descriptor();
  }
  template <typename T>
  static inline const std::string& E44_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_Name(value);
  }
  static inline bool E44_Parse(absl::string_view name, E44* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_Parse(name, value);
  }
  using E45 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45;
  static constexpr E45 E45_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_UNSPECIFIED;
  static constexpr E45 E45_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_1;
  static constexpr E45 E45_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_2;
  static constexpr E45 E45_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_3;
  static constexpr E45 E45_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_4;
  static constexpr E45 E45_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_CONST_5;
  static inline bool E45_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_IsValid(value);
  }
  static constexpr E45 E45_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_MIN;
  static constexpr E45 E45_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_MAX;
  static constexpr int E45_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_E45_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E45_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_descriptor();
  }
  template <typename T>
  static inline const std::string& E45_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_Name(value);
  }
  static inline bool E45_Parse(absl::string_view name, E45* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_Parse(name, value);
  }
  using E46 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46;
  static constexpr E46 E46_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_UNSPECIFIED;
  static constexpr E46 E46_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_1;
  static constexpr E46 E46_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_2;
  static constexpr E46 E46_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_3;
  static constexpr E46 E46_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_4;
  static constexpr E46 E46_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_CONST_5;
  static inline bool E46_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_IsValid(value);
  }
  static constexpr E46 E46_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_MIN;
  static constexpr E46 E46_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_MAX;
  static constexpr int E46_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_E46_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E46_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_descriptor();
  }
  template <typename T>
  static inline const std::string& E46_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_Name(value);
  }
  static inline bool E46_Parse(absl::string_view name, E46* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_Parse(name, value);
  }
  using E47 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47;
  static constexpr E47 E47_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_UNSPECIFIED;
  static constexpr E47 E47_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_1;
  static constexpr E47 E47_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_2;
  static constexpr E47 E47_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_3;
  static constexpr E47 E47_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_4;
  static constexpr E47 E47_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_CONST_5;
  static inline bool E47_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_IsValid(value);
  }
  static constexpr E47 E47_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_MIN;
  static constexpr E47 E47_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_MAX;
  static constexpr int E47_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_E47_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E47_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_descriptor();
  }
  template <typename T>
  static inline const std::string& E47_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_Name(value);
  }
  static inline bool E47_Parse(absl::string_view name, E47* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_Parse(name, value);
  }
  using E48 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48;
  static constexpr E48 E48_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_UNSPECIFIED;
  static constexpr E48 E48_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_1;
  static constexpr E48 E48_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_2;
  static constexpr E48 E48_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_3;
  static constexpr E48 E48_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_4;
  static constexpr E48 E48_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_CONST_5;
  static inline bool E48_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_IsValid(value);
  }
  static constexpr E48 E48_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_MIN;
  static constexpr E48 E48_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_MAX;
  static constexpr int E48_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_E48_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E48_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_descriptor();
  }
  template <typename T>
  static inline const std::string& E48_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_Name(value);
  }
  static inline bool E48_Parse(absl::string_view name, E48* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_111_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_111())));
      for (int i = 0; i < f_35_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35(i).data())), f_35(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_101().data())), f_101().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_109().data())), f_109().size() * sizeof(::uint64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())), f_25().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_30().c_str())), f_30().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())), f_31().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())), f_43().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())), f_50().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_70().c_str())), f_70().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_71().c_str())), f_71().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())), f_80().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())), f_84().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())), f_91().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())), f_94().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())), f_106().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_111_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_111()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_35().size());
      for (int i = 0; i < f_35_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35(i).c_str())));
        sizes_list.push_back(f_35(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_73().data())));
      sizes_list.push_back(f_73().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_101().data())));
      sizes_list.push_back(f_101().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_109().data())));
      sizes_list.push_back(f_109().size() * sizeof(::uint64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
      sizes_list.push_back(f_25().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_30().c_str())));
      sizes_list.push_back(f_30().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      sizes_list.push_back(f_31().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      sizes_list.push_back(f_43().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      sizes_list.push_back(f_50().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_70().c_str())));
      sizes_list.push_back(f_70().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_71().c_str())));
      sizes_list.push_back(f_71().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      sizes_list.push_back(f_80().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      sizes_list.push_back(f_84().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      sizes_list.push_back(f_91().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      sizes_list.push_back(f_94().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
      sizes_list.push_back(f_106().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_111_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_35_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_73().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_101().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_109().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_30().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_70().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_71().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_111_);
      sizes.push_back(end_addr - start_addr + sizeof(f_111()));
      sizes.push_back(f_35().size());
      for (int i = 0; i < f_35_size(); ++i) {
        sizes.push_back(f_35(i).size());
      }
      sizes.push_back(f_73().size() * sizeof(int));
      sizes.push_back(f_101().size() * sizeof(::int32_t));
      sizes.push_back(f_109().size() * sizeof(::uint64_t));
      sizes.push_back(f_8().size());
      sizes.push_back(f_9().size());
      sizes.push_back(f_10().size());
      sizes.push_back(f_12().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_25().size());
      sizes.push_back(f_30().size());
      sizes.push_back(f_31().size());
      sizes.push_back(f_43().size());
      sizes.push_back(f_50().size());
      sizes.push_back(f_70().size());
      sizes.push_back(f_71().size());
      sizes.push_back(f_80().size());
      sizes.push_back(f_84().size());
      sizes.push_back(f_91().size());
      sizes.push_back(f_94().size());
      sizes.push_back(f_106().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_111_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_35_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_35_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_35(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35(i).c_str())));
      }
      mutable_f_73()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_73().data())));
      mutable_f_101()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_101().data())));
      mutable_f_109()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_109().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_25(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_30(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_30().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_50(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_70(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_70().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_71(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_71().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_80(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_84(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_91(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_106(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_35_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_35_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_35(std::move(tmp_str));
      }
      mutable_f_73()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_101()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_109()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_25(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_30(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_50(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_70(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_71(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_80(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_84(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_91(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_106(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF35FieldNumber = 51,
    kF73FieldNumber = 113,
    kF101FieldNumber = 156,
    kF109FieldNumber = 168,
    kF8FieldNumber = 10,
    kF9FieldNumber = 12,
    kF10FieldNumber = 13,
    kF12FieldNumber = 17,
    kF24FieldNumber = 34,
    kF25FieldNumber = 36,
    kF30FieldNumber = 45,
    kF31FieldNumber = 47,
    kF43FieldNumber = 62,
    kF50FieldNumber = 74,
    kF70FieldNumber = 110,
    kF71FieldNumber = 111,
    kF80FieldNumber = 121,
    kF84FieldNumber = 129,
    kF91FieldNumber = 139,
    kF94FieldNumber = 145,
    kF106FieldNumber = 164,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF4FieldNumber = 5,
    kF3FieldNumber = 4,
    kF6FieldNumber = 8,
    kF5FieldNumber = 7,
    kF7FieldNumber = 9,
    kF11FieldNumber = 16,
    kF14FieldNumber = 22,
    kF16FieldNumber = 24,
    kF15FieldNumber = 23,
    kF17FieldNumber = 25,
    kF18FieldNumber = 26,
    kF19FieldNumber = 28,
    kF20FieldNumber = 30,
    kF21FieldNumber = 31,
    kF22FieldNumber = 32,
    kF23FieldNumber = 33,
    kF26FieldNumber = 37,
    kF27FieldNumber = 39,
    kF28FieldNumber = 41,
    kF29FieldNumber = 43,
    kF13FieldNumber = 19,
    kF32FieldNumber = 48,
    kF36FieldNumber = 52,
    kF38FieldNumber = 54,
    kF33FieldNumber = 49,
    kF34FieldNumber = 50,
    kF37FieldNumber = 53,
    kF39FieldNumber = 56,
    kF40FieldNumber = 59,
    kF41FieldNumber = 60,
    kF42FieldNumber = 61,
    kF45FieldNumber = 65,
    kF46FieldNumber = 66,
    kF47FieldNumber = 68,
    kF48FieldNumber = 71,
    kF49FieldNumber = 72,
    kF51FieldNumber = 76,
    kF54FieldNumber = 83,
    kF52FieldNumber = 80,
    kF53FieldNumber = 81,
    kF55FieldNumber = 84,
    kF56FieldNumber = 85,
    kF57FieldNumber = 86,
    kF58FieldNumber = 89,
    kF44FieldNumber = 63,
    kF62FieldNumber = 96,
    kF64FieldNumber = 100,
    kF65FieldNumber = 102,
    kF59FieldNumber = 91,
    kF61FieldNumber = 94,
    kF60FieldNumber = 92,
    kF63FieldNumber = 97,
    kF66FieldNumber = 103,
    kF68FieldNumber = 105,
    kF69FieldNumber = 107,
    kF67FieldNumber = 104,
    kF72FieldNumber = 112,
    kF74FieldNumber = 114,
    kF75FieldNumber = 115,
    kF76FieldNumber = 116,
    kF77FieldNumber = 117,
    kF78FieldNumber = 118,
    kF79FieldNumber = 120,
    kF81FieldNumber = 122,
    kF82FieldNumber = 124,
    kF83FieldNumber = 125,
    kF85FieldNumber = 130,
    kF86FieldNumber = 131,
    kF87FieldNumber = 132,
    kF88FieldNumber = 134,
    kF90FieldNumber = 138,
    kF89FieldNumber = 136,
    kF92FieldNumber = 140,
    kF93FieldNumber = 144,
    kF96FieldNumber = 148,
    kF95FieldNumber = 147,
    kF97FieldNumber = 149,
    kF98FieldNumber = 152,
    kF100FieldNumber = 154,
    kF99FieldNumber = 153,
    kF102FieldNumber = 158,
    kF103FieldNumber = 160,
    kF104FieldNumber = 161,
    kF105FieldNumber = 163,
    kF107FieldNumber = 166,
    kF108FieldNumber = 167,
    kF110FieldNumber = 169,
    kF111FieldNumber = 170,
  };
  // repeated string f_35 = 51;
  int f_35_size() const;
  private:
  int _internal_f_35_size() const;

  public:
  void clear_f_35() ;
  const std::string& f_35(int index) const;
  std::string* mutable_f_35(int index);
  void set_f_35(int index, const std::string& value);
  void set_f_35(int index, std::string&& value);
  void set_f_35(int index, const char* value);
  void set_f_35(int index, const char* value, std::size_t size);
  void set_f_35(int index, absl::string_view value);
  std::string* add_f_35();
  void add_f_35(const std::string& value);
  void add_f_35(std::string&& value);
  void add_f_35(const char* value);
  void add_f_35(const char* value, std::size_t size);
  void add_f_35(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_35() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_35();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_35() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_35();

  public:
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E43 f_73 = 113 [packed = true];
  int f_73_size() const;
  private:
  int _internal_f_73_size() const;

  public:
  void clear_f_73() ;
  public:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 f_73(int index) const;
  void set_f_73(int index, ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 value);
  void add_f_73(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 value);
  const ::google::protobuf::RepeatedField<int>& f_73() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_73();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_73() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_73();

  public:
  // repeated int32 f_101 = 156 [packed = true];
  int f_101_size() const;
  private:
  int _internal_f_101_size() const;

  public:
  void clear_f_101() ;
  ::int32_t f_101(int index) const;
  void set_f_101(int index, ::int32_t value);
  void add_f_101(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_101() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_101();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_101() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_101();

  public:
  // repeated fixed64 f_109 = 168 [packed = true];
  int f_109_size() const;
  private:
  int _internal_f_109_size() const;

  public:
  void clear_f_109() ;
  ::uint64_t f_109(int index) const;
  void set_f_109(int index, ::uint64_t value);
  void add_f_109(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& f_109() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_f_109();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_f_109() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_f_109();

  public:
  // optional bytes f_8 = 10;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional string f_9 = 12;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional bytes f_10 = 13;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional string f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional string f_24 = 34;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional string f_25 = 36;
  bool has_f_25() const;
  void clear_f_25() ;
  const std::string& f_25() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_25(Arg_&& arg, Args_... args);
  std::string* mutable_f_25();
  PROTOBUF_NODISCARD std::string* release_f_25();
  void set_allocated_f_25(std::string* value);

  private:
  const std::string& _internal_f_25() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_25(
      const std::string& value);
  std::string* _internal_mutable_f_25();

  public:
  // optional string f_30 = 45;
  bool has_f_30() const;
  void clear_f_30() ;
  const std::string& f_30() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_30(Arg_&& arg, Args_... args);
  std::string* mutable_f_30();
  PROTOBUF_NODISCARD std::string* release_f_30();
  void set_allocated_f_30(std::string* value);

  private:
  const std::string& _internal_f_30() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_30(
      const std::string& value);
  std::string* _internal_mutable_f_30();

  public:
  // optional string f_31 = 47;
  bool has_f_31() const;
  void clear_f_31() ;
  const std::string& f_31() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_31(Arg_&& arg, Args_... args);
  std::string* mutable_f_31();
  PROTOBUF_NODISCARD std::string* release_f_31();
  void set_allocated_f_31(std::string* value);

  private:
  const std::string& _internal_f_31() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_31(
      const std::string& value);
  std::string* _internal_mutable_f_31();

  public:
  // optional string f_43 = 62;
  bool has_f_43() const;
  void clear_f_43() ;
  const std::string& f_43() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_43(Arg_&& arg, Args_... args);
  std::string* mutable_f_43();
  PROTOBUF_NODISCARD std::string* release_f_43();
  void set_allocated_f_43(std::string* value);

  private:
  const std::string& _internal_f_43() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_43(
      const std::string& value);
  std::string* _internal_mutable_f_43();

  public:
  // optional string f_50 = 74;
  bool has_f_50() const;
  void clear_f_50() ;
  const std::string& f_50() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_50(Arg_&& arg, Args_... args);
  std::string* mutable_f_50();
  PROTOBUF_NODISCARD std::string* release_f_50();
  void set_allocated_f_50(std::string* value);

  private:
  const std::string& _internal_f_50() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_50(
      const std::string& value);
  std::string* _internal_mutable_f_50();

  public:
  // optional bytes f_70 = 110;
  bool has_f_70() const;
  void clear_f_70() ;
  const std::string& f_70() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_70(Arg_&& arg, Args_... args);
  std::string* mutable_f_70();
  PROTOBUF_NODISCARD std::string* release_f_70();
  void set_allocated_f_70(std::string* value);

  private:
  const std::string& _internal_f_70() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_70(
      const std::string& value);
  std::string* _internal_mutable_f_70();

  public:
  // optional string f_71 = 111;
  bool has_f_71() const;
  void clear_f_71() ;
  const std::string& f_71() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_71(Arg_&& arg, Args_... args);
  std::string* mutable_f_71();
  PROTOBUF_NODISCARD std::string* release_f_71();
  void set_allocated_f_71(std::string* value);

  private:
  const std::string& _internal_f_71() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_71(
      const std::string& value);
  std::string* _internal_mutable_f_71();

  public:
  // optional string f_80 = 121;
  bool has_f_80() const;
  void clear_f_80() ;
  const std::string& f_80() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_80(Arg_&& arg, Args_... args);
  std::string* mutable_f_80();
  PROTOBUF_NODISCARD std::string* release_f_80();
  void set_allocated_f_80(std::string* value);

  private:
  const std::string& _internal_f_80() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_80(
      const std::string& value);
  std::string* _internal_mutable_f_80();

  public:
  // optional string f_84 = 129;
  bool has_f_84() const;
  void clear_f_84() ;
  const std::string& f_84() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_84(Arg_&& arg, Args_... args);
  std::string* mutable_f_84();
  PROTOBUF_NODISCARD std::string* release_f_84();
  void set_allocated_f_84(std::string* value);

  private:
  const std::string& _internal_f_84() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_84(
      const std::string& value);
  std::string* _internal_mutable_f_84();

  public:
  // optional string f_91 = 139;
  bool has_f_91() const;
  void clear_f_91() ;
  const std::string& f_91() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_91(Arg_&& arg, Args_... args);
  std::string* mutable_f_91();
  PROTOBUF_NODISCARD std::string* release_f_91();
  void set_allocated_f_91(std::string* value);

  private:
  const std::string& _internal_f_91() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_91(
      const std::string& value);
  std::string* _internal_mutable_f_91();

  public:
  // optional string f_94 = 145;
  bool has_f_94() const;
  void clear_f_94() ;
  const std::string& f_94() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_94(Arg_&& arg, Args_... args);
  std::string* mutable_f_94();
  PROTOBUF_NODISCARD std::string* release_f_94();
  void set_allocated_f_94(std::string* value);

  private:
  const std::string& _internal_f_94() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_94(
      const std::string& value);
  std::string* _internal_mutable_f_94();

  public:
  // optional bytes f_106 = 164;
  bool has_f_106() const;
  void clear_f_106() ;
  const std::string& f_106() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_106(Arg_&& arg, Args_... args);
  std::string* mutable_f_106();
  PROTOBUF_NODISCARD std::string* release_f_106();
  void set_allocated_f_106(std::string* value);

  private:
  const std::string& _internal_f_106() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_106(
      const std::string& value);
  std::string* _internal_mutable_f_106();

  public:
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E30 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 f_2() const;
  void set_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 value);

  public:
  // optional int64 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional float f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E31 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 f_6() const;
  void set_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 value);

  public:
  // optional int64 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E32 f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 f_7() const;
  void set_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 value);

  public:
  // optional uint32 f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  ::uint32_t f_11() const;
  void set_f_11(::uint32_t value);

  private:
  ::uint32_t _internal_f_11() const;
  void _internal_set_f_11(::uint32_t value);

  public:
  // optional int64 f_14 = 22;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // optional fixed64 f_16 = 24;
  bool has_f_16() const;
  void clear_f_16() ;
  ::uint64_t f_16() const;
  void set_f_16(::uint64_t value);

  private:
  ::uint64_t _internal_f_16() const;
  void _internal_set_f_16(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E33 f_15 = 23;
  bool has_f_15() const;
  void clear_f_15() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 f_15() const;
  void set_f_15(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 _internal_f_15() const;
  void _internal_set_f_15(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 value);

  public:
  // optional int32 f_17 = 25;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int32_t f_17() const;
  void set_f_17(::int32_t value);

  private:
  ::int32_t _internal_f_17() const;
  void _internal_set_f_17(::int32_t value);

  public:
  // optional fixed32 f_18 = 26;
  bool has_f_18() const;
  void clear_f_18() ;
  ::uint32_t f_18() const;
  void set_f_18(::uint32_t value);

  private:
  ::uint32_t _internal_f_18() const;
  void _internal_set_f_18(::uint32_t value);

  public:
  // optional int32 f_19 = 28;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int32_t f_19() const;
  void set_f_19(::int32_t value);

  private:
  ::int32_t _internal_f_19() const;
  void _internal_set_f_19(::int32_t value);

  public:
  // optional double f_20 = 30;
  bool has_f_20() const;
  void clear_f_20() ;
  double f_20() const;
  void set_f_20(double value);

  private:
  double _internal_f_20() const;
  void _internal_set_f_20(double value);

  public:
  // optional fixed32 f_21 = 31;
  bool has_f_21() const;
  void clear_f_21() ;
  ::uint32_t f_21() const;
  void set_f_21(::uint32_t value);

  private:
  ::uint32_t _internal_f_21() const;
  void _internal_set_f_21(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E34 f_22 = 32;
  bool has_f_22() const;
  void clear_f_22() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 f_22() const;
  void set_f_22(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 _internal_f_22() const;
  void _internal_set_f_22(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 value);

  public:
  // optional uint32 f_23 = 33;
  bool has_f_23() const;
  void clear_f_23() ;
  ::uint32_t f_23() const;
  void set_f_23(::uint32_t value);

  private:
  ::uint32_t _internal_f_23() const;
  void _internal_set_f_23(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E35 f_26 = 37;
  bool has_f_26() const;
  void clear_f_26() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 f_26() const;
  void set_f_26(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 _internal_f_26() const;
  void _internal_set_f_26(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 value);

  public:
  // optional uint64 f_27 = 39;
  bool has_f_27() const;
  void clear_f_27() ;
  ::uint64_t f_27() const;
  void set_f_27(::uint64_t value);

  private:
  ::uint64_t _internal_f_27() const;
  void _internal_set_f_27(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E36 f_28 = 41;
  bool has_f_28() const;
  void clear_f_28() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 f_28() const;
  void set_f_28(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 _internal_f_28() const;
  void _internal_set_f_28(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E37 f_29 = 43;
  bool has_f_29() const;
  void clear_f_29() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 f_29() const;
  void set_f_29(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 _internal_f_29() const;
  void _internal_set_f_29(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 value);

  public:
  // optional bool f_13 = 19;
  bool has_f_13() const;
  void clear_f_13() ;
  bool f_13() const;
  void set_f_13(bool value);

  private:
  bool _internal_f_13() const;
  void _internal_set_f_13(bool value);

  public:
  // optional bool f_32 = 48;
  bool has_f_32() const;
  void clear_f_32() ;
  bool f_32() const;
  void set_f_32(bool value);

  private:
  bool _internal_f_32() const;
  void _internal_set_f_32(bool value);

  public:
  // optional bool f_36 = 52;
  bool has_f_36() const;
  void clear_f_36() ;
  bool f_36() const;
  void set_f_36(bool value);

  private:
  bool _internal_f_36() const;
  void _internal_set_f_36(bool value);

  public:
  // optional bool f_38 = 54;
  bool has_f_38() const;
  void clear_f_38() ;
  bool f_38() const;
  void set_f_38(bool value);

  private:
  bool _internal_f_38() const;
  void _internal_set_f_38(bool value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E38 f_33 = 49;
  bool has_f_33() const;
  void clear_f_33() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 f_33() const;
  void set_f_33(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 _internal_f_33() const;
  void _internal_set_f_33(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 value);

  public:
  // optional int64 f_34 = 50;
  bool has_f_34() const;
  void clear_f_34() ;
  ::int64_t f_34() const;
  void set_f_34(::int64_t value);

  private:
  ::int64_t _internal_f_34() const;
  void _internal_set_f_34(::int64_t value);

  public:
  // optional int32 f_37 = 53;
  bool has_f_37() const;
  void clear_f_37() ;
  ::int32_t f_37() const;
  void set_f_37(::int32_t value);

  private:
  ::int32_t _internal_f_37() const;
  void _internal_set_f_37(::int32_t value);

  public:
  // optional fixed32 f_39 = 56;
  bool has_f_39() const;
  void clear_f_39() ;
  ::uint32_t f_39() const;
  void set_f_39(::uint32_t value);

  private:
  ::uint32_t _internal_f_39() const;
  void _internal_set_f_39(::uint32_t value);

  public:
  // optional int64 f_40 = 59;
  bool has_f_40() const;
  void clear_f_40() ;
  ::int64_t f_40() const;
  void set_f_40(::int64_t value);

  private:
  ::int64_t _internal_f_40() const;
  void _internal_set_f_40(::int64_t value);

  public:
  // optional int64 f_41 = 60;
  bool has_f_41() const;
  void clear_f_41() ;
  ::int64_t f_41() const;
  void set_f_41(::int64_t value);

  private:
  ::int64_t _internal_f_41() const;
  void _internal_set_f_41(::int64_t value);

  public:
  // optional int32 f_42 = 61;
  bool has_f_42() const;
  void clear_f_42() ;
  ::int32_t f_42() const;
  void set_f_42(::int32_t value);

  private:
  ::int32_t _internal_f_42() const;
  void _internal_set_f_42(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E39 f_45 = 65;
  bool has_f_45() const;
  void clear_f_45() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 f_45() const;
  void set_f_45(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 _internal_f_45() const;
  void _internal_set_f_45(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 value);

  public:
  // optional float f_46 = 66;
  bool has_f_46() const;
  void clear_f_46() ;
  float f_46() const;
  void set_f_46(float value);

  private:
  float _internal_f_46() const;
  void _internal_set_f_46(float value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E40 f_47 = 68;
  bool has_f_47() const;
  void clear_f_47() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 f_47() const;
  void set_f_47(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 _internal_f_47() const;
  void _internal_set_f_47(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 value);

  public:
  // optional float f_48 = 71;
  bool has_f_48() const;
  void clear_f_48() ;
  float f_48() const;
  void set_f_48(float value);

  private:
  float _internal_f_48() const;
  void _internal_set_f_48(float value);

  public:
  // optional int32 f_49 = 72;
  bool has_f_49() const;
  void clear_f_49() ;
  ::int32_t f_49() const;
  void set_f_49(::int32_t value);

  private:
  ::int32_t _internal_f_49() const;
  void _internal_set_f_49(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E41 f_51 = 76;
  bool has_f_51() const;
  void clear_f_51() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 f_51() const;
  void set_f_51(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 _internal_f_51() const;
  void _internal_set_f_51(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 value);

  public:
  // optional float f_54 = 83;
  bool has_f_54() const;
  void clear_f_54() ;
  float f_54() const;
  void set_f_54(float value);

  private:
  float _internal_f_54() const;
  void _internal_set_f_54(float value);

  public:
  // optional int64 f_52 = 80;
  bool has_f_52() const;
  void clear_f_52() ;
  ::int64_t f_52() const;
  void set_f_52(::int64_t value);

  private:
  ::int64_t _internal_f_52() const;
  void _internal_set_f_52(::int64_t value);

  public:
  // optional int64 f_53 = 81;
  bool has_f_53() const;
  void clear_f_53() ;
  ::int64_t f_53() const;
  void set_f_53(::int64_t value);

  private:
  ::int64_t _internal_f_53() const;
  void _internal_set_f_53(::int64_t value);

  public:
  // optional int64 f_55 = 84;
  bool has_f_55() const;
  void clear_f_55() ;
  ::int64_t f_55() const;
  void set_f_55(::int64_t value);

  private:
  ::int64_t _internal_f_55() const;
  void _internal_set_f_55(::int64_t value);

  public:
  // optional float f_56 = 85;
  bool has_f_56() const;
  void clear_f_56() ;
  float f_56() const;
  void set_f_56(float value);

  private:
  float _internal_f_56() const;
  void _internal_set_f_56(float value);

  public:
  // optional int32 f_57 = 86;
  bool has_f_57() const;
  void clear_f_57() ;
  ::int32_t f_57() const;
  void set_f_57(::int32_t value);

  private:
  ::int32_t _internal_f_57() const;
  void _internal_set_f_57(::int32_t value);

  public:
  // optional uint64 f_58 = 89;
  bool has_f_58() const;
  void clear_f_58() ;
  ::uint64_t f_58() const;
  void set_f_58(::uint64_t value);

  private:
  ::uint64_t _internal_f_58() const;
  void _internal_set_f_58(::uint64_t value);

  public:
  // optional bool f_44 = 63;
  bool has_f_44() const;
  void clear_f_44() ;
  bool f_44() const;
  void set_f_44(bool value);

  private:
  bool _internal_f_44() const;
  void _internal_set_f_44(bool value);

  public:
  // optional bool f_62 = 96;
  bool has_f_62() const;
  void clear_f_62() ;
  bool f_62() const;
  void set_f_62(bool value);

  private:
  bool _internal_f_62() const;
  void _internal_set_f_62(bool value);

  public:
  // optional bool f_64 = 100;
  bool has_f_64() const;
  void clear_f_64() ;
  bool f_64() const;
  void set_f_64(bool value);

  private:
  bool _internal_f_64() const;
  void _internal_set_f_64(bool value);

  public:
  // optional bool f_65 = 102;
  bool has_f_65() const;
  void clear_f_65() ;
  bool f_65() const;
  void set_f_65(bool value);

  private:
  bool _internal_f_65() const;
  void _internal_set_f_65(bool value);

  public:
  // optional uint32 f_59 = 91;
  bool has_f_59() const;
  void clear_f_59() ;
  ::uint32_t f_59() const;
  void set_f_59(::uint32_t value);

  private:
  ::uint32_t _internal_f_59() const;
  void _internal_set_f_59(::uint32_t value);

  public:
  // optional int64 f_61 = 94;
  bool has_f_61() const;
  void clear_f_61() ;
  ::int64_t f_61() const;
  void set_f_61(::int64_t value);

  private:
  ::int64_t _internal_f_61() const;
  void _internal_set_f_61(::int64_t value);

  public:
  // optional float f_60 = 92;
  bool has_f_60() const;
  void clear_f_60() ;
  float f_60() const;
  void set_f_60(float value);

  private:
  float _internal_f_60() const;
  void _internal_set_f_60(float value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E42 f_63 = 97;
  bool has_f_63() const;
  void clear_f_63() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 f_63() const;
  void set_f_63(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 _internal_f_63() const;
  void _internal_set_f_63(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 value);

  public:
  // optional int64 f_66 = 103;
  bool has_f_66() const;
  void clear_f_66() ;
  ::int64_t f_66() const;
  void set_f_66(::int64_t value);

  private:
  ::int64_t _internal_f_66() const;
  void _internal_set_f_66(::int64_t value);

  public:
  // optional int64 f_68 = 105;
  bool has_f_68() const;
  void clear_f_68() ;
  ::int64_t f_68() const;
  void set_f_68(::int64_t value);

  private:
  ::int64_t _internal_f_68() const;
  void _internal_set_f_68(::int64_t value);

  public:
  // optional fixed64 f_69 = 107;
  bool has_f_69() const;
  void clear_f_69() ;
  ::uint64_t f_69() const;
  void set_f_69(::uint64_t value);

  private:
  ::uint64_t _internal_f_69() const;
  void _internal_set_f_69(::uint64_t value);

  public:
  // optional int32 f_67 = 104;
  bool has_f_67() const;
  void clear_f_67() ;
  ::int32_t f_67() const;
  void set_f_67(::int32_t value);

  private:
  ::int32_t _internal_f_67() const;
  void _internal_set_f_67(::int32_t value);

  public:
  // optional fixed32 f_72 = 112;
  bool has_f_72() const;
  void clear_f_72() ;
  ::uint32_t f_72() const;
  void set_f_72(::uint32_t value);

  private:
  ::uint32_t _internal_f_72() const;
  void _internal_set_f_72(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E44 f_74 = 114;
  bool has_f_74() const;
  void clear_f_74() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 f_74() const;
  void set_f_74(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 _internal_f_74() const;
  void _internal_set_f_74(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 value);

  public:
  // optional float f_75 = 115;
  bool has_f_75() const;
  void clear_f_75() ;
  float f_75() const;
  void set_f_75(float value);

  private:
  float _internal_f_75() const;
  void _internal_set_f_75(float value);

  public:
  // optional int64 f_76 = 116;
  bool has_f_76() const;
  void clear_f_76() ;
  ::int64_t f_76() const;
  void set_f_76(::int64_t value);

  private:
  ::int64_t _internal_f_76() const;
  void _internal_set_f_76(::int64_t value);

  public:
  // optional float f_77 = 117;
  bool has_f_77() const;
  void clear_f_77() ;
  float f_77() const;
  void set_f_77(float value);

  private:
  float _internal_f_77() const;
  void _internal_set_f_77(float value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E45 f_78 = 118;
  bool has_f_78() const;
  void clear_f_78() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 f_78() const;
  void set_f_78(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 _internal_f_78() const;
  void _internal_set_f_78(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 value);

  public:
  // optional int64 f_79 = 120;
  bool has_f_79() const;
  void clear_f_79() ;
  ::int64_t f_79() const;
  void set_f_79(::int64_t value);

  private:
  ::int64_t _internal_f_79() const;
  void _internal_set_f_79(::int64_t value);

  public:
  // optional int32 f_81 = 122;
  bool has_f_81() const;
  void clear_f_81() ;
  ::int32_t f_81() const;
  void set_f_81(::int32_t value);

  private:
  ::int32_t _internal_f_81() const;
  void _internal_set_f_81(::int32_t value);

  public:
  // optional float f_82 = 124;
  bool has_f_82() const;
  void clear_f_82() ;
  float f_82() const;
  void set_f_82(float value);

  private:
  float _internal_f_82() const;
  void _internal_set_f_82(float value);

  public:
  // optional int32 f_83 = 125;
  bool has_f_83() const;
  void clear_f_83() ;
  ::int32_t f_83() const;
  void set_f_83(::int32_t value);

  private:
  ::int32_t _internal_f_83() const;
  void _internal_set_f_83(::int32_t value);

  public:
  // optional float f_85 = 130;
  bool has_f_85() const;
  void clear_f_85() ;
  float f_85() const;
  void set_f_85(float value);

  private:
  float _internal_f_85() const;
  void _internal_set_f_85(float value);

  public:
  // optional int64 f_86 = 131;
  bool has_f_86() const;
  void clear_f_86() ;
  ::int64_t f_86() const;
  void set_f_86(::int64_t value);

  private:
  ::int64_t _internal_f_86() const;
  void _internal_set_f_86(::int64_t value);

  public:
  // optional int32 f_87 = 132;
  bool has_f_87() const;
  void clear_f_87() ;
  ::int32_t f_87() const;
  void set_f_87(::int32_t value);

  private:
  ::int32_t _internal_f_87() const;
  void _internal_set_f_87(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E46 f_88 = 134;
  bool has_f_88() const;
  void clear_f_88() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 f_88() const;
  void set_f_88(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 _internal_f_88() const;
  void _internal_set_f_88(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 value);

  public:
  // optional int64 f_90 = 138;
  bool has_f_90() const;
  void clear_f_90() ;
  ::int64_t f_90() const;
  void set_f_90(::int64_t value);

  private:
  ::int64_t _internal_f_90() const;
  void _internal_set_f_90(::int64_t value);

  public:
  // optional int32 f_89 = 136;
  bool has_f_89() const;
  void clear_f_89() ;
  ::int32_t f_89() const;
  void set_f_89(::int32_t value);

  private:
  ::int32_t _internal_f_89() const;
  void _internal_set_f_89(::int32_t value);

  public:
  // optional int32 f_92 = 140;
  bool has_f_92() const;
  void clear_f_92() ;
  ::int32_t f_92() const;
  void set_f_92(::int32_t value);

  private:
  ::int32_t _internal_f_92() const;
  void _internal_set_f_92(::int32_t value);

  public:
  // optional uint32 f_93 = 144;
  bool has_f_93() const;
  void clear_f_93() ;
  ::uint32_t f_93() const;
  void set_f_93(::uint32_t value);

  private:
  ::uint32_t _internal_f_93() const;
  void _internal_set_f_93(::uint32_t value);

  public:
  // optional float f_96 = 148;
  bool has_f_96() const;
  void clear_f_96() ;
  float f_96() const;
  void set_f_96(float value);

  private:
  float _internal_f_96() const;
  void _internal_set_f_96(float value);

  public:
  // optional int64 f_95 = 147;
  bool has_f_95() const;
  void clear_f_95() ;
  ::int64_t f_95() const;
  void set_f_95(::int64_t value);

  private:
  ::int64_t _internal_f_95() const;
  void _internal_set_f_95(::int64_t value);

  public:
  // optional float f_97 = 149;
  bool has_f_97() const;
  void clear_f_97() ;
  float f_97() const;
  void set_f_97(float value);

  private:
  float _internal_f_97() const;
  void _internal_set_f_97(float value);

  public:
  // optional int32 f_98 = 152;
  bool has_f_98() const;
  void clear_f_98() ;
  ::int32_t f_98() const;
  void set_f_98(::int32_t value);

  private:
  ::int32_t _internal_f_98() const;
  void _internal_set_f_98(::int32_t value);

  public:
  // optional int64 f_100 = 154;
  bool has_f_100() const;
  void clear_f_100() ;
  ::int64_t f_100() const;
  void set_f_100(::int64_t value);

  private:
  ::int64_t _internal_f_100() const;
  void _internal_set_f_100(::int64_t value);

  public:
  // optional uint32 f_99 = 153;
  bool has_f_99() const;
  void clear_f_99() ;
  ::uint32_t f_99() const;
  void set_f_99(::uint32_t value);

  private:
  ::uint32_t _internal_f_99() const;
  void _internal_set_f_99(::uint32_t value);

  public:
  // optional float f_102 = 158;
  bool has_f_102() const;
  void clear_f_102() ;
  float f_102() const;
  void set_f_102(float value);

  private:
  float _internal_f_102() const;
  void _internal_set_f_102(float value);

  public:
  // optional int32 f_103 = 160;
  bool has_f_103() const;
  void clear_f_103() ;
  ::int32_t f_103() const;
  void set_f_103(::int32_t value);

  private:
  ::int32_t _internal_f_103() const;
  void _internal_set_f_103(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E47 f_104 = 161;
  bool has_f_104() const;
  void clear_f_104() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 f_104() const;
  void set_f_104(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 _internal_f_104() const;
  void _internal_set_f_104(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 value);

  public:
  // optional int32 f_105 = 163;
  bool has_f_105() const;
  void clear_f_105() ;
  ::int32_t f_105() const;
  void set_f_105(::int32_t value);

  private:
  ::int32_t _internal_f_105() const;
  void _internal_set_f_105(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E48 f_107 = 166;
  bool has_f_107() const;
  void clear_f_107() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 f_107() const;
  void set_f_107(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 _internal_f_107() const;
  void _internal_set_f_107(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 value);

  public:
  // optional int64 f_108 = 167;
  bool has_f_108() const;
  void clear_f_108() ;
  ::int64_t f_108() const;
  void set_f_108(::int64_t value);

  private:
  ::int64_t _internal_f_108() const;
  void _internal_set_f_108(::int64_t value);

  public:
  // optional bool f_110 = 169;
  bool has_f_110() const;
  void clear_f_110() ;
  bool f_110() const;
  void set_f_110(bool value);

  private:
  bool _internal_f_110() const;
  void _internal_set_f_110(bool value);

  public:
  // optional uint32 f_111 = 170;
  bool has_f_111() const;
  void clear_f_111() ;
  ::uint32_t f_111() const;
  void set_f_111(::uint32_t value);

  private:
  ::uint32_t _internal_f_111() const;
  void _internal_set_f_111(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 112, 19,
      233, 23>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M67_M85_M100_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<4> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_35_;
    ::google::protobuf::RepeatedField<int> f_73_;
    mutable ::google::protobuf::internal::CachedSize _f_73_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_101_;
    mutable ::google::protobuf::internal::CachedSize _f_101_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint64_t> f_109_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_25_;
    ::google::protobuf::internal::ArenaStringPtr f_30_;
    ::google::protobuf::internal::ArenaStringPtr f_31_;
    ::google::protobuf::internal::ArenaStringPtr f_43_;
    ::google::protobuf::internal::ArenaStringPtr f_50_;
    ::google::protobuf::internal::ArenaStringPtr f_70_;
    ::google::protobuf::internal::ArenaStringPtr f_71_;
    ::google::protobuf::internal::ArenaStringPtr f_80_;
    ::google::protobuf::internal::ArenaStringPtr f_84_;
    ::google::protobuf::internal::ArenaStringPtr f_91_;
    ::google::protobuf::internal::ArenaStringPtr f_94_;
    ::google::protobuf::internal::ArenaStringPtr f_106_;
    ::uint64_t f_0_;
    ::int32_t f_1_;
    int f_2_;
    ::int64_t f_4_;
    float f_3_;
    int f_6_;
    ::int64_t f_5_;
    int f_7_;
    ::uint32_t f_11_;
    ::int64_t f_14_;
    ::uint64_t f_16_;
    int f_15_;
    ::int32_t f_17_;
    ::uint32_t f_18_;
    ::int32_t f_19_;
    double f_20_;
    ::uint32_t f_21_;
    int f_22_;
    ::uint32_t f_23_;
    int f_26_;
    ::uint64_t f_27_;
    int f_28_;
    int f_29_;
    bool f_13_;
    bool f_32_;
    bool f_36_;
    bool f_38_;
    int f_33_;
    ::int64_t f_34_;
    ::int32_t f_37_;
    ::uint32_t f_39_;
    ::int64_t f_40_;
    ::int64_t f_41_;
    ::int32_t f_42_;
    int f_45_;
    float f_46_;
    int f_47_;
    float f_48_;
    ::int32_t f_49_;
    int f_51_;
    float f_54_;
    ::int64_t f_52_;
    ::int64_t f_53_;
    ::int64_t f_55_;
    float f_56_;
    ::int32_t f_57_;
    ::uint64_t f_58_;
    bool f_44_;
    bool f_62_;
    bool f_64_;
    bool f_65_;
    ::uint32_t f_59_;
    ::int64_t f_61_;
    float f_60_;
    int f_63_;
    ::int64_t f_66_;
    ::int64_t f_68_;
    ::uint64_t f_69_;
    ::int32_t f_67_;
    ::uint32_t f_72_;
    int f_74_;
    float f_75_;
    ::int64_t f_76_;
    float f_77_;
    int f_78_;
    ::int64_t f_79_;
    ::int32_t f_81_;
    float f_82_;
    ::int32_t f_83_;
    float f_85_;
    ::int64_t f_86_;
    ::int32_t f_87_;
    int f_88_;
    ::int64_t f_90_;
    ::int32_t f_89_;
    ::int32_t f_92_;
    ::uint32_t f_93_;
    float f_96_;
    ::int64_t f_95_;
    float f_97_;
    ::int32_t f_98_;
    ::int64_t f_100_;
    ::uint32_t f_99_;
    float f_102_;
    ::int32_t f_103_;
    int f_104_;
    ::int32_t f_105_;
    int f_107_;
    ::int64_t f_108_;
    bool f_110_;
    ::uint32_t f_111_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M82_M93 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M82_M93() : Message1_M7_M18_M39_M45_M54_M82_M93(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M82_M93() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M82_M93(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M82_M93(const Message1_M7_M18_M39_M45_M54_M82_M93& from) : Message1_M7_M18_M39_M45_M54_M82_M93(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M82_M93(Message1_M7_M18_M39_M45_M54_M82_M93&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M82_M93(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M82_M93& operator=(const Message1_M7_M18_M39_M45_M54_M82_M93& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M82_M93& operator=(Message1_M7_M18_M39_M45_M54_M82_M93&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M82_M93& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M82_M93* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M82_M93*>(
        &_Message1_M7_M18_M39_M45_M54_M82_M93_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 70;
  friend void swap(Message1_M7_M18_M39_M45_M54_M82_M93& a, Message1_M7_M18_M39_M45_M54_M82_M93& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M82_M93* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M82_M93* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M82_M93* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M82_M93>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M82_M93& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M82_M93& from) { Message1_M7_M18_M39_M45_M54_M82_M93::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M82_M93* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M82_M93(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M82_M93(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M82_M93& from);
  Message1_M7_M18_M39_M45_M54_M82_M93(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M82_M93&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M82_M93(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E29 = Message1_M7_M18_M39_M45_M54_M82_M93_E29;
  static constexpr E29 E29_UNSPECIFIED = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_UNSPECIFIED;
  static constexpr E29 E29_CONST_1 = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_1;
  static constexpr E29 E29_CONST_2 = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_2;
  static constexpr E29 E29_CONST_3 = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_3;
  static constexpr E29 E29_CONST_4 = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_4;
  static constexpr E29 E29_CONST_5 = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_CONST_5;
  static inline bool E29_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M54_M82_M93_E29_IsValid(value);
  }
  static constexpr E29 E29_MIN = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_MIN;
  static constexpr E29 E29_MAX = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_MAX;
  static constexpr int E29_ARRAYSIZE = Message1_M7_M18_M39_M45_M54_M82_M93_E29_E29_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E29_descriptor() {
    return Message1_M7_M18_M39_M45_M54_M82_M93_E29_descriptor();
  }
  template <typename T>
  static inline const std::string& E29_Name(T value) {
    return Message1_M7_M18_M39_M45_M54_M82_M93_E29_Name(value);
  }
  static inline bool E29_Parse(absl::string_view name, E29* value) {
    return Message1_M7_M18_M39_M45_M54_M82_M93_E29_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93.E29 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M82_M93_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M94 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M94() : Message1_M7_M18_M39_M45_M54_M80_M94(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M94() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M94(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M94(const Message1_M7_M18_M39_M45_M54_M80_M94& from) : Message1_M7_M18_M39_M45_M54_M80_M94(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M94(Message1_M7_M18_M39_M45_M54_M80_M94&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M94(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M94& operator=(const Message1_M7_M18_M39_M45_M54_M80_M94& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M94& operator=(Message1_M7_M18_M39_M45_M54_M80_M94&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M94& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M94* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M94*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M94_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 68;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M94& a, Message1_M7_M18_M39_M45_M54_M80_M94& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M94* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M94* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M94* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M94>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M94& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M94& from) { Message1_M7_M18_M39_M45_M54_M80_M94::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M94* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M94(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M94(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M94& from);
  Message1_M7_M18_M39_M45_M54_M80_M94(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M94&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M94(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M94_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106() : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& from) : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& operator=(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& operator=(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& a, Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& from) { Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& from);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M91_M96 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M96() : Message1_M7_M18_M39_M45_M54_M80_M91_M96(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M91_M96() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M91_M96(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M91_M96(const Message1_M7_M18_M39_M45_M54_M80_M91_M96& from) : Message1_M7_M18_M39_M45_M54_M80_M91_M96(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M96(Message1_M7_M18_M39_M45_M54_M80_M91_M96&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M96(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M96& operator=(const Message1_M7_M18_M39_M45_M54_M80_M91_M96& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M96& operator=(Message1_M7_M18_M39_M45_M54_M80_M91_M96&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M91_M96& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M91_M96* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M91_M96*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M91_M96_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M91_M96& a, Message1_M7_M18_M39_M45_M54_M80_M91_M96& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M91_M96* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M96* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M91_M96* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M91_M96>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M96& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M96& from) { Message1_M7_M18_M39_M45_M54_M80_M91_M96::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M96* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M91_M96(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M91_M96(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M91_M96& from);
  Message1_M7_M18_M39_M45_M54_M80_M91_M96(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M91_M96&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M96(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 5,
  };
  // optional int64 f_0 = 5;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M91_M96_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M77 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M77() : Message1_M7_M18_M39_M45_M54_M77(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M77() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M77(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M77(const Message1_M7_M18_M39_M45_M54_M77& from) : Message1_M7_M18_M39_M45_M54_M77(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M77(Message1_M7_M18_M39_M45_M54_M77&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M77(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M77& operator=(const Message1_M7_M18_M39_M45_M54_M77& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M77& operator=(Message1_M7_M18_M39_M45_M54_M77&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M77& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M77* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M77*>(
        &_Message1_M7_M18_M39_M45_M54_M77_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(Message1_M7_M18_M39_M45_M54_M77& a, Message1_M7_M18_M39_M45_M54_M77& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M77* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M77* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M77* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M77>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M77& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M77& from) { Message1_M7_M18_M39_M45_M54_M77::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M77* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M77(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M77(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M77& from);
  Message1_M7_M18_M39_M45_M54_M77(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M77&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M77(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M77_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M32_M53 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M32.M53) */ {
 public:
  inline Message1_M7_M18_M32_M53() : Message1_M7_M18_M32_M53(nullptr) {}
  ~Message1_M7_M18_M32_M53() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M32_M53(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M32_M53(const Message1_M7_M18_M32_M53& from) : Message1_M7_M18_M32_M53(nullptr, from) {}
  inline Message1_M7_M18_M32_M53(Message1_M7_M18_M32_M53&& from) noexcept
      : Message1_M7_M18_M32_M53(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M32_M53& operator=(const Message1_M7_M18_M32_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M32_M53& operator=(Message1_M7_M18_M32_M53&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M32_M53& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M32_M53* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M32_M53*>(
        &_Message1_M7_M18_M32_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(Message1_M7_M18_M32_M53& a, Message1_M7_M18_M32_M53& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M32_M53* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M32_M53* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M32_M53* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M32_M53>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M32_M53& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M32_M53& from) { Message1_M7_M18_M32_M53::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M32_M53* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M32.M53"; }

 protected:
  explicit Message1_M7_M18_M32_M53(::google::protobuf::Arena* arena);
  Message1_M7_M18_M32_M53(::google::protobuf::Arena* arena, const Message1_M7_M18_M32_M53& from);
  Message1_M7_M18_M32_M53(::google::protobuf::Arena* arena, Message1_M7_M18_M32_M53&& from) noexcept
      : Message1_M7_M18_M32_M53(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E21 = Message1_M7_M18_M32_M53_E21;
  static constexpr E21 E21_UNSPECIFIED = Message1_M7_M18_M32_M53_E21_E21_UNSPECIFIED;
  static constexpr E21 E21_CONST_1 = Message1_M7_M18_M32_M53_E21_E21_CONST_1;
  static constexpr E21 E21_CONST_2 = Message1_M7_M18_M32_M53_E21_E21_CONST_2;
  static constexpr E21 E21_CONST_3 = Message1_M7_M18_M32_M53_E21_E21_CONST_3;
  static constexpr E21 E21_CONST_4 = Message1_M7_M18_M32_M53_E21_E21_CONST_4;
  static constexpr E21 E21_CONST_5 = Message1_M7_M18_M32_M53_E21_E21_CONST_5;
  static inline bool E21_IsValid(int value) {
    return Message1_M7_M18_M32_M53_E21_IsValid(value);
  }
  static constexpr E21 E21_MIN = Message1_M7_M18_M32_M53_E21_E21_MIN;
  static constexpr E21 E21_MAX = Message1_M7_M18_M32_M53_E21_E21_MAX;
  static constexpr int E21_ARRAYSIZE = Message1_M7_M18_M32_M53_E21_E21_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E21_descriptor() {
    return Message1_M7_M18_M32_M53_E21_descriptor();
  }
  template <typename T>
  static inline const std::string& E21_Name(T value) {
    return Message1_M7_M18_M32_M53_E21_Name(value);
  }
  static inline bool E21_Parse(absl::string_view name, E21* value) {
    return Message1_M7_M18_M32_M53_E21_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_14())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_14()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      sizes.push_back(end_addr - start_addr + sizeof(f_14()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_8().size());
      sizes.push_back(f_10().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF7FieldNumber = 12,
    kF8FieldNumber = 13,
    kF10FieldNumber = 15,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
    kF11FieldNumber = 17,
    kF9FieldNumber = 14,
    kF13FieldNumber = 20,
    kF12FieldNumber = 19,
    kF14FieldNumber = 21,
  };
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional string f_10 = 15;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M32.M53.E21 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M18_M32_M53_E21 f_2() const;
  void set_f_2(::fleetbench::proto::Message1_M7_M18_M32_M53_E21 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M32_M53_E21 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message1_M7_M18_M32_M53_E21 value);

  public:
  // optional float f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int32 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // optional int64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int64 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional int64 f_11 = 17;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int64_t f_11() const;
  void set_f_11(::int64_t value);

  private:
  ::int64_t _internal_f_11() const;
  void _internal_set_f_11(::int64_t value);

  public:
  // optional int32 f_9 = 14;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int32_t f_9() const;
  void set_f_9(::int32_t value);

  private:
  ::int32_t _internal_f_9() const;
  void _internal_set_f_9(::int32_t value);

  public:
  // optional int32 f_13 = 20;
  bool has_f_13() const;
  void clear_f_13() ;
  ::int32_t f_13() const;
  void set_f_13(::int32_t value);

  private:
  ::int32_t _internal_f_13() const;
  void _internal_set_f_13(::int32_t value);

  public:
  // optional int64 f_12 = 19;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int64_t f_12() const;
  void set_f_12(::int64_t value);

  private:
  ::int64_t _internal_f_12() const;
  void _internal_set_f_12(::int64_t value);

  public:
  // optional int64 f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M32.M53)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 1,
      70, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M32_M53_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::int32_t f_0_;
    int f_2_;
    float f_3_;
    ::int32_t f_4_;
    ::int64_t f_5_;
    ::int64_t f_6_;
    ::int64_t f_11_;
    ::int32_t f_9_;
    ::int32_t f_13_;
    ::int64_t f_12_;
    ::int64_t f_14_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M52_M66 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M52.M66) */ {
 public:
  inline Message1_M7_M14_M41_M52_M66() : Message1_M7_M14_M41_M52_M66(nullptr) {}
  ~Message1_M7_M14_M41_M52_M66() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M52_M66(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M52_M66(const Message1_M7_M14_M41_M52_M66& from) : Message1_M7_M14_M41_M52_M66(nullptr, from) {}
  inline Message1_M7_M14_M41_M52_M66(Message1_M7_M14_M41_M52_M66&& from) noexcept
      : Message1_M7_M14_M41_M52_M66(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M52_M66& operator=(const Message1_M7_M14_M41_M52_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M52_M66& operator=(Message1_M7_M14_M41_M52_M66&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M52_M66& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M52_M66* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M52_M66*>(
        &_Message1_M7_M14_M41_M52_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(Message1_M7_M14_M41_M52_M66& a, Message1_M7_M14_M41_M52_M66& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M52_M66* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M52_M66* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M52_M66* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M52_M66>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M52_M66& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M52_M66& from) { Message1_M7_M14_M41_M52_M66::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M52_M66* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M52.M66"; }

 protected:
  explicit Message1_M7_M14_M41_M52_M66(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M52_M66(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M52_M66& from);
  Message1_M7_M14_M41_M52_M66(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M52_M66&& from) noexcept
      : Message1_M7_M14_M41_M52_M66(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 6,
    kF0FieldNumber = 4,
    kF1FieldNumber = 5,
  };
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional uint64 f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional float f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M52.M66)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M52_M66_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::uint64_t f_0_;
    float f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M79 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M79() : Message1_M7_M14_M41_M47_M63_M79(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M79() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M79(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M79(const Message1_M7_M14_M41_M47_M63_M79& from) : Message1_M7_M14_M41_M47_M63_M79(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M79(Message1_M7_M14_M41_M47_M63_M79&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M79(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M79& operator=(const Message1_M7_M14_M41_M47_M63_M79& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M79& operator=(Message1_M7_M14_M41_M47_M63_M79&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M79& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M79* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M79*>(
        &_Message1_M7_M14_M41_M47_M63_M79_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(Message1_M7_M14_M41_M47_M63_M79& a, Message1_M7_M14_M41_M47_M63_M79& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M79* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M79* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M79* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M79>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M79& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M79& from) { Message1_M7_M14_M41_M47_M63_M79::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M79* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M79(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M79(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M79& from);
  Message1_M7_M14_M41_M47_M63_M79(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M79&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M79(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional fixed32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M79_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M74 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M74() : Message1_M7_M14_M41_M47_M63_M74(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M74() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M74(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M74(const Message1_M7_M14_M41_M47_M63_M74& from) : Message1_M7_M14_M41_M47_M63_M74(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M74(Message1_M7_M14_M41_M47_M63_M74&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M74(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M74& operator=(const Message1_M7_M14_M41_M47_M63_M74& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M74& operator=(Message1_M7_M14_M41_M47_M63_M74&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M74& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M74* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M74*>(
        &_Message1_M7_M14_M41_M47_M63_M74_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Message1_M7_M14_M41_M47_M63_M74& a, Message1_M7_M14_M41_M47_M63_M74& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M74* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M74* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M74* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M74>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M74& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M74& from) { Message1_M7_M14_M41_M47_M63_M74::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M74* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M74(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M74(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M74& from);
  Message1_M7_M14_M41_M47_M63_M74(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M74&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M74(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M74_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M99 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M99() : Message1_M7_M14_M41_M47_M63_M70_M89_M99(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M99() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M99(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M99(const Message1_M7_M14_M41_M47_M63_M70_M89_M99& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M99(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M99(Message1_M7_M14_M41_M47_M63_M70_M89_M99&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M99(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M99& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M99& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M99& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M99&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M99& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M99* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M99*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M99_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M99& a, Message1_M7_M14_M41_M47_M63_M70_M89_M99& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M99* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M99* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M99* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M99>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M99& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M99& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M99::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M99* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M99(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M99(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M99& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M99(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M99&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M99(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M99_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      73, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      118, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M88 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M88() : Message1_M7_M14_M41_M47_M63_M70_M88(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M88() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M88(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M88(const Message1_M7_M14_M41_M47_M63_M70_M88& from) : Message1_M7_M14_M41_M47_M63_M70_M88(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M88(Message1_M7_M14_M41_M47_M63_M70_M88&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M88(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M88& operator=(const Message1_M7_M14_M41_M47_M63_M70_M88& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M88& operator=(Message1_M7_M14_M41_M47_M63_M70_M88&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M88& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M88* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M88*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M88_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M88& a, Message1_M7_M14_M41_M47_M63_M70_M88& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M88* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M88* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M88* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M88>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M88& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M88& from) { Message1_M7_M14_M41_M47_M63_M70_M88::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M88* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M88(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M88(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M88& from);
  Message1_M7_M14_M41_M47_M63_M70_M88(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M88&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M88(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M88_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M27 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M27) */ {
 public:
  inline Message1_M6_M27() : Message1_M6_M27(nullptr) {}
  ~Message1_M6_M27() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M27(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M27(const Message1_M6_M27& from) : Message1_M6_M27(nullptr, from) {}
  inline Message1_M6_M27(Message1_M6_M27&& from) noexcept
      : Message1_M6_M27(nullptr, std::move(from)) {}
  inline Message1_M6_M27& operator=(const Message1_M6_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M27& operator=(Message1_M6_M27&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M27& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M27* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M27*>(
        &_Message1_M6_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(Message1_M6_M27& a, Message1_M6_M27& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M27* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M27* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M27* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M27>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M27& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M27& from) { Message1_M6_M27::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M27* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M27"; }

 protected:
  explicit Message1_M6_M27(::google::protobuf::Arena* arena);
  Message1_M6_M27(::google::protobuf::Arena* arena, const Message1_M6_M27& from);
  Message1_M6_M27(::google::protobuf::Arena* arena, Message1_M6_M27&& from) noexcept
      : Message1_M6_M27(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M27)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M27_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M24 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M24) */ {
 public:
  inline Message1_M6_M24() : Message1_M6_M24(nullptr) {}
  ~Message1_M6_M24() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M24(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M24(const Message1_M6_M24& from) : Message1_M6_M24(nullptr, from) {}
  inline Message1_M6_M24(Message1_M6_M24&& from) noexcept
      : Message1_M6_M24(nullptr, std::move(from)) {}
  inline Message1_M6_M24& operator=(const Message1_M6_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M24& operator=(Message1_M6_M24&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M24& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M24* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M24*>(
        &_Message1_M6_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(Message1_M6_M24& a, Message1_M6_M24& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M24* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M24* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M24* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M24>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M24& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M24& from) { Message1_M6_M24::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M24* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M24"; }

 protected:
  explicit Message1_M6_M24(::google::protobuf::Arena* arena);
  Message1_M6_M24(::google::protobuf::Arena* arena, const Message1_M6_M24& from);
  Message1_M6_M24(::google::protobuf::Arena* arena, Message1_M6_M24&& from) noexcept
      : Message1_M6_M24(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E2 = Message1_M6_M24_E2;
  static constexpr E2 E2_UNSPECIFIED = Message1_M6_M24_E2_E2_UNSPECIFIED;
  static constexpr E2 E2_CONST_1 = Message1_M6_M24_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 = Message1_M6_M24_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 = Message1_M6_M24_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 = Message1_M6_M24_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 = Message1_M6_M24_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return Message1_M6_M24_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN = Message1_M6_M24_E2_E2_MIN;
  static constexpr E2 E2_MAX = Message1_M6_M24_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE = Message1_M6_M24_E2_E2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E2_descriptor() {
    return Message1_M6_M24_E2_descriptor();
  }
  template <typename T>
  static inline const std::string& E2_Name(T value) {
    return Message1_M6_M24_E2_Name(value);
  }
  static inline bool E2_Parse(absl::string_view name, E2* value) {
    return Message1_M6_M24_E2_Parse(name, value);
  }
  using E3 = Message1_M6_M24_E3;
  static constexpr E3 E3_UNSPECIFIED = Message1_M6_M24_E3_E3_UNSPECIFIED;
  static constexpr E3 E3_CONST_1 = Message1_M6_M24_E3_E3_CONST_1;
  static constexpr E3 E3_CONST_2 = Message1_M6_M24_E3_E3_CONST_2;
  static constexpr E3 E3_CONST_3 = Message1_M6_M24_E3_E3_CONST_3;
  static constexpr E3 E3_CONST_4 = Message1_M6_M24_E3_E3_CONST_4;
  static constexpr E3 E3_CONST_5 = Message1_M6_M24_E3_E3_CONST_5;
  static inline bool E3_IsValid(int value) {
    return Message1_M6_M24_E3_IsValid(value);
  }
  static constexpr E3 E3_MIN = Message1_M6_M24_E3_E3_MIN;
  static constexpr E3 E3_MAX = Message1_M6_M24_E3_E3_MAX;
  static constexpr int E3_ARRAYSIZE = Message1_M6_M24_E3_E3_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E3_descriptor() {
    return Message1_M6_M24_E3_descriptor();
  }
  template <typename T>
  static inline const std::string& E3_Name(T value) {
    return Message1_M6_M24_E3_Name(value);
  }
  static inline bool E3_Parse(absl::string_view name, E3* value) {
    return Message1_M6_M24_E3_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF2FieldNumber = 5,
  };
  // optional .fleetbench.proto.Message1.M6.M24.E2 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M6_M24_E2 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M6_M24_E2 value);

  private:
  ::fleetbench::proto::Message1_M6_M24_E2 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M6_M24_E2 value);

  public:
  // optional .fleetbench.proto.Message1.M6.M24.E3 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M6_M24_E3 f_1() const;
  void set_f_1(::fleetbench::proto::Message1_M6_M24_E3 value);

  private:
  ::fleetbench::proto::Message1_M6_M24_E3 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message1_M6_M24_E3 value);

  public:
  // optional double f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  double f_2() const;
  void set_f_2(double value);

  private:
  double _internal_f_2() const;
  void _internal_set_f_2(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M24)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M24_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    int f_1_;
    double f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16_M38_M50_M64 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16.M38.M50.M64) */ {
 public:
  inline Message1_M6_M16_M38_M50_M64() : Message1_M6_M16_M38_M50_M64(nullptr) {}
  ~Message1_M6_M16_M38_M50_M64() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16_M38_M50_M64(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16_M38_M50_M64(const Message1_M6_M16_M38_M50_M64& from) : Message1_M6_M16_M38_M50_M64(nullptr, from) {}
  inline Message1_M6_M16_M38_M50_M64(Message1_M6_M16_M38_M50_M64&& from) noexcept
      : Message1_M6_M16_M38_M50_M64(nullptr, std::move(from)) {}
  inline Message1_M6_M16_M38_M50_M64& operator=(const Message1_M6_M16_M38_M50_M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16_M38_M50_M64& operator=(Message1_M6_M16_M38_M50_M64&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16_M38_M50_M64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16_M38_M50_M64* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16_M38_M50_M64*>(
        &_Message1_M6_M16_M38_M50_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Message1_M6_M16_M38_M50_M64& a, Message1_M6_M16_M38_M50_M64& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16_M38_M50_M64* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16_M38_M50_M64* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16_M38_M50_M64* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16_M38_M50_M64>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16_M38_M50_M64& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16_M38_M50_M64& from) { Message1_M6_M16_M38_M50_M64::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16_M38_M50_M64* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16.M38.M50.M64"; }

 protected:
  explicit Message1_M6_M16_M38_M50_M64(::google::protobuf::Arena* arena);
  Message1_M6_M16_M38_M50_M64(::google::protobuf::Arena* arena, const Message1_M6_M16_M38_M50_M64& from);
  Message1_M6_M16_M38_M50_M64(::google::protobuf::Arena* arena, Message1_M6_M16_M38_M50_M64&& from) noexcept
      : Message1_M6_M16_M38_M50_M64(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E23 = Message1_M6_M16_M38_M50_M64_E23;
  static constexpr E23 E23_UNSPECIFIED = Message1_M6_M16_M38_M50_M64_E23_E23_UNSPECIFIED;
  static constexpr E23 E23_CONST_1 = Message1_M6_M16_M38_M50_M64_E23_E23_CONST_1;
  static constexpr E23 E23_CONST_2 = Message1_M6_M16_M38_M50_M64_E23_E23_CONST_2;
  static constexpr E23 E23_CONST_3 = Message1_M6_M16_M38_M50_M64_E23_E23_CONST_3;
  static constexpr E23 E23_CONST_4 = Message1_M6_M16_M38_M50_M64_E23_E23_CONST_4;
  static constexpr E23 E23_CONST_5 = Message1_M6_M16_M38_M50_M64_E23_E23_CONST_5;
  static inline bool E23_IsValid(int value) {
    return Message1_M6_M16_M38_M50_M64_E23_IsValid(value);
  }
  static constexpr E23 E23_MIN = Message1_M6_M16_M38_M50_M64_E23_E23_MIN;
  static constexpr E23 E23_MAX = Message1_M6_M16_M38_M50_M64_E23_E23_MAX;
  static constexpr int E23_ARRAYSIZE = Message1_M6_M16_M38_M50_M64_E23_E23_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E23_descriptor() {
    return Message1_M6_M16_M38_M50_M64_E23_descriptor();
  }
  template <typename T>
  static inline const std::string& E23_Name(T value) {
    return Message1_M6_M16_M38_M50_M64_E23_Name(value);
  }
  static inline bool E23_Parse(absl::string_view name, E23* value) {
    return Message1_M6_M16_M38_M50_M64_E23_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())), f_1().size() * sizeof(::int64_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int64_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_1().size() * sizeof(::int64_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
    kF4FieldNumber = 7,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
  };
  // repeated int64 f_1 = 3 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int64_t f_1(int index) const;
  void set_f_1(int index, ::int64_t value);
  void add_f_1(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M6.M16.M38.M50.M64.E23 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 value);

  private:
  ::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 value);

  public:
  // optional int32 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // optional double f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  double f_2() const;
  void set_f_2(double value);

  private:
  double _internal_f_2() const;
  void _internal_set_f_2(double value);

  public:
  // optional int64 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional uint64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint64_t f_5() const;
  void set_f_5(::uint64_t value);

  private:
  ::uint64_t _internal_f_5() const;
  void _internal_set_f_5(::uint64_t value);

  public:
  // optional float f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  float f_6() const;
  void set_f_6(float value);

  private:
  float _internal_f_6() const;
  void _internal_set_f_6(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16.M38.M50.M64)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_M38_M50_M64_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    int f_0_;
    ::int32_t f_4_;
    double f_2_;
    ::int64_t f_3_;
    ::uint64_t f_5_;
    float f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16_M38_M46_M55 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16.M38.M46.M55) */ {
 public:
  inline Message1_M6_M16_M38_M46_M55() : Message1_M6_M16_M38_M46_M55(nullptr) {}
  ~Message1_M6_M16_M38_M46_M55() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16_M38_M46_M55(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16_M38_M46_M55(const Message1_M6_M16_M38_M46_M55& from) : Message1_M6_M16_M38_M46_M55(nullptr, from) {}
  inline Message1_M6_M16_M38_M46_M55(Message1_M6_M16_M38_M46_M55&& from) noexcept
      : Message1_M6_M16_M38_M46_M55(nullptr, std::move(from)) {}
  inline Message1_M6_M16_M38_M46_M55& operator=(const Message1_M6_M16_M38_M46_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16_M38_M46_M55& operator=(Message1_M6_M16_M38_M46_M55&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16_M38_M46_M55& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16_M38_M46_M55* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16_M38_M46_M55*>(
        &_Message1_M6_M16_M38_M46_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Message1_M6_M16_M38_M46_M55& a, Message1_M6_M16_M38_M46_M55& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16_M38_M46_M55* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16_M38_M46_M55* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16_M38_M46_M55* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16_M38_M46_M55>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16_M38_M46_M55& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16_M38_M46_M55& from) { Message1_M6_M16_M38_M46_M55::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16_M38_M46_M55* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16.M38.M46.M55"; }

 protected:
  explicit Message1_M6_M16_M38_M46_M55(::google::protobuf::Arena* arena);
  Message1_M6_M16_M38_M46_M55(::google::protobuf::Arena* arena, const Message1_M6_M16_M38_M46_M55& from);
  Message1_M6_M16_M38_M46_M55(::google::protobuf::Arena* arena, Message1_M6_M16_M38_M46_M55&& from) noexcept
      : Message1_M6_M16_M38_M46_M55(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E22 = Message1_M6_M16_M38_M46_M55_E22;
  static constexpr E22 E22_UNSPECIFIED = Message1_M6_M16_M38_M46_M55_E22_E22_UNSPECIFIED;
  static constexpr E22 E22_CONST_1 = Message1_M6_M16_M38_M46_M55_E22_E22_CONST_1;
  static constexpr E22 E22_CONST_2 = Message1_M6_M16_M38_M46_M55_E22_E22_CONST_2;
  static constexpr E22 E22_CONST_3 = Message1_M6_M16_M38_M46_M55_E22_E22_CONST_3;
  static constexpr E22 E22_CONST_4 = Message1_M6_M16_M38_M46_M55_E22_E22_CONST_4;
  static constexpr E22 E22_CONST_5 = Message1_M6_M16_M38_M46_M55_E22_E22_CONST_5;
  static inline bool E22_IsValid(int value) {
    return Message1_M6_M16_M38_M46_M55_E22_IsValid(value);
  }
  static constexpr E22 E22_MIN = Message1_M6_M16_M38_M46_M55_E22_E22_MIN;
  static constexpr E22 E22_MAX = Message1_M6_M16_M38_M46_M55_E22_E22_MAX;
  static constexpr int E22_ARRAYSIZE = Message1_M6_M16_M38_M46_M55_E22_E22_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E22_descriptor() {
    return Message1_M6_M16_M38_M46_M55_E22_descriptor();
  }
  template <typename T>
  static inline const std::string& E22_Name(T value) {
    return Message1_M6_M16_M38_M46_M55_E22_Name(value);
  }
  static inline bool E22_Parse(absl::string_view name, E22* value) {
    return Message1_M6_M16_M38_M46_M55_E22_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional .fleetbench.proto.Message1.M6.M16.M38.M46.M55.E22 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 f_2() const;
  void set_f_2(::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 value);

  private:
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 value);

  public:
  // optional bool f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16.M38.M46.M55)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_M38_M46_M55_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::int64_t f_1_;
    int f_2_;
    bool f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M5) */ {
 public:
  inline Message1_M5() : Message1_M5(nullptr) {}
  ~Message1_M5() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M5(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M5(const Message1_M5& from) : Message1_M5(nullptr, from) {}
  inline Message1_M5(Message1_M5&& from) noexcept
      : Message1_M5(nullptr, std::move(from)) {}
  inline Message1_M5& operator=(const Message1_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M5& operator=(Message1_M5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M5* internal_default_instance() {
    return reinterpret_cast<const Message1_M5*>(
        &_Message1_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Message1_M5& a, Message1_M5& b) { a.Swap(&b); }
  inline void Swap(Message1_M5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M5* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M5& from) { Message1_M5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M5"; }

 protected:
  explicit Message1_M5(::google::protobuf::Arena* arena);
  Message1_M5(::google::protobuf::Arena* arena, const Message1_M5& from);
  Message1_M5(::google::protobuf::Arena* arena, Message1_M5&& from) noexcept
      : Message1_M5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional fixed64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M4_M28 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M4.M28) */ {
 public:
  inline Message1_M4_M28() : Message1_M4_M28(nullptr) {}
  ~Message1_M4_M28() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M4_M28(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M4_M28(const Message1_M4_M28& from) : Message1_M4_M28(nullptr, from) {}
  inline Message1_M4_M28(Message1_M4_M28&& from) noexcept
      : Message1_M4_M28(nullptr, std::move(from)) {}
  inline Message1_M4_M28& operator=(const Message1_M4_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M4_M28& operator=(Message1_M4_M28&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M4_M28& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M4_M28* internal_default_instance() {
    return reinterpret_cast<const Message1_M4_M28*>(
        &_Message1_M4_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(Message1_M4_M28& a, Message1_M4_M28& b) { a.Swap(&b); }
  inline void Swap(Message1_M4_M28* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M4_M28* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M4_M28* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M4_M28>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M4_M28& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M4_M28& from) { Message1_M4_M28::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M4_M28* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M4.M28"; }

 protected:
  explicit Message1_M4_M28(::google::protobuf::Arena* arena);
  Message1_M4_M28(::google::protobuf::Arena* arena, const Message1_M4_M28& from);
  Message1_M4_M28(::google::protobuf::Arena* arena, Message1_M4_M28&& from) noexcept
      : Message1_M4_M28(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E7 = Message1_M4_M28_E7;
  static constexpr E7 E7_UNSPECIFIED = Message1_M4_M28_E7_E7_UNSPECIFIED;
  static constexpr E7 E7_CONST_1 = Message1_M4_M28_E7_E7_CONST_1;
  static constexpr E7 E7_CONST_2 = Message1_M4_M28_E7_E7_CONST_2;
  static constexpr E7 E7_CONST_3 = Message1_M4_M28_E7_E7_CONST_3;
  static constexpr E7 E7_CONST_4 = Message1_M4_M28_E7_E7_CONST_4;
  static constexpr E7 E7_CONST_5 = Message1_M4_M28_E7_E7_CONST_5;
  static inline bool E7_IsValid(int value) {
    return Message1_M4_M28_E7_IsValid(value);
  }
  static constexpr E7 E7_MIN = Message1_M4_M28_E7_E7_MIN;
  static constexpr E7 E7_MAX = Message1_M4_M28_E7_E7_MAX;
  static constexpr int E7_ARRAYSIZE = Message1_M4_M28_E7_E7_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E7_descriptor() {
    return Message1_M4_M28_E7_descriptor();
  }
  template <typename T>
  static inline const std::string& E7_Name(T value) {
    return Message1_M4_M28_E7_Name(value);
  }
  static inline bool E7_Parse(absl::string_view name, E7* value) {
    return Message1_M4_M28_E7_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M4.M28.E7 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M4_M28_E7 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M4_M28_E7 value);

  private:
  ::fleetbench::proto::Message1_M4_M28_E7 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M4_M28_E7 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M4.M28)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M4_M28_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M3) */ {
 public:
  inline Message1_M3() : Message1_M3(nullptr) {}
  ~Message1_M3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M3(const Message1_M3& from) : Message1_M3(nullptr, from) {}
  inline Message1_M3(Message1_M3&& from) noexcept
      : Message1_M3(nullptr, std::move(from)) {}
  inline Message1_M3& operator=(const Message1_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M3& operator=(Message1_M3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M3* internal_default_instance() {
    return reinterpret_cast<const Message1_M3*>(
        &_Message1_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Message1_M3& a, Message1_M3& b) { a.Swap(&b); }
  inline void Swap(Message1_M3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M3& from) { Message1_M3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M3"; }

 protected:
  explicit Message1_M3(::google::protobuf::Arena* arena);
  Message1_M3(::google::protobuf::Arena* arena, const Message1_M3& from);
  Message1_M3(::google::protobuf::Arena* arena, Message1_M3&& from) noexcept
      : Message1_M3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M29_M35 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M29.M35) */ {
 public:
  inline Message1_M2_M29_M35() : Message1_M2_M29_M35(nullptr) {}
  ~Message1_M2_M29_M35() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M29_M35(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M29_M35(const Message1_M2_M29_M35& from) : Message1_M2_M29_M35(nullptr, from) {}
  inline Message1_M2_M29_M35(Message1_M2_M29_M35&& from) noexcept
      : Message1_M2_M29_M35(nullptr, std::move(from)) {}
  inline Message1_M2_M29_M35& operator=(const Message1_M2_M29_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M29_M35& operator=(Message1_M2_M29_M35&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M29_M35& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M29_M35* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M29_M35*>(
        &_Message1_M2_M29_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Message1_M2_M29_M35& a, Message1_M2_M29_M35& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M29_M35* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M29_M35* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M29_M35* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M29_M35>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M29_M35& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M29_M35& from) { Message1_M2_M29_M35::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M29_M35* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M29.M35"; }

 protected:
  explicit Message1_M2_M29_M35(::google::protobuf::Arena* arena);
  Message1_M2_M29_M35(::google::protobuf::Arena* arena, const Message1_M2_M29_M35& from);
  Message1_M2_M29_M35(::google::protobuf::Arena* arena, Message1_M2_M29_M35&& from) noexcept
      : Message1_M2_M29_M35(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M29.M35)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M29_M35_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22_M34_M48_M60_M69 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69) */ {
 public:
  inline Message1_M2_M22_M34_M48_M60_M69() : Message1_M2_M22_M34_M48_M60_M69(nullptr) {}
  ~Message1_M2_M22_M34_M48_M60_M69() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22_M34_M48_M60_M69(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22_M34_M48_M60_M69(const Message1_M2_M22_M34_M48_M60_M69& from) : Message1_M2_M22_M34_M48_M60_M69(nullptr, from) {}
  inline Message1_M2_M22_M34_M48_M60_M69(Message1_M2_M22_M34_M48_M60_M69&& from) noexcept
      : Message1_M2_M22_M34_M48_M60_M69(nullptr, std::move(from)) {}
  inline Message1_M2_M22_M34_M48_M60_M69& operator=(const Message1_M2_M22_M34_M48_M60_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22_M34_M48_M60_M69& operator=(Message1_M2_M22_M34_M48_M60_M69&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22_M34_M48_M60_M69& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22_M34_M48_M60_M69* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22_M34_M48_M60_M69*>(
        &_Message1_M2_M22_M34_M48_M60_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Message1_M2_M22_M34_M48_M60_M69& a, Message1_M2_M22_M34_M48_M60_M69& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22_M34_M48_M60_M69* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22_M34_M48_M60_M69* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22_M34_M48_M60_M69* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22_M34_M48_M60_M69>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22_M34_M48_M60_M69& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22_M34_M48_M60_M69& from) { Message1_M2_M22_M34_M48_M60_M69::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22_M34_M48_M60_M69* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69"; }

 protected:
  explicit Message1_M2_M22_M34_M48_M60_M69(::google::protobuf::Arena* arena);
  Message1_M2_M22_M34_M48_M60_M69(::google::protobuf::Arena* arena, const Message1_M2_M22_M34_M48_M60_M69& from);
  Message1_M2_M22_M34_M48_M60_M69(::google::protobuf::Arena* arena, Message1_M2_M22_M34_M48_M60_M69&& from) noexcept
      : Message1_M2_M22_M34_M48_M60_M69(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_M34_M48_M60_M69_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22_M34_M44 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22.M34.M44) */ {
 public:
  inline Message1_M2_M22_M34_M44() : Message1_M2_M22_M34_M44(nullptr) {}
  ~Message1_M2_M22_M34_M44() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22_M34_M44(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22_M34_M44(const Message1_M2_M22_M34_M44& from) : Message1_M2_M22_M34_M44(nullptr, from) {}
  inline Message1_M2_M22_M34_M44(Message1_M2_M22_M34_M44&& from) noexcept
      : Message1_M2_M22_M34_M44(nullptr, std::move(from)) {}
  inline Message1_M2_M22_M34_M44& operator=(const Message1_M2_M22_M34_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22_M34_M44& operator=(Message1_M2_M22_M34_M44&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22_M34_M44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22_M34_M44* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22_M34_M44*>(
        &_Message1_M2_M22_M34_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Message1_M2_M22_M34_M44& a, Message1_M2_M22_M34_M44& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22_M34_M44* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22_M34_M44* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22_M34_M44* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22_M34_M44>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22_M34_M44& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22_M34_M44& from) { Message1_M2_M22_M34_M44::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22_M34_M44* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22.M34.M44"; }

 protected:
  explicit Message1_M2_M22_M34_M44(::google::protobuf::Arena* arena);
  Message1_M2_M22_M34_M44(::google::protobuf::Arena* arena, const Message1_M2_M22_M34_M44& from);
  Message1_M2_M22_M34_M44(::google::protobuf::Arena* arena, Message1_M2_M22_M34_M44&& from) noexcept
      : Message1_M2_M22_M34_M44(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_7())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_7()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      sizes.push_back(end_addr - start_addr + sizeof(f_7()));
      sizes.push_back(f_4().size());
      sizes.push_back(f_6().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 11,
    kF6FieldNumber = 15,
    kF0FieldNumber = 4,
    kF1FieldNumber = 6,
    kF2FieldNumber = 7,
    kF3FieldNumber = 9,
    kF5FieldNumber = 13,
    kF7FieldNumber = 16,
  };
  // optional string f_4 = 11;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_6 = 15;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional float f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // optional bool f_1 = 6;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional int32 f_2 = 7;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional float f_3 = 9;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int64 f_5 = 13;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int64 f_7 = 16;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22.M34.M44)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_M34_M44_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    float f_0_;
    bool f_1_;
    ::int32_t f_2_;
    float f_3_;
    ::int64_t f_5_;
    ::int64_t f_7_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M13_M30 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M13.M30) */ {
 public:
  inline Message1_M13_M30() : Message1_M13_M30(nullptr) {}
  ~Message1_M13_M30() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M13_M30(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M13_M30(const Message1_M13_M30& from) : Message1_M13_M30(nullptr, from) {}
  inline Message1_M13_M30(Message1_M13_M30&& from) noexcept
      : Message1_M13_M30(nullptr, std::move(from)) {}
  inline Message1_M13_M30& operator=(const Message1_M13_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M13_M30& operator=(Message1_M13_M30&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M13_M30& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M13_M30* internal_default_instance() {
    return reinterpret_cast<const Message1_M13_M30*>(
        &_Message1_M13_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 117;
  friend void swap(Message1_M13_M30& a, Message1_M13_M30& b) { a.Swap(&b); }
  inline void Swap(Message1_M13_M30* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M13_M30* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M13_M30* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M13_M30>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M13_M30& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M13_M30& from) { Message1_M13_M30::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M13_M30* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M13.M30"; }

 protected:
  explicit Message1_M13_M30(::google::protobuf::Arena* arena);
  Message1_M13_M30(::google::protobuf::Arena* arena, const Message1_M13_M30& from);
  Message1_M13_M30(::google::protobuf::Arena* arena, Message1_M13_M30&& from) noexcept
      : Message1_M13_M30(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M13.M30)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M13_M30_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M13_M15_M36 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M13.M15.M36) */ {
 public:
  inline Message1_M13_M15_M36() : Message1_M13_M15_M36(nullptr) {}
  ~Message1_M13_M15_M36() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M13_M15_M36(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M13_M15_M36(const Message1_M13_M15_M36& from) : Message1_M13_M15_M36(nullptr, from) {}
  inline Message1_M13_M15_M36(Message1_M13_M15_M36&& from) noexcept
      : Message1_M13_M15_M36(nullptr, std::move(from)) {}
  inline Message1_M13_M15_M36& operator=(const Message1_M13_M15_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M13_M15_M36& operator=(Message1_M13_M15_M36&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M13_M15_M36& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M13_M15_M36* internal_default_instance() {
    return reinterpret_cast<const Message1_M13_M15_M36*>(
        &_Message1_M13_M15_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 115;
  friend void swap(Message1_M13_M15_M36& a, Message1_M13_M15_M36& b) { a.Swap(&b); }
  inline void Swap(Message1_M13_M15_M36* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M13_M15_M36* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M13_M15_M36* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M13_M15_M36>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M13_M15_M36& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M13_M15_M36& from) { Message1_M13_M15_M36::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M13_M15_M36* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M13.M15.M36"; }

 protected:
  explicit Message1_M13_M15_M36(::google::protobuf::Arena* arena);
  Message1_M13_M15_M36(::google::protobuf::Arena* arena, const Message1_M13_M15_M36& from);
  Message1_M13_M15_M36(::google::protobuf::Arena* arena, Message1_M13_M15_M36&& from) noexcept
      : Message1_M13_M15_M36(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M13.M15.M36)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M13_M15_M36_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M13_M15_M33 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M13.M15.M33) */ {
 public:
  inline Message1_M13_M15_M33() : Message1_M13_M15_M33(nullptr) {}
  ~Message1_M13_M15_M33() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M13_M15_M33(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M13_M15_M33(const Message1_M13_M15_M33& from) : Message1_M13_M15_M33(nullptr, from) {}
  inline Message1_M13_M15_M33(Message1_M13_M15_M33&& from) noexcept
      : Message1_M13_M15_M33(nullptr, std::move(from)) {}
  inline Message1_M13_M15_M33& operator=(const Message1_M13_M15_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M13_M15_M33& operator=(Message1_M13_M15_M33&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M13_M15_M33& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M13_M15_M33* internal_default_instance() {
    return reinterpret_cast<const Message1_M13_M15_M33*>(
        &_Message1_M13_M15_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 114;
  friend void swap(Message1_M13_M15_M33& a, Message1_M13_M15_M33& b) { a.Swap(&b); }
  inline void Swap(Message1_M13_M15_M33* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M13_M15_M33* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M13_M15_M33* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M13_M15_M33>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M13_M15_M33& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M13_M15_M33& from) { Message1_M13_M15_M33::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M13_M15_M33* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M13.M15.M33"; }

 protected:
  explicit Message1_M13_M15_M33(::google::protobuf::Arena* arena);
  Message1_M13_M15_M33(::google::protobuf::Arena* arena, const Message1_M13_M15_M33& from);
  Message1_M13_M15_M33(::google::protobuf::Arena* arena, Message1_M13_M15_M33&& from) noexcept
      : Message1_M13_M15_M33(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M13.M15.M33)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M13_M15_M33_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M12 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M12) */ {
 public:
  inline Message1_M12() : Message1_M12(nullptr) {}
  ~Message1_M12() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M12(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M12(const Message1_M12& from) : Message1_M12(nullptr, from) {}
  inline Message1_M12(Message1_M12&& from) noexcept
      : Message1_M12(nullptr, std::move(from)) {}
  inline Message1_M12& operator=(const Message1_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M12& operator=(Message1_M12&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M12& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M12* internal_default_instance() {
    return reinterpret_cast<const Message1_M12*>(
        &_Message1_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 113;
  friend void swap(Message1_M12& a, Message1_M12& b) { a.Swap(&b); }
  inline void Swap(Message1_M12* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M12* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M12* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M12>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M12& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M12& from) { Message1_M12::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M12* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M12"; }

 protected:
  explicit Message1_M12(::google::protobuf::Arena* arena);
  Message1_M12(::google::protobuf::Arena* arena, const Message1_M12& from);
  Message1_M12(::google::protobuf::Arena* arena, Message1_M12&& from) noexcept
      : Message1_M12(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int32_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // repeated int32 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M12)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M12_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M62_M78_M86 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86) */ {
 public:
  inline Message1_M11_M23_M37_M43_M62_M78_M86() : Message1_M11_M23_M37_M43_M62_M78_M86(nullptr) {}
  ~Message1_M11_M23_M37_M43_M62_M78_M86() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M62_M78_M86(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M62_M78_M86(const Message1_M11_M23_M37_M43_M62_M78_M86& from) : Message1_M11_M23_M37_M43_M62_M78_M86(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M62_M78_M86(Message1_M11_M23_M37_M43_M62_M78_M86&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M78_M86(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M62_M78_M86& operator=(const Message1_M11_M23_M37_M43_M62_M78_M86& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M62_M78_M86& operator=(Message1_M11_M23_M37_M43_M62_M78_M86&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M62_M78_M86& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M62_M78_M86* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M62_M78_M86*>(
        &_Message1_M11_M23_M37_M43_M62_M78_M86_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 106;
  friend void swap(Message1_M11_M23_M37_M43_M62_M78_M86& a, Message1_M11_M23_M37_M43_M62_M78_M86& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M62_M78_M86* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M62_M78_M86* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M62_M78_M86* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M62_M78_M86>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M62_M78_M86& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M62_M78_M86& from) { Message1_M11_M23_M37_M43_M62_M78_M86::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M62_M78_M86* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M62_M78_M86(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M62_M78_M86(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M62_M78_M86& from);
  Message1_M11_M23_M37_M43_M62_M78_M86(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M62_M78_M86&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M78_M86(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M62_M78_M86_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M62_M68_M90 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90) */ {
 public:
  inline Message1_M11_M23_M37_M43_M62_M68_M90() : Message1_M11_M23_M37_M43_M62_M68_M90(nullptr) {}
  ~Message1_M11_M23_M37_M43_M62_M68_M90() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M62_M68_M90(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M62_M68_M90(const Message1_M11_M23_M37_M43_M62_M68_M90& from) : Message1_M11_M23_M37_M43_M62_M68_M90(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M62_M68_M90(Message1_M11_M23_M37_M43_M62_M68_M90&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M68_M90(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M62_M68_M90& operator=(const Message1_M11_M23_M37_M43_M62_M68_M90& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M62_M68_M90& operator=(Message1_M11_M23_M37_M43_M62_M68_M90&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M62_M68_M90& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M62_M68_M90* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M62_M68_M90*>(
        &_Message1_M11_M23_M37_M43_M62_M68_M90_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 104;
  friend void swap(Message1_M11_M23_M37_M43_M62_M68_M90& a, Message1_M11_M23_M37_M43_M62_M68_M90& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M62_M68_M90* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M62_M68_M90* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M62_M68_M90* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M62_M68_M90>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M62_M68_M90& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M62_M68_M90& from) { Message1_M11_M23_M37_M43_M62_M68_M90::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M62_M68_M90* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M62_M68_M90(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M62_M68_M90(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M62_M68_M90& from);
  Message1_M11_M23_M37_M43_M62_M68_M90(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M62_M68_M90&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M68_M90(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M62_M68_M90_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M58_M83_M92 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92) */ {
 public:
  inline Message1_M11_M23_M37_M43_M58_M83_M92() : Message1_M11_M23_M37_M43_M58_M83_M92(nullptr) {}
  ~Message1_M11_M23_M37_M43_M58_M83_M92() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M58_M83_M92(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M58_M83_M92(const Message1_M11_M23_M37_M43_M58_M83_M92& from) : Message1_M11_M23_M37_M43_M58_M83_M92(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M58_M83_M92(Message1_M11_M23_M37_M43_M58_M83_M92&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M83_M92(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M58_M83_M92& operator=(const Message1_M11_M23_M37_M43_M58_M83_M92& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M58_M83_M92& operator=(Message1_M11_M23_M37_M43_M58_M83_M92&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M58_M83_M92& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M58_M83_M92* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M58_M83_M92*>(
        &_Message1_M11_M23_M37_M43_M58_M83_M92_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 101;
  friend void swap(Message1_M11_M23_M37_M43_M58_M83_M92& a, Message1_M11_M23_M37_M43_M58_M83_M92& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M58_M83_M92* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M58_M83_M92* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M58_M83_M92* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M58_M83_M92>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M58_M83_M92& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M58_M83_M92& from) { Message1_M11_M23_M37_M43_M58_M83_M92::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M58_M83_M92* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M58_M83_M92(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M58_M83_M92(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M58_M83_M92& from);
  Message1_M11_M23_M37_M43_M58_M83_M92(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M58_M83_M92&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M83_M92(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E27 = Message1_M11_M23_M37_M43_M58_M83_M92_E27;
  static constexpr E27 E27_UNSPECIFIED = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_UNSPECIFIED;
  static constexpr E27 E27_CONST_1 = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_1;
  static constexpr E27 E27_CONST_2 = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_2;
  static constexpr E27 E27_CONST_3 = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_3;
  static constexpr E27 E27_CONST_4 = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_4;
  static constexpr E27 E27_CONST_5 = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_CONST_5;
  static inline bool E27_IsValid(int value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E27_IsValid(value);
  }
  static constexpr E27 E27_MIN = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_MIN;
  static constexpr E27 E27_MAX = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_MAX;
  static constexpr int E27_ARRAYSIZE = Message1_M11_M23_M37_M43_M58_M83_M92_E27_E27_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E27_descriptor() {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E27_descriptor();
  }
  template <typename T>
  static inline const std::string& E27_Name(T value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E27_Name(value);
  }
  static inline bool E27_Parse(absl::string_view name, E27* value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E27_Parse(name, value);
  }
  using E28 = Message1_M11_M23_M37_M43_M58_M83_M92_E28;
  static constexpr E28 E28_UNSPECIFIED = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_UNSPECIFIED;
  static constexpr E28 E28_CONST_1 = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_1;
  static constexpr E28 E28_CONST_2 = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_2;
  static constexpr E28 E28_CONST_3 = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_3;
  static constexpr E28 E28_CONST_4 = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_4;
  static constexpr E28 E28_CONST_5 = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_CONST_5;
  static inline bool E28_IsValid(int value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E28_IsValid(value);
  }
  static constexpr E28 E28_MIN = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_MIN;
  static constexpr E28 E28_MAX = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_MAX;
  static constexpr int E28_ARRAYSIZE = Message1_M11_M23_M37_M43_M58_M83_M92_E28_E28_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E28_descriptor() {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E28_descriptor();
  }
  template <typename T>
  static inline const std::string& E28_Name(T value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E28_Name(value);
  }
  static inline bool E28_Parse(absl::string_view name, E28* value) {
    return Message1_M11_M23_M37_M43_M58_M83_M92_E28_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.E27 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 value);

  private:
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 value);

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.E28 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 f_1() const;
  void set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 value);

  private:
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M58_M83_M92_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    int f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M58_M81 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81) */ {
 public:
  inline Message1_M11_M23_M37_M43_M58_M81() : Message1_M11_M23_M37_M43_M58_M81(nullptr) {}
  ~Message1_M11_M23_M37_M43_M58_M81() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M58_M81(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M58_M81(const Message1_M11_M23_M37_M43_M58_M81& from) : Message1_M11_M23_M37_M43_M58_M81(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M58_M81(Message1_M11_M23_M37_M43_M58_M81&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M81(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M58_M81& operator=(const Message1_M11_M23_M37_M43_M58_M81& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M58_M81& operator=(Message1_M11_M23_M37_M43_M58_M81&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M58_M81& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M58_M81* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M58_M81*>(
        &_Message1_M11_M23_M37_M43_M58_M81_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 100;
  friend void swap(Message1_M11_M23_M37_M43_M58_M81& a, Message1_M11_M23_M37_M43_M58_M81& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M58_M81* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M58_M81* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M58_M81* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M58_M81>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M58_M81& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M58_M81& from) { Message1_M11_M23_M37_M43_M58_M81::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M58_M81* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M58_M81(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M58_M81(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M58_M81& from);
  Message1_M11_M23_M37_M43_M58_M81(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M58_M81&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M81(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M58_M81_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M20 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M20) */ {
 public:
  inline Message1_M11_M20() : Message1_M11_M20(nullptr) {}
  ~Message1_M11_M20() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M20(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M20(const Message1_M11_M20& from) : Message1_M11_M20(nullptr, from) {}
  inline Message1_M11_M20(Message1_M11_M20&& from) noexcept
      : Message1_M11_M20(nullptr, std::move(from)) {}
  inline Message1_M11_M20& operator=(const Message1_M11_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M20& operator=(Message1_M11_M20&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M20& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M20* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M20*>(
        &_Message1_M11_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 99;
  friend void swap(Message1_M11_M20& a, Message1_M11_M20& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M20* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M20* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M20* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M20>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M20& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M20& from) { Message1_M11_M20::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M20* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M20"; }

 protected:
  explicit Message1_M11_M20(::google::protobuf::Arena* arena);
  Message1_M11_M20(::google::protobuf::Arena* arena, const Message1_M11_M20& from);
  Message1_M11_M20(::google::protobuf::Arena* arena, Message1_M11_M20&& from) noexcept
      : Message1_M11_M20(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M20)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M20_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M42 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M42) */ {
 public:
  inline Message1_M10_M19_M42() : Message1_M10_M19_M42(nullptr) {}
  ~Message1_M10_M19_M42() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M42(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M42(const Message1_M10_M19_M42& from) : Message1_M10_M19_M42(nullptr, from) {}
  inline Message1_M10_M19_M42(Message1_M10_M19_M42&& from) noexcept
      : Message1_M10_M19_M42(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M42& operator=(const Message1_M10_M19_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M42& operator=(Message1_M10_M19_M42&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M42& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M42* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M42*>(
        &_Message1_M10_M19_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 96;
  friend void swap(Message1_M10_M19_M42& a, Message1_M10_M19_M42& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M42* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M42* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M42* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M42>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M42& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M42& from) { Message1_M10_M19_M42::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M42* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M42"; }

 protected:
  explicit Message1_M10_M19_M42(::google::protobuf::Arena* arena);
  Message1_M10_M19_M42(::google::protobuf::Arena* arena, const Message1_M10_M19_M42& from);
  Message1_M10_M19_M42(::google::protobuf::Arena* arena, Message1_M10_M19_M42&& from) noexcept
      : Message1_M10_M19_M42(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E10 = Message1_M10_M19_M42_E10;
  static constexpr E10 E10_UNSPECIFIED = Message1_M10_M19_M42_E10_E10_UNSPECIFIED;
  static constexpr E10 E10_CONST_1 = Message1_M10_M19_M42_E10_E10_CONST_1;
  static constexpr E10 E10_CONST_2 = Message1_M10_M19_M42_E10_E10_CONST_2;
  static constexpr E10 E10_CONST_3 = Message1_M10_M19_M42_E10_E10_CONST_3;
  static constexpr E10 E10_CONST_4 = Message1_M10_M19_M42_E10_E10_CONST_4;
  static constexpr E10 E10_CONST_5 = Message1_M10_M19_M42_E10_E10_CONST_5;
  static inline bool E10_IsValid(int value) {
    return Message1_M10_M19_M42_E10_IsValid(value);
  }
  static constexpr E10 E10_MIN = Message1_M10_M19_M42_E10_E10_MIN;
  static constexpr E10 E10_MAX = Message1_M10_M19_M42_E10_E10_MAX;
  static constexpr int E10_ARRAYSIZE = Message1_M10_M19_M42_E10_E10_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E10_descriptor() {
    return Message1_M10_M19_M42_E10_descriptor();
  }
  template <typename T>
  static inline const std::string& E10_Name(T value) {
    return Message1_M10_M19_M42_E10_Name(value);
  }
  static inline bool E10_Parse(absl::string_view name, E10* value) {
    return Message1_M10_M19_M42_E10_Parse(name, value);
  }
  using E11 = Message1_M10_M19_M42_E11;
  static constexpr E11 E11_UNSPECIFIED = Message1_M10_M19_M42_E11_E11_UNSPECIFIED;
  static constexpr E11 E11_CONST_1 = Message1_M10_M19_M42_E11_E11_CONST_1;
  static constexpr E11 E11_CONST_2 = Message1_M10_M19_M42_E11_E11_CONST_2;
  static constexpr E11 E11_CONST_3 = Message1_M10_M19_M42_E11_E11_CONST_3;
  static constexpr E11 E11_CONST_4 = Message1_M10_M19_M42_E11_E11_CONST_4;
  static constexpr E11 E11_CONST_5 = Message1_M10_M19_M42_E11_E11_CONST_5;
  static inline bool E11_IsValid(int value) {
    return Message1_M10_M19_M42_E11_IsValid(value);
  }
  static constexpr E11 E11_MIN = Message1_M10_M19_M42_E11_E11_MIN;
  static constexpr E11 E11_MAX = Message1_M10_M19_M42_E11_E11_MAX;
  static constexpr int E11_ARRAYSIZE = Message1_M10_M19_M42_E11_E11_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E11_descriptor() {
    return Message1_M10_M19_M42_E11_descriptor();
  }
  template <typename T>
  static inline const std::string& E11_Name(T value) {
    return Message1_M10_M19_M42_E11_Name(value);
  }
  static inline bool E11_Parse(absl::string_view name, E11* value) {
    return Message1_M10_M19_M42_E11_Parse(name, value);
  }
  using E12 = Message1_M10_M19_M42_E12;
  static constexpr E12 E12_UNSPECIFIED = Message1_M10_M19_M42_E12_E12_UNSPECIFIED;
  static constexpr E12 E12_CONST_1 = Message1_M10_M19_M42_E12_E12_CONST_1;
  static constexpr E12 E12_CONST_2 = Message1_M10_M19_M42_E12_E12_CONST_2;
  static constexpr E12 E12_CONST_3 = Message1_M10_M19_M42_E12_E12_CONST_3;
  static constexpr E12 E12_CONST_4 = Message1_M10_M19_M42_E12_E12_CONST_4;
  static constexpr E12 E12_CONST_5 = Message1_M10_M19_M42_E12_E12_CONST_5;
  static inline bool E12_IsValid(int value) {
    return Message1_M10_M19_M42_E12_IsValid(value);
  }
  static constexpr E12 E12_MIN = Message1_M10_M19_M42_E12_E12_MIN;
  static constexpr E12 E12_MAX = Message1_M10_M19_M42_E12_E12_MAX;
  static constexpr int E12_ARRAYSIZE = Message1_M10_M19_M42_E12_E12_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E12_descriptor() {
    return Message1_M10_M19_M42_E12_descriptor();
  }
  template <typename T>
  static inline const std::string& E12_Name(T value) {
    return Message1_M10_M19_M42_E12_Name(value);
  }
  static inline bool E12_Parse(absl::string_view name, E12* value) {
    return Message1_M10_M19_M42_E12_Parse(name, value);
  }
  using E13 = Message1_M10_M19_M42_E13;
  static constexpr E13 E13_UNSPECIFIED = Message1_M10_M19_M42_E13_E13_UNSPECIFIED;
  static constexpr E13 E13_CONST_1 = Message1_M10_M19_M42_E13_E13_CONST_1;
  static constexpr E13 E13_CONST_2 = Message1_M10_M19_M42_E13_E13_CONST_2;
  static constexpr E13 E13_CONST_3 = Message1_M10_M19_M42_E13_E13_CONST_3;
  static constexpr E13 E13_CONST_4 = Message1_M10_M19_M42_E13_E13_CONST_4;
  static constexpr E13 E13_CONST_5 = Message1_M10_M19_M42_E13_E13_CONST_5;
  static inline bool E13_IsValid(int value) {
    return Message1_M10_M19_M42_E13_IsValid(value);
  }
  static constexpr E13 E13_MIN = Message1_M10_M19_M42_E13_E13_MIN;
  static constexpr E13 E13_MAX = Message1_M10_M19_M42_E13_E13_MAX;
  static constexpr int E13_ARRAYSIZE = Message1_M10_M19_M42_E13_E13_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E13_descriptor() {
    return Message1_M10_M19_M42_E13_descriptor();
  }
  template <typename T>
  static inline const std::string& E13_Name(T value) {
    return Message1_M10_M19_M42_E13_Name(value);
  }
  static inline bool E13_Parse(absl::string_view name, E13* value) {
    return Message1_M10_M19_M42_E13_Parse(name, value);
  }
  using E14 = Message1_M10_M19_M42_E14;
  static constexpr E14 E14_UNSPECIFIED = Message1_M10_M19_M42_E14_E14_UNSPECIFIED;
  static constexpr E14 E14_CONST_1 = Message1_M10_M19_M42_E14_E14_CONST_1;
  static constexpr E14 E14_CONST_2 = Message1_M10_M19_M42_E14_E14_CONST_2;
  static constexpr E14 E14_CONST_3 = Message1_M10_M19_M42_E14_E14_CONST_3;
  static constexpr E14 E14_CONST_4 = Message1_M10_M19_M42_E14_E14_CONST_4;
  static constexpr E14 E14_CONST_5 = Message1_M10_M19_M42_E14_E14_CONST_5;
  static inline bool E14_IsValid(int value) {
    return Message1_M10_M19_M42_E14_IsValid(value);
  }
  static constexpr E14 E14_MIN = Message1_M10_M19_M42_E14_E14_MIN;
  static constexpr E14 E14_MAX = Message1_M10_M19_M42_E14_E14_MAX;
  static constexpr int E14_ARRAYSIZE = Message1_M10_M19_M42_E14_E14_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E14_descriptor() {
    return Message1_M10_M19_M42_E14_descriptor();
  }
  template <typename T>
  static inline const std::string& E14_Name(T value) {
    return Message1_M10_M19_M42_E14_Name(value);
  }
  static inline bool E14_Parse(absl::string_view name, E14* value) {
    return Message1_M10_M19_M42_E14_Parse(name, value);
  }
  using E15 = Message1_M10_M19_M42_E15;
  static constexpr E15 E15_UNSPECIFIED = Message1_M10_M19_M42_E15_E15_UNSPECIFIED;
  static constexpr E15 E15_CONST_1 = Message1_M10_M19_M42_E15_E15_CONST_1;
  static constexpr E15 E15_CONST_2 = Message1_M10_M19_M42_E15_E15_CONST_2;
  static constexpr E15 E15_CONST_3 = Message1_M10_M19_M42_E15_E15_CONST_3;
  static constexpr E15 E15_CONST_4 = Message1_M10_M19_M42_E15_E15_CONST_4;
  static constexpr E15 E15_CONST_5 = Message1_M10_M19_M42_E15_E15_CONST_5;
  static inline bool E15_IsValid(int value) {
    return Message1_M10_M19_M42_E15_IsValid(value);
  }
  static constexpr E15 E15_MIN = Message1_M10_M19_M42_E15_E15_MIN;
  static constexpr E15 E15_MAX = Message1_M10_M19_M42_E15_E15_MAX;
  static constexpr int E15_ARRAYSIZE = Message1_M10_M19_M42_E15_E15_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E15_descriptor() {
    return Message1_M10_M19_M42_E15_descriptor();
  }
  template <typename T>
  static inline const std::string& E15_Name(T value) {
    return Message1_M10_M19_M42_E15_Name(value);
  }
  static inline bool E15_Parse(absl::string_view name, E15* value) {
    return Message1_M10_M19_M42_E15_Parse(name, value);
  }
  using E16 = Message1_M10_M19_M42_E16;
  static constexpr E16 E16_UNSPECIFIED = Message1_M10_M19_M42_E16_E16_UNSPECIFIED;
  static constexpr E16 E16_CONST_1 = Message1_M10_M19_M42_E16_E16_CONST_1;
  static constexpr E16 E16_CONST_2 = Message1_M10_M19_M42_E16_E16_CONST_2;
  static constexpr E16 E16_CONST_3 = Message1_M10_M19_M42_E16_E16_CONST_3;
  static constexpr E16 E16_CONST_4 = Message1_M10_M19_M42_E16_E16_CONST_4;
  static constexpr E16 E16_CONST_5 = Message1_M10_M19_M42_E16_E16_CONST_5;
  static inline bool E16_IsValid(int value) {
    return Message1_M10_M19_M42_E16_IsValid(value);
  }
  static constexpr E16 E16_MIN = Message1_M10_M19_M42_E16_E16_MIN;
  static constexpr E16 E16_MAX = Message1_M10_M19_M42_E16_E16_MAX;
  static constexpr int E16_ARRAYSIZE = Message1_M10_M19_M42_E16_E16_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E16_descriptor() {
    return Message1_M10_M19_M42_E16_descriptor();
  }
  template <typename T>
  static inline const std::string& E16_Name(T value) {
    return Message1_M10_M19_M42_E16_Name(value);
  }
  static inline bool E16_Parse(absl::string_view name, E16* value) {
    return Message1_M10_M19_M42_E16_Parse(name, value);
  }
  using E17 = Message1_M10_M19_M42_E17;
  static constexpr E17 E17_UNSPECIFIED = Message1_M10_M19_M42_E17_E17_UNSPECIFIED;
  static constexpr E17 E17_CONST_1 = Message1_M10_M19_M42_E17_E17_CONST_1;
  static constexpr E17 E17_CONST_2 = Message1_M10_M19_M42_E17_E17_CONST_2;
  static constexpr E17 E17_CONST_3 = Message1_M10_M19_M42_E17_E17_CONST_3;
  static constexpr E17 E17_CONST_4 = Message1_M10_M19_M42_E17_E17_CONST_4;
  static constexpr E17 E17_CONST_5 = Message1_M10_M19_M42_E17_E17_CONST_5;
  static inline bool E17_IsValid(int value) {
    return Message1_M10_M19_M42_E17_IsValid(value);
  }
  static constexpr E17 E17_MIN = Message1_M10_M19_M42_E17_E17_MIN;
  static constexpr E17 E17_MAX = Message1_M10_M19_M42_E17_E17_MAX;
  static constexpr int E17_ARRAYSIZE = Message1_M10_M19_M42_E17_E17_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E17_descriptor() {
    return Message1_M10_M19_M42_E17_descriptor();
  }
  template <typename T>
  static inline const std::string& E17_Name(T value) {
    return Message1_M10_M19_M42_E17_Name(value);
  }
  static inline bool E17_Parse(absl::string_view name, E17* value) {
    return Message1_M10_M19_M42_E17_Parse(name, value);
  }
  using E18 = Message1_M10_M19_M42_E18;
  static constexpr E18 E18_UNSPECIFIED = Message1_M10_M19_M42_E18_E18_UNSPECIFIED;
  static constexpr E18 E18_CONST_1 = Message1_M10_M19_M42_E18_E18_CONST_1;
  static constexpr E18 E18_CONST_2 = Message1_M10_M19_M42_E18_E18_CONST_2;
  static constexpr E18 E18_CONST_3 = Message1_M10_M19_M42_E18_E18_CONST_3;
  static constexpr E18 E18_CONST_4 = Message1_M10_M19_M42_E18_E18_CONST_4;
  static constexpr E18 E18_CONST_5 = Message1_M10_M19_M42_E18_E18_CONST_5;
  static inline bool E18_IsValid(int value) {
    return Message1_M10_M19_M42_E18_IsValid(value);
  }
  static constexpr E18 E18_MIN = Message1_M10_M19_M42_E18_E18_MIN;
  static constexpr E18 E18_MAX = Message1_M10_M19_M42_E18_E18_MAX;
  static constexpr int E18_ARRAYSIZE = Message1_M10_M19_M42_E18_E18_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E18_descriptor() {
    return Message1_M10_M19_M42_E18_descriptor();
  }
  template <typename T>
  static inline const std::string& E18_Name(T value) {
    return Message1_M10_M19_M42_E18_Name(value);
  }
  static inline bool E18_Parse(absl::string_view name, E18* value) {
    return Message1_M10_M19_M42_E18_Parse(name, value);
  }
  using E19 = Message1_M10_M19_M42_E19;
  static constexpr E19 E19_UNSPECIFIED = Message1_M10_M19_M42_E19_E19_UNSPECIFIED;
  static constexpr E19 E19_CONST_1 = Message1_M10_M19_M42_E19_E19_CONST_1;
  static constexpr E19 E19_CONST_2 = Message1_M10_M19_M42_E19_E19_CONST_2;
  static constexpr E19 E19_CONST_3 = Message1_M10_M19_M42_E19_E19_CONST_3;
  static constexpr E19 E19_CONST_4 = Message1_M10_M19_M42_E19_E19_CONST_4;
  static constexpr E19 E19_CONST_5 = Message1_M10_M19_M42_E19_E19_CONST_5;
  static inline bool E19_IsValid(int value) {
    return Message1_M10_M19_M42_E19_IsValid(value);
  }
  static constexpr E19 E19_MIN = Message1_M10_M19_M42_E19_E19_MIN;
  static constexpr E19 E19_MAX = Message1_M10_M19_M42_E19_E19_MAX;
  static constexpr int E19_ARRAYSIZE = Message1_M10_M19_M42_E19_E19_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E19_descriptor() {
    return Message1_M10_M19_M42_E19_descriptor();
  }
  template <typename T>
  static inline const std::string& E19_Name(T value) {
    return Message1_M10_M19_M42_E19_Name(value);
  }
  static inline bool E19_Parse(absl::string_view name, E19* value) {
    return Message1_M10_M19_M42_E19_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_58_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_58())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())), f_2().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_55().data())), f_55().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())), f_20().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_28().c_str())), f_28().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())), f_29().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())), f_33().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())), f_40().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())), f_42().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())), f_50().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())), f_53().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())), f_54().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_58_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_58()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_11().data())));
      sizes_list.push_back(f_11().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_55().data())));
      sizes_list.push_back(f_55().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      sizes_list.push_back(f_20().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_28().c_str())));
      sizes_list.push_back(f_28().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      sizes_list.push_back(f_29().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      sizes_list.push_back(f_33().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      sizes_list.push_back(f_40().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      sizes_list.push_back(f_42().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      sizes_list.push_back(f_50().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      sizes_list.push_back(f_53().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
      sizes_list.push_back(f_54().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_58_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_11().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_55().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_28().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_58_);
      sizes.push_back(end_addr - start_addr + sizeof(f_58()));
      sizes.push_back(f_2().size() * sizeof(::int64_t));
      sizes.push_back(f_11().size() * sizeof(int));
      sizes.push_back(f_55().size() * sizeof(::int64_t));
      sizes.push_back(f_7().size());
      sizes.push_back(f_20().size());
      sizes.push_back(f_28().size());
      sizes.push_back(f_29().size());
      sizes.push_back(f_33().size());
      sizes.push_back(f_40().size());
      sizes.push_back(f_42().size());
      sizes.push_back(f_46().size());
      sizes.push_back(f_50().size());
      sizes.push_back(f_53().size());
      sizes.push_back(f_54().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_58_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      mutable_f_11()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_11().data())));
      mutable_f_55()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_55().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_28(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_28().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_42(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_50(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_50().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_54(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_11()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_55()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_28(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_42(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_50(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_54(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 8,
    kF11FieldNumber = 20,
    kF55FieldNumber = 86,
    kF7FieldNumber = 15,
    kF20FieldNumber = 32,
    kF28FieldNumber = 47,
    kF29FieldNumber = 48,
    kF33FieldNumber = 53,
    kF40FieldNumber = 64,
    kF42FieldNumber = 67,
    kF46FieldNumber = 71,
    kF50FieldNumber = 79,
    kF53FieldNumber = 83,
    kF54FieldNumber = 84,
    kF0FieldNumber = 1,
    kF1FieldNumber = 4,
    kF4FieldNumber = 10,
    kF3FieldNumber = 9,
    kF8FieldNumber = 16,
    kF5FieldNumber = 13,
    kF6FieldNumber = 14,
    kF10FieldNumber = 19,
    kF13FieldNumber = 23,
    kF12FieldNumber = 22,
    kF14FieldNumber = 24,
    kF15FieldNumber = 26,
    kF16FieldNumber = 27,
    kF17FieldNumber = 28,
    kF18FieldNumber = 29,
    kF21FieldNumber = 35,
    kF23FieldNumber = 38,
    kF22FieldNumber = 37,
    kF24FieldNumber = 39,
    kF25FieldNumber = 40,
    kF26FieldNumber = 43,
    kF9FieldNumber = 18,
    kF19FieldNumber = 31,
    kF51FieldNumber = 80,
    kF27FieldNumber = 45,
    kF30FieldNumber = 50,
    kF31FieldNumber = 51,
    kF32FieldNumber = 52,
    kF34FieldNumber = 54,
    kF35FieldNumber = 55,
    kF36FieldNumber = 56,
    kF37FieldNumber = 58,
    kF38FieldNumber = 60,
    kF39FieldNumber = 62,
    kF41FieldNumber = 65,
    kF43FieldNumber = 68,
    kF44FieldNumber = 69,
    kF45FieldNumber = 70,
    kF47FieldNumber = 74,
    kF48FieldNumber = 75,
    kF49FieldNumber = 78,
    kF52FieldNumber = 82,
    kF59FieldNumber = 95,
    kF56FieldNumber = 89,
    kF57FieldNumber = 92,
    kF58FieldNumber = 93,
  };
  // repeated int64 f_2 = 8 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int64_t f_2(int index) const;
  void set_f_2(int index, ::int64_t value);
  void add_f_2(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_2();

  public:
  // repeated .fleetbench.proto.Message1.M10.M19.M42.E11 f_11 = 20 [packed = true];
  int f_11_size() const;
  private:
  int _internal_f_11_size() const;

  public:
  void clear_f_11() ;
  public:
  ::fleetbench::proto::Message1_M10_M19_M42_E11 f_11(int index) const;
  void set_f_11(int index, ::fleetbench::proto::Message1_M10_M19_M42_E11 value);
  void add_f_11(::fleetbench::proto::Message1_M10_M19_M42_E11 value);
  const ::google::protobuf::RepeatedField<int>& f_11() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_11();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_11() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_11();

  public:
  // repeated int64 f_55 = 86 [packed = true];
  int f_55_size() const;
  private:
  int _internal_f_55_size() const;

  public:
  void clear_f_55() ;
  ::int64_t f_55(int index) const;
  void set_f_55(int index, ::int64_t value);
  void add_f_55(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_55() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_55();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_55() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_55();

  public:
  // optional string f_7 = 15;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_20 = 32;
  bool has_f_20() const;
  void clear_f_20() ;
  const std::string& f_20() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_20(Arg_&& arg, Args_... args);
  std::string* mutable_f_20();
  PROTOBUF_NODISCARD std::string* release_f_20();
  void set_allocated_f_20(std::string* value);

  private:
  const std::string& _internal_f_20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_20(
      const std::string& value);
  std::string* _internal_mutable_f_20();

  public:
  // optional string f_28 = 47;
  bool has_f_28() const;
  void clear_f_28() ;
  const std::string& f_28() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_28(Arg_&& arg, Args_... args);
  std::string* mutable_f_28();
  PROTOBUF_NODISCARD std::string* release_f_28();
  void set_allocated_f_28(std::string* value);

  private:
  const std::string& _internal_f_28() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_28(
      const std::string& value);
  std::string* _internal_mutable_f_28();

  public:
  // optional string f_29 = 48;
  bool has_f_29() const;
  void clear_f_29() ;
  const std::string& f_29() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_29(Arg_&& arg, Args_... args);
  std::string* mutable_f_29();
  PROTOBUF_NODISCARD std::string* release_f_29();
  void set_allocated_f_29(std::string* value);

  private:
  const std::string& _internal_f_29() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_29(
      const std::string& value);
  std::string* _internal_mutable_f_29();

  public:
  // optional string f_33 = 53;
  bool has_f_33() const;
  void clear_f_33() ;
  const std::string& f_33() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_33(Arg_&& arg, Args_... args);
  std::string* mutable_f_33();
  PROTOBUF_NODISCARD std::string* release_f_33();
  void set_allocated_f_33(std::string* value);

  private:
  const std::string& _internal_f_33() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_33(
      const std::string& value);
  std::string* _internal_mutable_f_33();

  public:
  // optional string f_40 = 64;
  bool has_f_40() const;
  void clear_f_40() ;
  const std::string& f_40() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_40(Arg_&& arg, Args_... args);
  std::string* mutable_f_40();
  PROTOBUF_NODISCARD std::string* release_f_40();
  void set_allocated_f_40(std::string* value);

  private:
  const std::string& _internal_f_40() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_40(
      const std::string& value);
  std::string* _internal_mutable_f_40();

  public:
  // optional bytes f_42 = 67;
  bool has_f_42() const;
  void clear_f_42() ;
  const std::string& f_42() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_42(Arg_&& arg, Args_... args);
  std::string* mutable_f_42();
  PROTOBUF_NODISCARD std::string* release_f_42();
  void set_allocated_f_42(std::string* value);

  private:
  const std::string& _internal_f_42() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_42(
      const std::string& value);
  std::string* _internal_mutable_f_42();

  public:
  // optional string f_46 = 71;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional string f_50 = 79;
  bool has_f_50() const;
  void clear_f_50() ;
  const std::string& f_50() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_50(Arg_&& arg, Args_... args);
  std::string* mutable_f_50();
  PROTOBUF_NODISCARD std::string* release_f_50();
  void set_allocated_f_50(std::string* value);

  private:
  const std::string& _internal_f_50() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_50(
      const std::string& value);
  std::string* _internal_mutable_f_50();

  public:
  // optional string f_53 = 83;
  bool has_f_53() const;
  void clear_f_53() ;
  const std::string& f_53() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_53(Arg_&& arg, Args_... args);
  std::string* mutable_f_53();
  PROTOBUF_NODISCARD std::string* release_f_53();
  void set_allocated_f_53(std::string* value);

  private:
  const std::string& _internal_f_53() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_53(
      const std::string& value);
  std::string* _internal_mutable_f_53();

  public:
  // optional string f_54 = 84;
  bool has_f_54() const;
  void clear_f_54() ;
  const std::string& f_54() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_54(Arg_&& arg, Args_... args);
  std::string* mutable_f_54();
  PROTOBUF_NODISCARD std::string* release_f_54();
  void set_allocated_f_54(std::string* value);

  private:
  const std::string& _internal_f_54() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_54(
      const std::string& value);
  std::string* _internal_mutable_f_54();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // optional float f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional int64 f_4 = 10;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional float f_3 = 9;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int32 f_8 = 16;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional int64 f_5 = 13;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int64 f_6 = 14;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E10 f_10 = 19;
  bool has_f_10() const;
  void clear_f_10() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E10 f_10() const;
  void set_f_10(::fleetbench::proto::Message1_M10_M19_M42_E10 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E10 _internal_f_10() const;
  void _internal_set_f_10(::fleetbench::proto::Message1_M10_M19_M42_E10 value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E12 f_13 = 23;
  bool has_f_13() const;
  void clear_f_13() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E12 f_13() const;
  void set_f_13(::fleetbench::proto::Message1_M10_M19_M42_E12 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E12 _internal_f_13() const;
  void _internal_set_f_13(::fleetbench::proto::Message1_M10_M19_M42_E12 value);

  public:
  // optional int64 f_12 = 22;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int64_t f_12() const;
  void set_f_12(::int64_t value);

  private:
  ::int64_t _internal_f_12() const;
  void _internal_set_f_12(::int64_t value);

  public:
  // optional int64 f_14 = 24;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // optional double f_15 = 26;
  bool has_f_15() const;
  void clear_f_15() ;
  double f_15() const;
  void set_f_15(double value);

  private:
  double _internal_f_15() const;
  void _internal_set_f_15(double value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E13 f_16 = 27;
  bool has_f_16() const;
  void clear_f_16() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E13 f_16() const;
  void set_f_16(::fleetbench::proto::Message1_M10_M19_M42_E13 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E13 _internal_f_16() const;
  void _internal_set_f_16(::fleetbench::proto::Message1_M10_M19_M42_E13 value);

  public:
  // optional int32 f_17 = 28;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int32_t f_17() const;
  void set_f_17(::int32_t value);

  private:
  ::int32_t _internal_f_17() const;
  void _internal_set_f_17(::int32_t value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E14 f_18 = 29;
  bool has_f_18() const;
  void clear_f_18() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E14 f_18() const;
  void set_f_18(::fleetbench::proto::Message1_M10_M19_M42_E14 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E14 _internal_f_18() const;
  void _internal_set_f_18(::fleetbench::proto::Message1_M10_M19_M42_E14 value);

  public:
  // optional float f_21 = 35;
  bool has_f_21() const;
  void clear_f_21() ;
  float f_21() const;
  void set_f_21(float value);

  private:
  float _internal_f_21() const;
  void _internal_set_f_21(float value);

  public:
  // optional int64 f_23 = 38;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int64_t f_23() const;
  void set_f_23(::int64_t value);

  private:
  ::int64_t _internal_f_23() const;
  void _internal_set_f_23(::int64_t value);

  public:
  // optional float f_22 = 37;
  bool has_f_22() const;
  void clear_f_22() ;
  float f_22() const;
  void set_f_22(float value);

  private:
  float _internal_f_22() const;
  void _internal_set_f_22(float value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E15 f_24 = 39;
  bool has_f_24() const;
  void clear_f_24() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E15 f_24() const;
  void set_f_24(::fleetbench::proto::Message1_M10_M19_M42_E15 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E15 _internal_f_24() const;
  void _internal_set_f_24(::fleetbench::proto::Message1_M10_M19_M42_E15 value);

  public:
  // optional uint64 f_25 = 40;
  bool has_f_25() const;
  void clear_f_25() ;
  ::uint64_t f_25() const;
  void set_f_25(::uint64_t value);

  private:
  ::uint64_t _internal_f_25() const;
  void _internal_set_f_25(::uint64_t value);

  public:
  // optional int32 f_26 = 43;
  bool has_f_26() const;
  void clear_f_26() ;
  ::int32_t f_26() const;
  void set_f_26(::int32_t value);

  private:
  ::int32_t _internal_f_26() const;
  void _internal_set_f_26(::int32_t value);

  public:
  // optional bool f_9 = 18;
  bool has_f_9() const;
  void clear_f_9() ;
  bool f_9() const;
  void set_f_9(bool value);

  private:
  bool _internal_f_9() const;
  void _internal_set_f_9(bool value);

  public:
  // optional bool f_19 = 31;
  bool has_f_19() const;
  void clear_f_19() ;
  bool f_19() const;
  void set_f_19(bool value);

  private:
  bool _internal_f_19() const;
  void _internal_set_f_19(bool value);

  public:
  // optional bool f_51 = 80;
  bool has_f_51() const;
  void clear_f_51() ;
  bool f_51() const;
  void set_f_51(bool value);

  private:
  bool _internal_f_51() const;
  void _internal_set_f_51(bool value);

  public:
  // optional double f_27 = 45;
  bool has_f_27() const;
  void clear_f_27() ;
  double f_27() const;
  void set_f_27(double value);

  private:
  double _internal_f_27() const;
  void _internal_set_f_27(double value);

  public:
  // optional int64 f_30 = 50;
  bool has_f_30() const;
  void clear_f_30() ;
  ::int64_t f_30() const;
  void set_f_30(::int64_t value);

  private:
  ::int64_t _internal_f_30() const;
  void _internal_set_f_30(::int64_t value);

  public:
  // optional int64 f_31 = 51;
  bool has_f_31() const;
  void clear_f_31() ;
  ::int64_t f_31() const;
  void set_f_31(::int64_t value);

  private:
  ::int64_t _internal_f_31() const;
  void _internal_set_f_31(::int64_t value);

  public:
  // optional int64 f_32 = 52;
  bool has_f_32() const;
  void clear_f_32() ;
  ::int64_t f_32() const;
  void set_f_32(::int64_t value);

  private:
  ::int64_t _internal_f_32() const;
  void _internal_set_f_32(::int64_t value);

  public:
  // optional int64 f_34 = 54;
  bool has_f_34() const;
  void clear_f_34() ;
  ::int64_t f_34() const;
  void set_f_34(::int64_t value);

  private:
  ::int64_t _internal_f_34() const;
  void _internal_set_f_34(::int64_t value);

  public:
  // optional float f_35 = 55;
  bool has_f_35() const;
  void clear_f_35() ;
  float f_35() const;
  void set_f_35(float value);

  private:
  float _internal_f_35() const;
  void _internal_set_f_35(float value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E16 f_36 = 56;
  bool has_f_36() const;
  void clear_f_36() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E16 f_36() const;
  void set_f_36(::fleetbench::proto::Message1_M10_M19_M42_E16 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E16 _internal_f_36() const;
  void _internal_set_f_36(::fleetbench::proto::Message1_M10_M19_M42_E16 value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E17 f_37 = 58;
  bool has_f_37() const;
  void clear_f_37() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E17 f_37() const;
  void set_f_37(::fleetbench::proto::Message1_M10_M19_M42_E17 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E17 _internal_f_37() const;
  void _internal_set_f_37(::fleetbench::proto::Message1_M10_M19_M42_E17 value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E18 f_38 = 60;
  bool has_f_38() const;
  void clear_f_38() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E18 f_38() const;
  void set_f_38(::fleetbench::proto::Message1_M10_M19_M42_E18 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E18 _internal_f_38() const;
  void _internal_set_f_38(::fleetbench::proto::Message1_M10_M19_M42_E18 value);

  public:
  // optional int32 f_39 = 62;
  bool has_f_39() const;
  void clear_f_39() ;
  ::int32_t f_39() const;
  void set_f_39(::int32_t value);

  private:
  ::int32_t _internal_f_39() const;
  void _internal_set_f_39(::int32_t value);

  public:
  // optional float f_41 = 65;
  bool has_f_41() const;
  void clear_f_41() ;
  float f_41() const;
  void set_f_41(float value);

  private:
  float _internal_f_41() const;
  void _internal_set_f_41(float value);

  public:
  // optional sint64 f_43 = 68;
  bool has_f_43() const;
  void clear_f_43() ;
  ::int64_t f_43() const;
  void set_f_43(::int64_t value);

  private:
  ::int64_t _internal_f_43() const;
  void _internal_set_f_43(::int64_t value);

  public:
  // optional double f_44 = 69;
  bool has_f_44() const;
  void clear_f_44() ;
  double f_44() const;
  void set_f_44(double value);

  private:
  double _internal_f_44() const;
  void _internal_set_f_44(double value);

  public:
  // optional fixed32 f_45 = 70;
  bool has_f_45() const;
  void clear_f_45() ;
  ::uint32_t f_45() const;
  void set_f_45(::uint32_t value);

  private:
  ::uint32_t _internal_f_45() const;
  void _internal_set_f_45(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42.E19 f_47 = 74;
  bool has_f_47() const;
  void clear_f_47() ;
  ::fleetbench::proto::Message1_M10_M19_M42_E19 f_47() const;
  void set_f_47(::fleetbench::proto::Message1_M10_M19_M42_E19 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M42_E19 _internal_f_47() const;
  void _internal_set_f_47(::fleetbench::proto::Message1_M10_M19_M42_E19 value);

  public:
  // optional int32 f_48 = 75;
  bool has_f_48() const;
  void clear_f_48() ;
  ::int32_t f_48() const;
  void set_f_48(::int32_t value);

  private:
  ::int32_t _internal_f_48() const;
  void _internal_set_f_48(::int32_t value);

  public:
  // optional int32 f_49 = 78;
  bool has_f_49() const;
  void clear_f_49() ;
  ::int32_t f_49() const;
  void set_f_49(::int32_t value);

  private:
  ::int32_t _internal_f_49() const;
  void _internal_set_f_49(::int32_t value);

  public:
  // optional int32 f_52 = 82;
  bool has_f_52() const;
  void clear_f_52() ;
  ::int32_t f_52() const;
  void set_f_52(::int32_t value);

  private:
  ::int32_t _internal_f_52() const;
  void _internal_set_f_52(::int32_t value);

  public:
  // optional int32 f_59 = 95;
  bool has_f_59() const;
  void clear_f_59() ;
  ::int32_t f_59() const;
  void set_f_59(::int32_t value);

  private:
  ::int32_t _internal_f_59() const;
  void _internal_set_f_59(::int32_t value);

  public:
  // optional int64 f_56 = 89;
  bool has_f_56() const;
  void clear_f_56() ;
  ::int64_t f_56() const;
  void set_f_56(::int64_t value);

  private:
  ::int64_t _internal_f_56() const;
  void _internal_set_f_56(::int64_t value);

  public:
  // optional int64 f_57 = 92;
  bool has_f_57() const;
  void clear_f_57() ;
  ::int64_t f_57() const;
  void set_f_57(::int64_t value);

  private:
  ::int64_t _internal_f_57() const;
  void _internal_set_f_57(::int64_t value);

  public:
  // optional int64 f_58 = 93;
  bool has_f_58() const;
  void clear_f_58() ;
  ::int64_t f_58() const;
  void set_f_58(::int64_t value);

  private:
  ::int64_t _internal_f_58() const;
  void _internal_set_f_58(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M42)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 60, 10,
      141, 13>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M42_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> f_11_;
    mutable ::google::protobuf::internal::CachedSize _f_11_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_55_;
    mutable ::google::protobuf::internal::CachedSize _f_55_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_20_;
    ::google::protobuf::internal::ArenaStringPtr f_28_;
    ::google::protobuf::internal::ArenaStringPtr f_29_;
    ::google::protobuf::internal::ArenaStringPtr f_33_;
    ::google::protobuf::internal::ArenaStringPtr f_40_;
    ::google::protobuf::internal::ArenaStringPtr f_42_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::google::protobuf::internal::ArenaStringPtr f_50_;
    ::google::protobuf::internal::ArenaStringPtr f_53_;
    ::google::protobuf::internal::ArenaStringPtr f_54_;
    float f_0_;
    float f_1_;
    ::int64_t f_4_;
    float f_3_;
    ::int32_t f_8_;
    ::int64_t f_5_;
    ::int64_t f_6_;
    int f_10_;
    int f_13_;
    ::int64_t f_12_;
    ::int64_t f_14_;
    double f_15_;
    int f_16_;
    ::int32_t f_17_;
    int f_18_;
    float f_21_;
    ::int64_t f_23_;
    float f_22_;
    int f_24_;
    ::uint64_t f_25_;
    ::int32_t f_26_;
    bool f_9_;
    bool f_19_;
    bool f_51_;
    double f_27_;
    ::int64_t f_30_;
    ::int64_t f_31_;
    ::int64_t f_32_;
    ::int64_t f_34_;
    float f_35_;
    int f_36_;
    int f_37_;
    int f_38_;
    ::int32_t f_39_;
    float f_41_;
    ::int64_t f_43_;
    double f_44_;
    ::uint32_t f_45_;
    int f_47_;
    ::int32_t f_48_;
    ::int32_t f_49_;
    ::int32_t f_52_;
    ::int32_t f_59_;
    ::int64_t f_56_;
    ::int64_t f_57_;
    ::int64_t f_58_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M61 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M61) */ {
 public:
  inline Message1_M10_M19_M40_M49_M61() : Message1_M10_M19_M40_M49_M61(nullptr) {}
  ~Message1_M10_M19_M40_M49_M61() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M61(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M61(const Message1_M10_M19_M40_M49_M61& from) : Message1_M10_M19_M40_M49_M61(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M61(Message1_M10_M19_M40_M49_M61&& from) noexcept
      : Message1_M10_M19_M40_M49_M61(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M61& operator=(const Message1_M10_M19_M40_M49_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M61& operator=(Message1_M10_M19_M40_M49_M61&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M61& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M61* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M61*>(
        &_Message1_M10_M19_M40_M49_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 93;
  friend void swap(Message1_M10_M19_M40_M49_M61& a, Message1_M10_M19_M40_M49_M61& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M61* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M61* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M61* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M61>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M61& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M61& from) { Message1_M10_M19_M40_M49_M61::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M61* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M61"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M61(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M61(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M61& from);
  Message1_M10_M19_M40_M49_M61(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M61&& from) noexcept
      : Message1_M10_M19_M40_M49_M61(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M61)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M61_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M57_M75 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75) */ {
 public:
  inline Message1_M10_M19_M40_M49_M57_M75() : Message1_M10_M19_M40_M49_M57_M75(nullptr) {}
  ~Message1_M10_M19_M40_M49_M57_M75() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M57_M75(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M57_M75(const Message1_M10_M19_M40_M49_M57_M75& from) : Message1_M10_M19_M40_M49_M57_M75(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M57_M75(Message1_M10_M19_M40_M49_M57_M75&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M75(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M57_M75& operator=(const Message1_M10_M19_M40_M49_M57_M75& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M57_M75& operator=(Message1_M10_M19_M40_M49_M57_M75&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M57_M75& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M57_M75* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M57_M75*>(
        &_Message1_M10_M19_M40_M49_M57_M75_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 91;
  friend void swap(Message1_M10_M19_M40_M49_M57_M75& a, Message1_M10_M19_M40_M49_M57_M75& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M57_M75* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M57_M75* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M57_M75* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M57_M75>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M57_M75& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M57_M75& from) { Message1_M10_M19_M40_M49_M57_M75::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M57_M75* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M57_M75(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M57_M75(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M57_M75& from);
  Message1_M10_M19_M40_M49_M57_M75(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M57_M75&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M75(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 4,
  };
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int32 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M57_M75_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M57_M72_M84 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84) */ {
 public:
  inline Message1_M10_M19_M40_M49_M57_M72_M84() : Message1_M10_M19_M40_M49_M57_M72_M84(nullptr) {}
  ~Message1_M10_M19_M40_M49_M57_M72_M84() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M57_M72_M84(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M57_M72_M84(const Message1_M10_M19_M40_M49_M57_M72_M84& from) : Message1_M10_M19_M40_M49_M57_M72_M84(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M57_M72_M84(Message1_M10_M19_M40_M49_M57_M72_M84&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M72_M84(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M57_M72_M84& operator=(const Message1_M10_M19_M40_M49_M57_M72_M84& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M57_M72_M84& operator=(Message1_M10_M19_M40_M49_M57_M72_M84&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M57_M72_M84& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M57_M72_M84* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M57_M72_M84*>(
        &_Message1_M10_M19_M40_M49_M57_M72_M84_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 89;
  friend void swap(Message1_M10_M19_M40_M49_M57_M72_M84& a, Message1_M10_M19_M40_M49_M57_M72_M84& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M57_M72_M84* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M57_M72_M84* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M57_M72_M84* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M57_M72_M84>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M57_M72_M84& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M57_M72_M84& from) { Message1_M10_M19_M40_M49_M57_M72_M84::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M57_M72_M84* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M57_M72_M84(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M57_M72_M84(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M57_M72_M84& from);
  Message1_M10_M19_M40_M49_M57_M72_M84(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M57_M72_M84&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M72_M84(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M57_M72_M84_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M57_M71 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71) */ {
 public:
  inline Message1_M10_M19_M40_M49_M57_M71() : Message1_M10_M19_M40_M49_M57_M71(nullptr) {}
  ~Message1_M10_M19_M40_M49_M57_M71() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M57_M71(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M57_M71(const Message1_M10_M19_M40_M49_M57_M71& from) : Message1_M10_M19_M40_M49_M57_M71(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M57_M71(Message1_M10_M19_M40_M49_M57_M71&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M71(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M57_M71& operator=(const Message1_M10_M19_M40_M49_M57_M71& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M57_M71& operator=(Message1_M10_M19_M40_M49_M57_M71&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M57_M71& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M57_M71* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M57_M71*>(
        &_Message1_M10_M19_M40_M49_M57_M71_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 88;
  friend void swap(Message1_M10_M19_M40_M49_M57_M71& a, Message1_M10_M19_M40_M49_M57_M71& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M57_M71* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M57_M71* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M57_M71* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M57_M71>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M57_M71& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M57_M71& from) { Message1_M10_M19_M40_M49_M57_M71::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M57_M71* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M57_M71(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M57_M71(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M57_M71& from);
  Message1_M10_M19_M40_M49_M57_M71(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M57_M71&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M71(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M57_M71_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M56 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M56) */ {
 public:
  inline Message1_M10_M19_M40_M49_M56() : Message1_M10_M19_M40_M49_M56(nullptr) {}
  ~Message1_M10_M19_M40_M49_M56() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M56(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M56(const Message1_M10_M19_M40_M49_M56& from) : Message1_M10_M19_M40_M49_M56(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M56(Message1_M10_M19_M40_M49_M56&& from) noexcept
      : Message1_M10_M19_M40_M49_M56(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M56& operator=(const Message1_M10_M19_M40_M49_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M56& operator=(Message1_M10_M19_M40_M49_M56&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M56* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M56*>(
        &_Message1_M10_M19_M40_M49_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 87;
  friend void swap(Message1_M10_M19_M40_M49_M56& a, Message1_M10_M19_M40_M49_M56& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M56* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M56* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M56* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M56>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M56& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M56& from) { Message1_M10_M19_M40_M49_M56::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M56* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M56"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M56(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M56(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M56& from);
  Message1_M10_M19_M40_M49_M56(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M56&& from) noexcept
      : Message1_M10_M19_M40_M49_M56(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M56)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M56_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M26 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M26) */ {
 public:
  inline Message1_M1_M26() : Message1_M1_M26(nullptr) {}
  ~Message1_M1_M26() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M26(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M26(const Message1_M1_M26& from) : Message1_M1_M26(nullptr, from) {}
  inline Message1_M1_M26(Message1_M1_M26&& from) noexcept
      : Message1_M1_M26(nullptr, std::move(from)) {}
  inline Message1_M1_M26& operator=(const Message1_M1_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M26& operator=(Message1_M1_M26&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M26& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M26* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M26*>(
        &_Message1_M1_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Message1_M1_M26& a, Message1_M1_M26& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M26* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M26* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M26* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M26>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M26& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M26& from) { Message1_M1_M26::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M26* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M26"; }

 protected:
  explicit Message1_M1_M26(::google::protobuf::Arena* arena);
  Message1_M1_M26(::google::protobuf::Arena* arena, const Message1_M1_M26& from);
  Message1_M1_M26(::google::protobuf::Arena* arena, Message1_M1_M26&& from) noexcept
      : Message1_M1_M26(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E5 = Message1_M1_M26_E5;
  static constexpr E5 E5_UNSPECIFIED = Message1_M1_M26_E5_E5_UNSPECIFIED;
  static constexpr E5 E5_CONST_1 = Message1_M1_M26_E5_E5_CONST_1;
  static constexpr E5 E5_CONST_2 = Message1_M1_M26_E5_E5_CONST_2;
  static constexpr E5 E5_CONST_3 = Message1_M1_M26_E5_E5_CONST_3;
  static constexpr E5 E5_CONST_4 = Message1_M1_M26_E5_E5_CONST_4;
  static constexpr E5 E5_CONST_5 = Message1_M1_M26_E5_E5_CONST_5;
  static inline bool E5_IsValid(int value) {
    return Message1_M1_M26_E5_IsValid(value);
  }
  static constexpr E5 E5_MIN = Message1_M1_M26_E5_E5_MIN;
  static constexpr E5 E5_MAX = Message1_M1_M26_E5_E5_MAX;
  static constexpr int E5_ARRAYSIZE = Message1_M1_M26_E5_E5_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E5_descriptor() {
    return Message1_M1_M26_E5_descriptor();
  }
  template <typename T>
  static inline const std::string& E5_Name(T value) {
    return Message1_M1_M26_E5_Name(value);
  }
  static inline bool E5_Parse(absl::string_view name, E5* value) {
    return Message1_M1_M26_E5_Parse(name, value);
  }
  using E6 = Message1_M1_M26_E6;
  static constexpr E6 E6_UNSPECIFIED = Message1_M1_M26_E6_E6_UNSPECIFIED;
  static constexpr E6 E6_CONST_1 = Message1_M1_M26_E6_E6_CONST_1;
  static constexpr E6 E6_CONST_2 = Message1_M1_M26_E6_E6_CONST_2;
  static constexpr E6 E6_CONST_3 = Message1_M1_M26_E6_E6_CONST_3;
  static constexpr E6 E6_CONST_4 = Message1_M1_M26_E6_E6_CONST_4;
  static constexpr E6 E6_CONST_5 = Message1_M1_M26_E6_E6_CONST_5;
  static inline bool E6_IsValid(int value) {
    return Message1_M1_M26_E6_IsValid(value);
  }
  static constexpr E6 E6_MIN = Message1_M1_M26_E6_E6_MIN;
  static constexpr E6 E6_MAX = Message1_M1_M26_E6_E6_MAX;
  static constexpr int E6_ARRAYSIZE = Message1_M1_M26_E6_E6_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E6_descriptor() {
    return Message1_M1_M26_E6_descriptor();
  }
  template <typename T>
  static inline const std::string& E6_Name(T value) {
    return Message1_M1_M26_E6_Name(value);
  }
  static inline bool E6_Parse(absl::string_view name, E6* value) {
    return Message1_M1_M26_E6_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
  };
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M1.M26.E5 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M1_M26_E5 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M1_M26_E5 value);

  private:
  ::fleetbench::proto::Message1_M1_M26_E5 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M1_M26_E5 value);

  public:
  // optional float f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional .fleetbench.proto.Message1.M1.M26.E6 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M1_M26_E6 f_4() const;
  void set_f_4(::fleetbench::proto::Message1_M1_M26_E6 value);

  private:
  ::fleetbench::proto::Message1_M1_M26_E6 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message1_M1_M26_E6 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M26)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M26_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    int f_0_;
    float f_3_;
    int f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M25_M31_M51_M65_M76 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76) */ {
 public:
  inline Message1_M1_M25_M31_M51_M65_M76() : Message1_M1_M25_M31_M51_M65_M76(nullptr) {}
  ~Message1_M1_M25_M31_M51_M65_M76() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M25_M31_M51_M65_M76(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M25_M31_M51_M65_M76(const Message1_M1_M25_M31_M51_M65_M76& from) : Message1_M1_M25_M31_M51_M65_M76(nullptr, from) {}
  inline Message1_M1_M25_M31_M51_M65_M76(Message1_M1_M25_M31_M51_M65_M76&& from) noexcept
      : Message1_M1_M25_M31_M51_M65_M76(nullptr, std::move(from)) {}
  inline Message1_M1_M25_M31_M51_M65_M76& operator=(const Message1_M1_M25_M31_M51_M65_M76& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M25_M31_M51_M65_M76& operator=(Message1_M1_M25_M31_M51_M65_M76&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M25_M31_M51_M65_M76& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M25_M31_M51_M65_M76* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M25_M31_M51_M65_M76*>(
        &_Message1_M1_M25_M31_M51_M65_M76_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message1_M1_M25_M31_M51_M65_M76& a, Message1_M1_M25_M31_M51_M65_M76& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M25_M31_M51_M65_M76* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M25_M31_M51_M65_M76* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M25_M31_M51_M65_M76* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M25_M31_M51_M65_M76>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M25_M31_M51_M65_M76& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M25_M31_M51_M65_M76& from) { Message1_M1_M25_M31_M51_M65_M76::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M25_M31_M51_M65_M76* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76"; }

 protected:
  explicit Message1_M1_M25_M31_M51_M65_M76(::google::protobuf::Arena* arena);
  Message1_M1_M25_M31_M51_M65_M76(::google::protobuf::Arena* arena, const Message1_M1_M25_M31_M51_M65_M76& from);
  Message1_M1_M25_M31_M51_M65_M76(::google::protobuf::Arena* arena, Message1_M1_M25_M31_M51_M65_M76&& from) noexcept
      : Message1_M1_M25_M31_M51_M65_M76(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M25_M31_M51_M65_M76_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M21 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M21) */ {
 public:
  inline Message1_M1_M21() : Message1_M1_M21(nullptr) {}
  ~Message1_M1_M21() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M21(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M21(const Message1_M1_M21& from) : Message1_M1_M21(nullptr, from) {}
  inline Message1_M1_M21(Message1_M1_M21&& from) noexcept
      : Message1_M1_M21(nullptr, std::move(from)) {}
  inline Message1_M1_M21& operator=(const Message1_M1_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M21& operator=(Message1_M1_M21&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M21& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M21* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M21*>(
        &_Message1_M1_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message1_M1_M21& a, Message1_M1_M21& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M21* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M21* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M21* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M21>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M21& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M21& from) { Message1_M1_M21::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M21* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M21"; }

 protected:
  explicit Message1_M1_M21(::google::protobuf::Arena* arena);
  Message1_M1_M21(::google::protobuf::Arena* arena, const Message1_M1_M21& from);
  Message1_M1_M21(::google::protobuf::Arena* arena, Message1_M1_M21&& from) noexcept
      : Message1_M1_M21(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M21)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M21_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M9 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M9) */ {
 public:
  inline Message1_M9() : Message1_M9(nullptr) {}
  ~Message1_M9() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M9(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M9(const Message1_M9& from) : Message1_M9(nullptr, from) {}
  inline Message1_M9(Message1_M9&& from) noexcept
      : Message1_M9(nullptr, std::move(from)) {}
  inline Message1_M9& operator=(const Message1_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M9& operator=(Message1_M9&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M9& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M9* internal_default_instance() {
    return reinterpret_cast<const Message1_M9*>(
        &_Message1_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 86;
  friend void swap(Message1_M9& a, Message1_M9& b) { a.Swap(&b); }
  inline void Swap(Message1_M9* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M9* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M9* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M9>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M9& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M9& from) { Message1_M9::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M9* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M9"; }

 protected:
  explicit Message1_M9(::google::protobuf::Arena* arena);
  Message1_M9(::google::protobuf::Arena* arena, const Message1_M9& from);
  Message1_M9(::google::protobuf::Arena* arena, Message1_M9&& from) noexcept
      : Message1_M9(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M17 = Message1_M9_M17;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M9.M17 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M9_M17* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M9_M17& f_1(int index) const;
  ::fleetbench::proto::Message1_M9_M17* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>& f_1() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M9)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M9_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M9_M17 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M73 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M73() : Message1_M7_M18_M39_M45_M59_M73(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M73() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M73(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M73(const Message1_M7_M18_M39_M45_M59_M73& from) : Message1_M7_M18_M39_M45_M59_M73(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M73(Message1_M7_M18_M39_M45_M59_M73&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M73(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M73& operator=(const Message1_M7_M18_M39_M45_M59_M73& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M73& operator=(Message1_M7_M18_M39_M45_M59_M73&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M73& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M73* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M73*>(
        &_Message1_M7_M18_M39_M45_M59_M73_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 78;
  friend void swap(Message1_M7_M18_M39_M45_M59_M73& a, Message1_M7_M18_M39_M45_M59_M73& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M73* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M73* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M73* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M73>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M73& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M73& from) { Message1_M7_M18_M39_M45_M59_M73::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M73* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M73(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M73(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M73& from);
  Message1_M7_M18_M39_M45_M59_M73(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M73&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M73(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M87 = Message1_M7_M18_M39_M45_M59_M73_M87;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>& f_1() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M73_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M67_M85 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M67_M85() : Message1_M7_M18_M39_M45_M59_M67_M85(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M67_M85() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M67_M85(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M67_M85(const Message1_M7_M18_M39_M45_M59_M67_M85& from) : Message1_M7_M18_M39_M45_M59_M67_M85(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85(Message1_M7_M18_M39_M45_M59_M67_M85&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M67_M85& operator=(const Message1_M7_M18_M39_M45_M59_M67_M85& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M67_M85& operator=(Message1_M7_M18_M39_M45_M59_M67_M85&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M67_M85& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M67_M85* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M67_M85*>(
        &_Message1_M7_M18_M39_M45_M59_M67_M85_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 75;
  friend void swap(Message1_M7_M18_M39_M45_M59_M67_M85& a, Message1_M7_M18_M39_M45_M59_M67_M85& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M67_M85* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M67_M85* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M67_M85* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M67_M85>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M67_M85& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M67_M85& from) { Message1_M7_M18_M39_M45_M59_M67_M85::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M67_M85* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M67_M85(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M67_M85(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M67_M85& from);
  Message1_M7_M18_M39_M45_M59_M67_M85(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M67_M85&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67_M85(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M98 = Message1_M7_M18_M39_M45_M59_M67_M85_M98;
  using M100 = Message1_M7_M18_M39_M45_M59_M67_M85_M100;
  using E26 = Message1_M7_M18_M39_M45_M59_M67_M85_E26;
  static constexpr E26 E26_UNSPECIFIED = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_UNSPECIFIED;
  static constexpr E26 E26_CONST_1 = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_1;
  static constexpr E26 E26_CONST_2 = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_2;
  static constexpr E26 E26_CONST_3 = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_3;
  static constexpr E26 E26_CONST_4 = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_4;
  static constexpr E26 E26_CONST_5 = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_CONST_5;
  static inline bool E26_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_E26_IsValid(value);
  }
  static constexpr E26 E26_MIN = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_MIN;
  static constexpr E26 E26_MAX = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_MAX;
  static constexpr int E26_ARRAYSIZE = Message1_M7_M18_M39_M45_M59_M67_M85_E26_E26_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E26_descriptor() {
    return Message1_M7_M18_M39_M45_M59_M67_M85_E26_descriptor();
  }
  template <typename T>
  static inline const std::string& E26_Name(T value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_E26_Name(value);
  }
  static inline bool E26_Parse(absl::string_view name, E26* value) {
    return Message1_M7_M18_M39_M45_M59_M67_M85_E26_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      mutable_f_4()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF6FieldNumber = 7,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* release_f_4();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98& _internal_f_4() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* release_f_6();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100& _internal_f_6() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* _internal_mutable_f_6();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.E26 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional double f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  double f_2() const;
  void set_f_2(double value);

  private:
  double _internal_f_2() const;
  void _internal_set_f_2(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M67_M85_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* f_4_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* f_6_;
    int f_0_;
    ::int32_t f_1_;
    double f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M82 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M82() : Message1_M7_M18_M39_M45_M54_M82(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M82() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M82(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M82(const Message1_M7_M18_M39_M45_M54_M82& from) : Message1_M7_M18_M39_M45_M54_M82(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M82(Message1_M7_M18_M39_M45_M54_M82&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M82(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M82& operator=(const Message1_M7_M18_M39_M45_M54_M82& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M82& operator=(Message1_M7_M18_M39_M45_M54_M82&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M82& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M82* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M82*>(
        &_Message1_M7_M18_M39_M45_M54_M82_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 71;
  friend void swap(Message1_M7_M18_M39_M45_M54_M82& a, Message1_M7_M18_M39_M45_M54_M82& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M82* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M82* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M82* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M82>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M82& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M82& from) { Message1_M7_M18_M39_M45_M54_M82::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M82* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M82(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M82(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M82& from);
  Message1_M7_M18_M39_M45_M54_M82(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M82&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M82(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M93 = Message1_M7_M18_M39_M45_M54_M82_M93;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 4,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* release_f_1();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M82_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102() : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& from) : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& operator=(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& operator=(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 65;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& a, Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& from) { Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& from);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M106 = Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_0_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).data())), f_0(i).size()));
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
        sizes_list.push_back(f_0(i).size());
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        sizes.push_back(f_0(i).size());
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_0_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_0_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated bytes f_0 = 1;
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  const std::string& f_0(int index) const;
  std::string* mutable_f_0(int index);
  void set_f_0(int index, const std::string& value);
  void set_f_0(int index, std::string&& value);
  void set_f_0(int index, const char* value);
  void set_f_0(int index, const void* value, std::size_t size);
  void set_f_0(int index, absl::string_view value);
  std::string* add_f_0();
  void add_f_0(const std::string& value);
  void add_f_0(std::string&& value);
  void add_f_0(const char* value);
  void add_f_0(const void* value, std::size_t size);
  void add_f_0(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* release_f_1();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_0_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M32 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M32) */ {
 public:
  inline Message1_M7_M18_M32() : Message1_M7_M18_M32(nullptr) {}
  ~Message1_M7_M18_M32() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M32(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M32(const Message1_M7_M18_M32& from) : Message1_M7_M18_M32(nullptr, from) {}
  inline Message1_M7_M18_M32(Message1_M7_M18_M32&& from) noexcept
      : Message1_M7_M18_M32(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M32& operator=(const Message1_M7_M18_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M32& operator=(Message1_M7_M18_M32&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M32* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M32*>(
        &_Message1_M7_M18_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(Message1_M7_M18_M32& a, Message1_M7_M18_M32& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M32* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M32* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M32* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M32>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M32& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M32& from) { Message1_M7_M18_M32::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M32* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M32"; }

 protected:
  explicit Message1_M7_M18_M32(::google::protobuf::Arena* arena);
  Message1_M7_M18_M32(::google::protobuf::Arena* arena, const Message1_M7_M18_M32& from);
  Message1_M7_M18_M32(::google::protobuf::Arena* arena, Message1_M7_M18_M32&& from) noexcept
      : Message1_M7_M18_M32(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M53 = Message1_M7_M18_M32_M53;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M7.M18.M32.M53 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M18_M32_M53& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M32_M53* release_f_1();
  ::fleetbench::proto::Message1_M7_M18_M32_M53* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M32_M53* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M32_M53* value);
  ::fleetbench::proto::Message1_M7_M18_M32_M53* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M32_M53& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M18_M32_M53* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M32)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M32_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M18_M32_M53* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M52 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M52) */ {
 public:
  inline Message1_M7_M14_M41_M52() : Message1_M7_M14_M41_M52(nullptr) {}
  ~Message1_M7_M14_M41_M52() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M52(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M52(const Message1_M7_M14_M41_M52& from) : Message1_M7_M14_M41_M52(nullptr, from) {}
  inline Message1_M7_M14_M41_M52(Message1_M7_M14_M41_M52&& from) noexcept
      : Message1_M7_M14_M41_M52(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M52& operator=(const Message1_M7_M14_M41_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M52& operator=(Message1_M7_M14_M41_M52&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M52* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M52*>(
        &_Message1_M7_M14_M41_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(Message1_M7_M14_M41_M52& a, Message1_M7_M14_M41_M52& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M52* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M52* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M52* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M52>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M52& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M52& from) { Message1_M7_M14_M41_M52::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M52* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M52"; }

 protected:
  explicit Message1_M7_M14_M41_M52(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M52(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M52& from);
  Message1_M7_M14_M41_M52(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M52&& from) noexcept
      : Message1_M7_M14_M41_M52(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M66 = Message1_M7_M14_M41_M52_M66;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M52.M66 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* release_f_3();
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52_M66* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52_M66* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* _internal_mutable_f_3();

  public:
  // optional int32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M52)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M52_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* f_3_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M108 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      mutable_f_8()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      mutable_f_8()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF8FieldNumber = 9,
    kF0FieldNumber = 3,
    kF1FieldNumber = 5,
    kF2FieldNumber = 6,
    kF3FieldNumber = 8,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* release_f_8();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& _internal_f_8() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* _internal_mutable_f_8();

  public:
  // optional int32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional bool f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional bool f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional uint64 f_3 = 8;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* f_8_;
    ::int32_t f_0_;
    bool f_1_;
    bool f_2_;
    ::uint64_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M118 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118;
  using M119 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119;
  using E49 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49;
  static constexpr E49 E49_UNSPECIFIED = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_UNSPECIFIED;
  static constexpr E49 E49_CONST_1 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_1;
  static constexpr E49 E49_CONST_2 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_2;
  static constexpr E49 E49_CONST_3 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_3;
  static constexpr E49 E49_CONST_4 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_4;
  static constexpr E49 E49_CONST_5 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_CONST_5;
  static inline bool E49_IsValid(int value) {
    return Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_IsValid(value);
  }
  static constexpr E49 E49_MIN = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_MIN;
  static constexpr E49 E49_MAX = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_MAX;
  static constexpr int E49_ARRAYSIZE = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_E49_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E49_descriptor() {
    return Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_descriptor();
  }
  template <typename T>
  static inline const std::string& E49_Name(T value) {
    return Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_Name(value);
  }
  static inline bool E49_Parse(absl::string_view name, E49* value) {
    return Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* release_f_4();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& _internal_f_4() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.E49 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 value);

  private:
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* f_2_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* f_4_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16_M38_M50 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16.M38.M50) */ {
 public:
  inline Message1_M6_M16_M38_M50() : Message1_M6_M16_M38_M50(nullptr) {}
  ~Message1_M6_M16_M38_M50() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16_M38_M50(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16_M38_M50(const Message1_M6_M16_M38_M50& from) : Message1_M6_M16_M38_M50(nullptr, from) {}
  inline Message1_M6_M16_M38_M50(Message1_M6_M16_M38_M50&& from) noexcept
      : Message1_M6_M16_M38_M50(nullptr, std::move(from)) {}
  inline Message1_M6_M16_M38_M50& operator=(const Message1_M6_M16_M38_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16_M38_M50& operator=(Message1_M6_M16_M38_M50&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16_M38_M50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16_M38_M50* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16_M38_M50*>(
        &_Message1_M6_M16_M38_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Message1_M6_M16_M38_M50& a, Message1_M6_M16_M38_M50& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16_M38_M50* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16_M38_M50* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16_M38_M50* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16_M38_M50>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16_M38_M50& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16_M38_M50& from) { Message1_M6_M16_M38_M50::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16_M38_M50* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16.M38.M50"; }

 protected:
  explicit Message1_M6_M16_M38_M50(::google::protobuf::Arena* arena);
  Message1_M6_M16_M38_M50(::google::protobuf::Arena* arena, const Message1_M6_M16_M38_M50& from);
  Message1_M6_M16_M38_M50(::google::protobuf::Arena* arena, Message1_M6_M16_M38_M50&& from) noexcept
      : Message1_M6_M16_M38_M50(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M64 = Message1_M6_M16_M38_M50_M64;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF0FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message1.M6.M16.M38.M50.M64 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M6_M16_M38_M50_M64* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message1_M6_M16_M38_M50_M64& f_4(int index) const;
  ::fleetbench::proto::Message1_M6_M16_M38_M50_M64* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>& f_4() const;
  // optional string f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16.M38.M50)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_M38_M50_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M6_M16_M38_M50_M64 > f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16_M38_M46 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16.M38.M46) */ {
 public:
  inline Message1_M6_M16_M38_M46() : Message1_M6_M16_M38_M46(nullptr) {}
  ~Message1_M6_M16_M38_M46() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16_M38_M46(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16_M38_M46(const Message1_M6_M16_M38_M46& from) : Message1_M6_M16_M38_M46(nullptr, from) {}
  inline Message1_M6_M16_M38_M46(Message1_M6_M16_M38_M46&& from) noexcept
      : Message1_M6_M16_M38_M46(nullptr, std::move(from)) {}
  inline Message1_M6_M16_M38_M46& operator=(const Message1_M6_M16_M38_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16_M38_M46& operator=(Message1_M6_M16_M38_M46&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16_M38_M46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16_M38_M46* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16_M38_M46*>(
        &_Message1_M6_M16_M38_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Message1_M6_M16_M38_M46& a, Message1_M6_M16_M38_M46& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16_M38_M46* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16_M38_M46* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16_M38_M46* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16_M38_M46>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16_M38_M46& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16_M38_M46& from) { Message1_M6_M16_M38_M46::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16_M38_M46* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16.M38.M46"; }

 protected:
  explicit Message1_M6_M16_M38_M46(::google::protobuf::Arena* arena);
  Message1_M6_M16_M38_M46(::google::protobuf::Arena* arena, const Message1_M6_M16_M38_M46& from);
  Message1_M6_M16_M38_M46(::google::protobuf::Arena* arena, Message1_M6_M16_M38_M46&& from) noexcept
      : Message1_M6_M16_M38_M46(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M55 = Message1_M6_M16_M38_M46_M55;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message1.M6.M16.M38.M46.M55 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* release_f_3();
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46_M55* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46_M55* value);
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55& _internal_f_3() const;
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16.M38.M46)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_M38_M46_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M4) */ {
 public:
  inline Message1_M4() : Message1_M4(nullptr) {}
  ~Message1_M4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M4(const Message1_M4& from) : Message1_M4(nullptr, from) {}
  inline Message1_M4(Message1_M4&& from) noexcept
      : Message1_M4(nullptr, std::move(from)) {}
  inline Message1_M4& operator=(const Message1_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M4& operator=(Message1_M4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M4* internal_default_instance() {
    return reinterpret_cast<const Message1_M4*>(
        &_Message1_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(Message1_M4& a, Message1_M4& b) { a.Swap(&b); }
  inline void Swap(Message1_M4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M4& from) { Message1_M4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M4"; }

 protected:
  explicit Message1_M4(::google::protobuf::Arena* arena);
  Message1_M4(::google::protobuf::Arena* arena, const Message1_M4& from);
  Message1_M4(::google::protobuf::Arena* arena, Message1_M4&& from) noexcept
      : Message1_M4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M28 = Message1_M4_M28;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())), f_0().size() * sizeof(::int64_t)));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int64_t));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int64_t));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // repeated int64 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int64_t f_0(int index) const;
  void set_f_0(int index, ::int64_t value);
  void add_f_0(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M4.M28 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M4_M28& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M4_M28* release_f_2();
  ::fleetbench::proto::Message1_M4_M28* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M4_M28* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M4_M28* value);
  ::fleetbench::proto::Message1_M4_M28* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M4_M28& _internal_f_2() const;
  ::fleetbench::proto::Message1_M4_M28* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::fleetbench::proto::Message1_M4_M28* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M29 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M29) */ {
 public:
  inline Message1_M2_M29() : Message1_M2_M29(nullptr) {}
  ~Message1_M2_M29() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M29(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M29(const Message1_M2_M29& from) : Message1_M2_M29(nullptr, from) {}
  inline Message1_M2_M29(Message1_M2_M29&& from) noexcept
      : Message1_M2_M29(nullptr, std::move(from)) {}
  inline Message1_M2_M29& operator=(const Message1_M2_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M29& operator=(Message1_M2_M29&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M29& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M29* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M29*>(
        &_Message1_M2_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Message1_M2_M29& a, Message1_M2_M29& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M29* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M29* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M29* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M29>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M29& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M29& from) { Message1_M2_M29::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M29* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M29"; }

 protected:
  explicit Message1_M2_M29(::google::protobuf::Arena* arena);
  Message1_M2_M29(::google::protobuf::Arena* arena, const Message1_M2_M29& from);
  Message1_M2_M29(::google::protobuf::Arena* arena, Message1_M2_M29&& from) noexcept
      : Message1_M2_M29(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M35 = Message1_M2_M29_M35;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF0FieldNumber = 4,
  };
  // optional .fleetbench.proto.Message1.M2.M29.M35 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M2_M29_M35& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M2_M29_M35* release_f_4();
  ::fleetbench::proto::Message1_M2_M29_M35* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M2_M29_M35* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M2_M29_M35* value);
  ::fleetbench::proto::Message1_M2_M29_M35* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M2_M29_M35& _internal_f_4() const;
  ::fleetbench::proto::Message1_M2_M29_M35* _internal_mutable_f_4();

  public:
  // optional float f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M29)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M29_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M2_M29_M35* f_4_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22_M34_M48_M60 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22.M34.M48.M60) */ {
 public:
  inline Message1_M2_M22_M34_M48_M60() : Message1_M2_M22_M34_M48_M60(nullptr) {}
  ~Message1_M2_M22_M34_M48_M60() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22_M34_M48_M60(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22_M34_M48_M60(const Message1_M2_M22_M34_M48_M60& from) : Message1_M2_M22_M34_M48_M60(nullptr, from) {}
  inline Message1_M2_M22_M34_M48_M60(Message1_M2_M22_M34_M48_M60&& from) noexcept
      : Message1_M2_M22_M34_M48_M60(nullptr, std::move(from)) {}
  inline Message1_M2_M22_M34_M48_M60& operator=(const Message1_M2_M22_M34_M48_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22_M34_M48_M60& operator=(Message1_M2_M22_M34_M48_M60&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22_M34_M48_M60& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22_M34_M48_M60* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22_M34_M48_M60*>(
        &_Message1_M2_M22_M34_M48_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Message1_M2_M22_M34_M48_M60& a, Message1_M2_M22_M34_M48_M60& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22_M34_M48_M60* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22_M34_M48_M60* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22_M34_M48_M60* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22_M34_M48_M60>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22_M34_M48_M60& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22_M34_M48_M60& from) { Message1_M2_M22_M34_M48_M60::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22_M34_M48_M60* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22.M34.M48.M60"; }

 protected:
  explicit Message1_M2_M22_M34_M48_M60(::google::protobuf::Arena* arena);
  Message1_M2_M22_M34_M48_M60(::google::protobuf::Arena* arena, const Message1_M2_M22_M34_M48_M60& from);
  Message1_M2_M22_M34_M48_M60(::google::protobuf::Arena* arena, Message1_M2_M22_M34_M48_M60&& from) noexcept
      : Message1_M2_M22_M34_M48_M60(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M69 = Message1_M2_M22_M34_M48_M60_M69;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* release_f_2();
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* value);
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69& _internal_f_2() const;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22.M34.M48.M60)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_M34_M48_M60_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M13_M15 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M13.M15) */ {
 public:
  inline Message1_M13_M15() : Message1_M13_M15(nullptr) {}
  ~Message1_M13_M15() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M13_M15(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M13_M15(const Message1_M13_M15& from) : Message1_M13_M15(nullptr, from) {}
  inline Message1_M13_M15(Message1_M13_M15&& from) noexcept
      : Message1_M13_M15(nullptr, std::move(from)) {}
  inline Message1_M13_M15& operator=(const Message1_M13_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M13_M15& operator=(Message1_M13_M15&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M13_M15& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M13_M15* internal_default_instance() {
    return reinterpret_cast<const Message1_M13_M15*>(
        &_Message1_M13_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 116;
  friend void swap(Message1_M13_M15& a, Message1_M13_M15& b) { a.Swap(&b); }
  inline void Swap(Message1_M13_M15* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M13_M15* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M13_M15* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M13_M15>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M13_M15& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M13_M15& from) { Message1_M13_M15::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M13_M15* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M13.M15"; }

 protected:
  explicit Message1_M13_M15(::google::protobuf::Arena* arena);
  Message1_M13_M15(::google::protobuf::Arena* arena, const Message1_M13_M15& from);
  Message1_M13_M15(::google::protobuf::Arena* arena, Message1_M13_M15&& from) noexcept
      : Message1_M13_M15(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M33 = Message1_M13_M15_M33;
  using M36 = Message1_M13_M15_M36;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF1FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M13.M15.M36 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M13_M15_M36* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message1_M13_M15_M36& f_4(int index) const;
  ::fleetbench::proto::Message1_M13_M15_M36* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>& f_4() const;
  // optional .fleetbench.proto.Message1.M13.M15.M33 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M13_M15_M33& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M13_M15_M33* release_f_1();
  ::fleetbench::proto::Message1_M13_M15_M33* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M13_M15_M33* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M13_M15_M33* value);
  ::fleetbench::proto::Message1_M13_M15_M33* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M13_M15_M33& _internal_f_1() const;
  ::fleetbench::proto::Message1_M13_M15_M33* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M13.M15)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M13_M15_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M13_M15_M36 > f_4_;
    ::fleetbench::proto::Message1_M13_M15_M33* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M62_M78 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78) */ {
 public:
  inline Message1_M11_M23_M37_M43_M62_M78() : Message1_M11_M23_M37_M43_M62_M78(nullptr) {}
  ~Message1_M11_M23_M37_M43_M62_M78() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M62_M78(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M62_M78(const Message1_M11_M23_M37_M43_M62_M78& from) : Message1_M11_M23_M37_M43_M62_M78(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M62_M78(Message1_M11_M23_M37_M43_M62_M78&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M78(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M62_M78& operator=(const Message1_M11_M23_M37_M43_M62_M78& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M62_M78& operator=(Message1_M11_M23_M37_M43_M62_M78&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M62_M78& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M62_M78* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M62_M78*>(
        &_Message1_M11_M23_M37_M43_M62_M78_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 107;
  friend void swap(Message1_M11_M23_M37_M43_M62_M78& a, Message1_M11_M23_M37_M43_M62_M78& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M62_M78* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M62_M78* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M62_M78* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M62_M78>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M62_M78& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M62_M78& from) { Message1_M11_M23_M37_M43_M62_M78::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M62_M78* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M62_M78(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M62_M78(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M62_M78& from);
  Message1_M11_M23_M37_M43_M62_M78(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M62_M78&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M78(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M86 = Message1_M11_M23_M37_M43_M62_M78_M86;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_3().data())), f_3().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
      mutable_f_9()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_3().data())));
      sizes_list.push_back(f_3().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_3().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      mutable_f_9()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size() * sizeof(::int32_t));
      sizes.push_back(f_1().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_5().size());
      mutable_f_9()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_3()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_3().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_3()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 7,
    kF1FieldNumber = 3,
    kF4FieldNumber = 8,
    kF5FieldNumber = 9,
    kF9FieldNumber = 11,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated int32 f_3 = 7 [packed = true];
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::int32_t f_3(int index) const;
  void set_f_3(int index, ::int32_t value);
  void add_f_3(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_3() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_3() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_3();

  public:
  // optional bytes f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86 f_9 = 11;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* release_f_9();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86& _internal_f_9() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* _internal_mutable_f_9();

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      64, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M62_M78_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_3_;
    mutable ::google::protobuf::internal::CachedSize _f_3_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* f_9_;
    ::int64_t f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M62_M68 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68) */ {
 public:
  inline Message1_M11_M23_M37_M43_M62_M68() : Message1_M11_M23_M37_M43_M62_M68(nullptr) {}
  ~Message1_M11_M23_M37_M43_M62_M68() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M62_M68(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M62_M68(const Message1_M11_M23_M37_M43_M62_M68& from) : Message1_M11_M23_M37_M43_M62_M68(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M62_M68(Message1_M11_M23_M37_M43_M62_M68&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M68(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M62_M68& operator=(const Message1_M11_M23_M37_M43_M62_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M62_M68& operator=(Message1_M11_M23_M37_M43_M62_M68&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M62_M68& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M62_M68* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M62_M68*>(
        &_Message1_M11_M23_M37_M43_M62_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 105;
  friend void swap(Message1_M11_M23_M37_M43_M62_M68& a, Message1_M11_M23_M37_M43_M62_M68& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M62_M68* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M62_M68* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M62_M68* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M62_M68>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M62_M68& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M62_M68& from) { Message1_M11_M23_M37_M43_M62_M68::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M62_M68* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M62_M68(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M62_M68(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M62_M68& from);
  Message1_M11_M23_M37_M43_M62_M68(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M62_M68&& from) noexcept
      : Message1_M11_M23_M37_M43_M62_M68(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M90 = Message1_M11_M23_M37_M43_M62_M68_M90;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90& f_1(int index) const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>& f_1() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M62_M68_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90 > f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M58_M83 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83) */ {
 public:
  inline Message1_M11_M23_M37_M43_M58_M83() : Message1_M11_M23_M37_M43_M58_M83(nullptr) {}
  ~Message1_M11_M23_M37_M43_M58_M83() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M58_M83(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M58_M83(const Message1_M11_M23_M37_M43_M58_M83& from) : Message1_M11_M23_M37_M43_M58_M83(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M58_M83(Message1_M11_M23_M37_M43_M58_M83&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M83(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M58_M83& operator=(const Message1_M11_M23_M37_M43_M58_M83& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M58_M83& operator=(Message1_M11_M23_M37_M43_M58_M83&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M58_M83& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M58_M83* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M58_M83*>(
        &_Message1_M11_M23_M37_M43_M58_M83_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 102;
  friend void swap(Message1_M11_M23_M37_M43_M58_M83& a, Message1_M11_M23_M37_M43_M58_M83& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M58_M83* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M58_M83* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M58_M83* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M58_M83>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M58_M83& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M58_M83& from) { Message1_M11_M23_M37_M43_M58_M83::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M58_M83* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M58_M83(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M58_M83(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M58_M83& from);
  Message1_M11_M23_M37_M43_M58_M83(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M58_M83&& from) noexcept
      : Message1_M11_M23_M37_M43_M58_M83(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M92 = Message1_M11_M23_M37_M43_M58_M83_M92;
  using E25 = Message1_M11_M23_M37_M43_M58_M83_E25;
  static constexpr E25 E25_UNSPECIFIED = Message1_M11_M23_M37_M43_M58_M83_E25_E25_UNSPECIFIED;
  static constexpr E25 E25_CONST_1 = Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_1;
  static constexpr E25 E25_CONST_2 = Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_2;
  static constexpr E25 E25_CONST_3 = Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_3;
  static constexpr E25 E25_CONST_4 = Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_4;
  static constexpr E25 E25_CONST_5 = Message1_M11_M23_M37_M43_M58_M83_E25_E25_CONST_5;
  static inline bool E25_IsValid(int value) {
    return Message1_M11_M23_M37_M43_M58_M83_E25_IsValid(value);
  }
  static constexpr E25 E25_MIN = Message1_M11_M23_M37_M43_M58_M83_E25_E25_MIN;
  static constexpr E25 E25_MAX = Message1_M11_M23_M37_M43_M58_M83_E25_E25_MAX;
  static constexpr int E25_ARRAYSIZE = Message1_M11_M23_M37_M43_M58_M83_E25_E25_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E25_descriptor() {
    return Message1_M11_M23_M37_M43_M58_M83_E25_descriptor();
  }
  template <typename T>
  static inline const std::string& E25_Name(T value) {
    return Message1_M11_M23_M37_M43_M58_M83_E25_Name(value);
  }
  static inline bool E25_Parse(absl::string_view name, E25* value) {
    return Message1_M11_M23_M37_M43_M58_M83_E25_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size());
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF6FieldNumber = 8,
    kF2FieldNumber = 6,
    kF1FieldNumber = 4,
  };
  // optional bytes f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* release_f_6();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92& _internal_f_6() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* _internal_mutable_f_6();

  public:
  // optional int64 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.E25 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 f_1() const;
  void set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 value);

  private:
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M58_M83_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* f_6_;
    ::int64_t f_2_;
    int f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M57_M72 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72) */ {
 public:
  inline Message1_M10_M19_M40_M49_M57_M72() : Message1_M10_M19_M40_M49_M57_M72(nullptr) {}
  ~Message1_M10_M19_M40_M49_M57_M72() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M57_M72(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M57_M72(const Message1_M10_M19_M40_M49_M57_M72& from) : Message1_M10_M19_M40_M49_M57_M72(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M57_M72(Message1_M10_M19_M40_M49_M57_M72&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M72(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M57_M72& operator=(const Message1_M10_M19_M40_M49_M57_M72& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M57_M72& operator=(Message1_M10_M19_M40_M49_M57_M72&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M57_M72& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M57_M72* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M57_M72*>(
        &_Message1_M10_M19_M40_M49_M57_M72_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 90;
  friend void swap(Message1_M10_M19_M40_M49_M57_M72& a, Message1_M10_M19_M40_M49_M57_M72& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M57_M72* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M57_M72* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M57_M72* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M57_M72>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M57_M72& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M57_M72& from) { Message1_M10_M19_M40_M49_M57_M72::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M57_M72* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M57_M72(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M57_M72(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M57_M72& from);
  Message1_M10_M19_M40_M49_M57_M72(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M57_M72&& from) noexcept
      : Message1_M10_M19_M40_M49_M57_M72(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M84 = Message1_M10_M19_M40_M49_M57_M72_M84;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* release_f_2();
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84& _internal_f_2() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M57_M72_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M25_M31_M51_M65 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M25.M31.M51.M65) */ {
 public:
  inline Message1_M1_M25_M31_M51_M65() : Message1_M1_M25_M31_M51_M65(nullptr) {}
  ~Message1_M1_M25_M31_M51_M65() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M25_M31_M51_M65(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M25_M31_M51_M65(const Message1_M1_M25_M31_M51_M65& from) : Message1_M1_M25_M31_M51_M65(nullptr, from) {}
  inline Message1_M1_M25_M31_M51_M65(Message1_M1_M25_M31_M51_M65&& from) noexcept
      : Message1_M1_M25_M31_M51_M65(nullptr, std::move(from)) {}
  inline Message1_M1_M25_M31_M51_M65& operator=(const Message1_M1_M25_M31_M51_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M25_M31_M51_M65& operator=(Message1_M1_M25_M31_M51_M65&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M25_M31_M51_M65& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M25_M31_M51_M65* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M25_M31_M51_M65*>(
        &_Message1_M1_M25_M31_M51_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message1_M1_M25_M31_M51_M65& a, Message1_M1_M25_M31_M51_M65& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M25_M31_M51_M65* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M25_M31_M51_M65* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M25_M31_M51_M65* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M25_M31_M51_M65>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M25_M31_M51_M65& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M25_M31_M51_M65& from) { Message1_M1_M25_M31_M51_M65::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M25_M31_M51_M65* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M25.M31.M51.M65"; }

 protected:
  explicit Message1_M1_M25_M31_M51_M65(::google::protobuf::Arena* arena);
  Message1_M1_M25_M31_M51_M65(::google::protobuf::Arena* arena, const Message1_M1_M25_M31_M51_M65& from);
  Message1_M1_M25_M31_M51_M65(::google::protobuf::Arena* arena, Message1_M1_M25_M31_M51_M65&& from) noexcept
      : Message1_M1_M25_M31_M51_M65(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M76 = Message1_M1_M25_M31_M51_M65_M76;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76& f_1(int index) const;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>& f_1() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M25.M31.M51.M65)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M25_M31_M51_M65_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76 > f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59_M67 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59_M67() : Message1_M7_M18_M39_M45_M59_M67(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59_M67() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59_M67(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59_M67(const Message1_M7_M18_M39_M45_M59_M67& from) : Message1_M7_M18_M39_M45_M59_M67(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59_M67(Message1_M7_M18_M39_M45_M59_M67&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59_M67& operator=(const Message1_M7_M18_M39_M45_M59_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59_M67& operator=(Message1_M7_M18_M39_M45_M59_M67&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59_M67& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59_M67* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59_M67*>(
        &_Message1_M7_M18_M39_M45_M59_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 76;
  friend void swap(Message1_M7_M18_M39_M45_M59_M67& a, Message1_M7_M18_M39_M45_M59_M67& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59_M67* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59_M67* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59_M67* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59_M67>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59_M67& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59_M67& from) { Message1_M7_M18_M39_M45_M59_M67::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59_M67* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59_M67(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59_M67(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59_M67& from);
  Message1_M7_M18_M39_M45_M59_M67(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59_M67&& from) noexcept
      : Message1_M7_M18_M39_M45_M59_M67(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M85 = Message1_M7_M18_M39_M45_M59_M67_M85;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* release_f_2();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* _internal_mutable_f_2();

  public:
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_M67_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* f_2_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M91_M97 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97() : Message1_M7_M18_M39_M45_M54_M80_M91_M97(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M91_M97() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M91_M97(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97(const Message1_M7_M18_M39_M45_M54_M80_M91_M97& from) : Message1_M7_M18_M39_M45_M54_M80_M91_M97(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97(Message1_M7_M18_M39_M45_M54_M80_M91_M97&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97& operator=(const Message1_M7_M18_M39_M45_M54_M80_M91_M97& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M91_M97& operator=(Message1_M7_M18_M39_M45_M54_M80_M91_M97&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M91_M97& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M91_M97* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M91_M97*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 66;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97& a, Message1_M7_M18_M39_M45_M54_M80_M91_M97& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M91_M97* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M91_M97* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M91_M97>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M91_M97& from) { Message1_M7_M18_M39_M45_M54_M80_M91_M97::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M91_M97* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M91_M97(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M91_M97& from);
  Message1_M7_M18_M39_M45_M54_M80_M91_M97(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M91_M97&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91_M97(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M102 = Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* release_f_1();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M91_M97_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M117 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16_M38 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16.M38) */ {
 public:
  inline Message1_M6_M16_M38() : Message1_M6_M16_M38(nullptr) {}
  ~Message1_M6_M16_M38() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16_M38(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16_M38(const Message1_M6_M16_M38& from) : Message1_M6_M16_M38(nullptr, from) {}
  inline Message1_M6_M16_M38(Message1_M6_M16_M38&& from) noexcept
      : Message1_M6_M16_M38(nullptr, std::move(from)) {}
  inline Message1_M6_M16_M38& operator=(const Message1_M6_M16_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16_M38& operator=(Message1_M6_M16_M38&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16_M38& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16_M38* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16_M38*>(
        &_Message1_M6_M16_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Message1_M6_M16_M38& a, Message1_M6_M16_M38& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16_M38* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16_M38* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16_M38* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16_M38>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16_M38& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16_M38& from) { Message1_M6_M16_M38::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16_M38* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16.M38"; }

 protected:
  explicit Message1_M6_M16_M38(::google::protobuf::Arena* arena);
  Message1_M6_M16_M38(::google::protobuf::Arena* arena, const Message1_M6_M16_M38& from);
  Message1_M6_M16_M38(::google::protobuf::Arena* arena, Message1_M6_M16_M38&& from) noexcept
      : Message1_M6_M16_M38(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M46 = Message1_M6_M16_M38_M46;
  using M50 = Message1_M6_M16_M38_M50;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M6.M16.M38.M46 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M6_M16_M38_M46& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M16_M38_M46* release_f_3();
  ::fleetbench::proto::Message1_M6_M16_M38_M46* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46* value);
  ::fleetbench::proto::Message1_M6_M16_M38_M46* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M6_M16_M38_M46& _internal_f_3() const;
  ::fleetbench::proto::Message1_M6_M16_M38_M46* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M6.M16.M38.M50 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M6_M16_M38_M50& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M16_M38_M50* release_f_4();
  ::fleetbench::proto::Message1_M6_M16_M38_M50* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M6_M16_M38_M50* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M6_M16_M38_M50* value);
  ::fleetbench::proto::Message1_M6_M16_M38_M50* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M6_M16_M38_M50& _internal_f_4() const;
  ::fleetbench::proto::Message1_M6_M16_M38_M50* _internal_mutable_f_4();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16.M38)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_M38_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message1_M6_M16_M38_M46* f_3_;
    ::fleetbench::proto::Message1_M6_M16_M38_M50* f_4_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22_M34_M48 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22.M34.M48) */ {
 public:
  inline Message1_M2_M22_M34_M48() : Message1_M2_M22_M34_M48(nullptr) {}
  ~Message1_M2_M22_M34_M48() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22_M34_M48(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22_M34_M48(const Message1_M2_M22_M34_M48& from) : Message1_M2_M22_M34_M48(nullptr, from) {}
  inline Message1_M2_M22_M34_M48(Message1_M2_M22_M34_M48&& from) noexcept
      : Message1_M2_M22_M34_M48(nullptr, std::move(from)) {}
  inline Message1_M2_M22_M34_M48& operator=(const Message1_M2_M22_M34_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22_M34_M48& operator=(Message1_M2_M22_M34_M48&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22_M34_M48& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22_M34_M48* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22_M34_M48*>(
        &_Message1_M2_M22_M34_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Message1_M2_M22_M34_M48& a, Message1_M2_M22_M34_M48& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22_M34_M48* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22_M34_M48* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22_M34_M48* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22_M34_M48>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22_M34_M48& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22_M34_M48& from) { Message1_M2_M22_M34_M48::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22_M34_M48* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22.M34.M48"; }

 protected:
  explicit Message1_M2_M22_M34_M48(::google::protobuf::Arena* arena);
  Message1_M2_M22_M34_M48(::google::protobuf::Arena* arena, const Message1_M2_M22_M34_M48& from);
  Message1_M2_M22_M34_M48(::google::protobuf::Arena* arena, Message1_M2_M22_M34_M48&& from) noexcept
      : Message1_M2_M22_M34_M48(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M60 = Message1_M2_M22_M34_M48_M60;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M2.M22.M34.M48.M60 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60& f_1(int index) const;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>& f_1() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22.M34.M48)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_M34_M48_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M2_M22_M34_M48_M60 > f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M13 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M13) */ {
 public:
  inline Message1_M13() : Message1_M13(nullptr) {}
  ~Message1_M13() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M13(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M13(const Message1_M13& from) : Message1_M13(nullptr, from) {}
  inline Message1_M13(Message1_M13&& from) noexcept
      : Message1_M13(nullptr, std::move(from)) {}
  inline Message1_M13& operator=(const Message1_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M13& operator=(Message1_M13&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M13& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M13* internal_default_instance() {
    return reinterpret_cast<const Message1_M13*>(
        &_Message1_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 118;
  friend void swap(Message1_M13& a, Message1_M13& b) { a.Swap(&b); }
  inline void Swap(Message1_M13* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M13* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M13* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M13>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M13& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M13& from) { Message1_M13::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M13* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M13"; }

 protected:
  explicit Message1_M13(::google::protobuf::Arena* arena);
  Message1_M13(::google::protobuf::Arena* arena, const Message1_M13& from);
  Message1_M13(::google::protobuf::Arena* arena, Message1_M13&& from) noexcept
      : Message1_M13(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M15 = Message1_M13_M15;
  using M30 = Message1_M13_M30;
  using E1 = Message1_M13_E1;
  static constexpr E1 E1_UNSPECIFIED = Message1_M13_E1_E1_UNSPECIFIED;
  static constexpr E1 E1_CONST_1 = Message1_M13_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 = Message1_M13_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 = Message1_M13_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 = Message1_M13_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 = Message1_M13_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return Message1_M13_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN = Message1_M13_E1_E1_MIN;
  static constexpr E1 E1_MAX = Message1_M13_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE = Message1_M13_E1_E1_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E1_descriptor() {
    return Message1_M13_E1_descriptor();
  }
  template <typename T>
  static inline const std::string& E1_Name(T value) {
    return Message1_M13_E1_Name(value);
  }
  static inline bool E1_Parse(absl::string_view name, E1* value) {
    return Message1_M13_E1_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M13.M15 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M13_M15& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M13_M15* release_f_2();
  ::fleetbench::proto::Message1_M13_M15* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M13_M15* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M13_M15* value);
  ::fleetbench::proto::Message1_M13_M15* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M13_M15& _internal_f_2() const;
  ::fleetbench::proto::Message1_M13_M15* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M13.M30 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M13_M30& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M13_M30* release_f_3();
  ::fleetbench::proto::Message1_M13_M30* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M13_M30* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M13_M30* value);
  ::fleetbench::proto::Message1_M13_M30* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M13_M30& _internal_f_3() const;
  ::fleetbench::proto::Message1_M13_M30* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M13.E1 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M13_E1 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M13_E1 value);

  private:
  ::fleetbench::proto::Message1_M13_E1 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M13_E1 value);

  public:
  // optional bool f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M13)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M13_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M13_M15* f_2_;
    ::fleetbench::proto::Message1_M13_M30* f_3_;
    int f_0_;
    bool f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M62 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M62) */ {
 public:
  inline Message1_M11_M23_M37_M43_M62() : Message1_M11_M23_M37_M43_M62(nullptr) {}
  ~Message1_M11_M23_M37_M43_M62() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M62(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M62(const Message1_M11_M23_M37_M43_M62& from) : Message1_M11_M23_M37_M43_M62(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M62(Message1_M11_M23_M37_M43_M62&& from) noexcept
      : Message1_M11_M23_M37_M43_M62(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M62& operator=(const Message1_M11_M23_M37_M43_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M62& operator=(Message1_M11_M23_M37_M43_M62&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M62& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M62* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M62*>(
        &_Message1_M11_M23_M37_M43_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 108;
  friend void swap(Message1_M11_M23_M37_M43_M62& a, Message1_M11_M23_M37_M43_M62& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M62* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M62* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M62* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M62>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M62& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M62& from) { Message1_M11_M23_M37_M43_M62::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M62* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M62"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M62(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M62(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M62& from);
  Message1_M11_M23_M37_M43_M62(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M62&& from) noexcept
      : Message1_M11_M23_M37_M43_M62(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M68 = Message1_M11_M23_M37_M43_M62_M68;
  using M78 = Message1_M11_M23_M37_M43_M62_M78;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF5FieldNumber = 6,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* release_f_3();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68& _internal_f_3() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* release_f_5();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78& _internal_f_5() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* _internal_mutable_f_5();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M62)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M62_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* f_3_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43_M58 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43.M58) */ {
 public:
  inline Message1_M11_M23_M37_M43_M58() : Message1_M11_M23_M37_M43_M58(nullptr) {}
  ~Message1_M11_M23_M37_M43_M58() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43_M58(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43_M58(const Message1_M11_M23_M37_M43_M58& from) : Message1_M11_M23_M37_M43_M58(nullptr, from) {}
  inline Message1_M11_M23_M37_M43_M58(Message1_M11_M23_M37_M43_M58&& from) noexcept
      : Message1_M11_M23_M37_M43_M58(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43_M58& operator=(const Message1_M11_M23_M37_M43_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43_M58& operator=(Message1_M11_M23_M37_M43_M58&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43_M58& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43_M58* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43_M58*>(
        &_Message1_M11_M23_M37_M43_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 103;
  friend void swap(Message1_M11_M23_M37_M43_M58& a, Message1_M11_M23_M37_M43_M58& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43_M58* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43_M58* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43_M58* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43_M58>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43_M58& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43_M58& from) { Message1_M11_M23_M37_M43_M58::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43_M58* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43.M58"; }

 protected:
  explicit Message1_M11_M23_M37_M43_M58(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43_M58(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43_M58& from);
  Message1_M11_M23_M37_M43_M58(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43_M58&& from) noexcept
      : Message1_M11_M23_M37_M43_M58(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M81 = Message1_M11_M23_M37_M43_M58_M81;
  using M83 = Message1_M11_M23_M37_M43_M58_M83;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83& f_2(int index) const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>& f_2() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* release_f_1();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81& _internal_f_1() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43.M58)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_M58_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83 > f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49_M57 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49.M57) */ {
 public:
  inline Message1_M10_M19_M40_M49_M57() : Message1_M10_M19_M40_M49_M57(nullptr) {}
  ~Message1_M10_M19_M40_M49_M57() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49_M57(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49_M57(const Message1_M10_M19_M40_M49_M57& from) : Message1_M10_M19_M40_M49_M57(nullptr, from) {}
  inline Message1_M10_M19_M40_M49_M57(Message1_M10_M19_M40_M49_M57&& from) noexcept
      : Message1_M10_M19_M40_M49_M57(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49_M57& operator=(const Message1_M10_M19_M40_M49_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49_M57& operator=(Message1_M10_M19_M40_M49_M57&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49_M57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49_M57* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49_M57*>(
        &_Message1_M10_M19_M40_M49_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 92;
  friend void swap(Message1_M10_M19_M40_M49_M57& a, Message1_M10_M19_M40_M49_M57& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49_M57* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49_M57* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49_M57* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49_M57>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49_M57& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49_M57& from) { Message1_M10_M19_M40_M49_M57::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49_M57* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49.M57"; }

 protected:
  explicit Message1_M10_M19_M40_M49_M57(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49_M57(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49_M57& from);
  Message1_M10_M19_M40_M49_M57(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49_M57&& from) noexcept
      : Message1_M10_M19_M40_M49_M57(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M71 = Message1_M10_M19_M40_M49_M57_M71;
  using M72 = Message1_M10_M19_M40_M49_M57_M72;
  using M75 = Message1_M10_M19_M40_M49_M57_M75;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF5FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* release_f_1();
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71& _internal_f_1() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* release_f_3();
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72& _internal_f_3() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* release_f_5();
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75& _internal_f_5() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* _internal_mutable_f_5();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49.M57)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_M57_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* f_1_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* f_3_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* f_5_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M25_M31_M51 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M25.M31.M51) */ {
 public:
  inline Message1_M1_M25_M31_M51() : Message1_M1_M25_M31_M51(nullptr) {}
  ~Message1_M1_M25_M31_M51() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M25_M31_M51(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M25_M31_M51(const Message1_M1_M25_M31_M51& from) : Message1_M1_M25_M31_M51(nullptr, from) {}
  inline Message1_M1_M25_M31_M51(Message1_M1_M25_M31_M51&& from) noexcept
      : Message1_M1_M25_M31_M51(nullptr, std::move(from)) {}
  inline Message1_M1_M25_M31_M51& operator=(const Message1_M1_M25_M31_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M25_M31_M51& operator=(Message1_M1_M25_M31_M51&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M25_M31_M51& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M25_M31_M51* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M25_M31_M51*>(
        &_Message1_M1_M25_M31_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Message1_M1_M25_M31_M51& a, Message1_M1_M25_M31_M51& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M25_M31_M51* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M25_M31_M51* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M25_M31_M51* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M25_M31_M51>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M25_M31_M51& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M25_M31_M51& from) { Message1_M1_M25_M31_M51::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M25_M31_M51* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M25.M31.M51"; }

 protected:
  explicit Message1_M1_M25_M31_M51(::google::protobuf::Arena* arena);
  Message1_M1_M25_M31_M51(::google::protobuf::Arena* arena, const Message1_M1_M25_M31_M51& from);
  Message1_M1_M25_M31_M51(::google::protobuf::Arena* arena, Message1_M1_M25_M31_M51&& from) noexcept
      : Message1_M1_M25_M31_M51(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M65 = Message1_M1_M25_M31_M51_M65;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M1.M25.M31.M51.M65 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* release_f_1();
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31_M51_M65* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31_M51_M65* value);
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65& _internal_f_1() const;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M25.M31.M51)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M25_M31_M51_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M59 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M59) */ {
 public:
  inline Message1_M7_M18_M39_M45_M59() : Message1_M7_M18_M39_M45_M59(nullptr) {}
  ~Message1_M7_M18_M39_M45_M59() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M59(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M59(const Message1_M7_M18_M39_M45_M59& from) : Message1_M7_M18_M39_M45_M59(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M59(Message1_M7_M18_M39_M45_M59&& from) noexcept
      : Message1_M7_M18_M39_M45_M59(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M59& operator=(const Message1_M7_M18_M39_M45_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M59& operator=(Message1_M7_M18_M39_M45_M59&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M59& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M59* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M59*>(
        &_Message1_M7_M18_M39_M45_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 79;
  friend void swap(Message1_M7_M18_M39_M45_M59& a, Message1_M7_M18_M39_M45_M59& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M59* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M59* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M59* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M59>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M59& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M59& from) { Message1_M7_M18_M39_M45_M59::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M59* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M59"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M59(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M59(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M59& from);
  Message1_M7_M18_M39_M45_M59(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M59&& from) noexcept
      : Message1_M7_M18_M39_M45_M59(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M67 = Message1_M7_M18_M39_M45_M59_M67;
  using M73 = Message1_M7_M18_M39_M45_M59_M73;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>& f_2() const;
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* release_f_3();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M59)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M59_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67 > f_2_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80_M91 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80_M91() : Message1_M7_M18_M39_M45_M54_M80_M91(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80_M91() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80_M91(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80_M91(const Message1_M7_M18_M39_M45_M54_M80_M91& from) : Message1_M7_M18_M39_M45_M54_M80_M91(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91(Message1_M7_M18_M39_M45_M54_M80_M91&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80_M91& operator=(const Message1_M7_M18_M39_M45_M54_M80_M91& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80_M91& operator=(Message1_M7_M18_M39_M45_M54_M80_M91&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80_M91& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80_M91* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80_M91*>(
        &_Message1_M7_M18_M39_M45_M54_M80_M91_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 67;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80_M91& a, Message1_M7_M18_M39_M45_M54_M80_M91& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80_M91* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80_M91* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80_M91* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80_M91>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80_M91& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80_M91& from) { Message1_M7_M18_M39_M45_M54_M80_M91::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80_M91* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80_M91(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80_M91(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80_M91& from);
  Message1_M7_M18_M39_M45_M54_M80_M91(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80_M91&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80_M91(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M96 = Message1_M7_M18_M39_M45_M54_M80_M91_M96;
  using M97 = Message1_M7_M18_M39_M45_M54_M80_M91_M97;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2(i).data())), f_2(i).size()));
      }
      mutable_f_6()->generate_schema(schema);
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2(i).c_str())));
        sizes_list.push_back(f_2(i).size());
      }
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2(i).c_str())));
      }
      mutable_f_6()->generate_scatter_ptrs(ptrs);
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        sizes.push_back(f_2(i).size());
      }
      mutable_f_6()->generate_scatter_sizes(sizes);
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_2(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2(i).c_str())));
      }
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_2(std::move(tmp_str));
      }
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 6,
    kF6FieldNumber = 7,
    kF7FieldNumber = 8,
    kF1FieldNumber = 5,
    kF0FieldNumber = 3,
  };
  // repeated bytes f_2 = 6;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  const std::string& f_2(int index) const;
  std::string* mutable_f_2(int index);
  void set_f_2(int index, const std::string& value);
  void set_f_2(int index, std::string&& value);
  void set_f_2(int index, const char* value);
  void set_f_2(int index, const void* value, std::size_t size);
  void set_f_2(int index, absl::string_view value);
  std::string* add_f_2();
  void add_f_2(const std::string& value);
  void add_f_2(std::string&& value);
  void add_f_2(const char* value);
  void add_f_2(const void* value, std::size_t size);
  void add_f_2(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_2() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* release_f_6();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96& _internal_f_6() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* _internal_mutable_f_6();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* release_f_7();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97& _internal_f_7() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* _internal_mutable_f_7();

  public:
  // optional int64 f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional float f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_M91_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_2_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* f_6_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* f_7_;
    ::int64_t f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M116 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>& f_2() const;
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116 > f_2_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6_M16 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6.M16) */ {
 public:
  inline Message1_M6_M16() : Message1_M6_M16(nullptr) {}
  ~Message1_M6_M16() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6_M16(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6_M16(const Message1_M6_M16& from) : Message1_M6_M16(nullptr, from) {}
  inline Message1_M6_M16(Message1_M6_M16&& from) noexcept
      : Message1_M6_M16(nullptr, std::move(from)) {}
  inline Message1_M6_M16& operator=(const Message1_M6_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6_M16& operator=(Message1_M6_M16&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6_M16& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6_M16* internal_default_instance() {
    return reinterpret_cast<const Message1_M6_M16*>(
        &_Message1_M6_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Message1_M6_M16& a, Message1_M6_M16& b) { a.Swap(&b); }
  inline void Swap(Message1_M6_M16* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6_M16* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6_M16* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6_M16>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6_M16& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6_M16& from) { Message1_M6_M16::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6_M16* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6.M16"; }

 protected:
  explicit Message1_M6_M16(::google::protobuf::Arena* arena);
  Message1_M6_M16(::google::protobuf::Arena* arena, const Message1_M6_M16& from);
  Message1_M6_M16(::google::protobuf::Arena* arena, Message1_M6_M16&& from) noexcept
      : Message1_M6_M16(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M38 = Message1_M6_M16_M38;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M6.M16.M38 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M6_M16_M38& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M16_M38* release_f_1();
  ::fleetbench::proto::Message1_M6_M16_M38* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M6_M16_M38* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M6_M16_M38* value);
  ::fleetbench::proto::Message1_M6_M16_M38* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M6_M16_M38& _internal_f_1() const;
  ::fleetbench::proto::Message1_M6_M16_M38* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6.M16)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_M16_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M6_M16_M38* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22_M34 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22.M34) */ {
 public:
  inline Message1_M2_M22_M34() : Message1_M2_M22_M34(nullptr) {}
  ~Message1_M2_M22_M34() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22_M34(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22_M34(const Message1_M2_M22_M34& from) : Message1_M2_M22_M34(nullptr, from) {}
  inline Message1_M2_M22_M34(Message1_M2_M22_M34&& from) noexcept
      : Message1_M2_M22_M34(nullptr, std::move(from)) {}
  inline Message1_M2_M22_M34& operator=(const Message1_M2_M22_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22_M34& operator=(Message1_M2_M22_M34&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22_M34& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22_M34* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22_M34*>(
        &_Message1_M2_M22_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message1_M2_M22_M34& a, Message1_M2_M22_M34& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22_M34* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22_M34* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22_M34* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22_M34>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22_M34& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22_M34& from) { Message1_M2_M22_M34::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22_M34* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22.M34"; }

 protected:
  explicit Message1_M2_M22_M34(::google::protobuf::Arena* arena);
  Message1_M2_M22_M34(::google::protobuf::Arena* arena, const Message1_M2_M22_M34& from);
  Message1_M2_M22_M34(::google::protobuf::Arena* arena, Message1_M2_M22_M34&& from) noexcept
      : Message1_M2_M22_M34(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M44 = Message1_M2_M22_M34_M44;
  using M48 = Message1_M2_M22_M34_M48;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M2.M22.M34.M48 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M2_M22_M34_M48* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M2_M22_M34_M48& f_2(int index) const;
  ::fleetbench::proto::Message1_M2_M22_M34_M48* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>& f_2() const;
  // optional .fleetbench.proto.Message1.M2.M22.M34.M44 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M2_M22_M34_M44& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M2_M22_M34_M44* release_f_1();
  ::fleetbench::proto::Message1_M2_M22_M34_M44* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34_M44* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34_M44* value);
  ::fleetbench::proto::Message1_M2_M22_M34_M44* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M2_M22_M34_M44& _internal_f_1() const;
  ::fleetbench::proto::Message1_M2_M22_M34_M44* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22.M34)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_M34_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M2_M22_M34_M48 > f_2_;
    ::fleetbench::proto::Message1_M2_M22_M34_M44* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37_M43 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37.M43) */ {
 public:
  inline Message1_M11_M23_M37_M43() : Message1_M11_M23_M37_M43(nullptr) {}
  ~Message1_M11_M23_M37_M43() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37_M43(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37_M43(const Message1_M11_M23_M37_M43& from) : Message1_M11_M23_M37_M43(nullptr, from) {}
  inline Message1_M11_M23_M37_M43(Message1_M11_M23_M37_M43&& from) noexcept
      : Message1_M11_M23_M37_M43(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37_M43& operator=(const Message1_M11_M23_M37_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37_M43& operator=(Message1_M11_M23_M37_M43&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37_M43& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37_M43* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37_M43*>(
        &_Message1_M11_M23_M37_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 109;
  friend void swap(Message1_M11_M23_M37_M43& a, Message1_M11_M23_M37_M43& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37_M43* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37_M43* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37_M43* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37_M43>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37_M43& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37_M43& from) { Message1_M11_M23_M37_M43::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37_M43* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37.M43"; }

 protected:
  explicit Message1_M11_M23_M37_M43(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37_M43(::google::protobuf::Arena* arena, const Message1_M11_M23_M37_M43& from);
  Message1_M11_M23_M37_M43(::google::protobuf::Arena* arena, Message1_M11_M23_M37_M43&& from) noexcept
      : Message1_M11_M23_M37_M43(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M58 = Message1_M11_M23_M37_M43_M58;
  using M62 = Message1_M11_M23_M37_M43_M62;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* release_f_2();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43_M58* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43_M58* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58& _internal_f_2() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* release_f_3();
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62& _internal_f_3() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37.M43)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_M43_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* f_2_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40_M49 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40.M49) */ {
 public:
  inline Message1_M10_M19_M40_M49() : Message1_M10_M19_M40_M49(nullptr) {}
  ~Message1_M10_M19_M40_M49() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40_M49(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40_M49(const Message1_M10_M19_M40_M49& from) : Message1_M10_M19_M40_M49(nullptr, from) {}
  inline Message1_M10_M19_M40_M49(Message1_M10_M19_M40_M49&& from) noexcept
      : Message1_M10_M19_M40_M49(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40_M49& operator=(const Message1_M10_M19_M40_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40_M49& operator=(Message1_M10_M19_M40_M49&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40_M49& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40_M49* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40_M49*>(
        &_Message1_M10_M19_M40_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 94;
  friend void swap(Message1_M10_M19_M40_M49& a, Message1_M10_M19_M40_M49& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40_M49* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40_M49* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40_M49* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40_M49>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40_M49& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40_M49& from) { Message1_M10_M19_M40_M49::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40_M49* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40.M49"; }

 protected:
  explicit Message1_M10_M19_M40_M49(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40_M49(::google::protobuf::Arena* arena, const Message1_M10_M19_M40_M49& from);
  Message1_M10_M19_M40_M49(::google::protobuf::Arena* arena, Message1_M10_M19_M40_M49&& from) noexcept
      : Message1_M10_M19_M40_M49(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M56 = Message1_M10_M19_M40_M49_M56;
  using M57 = Message1_M10_M19_M40_M49_M57;
  using M61 = Message1_M10_M19_M40_M49_M61;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M10.M19.M40.M49.M56 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M56* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M56& f_1(int index) const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M56* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>& f_1() const;
  // repeated .fleetbench.proto.Message1.M10.M19.M40.M49.M57 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57& f_2(int index) const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>& f_2() const;
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49.M61 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* release_f_3();
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M61* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M61* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61& _internal_f_3() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* _internal_mutable_f_3();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40.M49)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_M49_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M10_M19_M40_M49_M56 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M10_M19_M40_M49_M57 > f_2_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* f_3_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M25_M31 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M25.M31) */ {
 public:
  inline Message1_M1_M25_M31() : Message1_M1_M25_M31(nullptr) {}
  ~Message1_M1_M25_M31() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M25_M31(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M25_M31(const Message1_M1_M25_M31& from) : Message1_M1_M25_M31(nullptr, from) {}
  inline Message1_M1_M25_M31(Message1_M1_M25_M31&& from) noexcept
      : Message1_M1_M25_M31(nullptr, std::move(from)) {}
  inline Message1_M1_M25_M31& operator=(const Message1_M1_M25_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M25_M31& operator=(Message1_M1_M25_M31&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M25_M31& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M25_M31* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M25_M31*>(
        &_Message1_M1_M25_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Message1_M1_M25_M31& a, Message1_M1_M25_M31& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M25_M31* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M25_M31* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M25_M31* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M25_M31>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M25_M31& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M25_M31& from) { Message1_M1_M25_M31::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M25_M31* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M25.M31"; }

 protected:
  explicit Message1_M1_M25_M31(::google::protobuf::Arena* arena);
  Message1_M1_M25_M31(::google::protobuf::Arena* arena, const Message1_M1_M25_M31& from);
  Message1_M1_M25_M31(::google::protobuf::Arena* arena, Message1_M1_M25_M31&& from) noexcept
      : Message1_M1_M25_M31(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M51 = Message1_M1_M25_M31_M51;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_12())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      mutable_f_15()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_12()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      mutable_f_15()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      mutable_f_15()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      sizes.push_back(end_addr - start_addr + sizeof(f_12()));
      sizes.push_back(f_4().size());
      sizes.push_back(f_5().size());
      sizes.push_back(f_9().size());
      mutable_f_15()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      idx = mutable_f_15()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      idx = mutable_f_15()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF9FieldNumber = 11,
    kF15FieldNumber = 16,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF7FieldNumber = 9,
    kF8FieldNumber = 10,
    kF6FieldNumber = 8,
    kF11FieldNumber = 14,
    kF10FieldNumber = 13,
    kF12FieldNumber = 15,
  };
  // optional string f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional bytes f_9 = 11;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional .fleetbench.proto.Message1.M1.M25.M31.M51 f_15 = 16;
  bool has_f_15() const;
  void clear_f_15() ;
  const ::fleetbench::proto::Message1_M1_M25_M31_M51& f_15() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1_M25_M31_M51* release_f_15();
  ::fleetbench::proto::Message1_M1_M25_M31_M51* mutable_f_15();
  void set_allocated_f_15(::fleetbench::proto::Message1_M1_M25_M31_M51* value);
  void unsafe_arena_set_allocated_f_15(::fleetbench::proto::Message1_M1_M25_M31_M51* value);
  ::fleetbench::proto::Message1_M1_M25_M31_M51* unsafe_arena_release_f_15();

  private:
  const ::fleetbench::proto::Message1_M1_M25_M31_M51& _internal_f_15() const;
  ::fleetbench::proto::Message1_M1_M25_M31_M51* _internal_mutable_f_15();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional uint32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional float f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  float f_2() const;
  void set_f_2(float value);

  private:
  float _internal_f_2() const;
  void _internal_set_f_2(float value);

  public:
  // optional int64 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional int64 f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // optional int64 f_8 = 10;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int64_t f_8() const;
  void set_f_8(::int64_t value);

  private:
  ::int64_t _internal_f_8() const;
  void _internal_set_f_8(::int64_t value);

  public:
  // optional float f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  float f_6() const;
  void set_f_6(float value);

  private:
  float _internal_f_6() const;
  void _internal_set_f_6(float value);

  public:
  // optional int32 f_11 = 14;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int32_t f_11() const;
  void set_f_11(::int32_t value);

  private:
  ::int32_t _internal_f_11() const;
  void _internal_set_f_11(::int32_t value);

  public:
  // optional int64 f_10 = 13;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int64_t f_10() const;
  void set_f_10(::int64_t value);

  private:
  ::int64_t _internal_f_10() const;
  void _internal_set_f_10(::int64_t value);

  public:
  // optional float f_12 = 15;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M25.M31)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 1,
      59, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M25_M31_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::fleetbench::proto::Message1_M1_M25_M31_M51* f_15_;
    ::int64_t f_1_;
    ::uint32_t f_0_;
    float f_2_;
    ::int64_t f_3_;
    ::int64_t f_7_;
    ::int64_t f_8_;
    float f_6_;
    ::int32_t f_11_;
    ::int64_t f_10_;
    float f_12_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54_M80 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54_M80() : Message1_M7_M18_M39_M45_M54_M80(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54_M80() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54_M80(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54_M80(const Message1_M7_M18_M39_M45_M54_M80& from) : Message1_M7_M18_M39_M45_M54_M80(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54_M80(Message1_M7_M18_M39_M45_M54_M80&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54_M80& operator=(const Message1_M7_M18_M39_M45_M54_M80& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54_M80& operator=(Message1_M7_M18_M39_M45_M54_M80&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54_M80& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54_M80* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54_M80*>(
        &_Message1_M7_M18_M39_M45_M54_M80_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 69;
  friend void swap(Message1_M7_M18_M39_M45_M54_M80& a, Message1_M7_M18_M39_M45_M54_M80& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54_M80* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54_M80* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54_M80* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54_M80>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54_M80& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54_M80& from) { Message1_M7_M18_M39_M45_M54_M80::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54_M80* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54_M80(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54_M80(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54_M80& from);
  Message1_M7_M18_M39_M45_M54_M80(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54_M80&& from) noexcept
      : Message1_M7_M18_M39_M45_M54_M80(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M91 = Message1_M7_M18_M39_M45_M54_M80_M91;
  using M94 = Message1_M7_M18_M39_M45_M54_M80_M94;
  using E24 = Message1_M7_M18_M39_M45_M54_M80_E24;
  static constexpr E24 E24_UNSPECIFIED = Message1_M7_M18_M39_M45_M54_M80_E24_E24_UNSPECIFIED;
  static constexpr E24 E24_CONST_1 = Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_1;
  static constexpr E24 E24_CONST_2 = Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_2;
  static constexpr E24 E24_CONST_3 = Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_3;
  static constexpr E24 E24_CONST_4 = Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_4;
  static constexpr E24 E24_CONST_5 = Message1_M7_M18_M39_M45_M54_M80_E24_E24_CONST_5;
  static inline bool E24_IsValid(int value) {
    return Message1_M7_M18_M39_M45_M54_M80_E24_IsValid(value);
  }
  static constexpr E24 E24_MIN = Message1_M7_M18_M39_M45_M54_M80_E24_E24_MIN;
  static constexpr E24 E24_MAX = Message1_M7_M18_M39_M45_M54_M80_E24_E24_MAX;
  static constexpr int E24_ARRAYSIZE = Message1_M7_M18_M39_M45_M54_M80_E24_E24_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E24_descriptor() {
    return Message1_M7_M18_M39_M45_M54_M80_E24_descriptor();
  }
  template <typename T>
  static inline const std::string& E24_Name(T value) {
    return Message1_M7_M18_M39_M45_M54_M80_E24_Name(value);
  }
  static inline bool E24_Parse(absl::string_view name, E24* value) {
    return Message1_M7_M18_M39_M45_M54_M80_E24_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>& f_1() const;
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>& f_2() const;
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.E24 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_M80_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94 > f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M115 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M6) */ {
 public:
  inline Message1_M6() : Message1_M6(nullptr) {}
  ~Message1_M6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M6(const Message1_M6& from) : Message1_M6(nullptr, from) {}
  inline Message1_M6(Message1_M6&& from) noexcept
      : Message1_M6(nullptr, std::move(from)) {}
  inline Message1_M6& operator=(const Message1_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M6& operator=(Message1_M6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M6* internal_default_instance() {
    return reinterpret_cast<const Message1_M6*>(
        &_Message1_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(Message1_M6& a, Message1_M6& b) { a.Swap(&b); }
  inline void Swap(Message1_M6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M6& from) { Message1_M6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M6"; }

 protected:
  explicit Message1_M6(::google::protobuf::Arena* arena);
  Message1_M6(::google::protobuf::Arena* arena, const Message1_M6& from);
  Message1_M6(::google::protobuf::Arena* arena, Message1_M6&& from) noexcept
      : Message1_M6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M16 = Message1_M6_M16;
  using M24 = Message1_M6_M24;
  using M27 = Message1_M6_M27;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF4FieldNumber = 6,
    kF6FieldNumber = 9,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M6.M16 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M6_M16& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M16* release_f_1();
  ::fleetbench::proto::Message1_M6_M16* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M6_M16* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M6_M16* value);
  ::fleetbench::proto::Message1_M6_M16* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M6_M16& _internal_f_1() const;
  ::fleetbench::proto::Message1_M6_M16* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M6.M24 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M6_M24& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M24* release_f_4();
  ::fleetbench::proto::Message1_M6_M24* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M6_M24* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M6_M24* value);
  ::fleetbench::proto::Message1_M6_M24* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M6_M24& _internal_f_4() const;
  ::fleetbench::proto::Message1_M6_M24* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message1.M6.M27 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message1_M6_M27& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6_M27* release_f_6();
  ::fleetbench::proto::Message1_M6_M27* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message1_M6_M27* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M6_M27* value);
  ::fleetbench::proto::Message1_M6_M27* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message1_M6_M27& _internal_f_6() const;
  ::fleetbench::proto::Message1_M6_M27* _internal_mutable_f_6();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M6_M16* f_1_;
    ::fleetbench::proto::Message1_M6_M24* f_4_;
    ::fleetbench::proto::Message1_M6_M27* f_6_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2_M22 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2.M22) */ {
 public:
  inline Message1_M2_M22() : Message1_M2_M22(nullptr) {}
  ~Message1_M2_M22() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2_M22(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2_M22(const Message1_M2_M22& from) : Message1_M2_M22(nullptr, from) {}
  inline Message1_M2_M22(Message1_M2_M22&& from) noexcept
      : Message1_M2_M22(nullptr, std::move(from)) {}
  inline Message1_M2_M22& operator=(const Message1_M2_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2_M22& operator=(Message1_M2_M22&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2_M22& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2_M22* internal_default_instance() {
    return reinterpret_cast<const Message1_M2_M22*>(
        &_Message1_M2_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Message1_M2_M22& a, Message1_M2_M22& b) { a.Swap(&b); }
  inline void Swap(Message1_M2_M22* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2_M22* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2_M22* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2_M22>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2_M22& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2_M22& from) { Message1_M2_M22::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2_M22* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2.M22"; }

 protected:
  explicit Message1_M2_M22(::google::protobuf::Arena* arena);
  Message1_M2_M22(::google::protobuf::Arena* arena, const Message1_M2_M22& from);
  Message1_M2_M22(::google::protobuf::Arena* arena, Message1_M2_M22&& from) noexcept
      : Message1_M2_M22(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M34 = Message1_M2_M22_M34;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M2.M22.M34 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M2_M22_M34& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M2_M22_M34* release_f_1();
  ::fleetbench::proto::Message1_M2_M22_M34* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34* value);
  ::fleetbench::proto::Message1_M2_M22_M34* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M2_M22_M34& _internal_f_1() const;
  ::fleetbench::proto::Message1_M2_M22_M34* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2.M22)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_M22_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M2_M22_M34* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23_M37 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23.M37) */ {
 public:
  inline Message1_M11_M23_M37() : Message1_M11_M23_M37(nullptr) {}
  ~Message1_M11_M23_M37() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23_M37(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23_M37(const Message1_M11_M23_M37& from) : Message1_M11_M23_M37(nullptr, from) {}
  inline Message1_M11_M23_M37(Message1_M11_M23_M37&& from) noexcept
      : Message1_M11_M23_M37(nullptr, std::move(from)) {}
  inline Message1_M11_M23_M37& operator=(const Message1_M11_M23_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23_M37& operator=(Message1_M11_M23_M37&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23_M37& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23_M37* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23_M37*>(
        &_Message1_M11_M23_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 110;
  friend void swap(Message1_M11_M23_M37& a, Message1_M11_M23_M37& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23_M37* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23_M37* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23_M37* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23_M37>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23_M37& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23_M37& from) { Message1_M11_M23_M37::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23_M37* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23.M37"; }

 protected:
  explicit Message1_M11_M23_M37(::google::protobuf::Arena* arena);
  Message1_M11_M23_M37(::google::protobuf::Arena* arena, const Message1_M11_M23_M37& from);
  Message1_M11_M23_M37(::google::protobuf::Arena* arena, Message1_M11_M23_M37&& from) noexcept
      : Message1_M11_M23_M37(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M43 = Message1_M11_M23_M37_M43;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M11.M23.M37.M43 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M11_M23_M37_M43& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M23_M37_M43* release_f_2();
  ::fleetbench::proto::Message1_M11_M23_M37_M43* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43* value);
  ::fleetbench::proto::Message1_M11_M23_M37_M43* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M11_M23_M37_M43& _internal_f_2() const;
  ::fleetbench::proto::Message1_M11_M23_M37_M43* _internal_mutable_f_2();

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23.M37)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_M37_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M11_M23_M37_M43* f_2_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19_M40 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19.M40) */ {
 public:
  inline Message1_M10_M19_M40() : Message1_M10_M19_M40(nullptr) {}
  ~Message1_M10_M19_M40() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19_M40(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19_M40(const Message1_M10_M19_M40& from) : Message1_M10_M19_M40(nullptr, from) {}
  inline Message1_M10_M19_M40(Message1_M10_M19_M40&& from) noexcept
      : Message1_M10_M19_M40(nullptr, std::move(from)) {}
  inline Message1_M10_M19_M40& operator=(const Message1_M10_M19_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19_M40& operator=(Message1_M10_M19_M40&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19_M40& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19_M40* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19_M40*>(
        &_Message1_M10_M19_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 95;
  friend void swap(Message1_M10_M19_M40& a, Message1_M10_M19_M40& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19_M40* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19_M40* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19_M40* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19_M40>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19_M40& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19_M40& from) { Message1_M10_M19_M40::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19_M40* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19.M40"; }

 protected:
  explicit Message1_M10_M19_M40(::google::protobuf::Arena* arena);
  Message1_M10_M19_M40(::google::protobuf::Arena* arena, const Message1_M10_M19_M40& from);
  Message1_M10_M19_M40(::google::protobuf::Arena* arena, Message1_M10_M19_M40&& from) noexcept
      : Message1_M10_M19_M40(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M49 = Message1_M10_M19_M40_M49;
  using E9 = Message1_M10_M19_M40_E9;
  static constexpr E9 E9_UNSPECIFIED = Message1_M10_M19_M40_E9_E9_UNSPECIFIED;
  static constexpr E9 E9_CONST_1 = Message1_M10_M19_M40_E9_E9_CONST_1;
  static constexpr E9 E9_CONST_2 = Message1_M10_M19_M40_E9_E9_CONST_2;
  static constexpr E9 E9_CONST_3 = Message1_M10_M19_M40_E9_E9_CONST_3;
  static constexpr E9 E9_CONST_4 = Message1_M10_M19_M40_E9_E9_CONST_4;
  static constexpr E9 E9_CONST_5 = Message1_M10_M19_M40_E9_E9_CONST_5;
  static inline bool E9_IsValid(int value) {
    return Message1_M10_M19_M40_E9_IsValid(value);
  }
  static constexpr E9 E9_MIN = Message1_M10_M19_M40_E9_E9_MIN;
  static constexpr E9 E9_MAX = Message1_M10_M19_M40_E9_E9_MAX;
  static constexpr int E9_ARRAYSIZE = Message1_M10_M19_M40_E9_E9_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E9_descriptor() {
    return Message1_M10_M19_M40_E9_descriptor();
  }
  template <typename T>
  static inline const std::string& E9_Name(T value) {
    return Message1_M10_M19_M40_E9_Name(value);
  }
  static inline bool E9_Parse(absl::string_view name, E9* value) {
    return Message1_M10_M19_M40_E9_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M10.M19.M40.M49 f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M10_M19_M40_M49& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40_M49* release_f_1();
  ::fleetbench::proto::Message1_M10_M19_M40_M49* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49* value);
  ::fleetbench::proto::Message1_M10_M19_M40_M49* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40_M49& _internal_f_1() const;
  ::fleetbench::proto::Message1_M10_M19_M40_M49* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M40.E9 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M10_M19_M40_E9 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M10_M19_M40_E9 value);

  private:
  ::fleetbench::proto::Message1_M10_M19_M40_E9 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M10_M19_M40_E9 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19.M40)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_M40_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M10_M19_M40_M49* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1_M25 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1.M25) */ {
 public:
  inline Message1_M1_M25() : Message1_M1_M25(nullptr) {}
  ~Message1_M1_M25() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1_M25(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1_M25(const Message1_M1_M25& from) : Message1_M1_M25(nullptr, from) {}
  inline Message1_M1_M25(Message1_M1_M25&& from) noexcept
      : Message1_M1_M25(nullptr, std::move(from)) {}
  inline Message1_M1_M25& operator=(const Message1_M1_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1_M25& operator=(Message1_M1_M25&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1_M25& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1_M25* internal_default_instance() {
    return reinterpret_cast<const Message1_M1_M25*>(
        &_Message1_M1_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message1_M1_M25& a, Message1_M1_M25& b) { a.Swap(&b); }
  inline void Swap(Message1_M1_M25* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1_M25* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1_M25* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1_M25>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1_M25& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1_M25& from) { Message1_M1_M25::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1_M25* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1.M25"; }

 protected:
  explicit Message1_M1_M25(::google::protobuf::Arena* arena);
  Message1_M1_M25(::google::protobuf::Arena* arena, const Message1_M1_M25& from);
  Message1_M1_M25(::google::protobuf::Arena* arena, Message1_M1_M25&& from) noexcept
      : Message1_M1_M25(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M31 = Message1_M1_M25_M31;
  using E4 = Message1_M1_M25_E4;
  static constexpr E4 E4_UNSPECIFIED = Message1_M1_M25_E4_E4_UNSPECIFIED;
  static constexpr E4 E4_CONST_1 = Message1_M1_M25_E4_E4_CONST_1;
  static constexpr E4 E4_CONST_2 = Message1_M1_M25_E4_E4_CONST_2;
  static constexpr E4 E4_CONST_3 = Message1_M1_M25_E4_E4_CONST_3;
  static constexpr E4 E4_CONST_4 = Message1_M1_M25_E4_E4_CONST_4;
  static constexpr E4 E4_CONST_5 = Message1_M1_M25_E4_E4_CONST_5;
  static inline bool E4_IsValid(int value) {
    return Message1_M1_M25_E4_IsValid(value);
  }
  static constexpr E4 E4_MIN = Message1_M1_M25_E4_E4_MIN;
  static constexpr E4 E4_MAX = Message1_M1_M25_E4_E4_MAX;
  static constexpr int E4_ARRAYSIZE = Message1_M1_M25_E4_E4_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E4_descriptor() {
    return Message1_M1_M25_E4_descriptor();
  }
  template <typename T>
  static inline const std::string& E4_Name(T value) {
    return Message1_M1_M25_E4_Name(value);
  }
  static inline bool E4_Parse(absl::string_view name, E4* value) {
    return Message1_M1_M25_E4_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M1.M25.M31 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M1_M25_M31& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1_M25_M31* release_f_1();
  ::fleetbench::proto::Message1_M1_M25_M31* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31* value);
  ::fleetbench::proto::Message1_M1_M25_M31* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M1_M25_M31& _internal_f_1() const;
  ::fleetbench::proto::Message1_M1_M25_M31* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M1.M25.E4 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M1_M25_E4 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M1_M25_E4 value);

  private:
  ::fleetbench::proto::Message1_M1_M25_E4 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M1_M25_E4 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1.M25)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_M25_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M1_M25_M31* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45_M54 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45.M54) */ {
 public:
  inline Message1_M7_M18_M39_M45_M54() : Message1_M7_M18_M39_M45_M54(nullptr) {}
  ~Message1_M7_M18_M39_M45_M54() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45_M54(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45_M54(const Message1_M7_M18_M39_M45_M54& from) : Message1_M7_M18_M39_M45_M54(nullptr, from) {}
  inline Message1_M7_M18_M39_M45_M54(Message1_M7_M18_M39_M45_M54&& from) noexcept
      : Message1_M7_M18_M39_M45_M54(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45_M54& operator=(const Message1_M7_M18_M39_M45_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45_M54& operator=(Message1_M7_M18_M39_M45_M54&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45_M54& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45_M54* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45_M54*>(
        &_Message1_M7_M18_M39_M45_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 72;
  friend void swap(Message1_M7_M18_M39_M45_M54& a, Message1_M7_M18_M39_M45_M54& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45_M54* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45_M54* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45_M54* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45_M54>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45_M54& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45_M54& from) { Message1_M7_M18_M39_M45_M54::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45_M54* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45.M54"; }

 protected:
  explicit Message1_M7_M18_M39_M45_M54(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45_M54(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45_M54& from);
  Message1_M7_M18_M39_M45_M54(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45_M54&& from) noexcept
      : Message1_M7_M18_M39_M45_M54(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M77 = Message1_M7_M18_M39_M45_M54_M77;
  using M80 = Message1_M7_M18_M39_M45_M54_M80;
  using M82 = Message1_M7_M18_M39_M45_M54_M82;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>& f_1() const;
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82& f_3(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>& f_3() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* release_f_2();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45.M54)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_M54_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82 > f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M114 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 6,
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* release_f_3();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* _internal_mutable_f_3();

  public:
  // optional uint64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* f_3_;
    ::uint64_t f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M2) */ {
 public:
  inline Message1_M2() : Message1_M2(nullptr) {}
  ~Message1_M2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M2(const Message1_M2& from) : Message1_M2(nullptr, from) {}
  inline Message1_M2(Message1_M2&& from) noexcept
      : Message1_M2(nullptr, std::move(from)) {}
  inline Message1_M2& operator=(const Message1_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M2& operator=(Message1_M2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M2* internal_default_instance() {
    return reinterpret_cast<const Message1_M2*>(
        &_Message1_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Message1_M2& a, Message1_M2& b) { a.Swap(&b); }
  inline void Swap(Message1_M2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M2& from) { Message1_M2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M2"; }

 protected:
  explicit Message1_M2(::google::protobuf::Arena* arena);
  Message1_M2(::google::protobuf::Arena* arena, const Message1_M2& from);
  Message1_M2(::google::protobuf::Arena* arena, Message1_M2&& from) noexcept
      : Message1_M2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M22 = Message1_M2_M22;
  using M29 = Message1_M2_M29;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M2.M22 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M2_M22* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M2_M22& f_1(int index) const;
  ::fleetbench::proto::Message1_M2_M22* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>& f_1() const;
  // repeated .fleetbench.proto.Message1.M2.M29 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M2_M29* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M2_M29& f_2(int index) const;
  ::fleetbench::proto::Message1_M2_M29* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>& f_2() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M2_M22 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M2_M29 > f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11_M23 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11.M23) */ {
 public:
  inline Message1_M11_M23() : Message1_M11_M23(nullptr) {}
  ~Message1_M11_M23() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11_M23(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11_M23(const Message1_M11_M23& from) : Message1_M11_M23(nullptr, from) {}
  inline Message1_M11_M23(Message1_M11_M23&& from) noexcept
      : Message1_M11_M23(nullptr, std::move(from)) {}
  inline Message1_M11_M23& operator=(const Message1_M11_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11_M23& operator=(Message1_M11_M23&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11_M23& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11_M23* internal_default_instance() {
    return reinterpret_cast<const Message1_M11_M23*>(
        &_Message1_M11_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 111;
  friend void swap(Message1_M11_M23& a, Message1_M11_M23& b) { a.Swap(&b); }
  inline void Swap(Message1_M11_M23* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11_M23* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11_M23* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11_M23>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11_M23& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11_M23& from) { Message1_M11_M23::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11_M23* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11.M23"; }

 protected:
  explicit Message1_M11_M23(::google::protobuf::Arena* arena);
  Message1_M11_M23(::google::protobuf::Arena* arena, const Message1_M11_M23& from);
  Message1_M11_M23(::google::protobuf::Arena* arena, Message1_M11_M23&& from) noexcept
      : Message1_M11_M23(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M37 = Message1_M11_M23_M37;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M11.M23.M37 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M11_M23_M37* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M11_M23_M37& f_2(int index) const;
  ::fleetbench::proto::Message1_M11_M23_M37* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>& f_2() const;
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11.M23)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_M23_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M11_M23_M37 > f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10_M19 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10.M19) */ {
 public:
  inline Message1_M10_M19() : Message1_M10_M19(nullptr) {}
  ~Message1_M10_M19() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10_M19(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10_M19(const Message1_M10_M19& from) : Message1_M10_M19(nullptr, from) {}
  inline Message1_M10_M19(Message1_M10_M19&& from) noexcept
      : Message1_M10_M19(nullptr, std::move(from)) {}
  inline Message1_M10_M19& operator=(const Message1_M10_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10_M19& operator=(Message1_M10_M19&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10_M19& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10_M19* internal_default_instance() {
    return reinterpret_cast<const Message1_M10_M19*>(
        &_Message1_M10_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 97;
  friend void swap(Message1_M10_M19& a, Message1_M10_M19& b) { a.Swap(&b); }
  inline void Swap(Message1_M10_M19* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10_M19* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10_M19* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10_M19>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10_M19& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10_M19& from) { Message1_M10_M19::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10_M19* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10.M19"; }

 protected:
  explicit Message1_M10_M19(::google::protobuf::Arena* arena);
  Message1_M10_M19(::google::protobuf::Arena* arena, const Message1_M10_M19& from);
  Message1_M10_M19(::google::protobuf::Arena* arena, Message1_M10_M19&& from) noexcept
      : Message1_M10_M19(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M40 = Message1_M10_M19_M40;
  using M42 = Message1_M10_M19_M42;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 5,
    kF5FieldNumber = 7,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M10.M19.M40 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M10_M19_M40& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M40* release_f_2();
  ::fleetbench::proto::Message1_M10_M19_M40* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40* value);
  ::fleetbench::proto::Message1_M10_M19_M40* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M40& _internal_f_2() const;
  ::fleetbench::proto::Message1_M10_M19_M40* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M10.M19.M42 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message1_M10_M19_M42& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19_M42* release_f_5();
  ::fleetbench::proto::Message1_M10_M19_M42* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M42* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M42* value);
  ::fleetbench::proto::Message1_M10_M19_M42* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message1_M10_M19_M42& _internal_f_5() const;
  ::fleetbench::proto::Message1_M10_M19_M42* _internal_mutable_f_5();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10.M19)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_M19_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M10_M19_M40* f_2_;
    ::fleetbench::proto::Message1_M10_M19_M42* f_5_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M1) */ {
 public:
  inline Message1_M1() : Message1_M1(nullptr) {}
  ~Message1_M1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M1(const Message1_M1& from) : Message1_M1(nullptr, from) {}
  inline Message1_M1(Message1_M1&& from) noexcept
      : Message1_M1(nullptr, std::move(from)) {}
  inline Message1_M1& operator=(const Message1_M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M1& operator=(Message1_M1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M1* internal_default_instance() {
    return reinterpret_cast<const Message1_M1*>(
        &_Message1_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message1_M1& a, Message1_M1& b) { a.Swap(&b); }
  inline void Swap(Message1_M1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M1& from) { Message1_M1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M1"; }

 protected:
  explicit Message1_M1(::google::protobuf::Arena* arena);
  Message1_M1(::google::protobuf::Arena* arena, const Message1_M1& from);
  Message1_M1(::google::protobuf::Arena* arena, Message1_M1&& from) noexcept
      : Message1_M1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M21 = Message1_M1_M21;
  using M25 = Message1_M1_M25;
  using M26 = Message1_M1_M26;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF1FieldNumber = 3,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M1.M25 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message1_M1_M25* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message1_M1_M25& f_3(int index) const;
  ::fleetbench::proto::Message1_M1_M25* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>& f_3() const;
  // optional .fleetbench.proto.Message1.M1.M21 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M1_M21& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1_M21* release_f_1();
  ::fleetbench::proto::Message1_M1_M21* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M1_M21* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M21* value);
  ::fleetbench::proto::Message1_M1_M21* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M1_M21& _internal_f_1() const;
  ::fleetbench::proto::Message1_M1_M21* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M1.M26 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message1_M1_M26& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1_M26* release_f_4();
  ::fleetbench::proto::Message1_M1_M26* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message1_M1_M26* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M1_M26* value);
  ::fleetbench::proto::Message1_M1_M26* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message1_M1_M26& _internal_f_4() const;
  ::fleetbench::proto::Message1_M1_M26* _internal_mutable_f_4();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M1_M25 > f_3_;
    ::fleetbench::proto::Message1_M1_M21* f_1_;
    ::fleetbench::proto::Message1_M1_M26* f_4_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39_M45 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39.M45) */ {
 public:
  inline Message1_M7_M18_M39_M45() : Message1_M7_M18_M39_M45(nullptr) {}
  ~Message1_M7_M18_M39_M45() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39_M45(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39_M45(const Message1_M7_M18_M39_M45& from) : Message1_M7_M18_M39_M45(nullptr, from) {}
  inline Message1_M7_M18_M39_M45(Message1_M7_M18_M39_M45&& from) noexcept
      : Message1_M7_M18_M39_M45(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39_M45& operator=(const Message1_M7_M18_M39_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39_M45& operator=(Message1_M7_M18_M39_M45&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39_M45& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39_M45* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39_M45*>(
        &_Message1_M7_M18_M39_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 80;
  friend void swap(Message1_M7_M18_M39_M45& a, Message1_M7_M18_M39_M45& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39_M45* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39_M45* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39_M45* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39_M45>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39_M45& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39_M45& from) { Message1_M7_M18_M39_M45::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39_M45* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39.M45"; }

 protected:
  explicit Message1_M7_M18_M39_M45(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39_M45(::google::protobuf::Arena* arena, const Message1_M7_M18_M39_M45& from);
  Message1_M7_M18_M39_M45(::google::protobuf::Arena* arena, Message1_M7_M18_M39_M45&& from) noexcept
      : Message1_M7_M18_M39_M45(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M54 = Message1_M7_M18_M39_M45_M54;
  using M59 = Message1_M7_M18_M39_M45_M59;
  using E20 = Message1_M7_M18_M39_M45_E20;
  static constexpr E20 E20_UNSPECIFIED = Message1_M7_M18_M39_M45_E20_E20_UNSPECIFIED;
  static constexpr E20 E20_CONST_1 = Message1_M7_M18_M39_M45_E20_E20_CONST_1;
  static constexpr E20 E20_CONST_2 = Message1_M7_M18_M39_M45_E20_E20_CONST_2;
  static constexpr E20 E20_CONST_3 = Message1_M7_M18_M39_M45_E20_E20_CONST_3;
  static constexpr E20 E20_CONST_4 = Message1_M7_M18_M39_M45_E20_E20_CONST_4;
  static constexpr E20 E20_CONST_5 = Message1_M7_M18_M39_M45_E20_E20_CONST_5;
  static inline bool E20_IsValid(int value) {
    return Message1_M7_M18_M39_M45_E20_IsValid(value);
  }
  static constexpr E20 E20_MIN = Message1_M7_M18_M39_M45_E20_E20_MIN;
  static constexpr E20 E20_MAX = Message1_M7_M18_M39_M45_E20_E20_MAX;
  static constexpr int E20_ARRAYSIZE = Message1_M7_M18_M39_M45_E20_E20_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E20_descriptor() {
    return Message1_M7_M18_M39_M45_E20_descriptor();
  }
  template <typename T>
  static inline const std::string& E20_Name(T value) {
    return Message1_M7_M18_M39_M45_E20_Name(value);
  }
  static inline bool E20_Parse(absl::string_view name, E20* value) {
    return Message1_M7_M18_M39_M45_E20_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>& f_2() const;
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* release_f_3();
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45.E20 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_E20 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_E20 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_M45_E20 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_E20 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39.M45)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_M45_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39_M45_M54 > f_2_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* f_3_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M113 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>& f_1() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113 > f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M11 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M11) */ {
 public:
  inline Message1_M11() : Message1_M11(nullptr) {}
  ~Message1_M11() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M11(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M11(const Message1_M11& from) : Message1_M11(nullptr, from) {}
  inline Message1_M11(Message1_M11&& from) noexcept
      : Message1_M11(nullptr, std::move(from)) {}
  inline Message1_M11& operator=(const Message1_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M11& operator=(Message1_M11&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M11* internal_default_instance() {
    return reinterpret_cast<const Message1_M11*>(
        &_Message1_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 112;
  friend void swap(Message1_M11& a, Message1_M11& b) { a.Swap(&b); }
  inline void Swap(Message1_M11* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M11* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M11* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M11>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M11& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M11& from) { Message1_M11::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M11* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M11"; }

 protected:
  explicit Message1_M11(::google::protobuf::Arena* arena);
  Message1_M11(::google::protobuf::Arena* arena, const Message1_M11& from);
  Message1_M11(::google::protobuf::Arena* arena, Message1_M11&& from) noexcept
      : Message1_M11(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M20 = Message1_M11_M20;
  using M23 = Message1_M11_M23;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M11.M23 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M11_M23* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message1_M11_M23& f_4(int index) const;
  ::fleetbench::proto::Message1_M11_M23* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>& f_4() const;
  // optional .fleetbench.proto.Message1.M11.M20 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M11_M20& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M11_M20* release_f_2();
  ::fleetbench::proto::Message1_M11_M20* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M11_M20* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M20* value);
  ::fleetbench::proto::Message1_M11_M20* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M11_M20& _internal_f_2() const;
  ::fleetbench::proto::Message1_M11_M20* _internal_mutable_f_2();

  public:
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M11)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M11_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M11_M23 > f_4_;
    ::fleetbench::proto::Message1_M11_M20* f_2_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M10 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M10) */ {
 public:
  inline Message1_M10() : Message1_M10(nullptr) {}
  ~Message1_M10() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M10(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M10(const Message1_M10& from) : Message1_M10(nullptr, from) {}
  inline Message1_M10(Message1_M10&& from) noexcept
      : Message1_M10(nullptr, std::move(from)) {}
  inline Message1_M10& operator=(const Message1_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M10& operator=(Message1_M10&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M10& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M10* internal_default_instance() {
    return reinterpret_cast<const Message1_M10*>(
        &_Message1_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 98;
  friend void swap(Message1_M10& a, Message1_M10& b) { a.Swap(&b); }
  inline void Swap(Message1_M10* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M10* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M10* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M10>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M10& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M10& from) { Message1_M10::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M10* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M10"; }

 protected:
  explicit Message1_M10(::google::protobuf::Arena* arena);
  Message1_M10(::google::protobuf::Arena* arena, const Message1_M10& from);
  Message1_M10(::google::protobuf::Arena* arena, Message1_M10&& from) noexcept
      : Message1_M10(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M19 = Message1_M10_M19;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M10.M19 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M10_M19& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M10_M19* release_f_1();
  ::fleetbench::proto::Message1_M10_M19* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M10_M19* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19* value);
  ::fleetbench::proto::Message1_M10_M19* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M10_M19& _internal_f_1() const;
  ::fleetbench::proto::Message1_M10_M19* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M10)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M10_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M10_M19* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18_M39 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18.M39) */ {
 public:
  inline Message1_M7_M18_M39() : Message1_M7_M18_M39(nullptr) {}
  ~Message1_M7_M18_M39() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18_M39(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18_M39(const Message1_M7_M18_M39& from) : Message1_M7_M18_M39(nullptr, from) {}
  inline Message1_M7_M18_M39(Message1_M7_M18_M39&& from) noexcept
      : Message1_M7_M18_M39(nullptr, std::move(from)) {}
  inline Message1_M7_M18_M39& operator=(const Message1_M7_M18_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18_M39& operator=(Message1_M7_M18_M39&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18_M39& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18_M39* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18_M39*>(
        &_Message1_M7_M18_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 81;
  friend void swap(Message1_M7_M18_M39& a, Message1_M7_M18_M39& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18_M39* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18_M39* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18_M39* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18_M39>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18_M39& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18_M39& from) { Message1_M7_M18_M39::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18_M39* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18.M39"; }

 protected:
  explicit Message1_M7_M18_M39(::google::protobuf::Arena* arena);
  Message1_M7_M18_M39(::google::protobuf::Arena* arena, const Message1_M7_M18_M39& from);
  Message1_M7_M18_M39(::google::protobuf::Arena* arena, Message1_M7_M18_M39&& from) noexcept
      : Message1_M7_M18_M39(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M45 = Message1_M7_M18_M39_M45;
  using E8 = Message1_M7_M18_M39_E8;
  static constexpr E8 E8_UNSPECIFIED = Message1_M7_M18_M39_E8_E8_UNSPECIFIED;
  static constexpr E8 E8_CONST_1 = Message1_M7_M18_M39_E8_E8_CONST_1;
  static constexpr E8 E8_CONST_2 = Message1_M7_M18_M39_E8_E8_CONST_2;
  static constexpr E8 E8_CONST_3 = Message1_M7_M18_M39_E8_E8_CONST_3;
  static constexpr E8 E8_CONST_4 = Message1_M7_M18_M39_E8_E8_CONST_4;
  static constexpr E8 E8_CONST_5 = Message1_M7_M18_M39_E8_E8_CONST_5;
  static inline bool E8_IsValid(int value) {
    return Message1_M7_M18_M39_E8_IsValid(value);
  }
  static constexpr E8 E8_MIN = Message1_M7_M18_M39_E8_E8_MIN;
  static constexpr E8 E8_MAX = Message1_M7_M18_M39_E8_E8_MAX;
  static constexpr int E8_ARRAYSIZE = Message1_M7_M18_M39_E8_E8_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E8_descriptor() {
    return Message1_M7_M18_M39_E8_descriptor();
  }
  template <typename T>
  static inline const std::string& E8_Name(T value) {
    return Message1_M7_M18_M39_E8_Name(value);
  }
  static inline bool E8_Parse(absl::string_view name, E8* value) {
    return Message1_M7_M18_M39_E8_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M7.M18.M39.M45 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M18_M39_M45& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18_M39_M45* release_f_1();
  ::fleetbench::proto::Message1_M7_M18_M39_M45* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45* value);
  ::fleetbench::proto::Message1_M7_M18_M39_M45* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M18_M39_M45& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M18_M39_M45* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M7.M18.M39.E8 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message1_M7_M18_M39_E8 f_0() const;
  void set_f_0(::fleetbench::proto::Message1_M7_M18_M39_E8 value);

  private:
  ::fleetbench::proto::Message1_M7_M18_M39_E8 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_E8 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18.M39)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_M39_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M18_M39_M45* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M111 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111;
  using M112 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>& f_2() const;
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* release_f_1();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* _internal_mutable_f_1();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112 > f_2_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M18 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M18) */ {
 public:
  inline Message1_M7_M18() : Message1_M7_M18(nullptr) {}
  ~Message1_M7_M18() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M18(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M18(const Message1_M7_M18& from) : Message1_M7_M18(nullptr, from) {}
  inline Message1_M7_M18(Message1_M7_M18&& from) noexcept
      : Message1_M7_M18(nullptr, std::move(from)) {}
  inline Message1_M7_M18& operator=(const Message1_M7_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M18& operator=(Message1_M7_M18&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M18& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M18* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M18*>(
        &_Message1_M7_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 82;
  friend void swap(Message1_M7_M18& a, Message1_M7_M18& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M18* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M18* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M18* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M18>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M18& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M18& from) { Message1_M7_M18::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M18* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M18"; }

 protected:
  explicit Message1_M7_M18(::google::protobuf::Arena* arena);
  Message1_M7_M18(::google::protobuf::Arena* arena, const Message1_M7_M18& from);
  Message1_M7_M18(::google::protobuf::Arena* arena, Message1_M7_M18&& from) noexcept
      : Message1_M7_M18(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M32 = Message1_M7_M18_M32;
  using M39 = Message1_M7_M18_M39;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M18.M32 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M18_M32* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M32& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M32* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>& f_1() const;
  // repeated .fleetbench.proto.Message1.M7.M18.M39 f_3 = 6;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message1_M7_M18_M39* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message1_M7_M18_M39& f_3(int index) const;
  ::fleetbench::proto::Message1_M7_M18_M39* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>& f_3() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M18)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M18_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M32 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M18_M39 > f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M109 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109;
  using M110 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* release_f_3();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      78, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* f_2_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101() : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M105 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105;
  using M107 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>& f_1() const;
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107 f_3 = 5;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& f_3(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>& f_3() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107 > f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89_M95 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95() : Message1_M7_M14_M41_M47_M63_M70_M89_M95(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89_M95() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89_M95(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95(const Message1_M7_M14_M41_M47_M63_M70_M89_M95& from) : Message1_M7_M14_M41_M47_M63_M70_M89_M95(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95(Message1_M7_M14_M41_M47_M63_M70_M89_M95&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89_M95& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89_M95& operator=(Message1_M7_M14_M41_M47_M63_M70_M89_M95&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89_M95& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89_M95* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89_M95*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95& a, Message1_M7_M14_M41_M47_M63_M70_M89_M95& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89_M95* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89_M95* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89_M95>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89_M95& from) { Message1_M7_M14_M41_M47_M63_M70_M89_M95::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89_M95* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89_M95(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89_M95& from);
  Message1_M7_M14_M41_M47_M63_M70_M89_M95(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89_M95&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89_M95(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M101 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101;
  using M103 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103;
  using M104 = Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF3FieldNumber = 4,
    kF6FieldNumber = 8,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103 f_4 = 6;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& f_4(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>& f_4() const;
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* release_f_3();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* release_f_6();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& _internal_f_6() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* _internal_mutable_f_6();

  public:
  // optional int32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_M95_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103 > f_4_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* f_3_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* f_6_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70_M89 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70_M89() : Message1_M7_M14_M41_M47_M63_M70_M89(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70_M89() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70_M89(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70_M89(const Message1_M7_M14_M41_M47_M63_M70_M89& from) : Message1_M7_M14_M41_M47_M63_M70_M89(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89(Message1_M7_M14_M41_M47_M63_M70_M89&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70_M89& operator=(const Message1_M7_M14_M41_M47_M63_M70_M89& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70_M89& operator=(Message1_M7_M14_M41_M47_M63_M70_M89&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70_M89& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70_M89* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70_M89*>(
        &_Message1_M7_M14_M41_M47_M63_M70_M89_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70_M89& a, Message1_M7_M14_M41_M47_M63_M70_M89& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70_M89* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70_M89* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70_M89* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70_M89>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70_M89& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70_M89& from) { Message1_M7_M14_M41_M47_M63_M70_M89::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70_M89* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70_M89(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70_M89(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70_M89& from);
  Message1_M7_M14_M41_M47_M63_M70_M89(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70_M89&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70_M89(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M95 = Message1_M7_M14_M41_M47_M63_M70_M89_M95;
  using M99 = Message1_M7_M14_M41_M47_M63_M70_M89_M99;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* release_f_1();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95& _internal_f_1() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* _internal_mutable_f_2();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_M89_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* f_1_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* f_2_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63_M70 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63_M70() : Message1_M7_M14_M41_M47_M63_M70(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63_M70() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63_M70(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63_M70(const Message1_M7_M14_M41_M47_M63_M70& from) : Message1_M7_M14_M41_M47_M63_M70(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63_M70(Message1_M7_M14_M41_M47_M63_M70&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63_M70& operator=(const Message1_M7_M14_M41_M47_M63_M70& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63_M70& operator=(Message1_M7_M14_M41_M47_M63_M70&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63_M70& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63_M70* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63_M70*>(
        &_Message1_M7_M14_M41_M47_M63_M70_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(Message1_M7_M14_M41_M47_M63_M70& a, Message1_M7_M14_M41_M47_M63_M70& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63_M70* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63_M70* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63_M70* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63_M70>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63_M70& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63_M70& from) { Message1_M7_M14_M41_M47_M63_M70::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63_M70* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63_M70(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63_M70(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63_M70& from);
  Message1_M7_M14_M41_M47_M63_M70(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63_M70&& from) noexcept
      : Message1_M7_M14_M41_M47_M63_M70(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M88 = Message1_M7_M14_M41_M47_M63_M70_M88;
  using M89 = Message1_M7_M14_M41_M47_M63_M70_M89;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())), f_0().size() * sizeof(float)));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(float));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(float));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF3FieldNumber = 4,
    kF2FieldNumber = 3,
  };
  // repeated float f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  float f_0(int index) const;
  void set_f_0(int index, float value);
  void add_f_0(float value);
  const ::google::protobuf::RepeatedField<float>& f_0() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89& f_3(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>& f_3() const;
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_M70_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> f_0_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89 > f_3_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47_M63 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47.M63) */ {
 public:
  inline Message1_M7_M14_M41_M47_M63() : Message1_M7_M14_M41_M47_M63(nullptr) {}
  ~Message1_M7_M14_M41_M47_M63() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47_M63(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47_M63(const Message1_M7_M14_M41_M47_M63& from) : Message1_M7_M14_M41_M47_M63(nullptr, from) {}
  inline Message1_M7_M14_M41_M47_M63(Message1_M7_M14_M41_M47_M63&& from) noexcept
      : Message1_M7_M14_M41_M47_M63(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47_M63& operator=(const Message1_M7_M14_M41_M47_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47_M63& operator=(Message1_M7_M14_M41_M47_M63&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47_M63& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47_M63* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47_M63*>(
        &_Message1_M7_M14_M41_M47_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(Message1_M7_M14_M41_M47_M63& a, Message1_M7_M14_M41_M47_M63& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47_M63* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47_M63* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47_M63* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47_M63>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47_M63& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47_M63& from) { Message1_M7_M14_M41_M47_M63::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47_M63* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47.M63"; }

 protected:
  explicit Message1_M7_M14_M41_M47_M63(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47_M63(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47_M63& from);
  Message1_M7_M14_M41_M47_M63(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47_M63&& from) noexcept
      : Message1_M7_M14_M41_M47_M63(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M70 = Message1_M7_M14_M41_M47_M63_M70;
  using M74 = Message1_M7_M14_M41_M47_M63_M74;
  using M79 = Message1_M7_M14_M41_M47_M63_M79;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74& f_4(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>& f_4() const;
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79 f_5 = 7;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79* mutable_f_5(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>* _internal_mutable_f_5();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79& f_5(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79* add_f_5();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>& f_5() const;
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47.M63)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_M63_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74 > f_4_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79 > f_5_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41_M47 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41.M47) */ {
 public:
  inline Message1_M7_M14_M41_M47() : Message1_M7_M14_M41_M47(nullptr) {}
  ~Message1_M7_M14_M41_M47() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41_M47(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41_M47(const Message1_M7_M14_M41_M47& from) : Message1_M7_M14_M41_M47(nullptr, from) {}
  inline Message1_M7_M14_M41_M47(Message1_M7_M14_M41_M47&& from) noexcept
      : Message1_M7_M14_M41_M47(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41_M47& operator=(const Message1_M7_M14_M41_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41_M47& operator=(Message1_M7_M14_M41_M47&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41_M47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41_M47* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41_M47*>(
        &_Message1_M7_M14_M41_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(Message1_M7_M14_M41_M47& a, Message1_M7_M14_M41_M47& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41_M47* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41_M47* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41_M47* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41_M47>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41_M47& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41_M47& from) { Message1_M7_M14_M41_M47::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41_M47* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41.M47"; }

 protected:
  explicit Message1_M7_M14_M41_M47(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41_M47(::google::protobuf::Arena* arena, const Message1_M7_M14_M41_M47& from);
  Message1_M7_M14_M41_M47(::google::protobuf::Arena* arena, Message1_M7_M14_M41_M47&& from) noexcept
      : Message1_M7_M14_M41_M47(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M63 = Message1_M7_M14_M41_M47_M63;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41.M47)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_M47_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14_M41 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14.M41) */ {
 public:
  inline Message1_M7_M14_M41() : Message1_M7_M14_M41(nullptr) {}
  ~Message1_M7_M14_M41() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14_M41(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14_M41(const Message1_M7_M14_M41& from) : Message1_M7_M14_M41(nullptr, from) {}
  inline Message1_M7_M14_M41(Message1_M7_M14_M41&& from) noexcept
      : Message1_M7_M14_M41(nullptr, std::move(from)) {}
  inline Message1_M7_M14_M41& operator=(const Message1_M7_M14_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14_M41& operator=(Message1_M7_M14_M41&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14_M41& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14_M41* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14_M41*>(
        &_Message1_M7_M14_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(Message1_M7_M14_M41& a, Message1_M7_M14_M41& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14_M41* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14_M41* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14_M41* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14_M41>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14_M41& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14_M41& from) { Message1_M7_M14_M41::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14_M41* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14.M41"; }

 protected:
  explicit Message1_M7_M14_M41(::google::protobuf::Arena* arena);
  Message1_M7_M14_M41(::google::protobuf::Arena* arena, const Message1_M7_M14_M41& from);
  Message1_M7_M14_M41(::google::protobuf::Arena* arena, Message1_M7_M14_M41&& from) noexcept
      : Message1_M7_M14_M41(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M47 = Message1_M7_M14_M41_M47;
  using M52 = Message1_M7_M14_M41_M52;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
    kF3FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message1.M7.M14.M41.M47 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message1_M7_M14_M41_M47* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message1_M7_M14_M41_M47& f_2(int index) const;
  ::fleetbench::proto::Message1_M7_M14_M41_M47* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>& f_2() const;
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message1.M7.M14.M41.M52 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M14_M41_M52& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41_M52* release_f_3();
  ::fleetbench::proto::Message1_M7_M14_M41_M52* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52* value);
  ::fleetbench::proto::Message1_M7_M14_M41_M52* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41_M52& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M14_M41_M52* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14.M41)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_M41_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14_M41_M47 > f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message1_M7_M14_M41_M52* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7_M14 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7.M14) */ {
 public:
  inline Message1_M7_M14() : Message1_M7_M14(nullptr) {}
  ~Message1_M7_M14() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7_M14(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7_M14(const Message1_M7_M14& from) : Message1_M7_M14(nullptr, from) {}
  inline Message1_M7_M14(Message1_M7_M14&& from) noexcept
      : Message1_M7_M14(nullptr, std::move(from)) {}
  inline Message1_M7_M14& operator=(const Message1_M7_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7_M14& operator=(Message1_M7_M14&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7_M14& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7_M14* internal_default_instance() {
    return reinterpret_cast<const Message1_M7_M14*>(
        &_Message1_M7_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(Message1_M7_M14& a, Message1_M7_M14& b) { a.Swap(&b); }
  inline void Swap(Message1_M7_M14* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7_M14* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7_M14* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7_M14>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7_M14& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7_M14& from) { Message1_M7_M14::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7_M14* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7.M14"; }

 protected:
  explicit Message1_M7_M14(::google::protobuf::Arena* arena);
  Message1_M7_M14(::google::protobuf::Arena* arena, const Message1_M7_M14& from);
  Message1_M7_M14(::google::protobuf::Arena* arena, Message1_M7_M14&& from) noexcept
      : Message1_M7_M14(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M41 = Message1_M7_M14_M41;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message1.M7.M14.M41 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message1_M7_M14_M41& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M14_M41* release_f_2();
  ::fleetbench::proto::Message1_M7_M14_M41* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41* value);
  ::fleetbench::proto::Message1_M7_M14_M41* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message1_M7_M14_M41& _internal_f_2() const;
  ::fleetbench::proto::Message1_M7_M14_M41* _internal_mutable_f_2();

  public:
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7.M14)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_M14_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message1_M7_M14_M41* f_2_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1_M7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1.M7) */ {
 public:
  inline Message1_M7() : Message1_M7(nullptr) {}
  ~Message1_M7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1_M7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1_M7(const Message1_M7& from) : Message1_M7(nullptr, from) {}
  inline Message1_M7(Message1_M7&& from) noexcept
      : Message1_M7(nullptr, std::move(from)) {}
  inline Message1_M7& operator=(const Message1_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1_M7& operator=(Message1_M7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1_M7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1_M7* internal_default_instance() {
    return reinterpret_cast<const Message1_M7*>(
        &_Message1_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 83;
  friend void swap(Message1_M7& a, Message1_M7& b) { a.Swap(&b); }
  inline void Swap(Message1_M7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1_M7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1_M7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1_M7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1_M7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1_M7& from) { Message1_M7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1_M7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1.M7"; }

 protected:
  explicit Message1_M7(::google::protobuf::Arena* arena);
  Message1_M7(::google::protobuf::Arena* arena, const Message1_M7& from);
  Message1_M7(::google::protobuf::Arena* arena, Message1_M7&& from) noexcept
      : Message1_M7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M14 = Message1_M7_M14;
  using M18 = Message1_M7_M18;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message1.M7.M14 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message1_M7_M14* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message1_M7_M14& f_1(int index) const;
  ::fleetbench::proto::Message1_M7_M14* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>& f_1() const;
  // optional .fleetbench.proto.Message1.M7.M18 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message1_M7_M18& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7_M18* release_f_3();
  ::fleetbench::proto::Message1_M7_M18* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message1_M7_M18* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18* value);
  ::fleetbench::proto::Message1_M7_M18* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message1_M7_M18& _internal_f_3() const;
  ::fleetbench::proto::Message1_M7_M18* _internal_mutable_f_3();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1.M7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_M7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M7_M14 > f_1_;
    ::fleetbench::proto::Message1_M7_M18* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};
// -------------------------------------------------------------------

class Message1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message1) */ {
 public:
  inline Message1() : Message1(nullptr) {}
  ~Message1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message1(const Message1& from) : Message1(nullptr, from) {}
  inline Message1(Message1&& from) noexcept
      : Message1(nullptr, std::move(from)) {}
  inline Message1& operator=(const Message1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message1& operator=(Message1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message1* internal_default_instance() {
    return reinterpret_cast<const Message1*>(
        &_Message1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 119;
  friend void swap(Message1& a, Message1& b) { a.Swap(&b); }
  inline void Swap(Message1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message1& from) { Message1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message1"; }

 protected:
  explicit Message1(::google::protobuf::Arena* arena);
  Message1(::google::protobuf::Arena* arena, const Message1& from);
  Message1(::google::protobuf::Arena* arena, Message1&& from) noexcept
      : Message1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M1 = Message1_M1;
  using M2 = Message1_M2;
  using M3 = Message1_M3;
  using M4 = Message1_M4;
  using M5 = Message1_M5;
  using M6 = Message1_M6;
  using M7 = Message1_M7;
  using M8 = Message1_M8;
  using M9 = Message1_M9;
  using M10 = Message1_M10;
  using M11 = Message1_M11;
  using M12 = Message1_M12;
  using M13 = Message1_M13;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      for (int i = 0; i < f_5_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5(i).data())), f_5(i).size()));
      }
      for (int i = 0; i < f_11_size(); ++i) {
        mutable_f_11(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_25_size(); ++i) {
        mutable_f_25(i)->generate_schema(schema);
      }
      mutable_f_7()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
      mutable_f_9()->generate_schema(schema);
      mutable_f_13()->generate_schema(schema);
      mutable_f_14()->generate_schema(schema);
      mutable_f_16()->generate_schema(schema);
      mutable_f_17()->generate_schema(schema);
      mutable_f_23()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5(i).c_str())));
        sizes_list.push_back(f_5(i).size());
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_11().size());
      for (int i = 0; i < f_11_size(); ++i) {
        mutable_f_11(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_22().size());
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_25().size());
      for (int i = 0; i < f_25_size(); ++i) {
        mutable_f_25(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_13()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_14()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_16()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_17()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_23()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5(i).c_str())));
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_11_size(); ++i) {
        mutable_f_11(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_25_size(); ++i) {
        mutable_f_25(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_7()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_9()->generate_scatter_ptrs(ptrs);
      mutable_f_13()->generate_scatter_ptrs(ptrs);
      mutable_f_14()->generate_scatter_ptrs(ptrs);
      mutable_f_16()->generate_scatter_ptrs(ptrs);
      mutable_f_17()->generate_scatter_ptrs(ptrs);
      mutable_f_23()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        sizes.push_back(f_5(i).size());
      }
      sizes.push_back(f_11().size());
      for (int i = 0; i < f_11_size(); ++i) {
        mutable_f_11(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_22().size());
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_25().size());
      for (int i = 0; i < f_25_size(); ++i) {
        mutable_f_25(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_7()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_9()->generate_scatter_sizes(sizes);
      mutable_f_13()->generate_scatter_sizes(sizes);
      mutable_f_14()->generate_scatter_sizes(sizes);
      mutable_f_16()->generate_scatter_sizes(sizes);
      mutable_f_17()->generate_scatter_sizes(sizes);
      mutable_f_23()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_5(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5(i).c_str())));
      }
      size_t num_f_11_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_11_entries; ++i) {
        auto* new_msg = add_f_11();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_11(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_12_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_21_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_22_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_22_entries; ++i) {
        auto* new_msg = add_f_22();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_22(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_25_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_25_entries; ++i) {
        auto* new_msg = add_f_25();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_25(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_13()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_14()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_16()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_17()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_23()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_5(std::move(tmp_str));
      }
      size_t num_f_11_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_11_entries; ++i) {
        auto* new_msg = add_f_11();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_11(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_12_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_21_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_22_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_22_entries; ++i) {
        auto* new_msg = add_f_22();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_22(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_25_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_25_entries; ++i) {
        auto* new_msg = add_f_25();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_25(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_13()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_14()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_16()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_17()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_23()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF5FieldNumber = 7,
    kF11FieldNumber = 12,
    kF12FieldNumber = 13,
    kF21FieldNumber = 22,
    kF22FieldNumber = 23,
    kF25FieldNumber = 26,
    kF7FieldNumber = 8,
    kF8FieldNumber = 9,
    kF9FieldNumber = 11,
    kF13FieldNumber = 14,
    kF14FieldNumber = 16,
    kF16FieldNumber = 17,
    kF17FieldNumber = 21,
    kF23FieldNumber = 25,
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
  };
  // repeated string f_5 = 7;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  const std::string& f_5(int index) const;
  std::string* mutable_f_5(int index);
  void set_f_5(int index, const std::string& value);
  void set_f_5(int index, std::string&& value);
  void set_f_5(int index, const char* value);
  void set_f_5(int index, const char* value, std::size_t size);
  void set_f_5(int index, absl::string_view value);
  std::string* add_f_5();
  void add_f_5(const std::string& value);
  void add_f_5(std::string&& value);
  void add_f_5(const char* value);
  void add_f_5(const char* value, std::size_t size);
  void add_f_5(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_5() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_5();

  public:
  // repeated .fleetbench.proto.Message1.M4 f_11 = 12;
  int f_11_size() const;
  private:
  int _internal_f_11_size() const;

  public:
  void clear_f_11() ;
  ::fleetbench::proto::Message1_M4* mutable_f_11(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>* mutable_f_11();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>& _internal_f_11() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>* _internal_mutable_f_11();
  public:
  const ::fleetbench::proto::Message1_M4& f_11(int index) const;
  ::fleetbench::proto::Message1_M4* add_f_11();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>& f_11() const;
  // repeated .fleetbench.proto.Message1.M5 f_12 = 13;
  int f_12_size() const;
  private:
  int _internal_f_12_size() const;

  public:
  void clear_f_12() ;
  ::fleetbench::proto::Message1_M5* mutable_f_12(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>* mutable_f_12();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>& _internal_f_12() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>* _internal_mutable_f_12();
  public:
  const ::fleetbench::proto::Message1_M5& f_12(int index) const;
  ::fleetbench::proto::Message1_M5* add_f_12();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>& f_12() const;
  // repeated .fleetbench.proto.Message1.M10 f_21 = 22;
  int f_21_size() const;
  private:
  int _internal_f_21_size() const;

  public:
  void clear_f_21() ;
  ::fleetbench::proto::Message1_M10* mutable_f_21(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>* mutable_f_21();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>& _internal_f_21() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>* _internal_mutable_f_21();
  public:
  const ::fleetbench::proto::Message1_M10& f_21(int index) const;
  ::fleetbench::proto::Message1_M10* add_f_21();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>& f_21() const;
  // repeated .fleetbench.proto.Message1.M11 f_22 = 23;
  int f_22_size() const;
  private:
  int _internal_f_22_size() const;

  public:
  void clear_f_22() ;
  ::fleetbench::proto::Message1_M11* mutable_f_22(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>* mutable_f_22();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>& _internal_f_22() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>* _internal_mutable_f_22();
  public:
  const ::fleetbench::proto::Message1_M11& f_22(int index) const;
  ::fleetbench::proto::Message1_M11* add_f_22();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>& f_22() const;
  // repeated .fleetbench.proto.Message1.M13 f_25 = 26;
  int f_25_size() const;
  private:
  int _internal_f_25_size() const;

  public:
  void clear_f_25() ;
  ::fleetbench::proto::Message1_M13* mutable_f_25(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>* mutable_f_25();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>& _internal_f_25() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>* _internal_mutable_f_25();
  public:
  const ::fleetbench::proto::Message1_M13& f_25(int index) const;
  ::fleetbench::proto::Message1_M13* add_f_25();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>& f_25() const;
  // optional .fleetbench.proto.Message1.M1 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message1_M1& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M1* release_f_7();
  ::fleetbench::proto::Message1_M1* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message1_M1* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message1_M1* value);
  ::fleetbench::proto::Message1_M1* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message1_M1& _internal_f_7() const;
  ::fleetbench::proto::Message1_M1* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message1.M2 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message1_M2& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M2* release_f_8();
  ::fleetbench::proto::Message1_M2* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message1_M2* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message1_M2* value);
  ::fleetbench::proto::Message1_M2* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message1_M2& _internal_f_8() const;
  ::fleetbench::proto::Message1_M2* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message1.M3 f_9 = 11;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message1_M3& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M3* release_f_9();
  ::fleetbench::proto::Message1_M3* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message1_M3* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message1_M3* value);
  ::fleetbench::proto::Message1_M3* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message1_M3& _internal_f_9() const;
  ::fleetbench::proto::Message1_M3* _internal_mutable_f_9();

  public:
  // optional .fleetbench.proto.Message1.M6 f_13 = 14;
  bool has_f_13() const;
  void clear_f_13() ;
  const ::fleetbench::proto::Message1_M6& f_13() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M6* release_f_13();
  ::fleetbench::proto::Message1_M6* mutable_f_13();
  void set_allocated_f_13(::fleetbench::proto::Message1_M6* value);
  void unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message1_M6* value);
  ::fleetbench::proto::Message1_M6* unsafe_arena_release_f_13();

  private:
  const ::fleetbench::proto::Message1_M6& _internal_f_13() const;
  ::fleetbench::proto::Message1_M6* _internal_mutable_f_13();

  public:
  // optional .fleetbench.proto.Message1.M7 f_14 = 16;
  bool has_f_14() const;
  void clear_f_14() ;
  const ::fleetbench::proto::Message1_M7& f_14() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M7* release_f_14();
  ::fleetbench::proto::Message1_M7* mutable_f_14();
  void set_allocated_f_14(::fleetbench::proto::Message1_M7* value);
  void unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message1_M7* value);
  ::fleetbench::proto::Message1_M7* unsafe_arena_release_f_14();

  private:
  const ::fleetbench::proto::Message1_M7& _internal_f_14() const;
  ::fleetbench::proto::Message1_M7* _internal_mutable_f_14();

  public:
  // optional .fleetbench.proto.Message1.M8 f_16 = 17;
  bool has_f_16() const;
  void clear_f_16() ;
  const ::fleetbench::proto::Message1_M8& f_16() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M8* release_f_16();
  ::fleetbench::proto::Message1_M8* mutable_f_16();
  void set_allocated_f_16(::fleetbench::proto::Message1_M8* value);
  void unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message1_M8* value);
  ::fleetbench::proto::Message1_M8* unsafe_arena_release_f_16();

  private:
  const ::fleetbench::proto::Message1_M8& _internal_f_16() const;
  ::fleetbench::proto::Message1_M8* _internal_mutable_f_16();

  public:
  // optional .fleetbench.proto.Message1.M9 f_17 = 21;
  bool has_f_17() const;
  void clear_f_17() ;
  const ::fleetbench::proto::Message1_M9& f_17() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M9* release_f_17();
  ::fleetbench::proto::Message1_M9* mutable_f_17();
  void set_allocated_f_17(::fleetbench::proto::Message1_M9* value);
  void unsafe_arena_set_allocated_f_17(::fleetbench::proto::Message1_M9* value);
  ::fleetbench::proto::Message1_M9* unsafe_arena_release_f_17();

  private:
  const ::fleetbench::proto::Message1_M9& _internal_f_17() const;
  ::fleetbench::proto::Message1_M9* _internal_mutable_f_17();

  public:
  // optional .fleetbench.proto.Message1.M12 f_23 = 25;
  bool has_f_23() const;
  void clear_f_23() ;
  const ::fleetbench::proto::Message1_M12& f_23() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message1_M12* release_f_23();
  ::fleetbench::proto::Message1_M12* mutable_f_23();
  void set_allocated_f_23(::fleetbench::proto::Message1_M12* value);
  void unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message1_M12* value);
  ::fleetbench::proto::Message1_M12* unsafe_arena_release_f_23();

  private:
  const ::fleetbench::proto::Message1_M12& _internal_f_23() const;
  ::fleetbench::proto::Message1_M12* _internal_mutable_f_23();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional float f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  float f_2() const;
  void set_f_2(float value);

  private:
  float _internal_f_2() const;
  void _internal_set_f_2(float value);

  public:
  // optional int32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional int64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 13,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_5_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M4 > f_11_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M5 > f_12_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M10 > f_21_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M11 > f_22_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message1_M13 > f_25_;
    ::fleetbench::proto::Message1_M1* f_7_;
    ::fleetbench::proto::Message1_M2* f_8_;
    ::fleetbench::proto::Message1_M3* f_9_;
    ::fleetbench::proto::Message1_M6* f_13_;
    ::fleetbench::proto::Message1_M7* f_14_;
    ::fleetbench::proto::Message1_M8* f_16_;
    ::fleetbench::proto::Message1_M9* f_17_;
    ::fleetbench::proto::Message1_M12* f_23_;
    ::int32_t f_0_;
    ::int32_t f_1_;
    float f_2_;
    ::int32_t f_3_;
    ::int64_t f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message1_M1_M21

// optional string f_0 = 1;
inline bool Message1_M1_M21::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M1_M21::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M1_M21::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M21.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M21::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M21.f_0)
}
inline std::string* Message1_M1_M21::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M21.f_0)
  return _s;
}
inline const std::string& Message1_M1_M21::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M1_M21::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M1_M21::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M1_M21::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M21.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M21::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M21.f_0)
}

// -------------------------------------------------------------------

// Message1_M1_M25_M31_M51_M65_M76

// optional double f_0 = 1;
inline bool Message1_M1_M25_M31_M51_M65_M76::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M1_M25_M31_M51_M65_M76::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message1_M1_M25_M31_M51_M65_M76::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M25_M31_M51_M65_M76::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76.f_0)
}
inline double Message1_M1_M25_M31_M51_M65_M76::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M1_M25_M31_M51_M65_M76::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M1_M25_M31_M51_M65

// optional int64 f_0 = 1;
inline bool Message1_M1_M25_M31_M51_M65::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M1_M25_M31_M51_M65::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M1_M25_M31_M51_M65::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M25_M31_M51_M65::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_0)
}
inline ::int64_t Message1_M1_M25_M31_M51_M65::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M1_M25_M31_M51_M65::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M1.M25.M31.M51.M65.M76 f_1 = 2;
inline int Message1_M1_M25_M31_M51_M65::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M1_M25_M31_M51_M65::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M1_M25_M31_M51_M65::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76* Message1_M1_M25_M31_M51_M65::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>* Message1_M1_M25_M31_M51_M65::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76& Message1_M1_M25_M31_M51_M65::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76* Message1_M1_M25_M31_M51_M65::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>& Message1_M1_M25_M31_M51_M65::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M1.M25.M31.M51.M65.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>&
Message1_M1_M25_M31_M51_M65::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25_M31_M51_M65_M76>*
Message1_M1_M25_M31_M51_M65::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M1_M25_M31_M51

// optional bool f_0 = 1;
inline bool Message1_M1_M25_M31_M51::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M1_M25_M31_M51::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M1_M25_M31_M51::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.M51.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M25_M31_M51::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.M51.f_0)
}
inline bool Message1_M1_M25_M31_M51::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M1_M25_M31_M51::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M1.M25.M31.M51.M65 f_1 = 3;
inline bool Message1_M1_M25_M31_M51::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M1_M25_M31_M51::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65& Message1_M1_M25_M31_M51::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65&>(::fleetbench::proto::_Message1_M1_M25_M31_M51_M65_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1_M25_M31_M51_M65& Message1_M1_M25_M31_M51::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.M51.f_1)
  return _internal_f_1();
}
inline void Message1_M1_M25_M31_M51::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31_M51_M65* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51_M65*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M1.M25.M31.M51.f_1)
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* Message1_M1_M25_M31_M51::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* Message1_M1_M25_M31_M51::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.M31.M51.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* Message1_M1_M25_M31_M51::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1_M25_M31_M51_M65>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51_M65*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* Message1_M1_M25_M31_M51::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51_M65* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.M51.f_1)
  return _msg;
}
inline void Message1_M1_M25_M31_M51::set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31_M51_M65* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51_M65*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.M31.M51.f_1)
}

// -------------------------------------------------------------------

// Message1_M1_M25_M31

// optional uint32 f_0 = 1;
inline bool Message1_M1_M25_M31::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message1_M1_M25_M31::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M25_M31::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_0)
}
inline ::uint32_t Message1_M1_M25_M31::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M1_M25_M31::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message1_M1_M25_M31::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message1_M1_M25_M31::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_1)
  return _internal_f_1();
}
inline void Message1_M1_M25_M31::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_1)
}
inline ::int64_t Message1_M1_M25_M31::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M1_M25_M31::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional float f_2 = 3;
inline bool Message1_M1_M25_M31::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Message1_M1_M25_M31::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_2)
  return _internal_f_2();
}
inline void Message1_M1_M25_M31::set_f_2(float value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_2)
}
inline float Message1_M1_M25_M31::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M1_M25_M31::_internal_set_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 4;
inline bool Message1_M1_M25_M31::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message1_M1_M25_M31::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_3)
  return _internal_f_3();
}
inline void Message1_M1_M25_M31::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_3)
}
inline ::int64_t Message1_M1_M25_M31::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M1_M25_M31::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 5;
inline bool Message1_M1_M25_M31::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M1_M25_M31::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M25_M31::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_4)
}
inline std::string* Message1_M1_M25_M31::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.f_4)
  return _s;
}
inline const std::string& Message1_M1_M25_M31::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message1_M1_M25_M31::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message1_M1_M25_M31::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message1_M1_M25_M31::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.M31.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M25_M31::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.M31.f_4)
}

// optional string f_5 = 7;
inline bool Message1_M1_M25_M31::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M1_M25_M31::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M25_M31::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_5)
}
inline std::string* Message1_M1_M25_M31::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.f_5)
  return _s;
}
inline const std::string& Message1_M1_M25_M31::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message1_M1_M25_M31::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message1_M1_M25_M31::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message1_M1_M25_M31::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.M31.f_5)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M25_M31::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.M31.f_5)
}

// optional float f_6 = 8;
inline bool Message1_M1_M25_M31::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Message1_M1_M25_M31::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_6)
  return _internal_f_6();
}
inline void Message1_M1_M25_M31::set_f_6(float value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_6)
}
inline float Message1_M1_M25_M31::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message1_M1_M25_M31::_internal_set_f_6(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional int64 f_7 = 9;
inline bool Message1_M1_M25_M31::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message1_M1_M25_M31::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_7)
  return _internal_f_7();
}
inline void Message1_M1_M25_M31::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_7)
}
inline ::int64_t Message1_M1_M25_M31::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message1_M1_M25_M31::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional int64 f_8 = 10;
inline bool Message1_M1_M25_M31::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message1_M1_M25_M31::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_8)
  return _internal_f_8();
}
inline void Message1_M1_M25_M31::set_f_8(::int64_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_8)
}
inline ::int64_t Message1_M1_M25_M31::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message1_M1_M25_M31::_internal_set_f_8(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional bytes f_9 = 11;
inline bool Message1_M1_M25_M31::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message1_M1_M25_M31::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M25_M31::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_9)
}
inline std::string* Message1_M1_M25_M31::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.f_9)
  return _s;
}
inline const std::string& Message1_M1_M25_M31::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message1_M1_M25_M31::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message1_M1_M25_M31::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message1_M1_M25_M31::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.M31.f_9)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M25_M31::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.M31.f_9)
}

// optional int64 f_10 = 13;
inline bool Message1_M1_M25_M31::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Message1_M1_M25_M31::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_10)
  return _internal_f_10();
}
inline void Message1_M1_M25_M31::set_f_10(::int64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_10)
}
inline ::int64_t Message1_M1_M25_M31::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message1_M1_M25_M31::_internal_set_f_10(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional int32 f_11 = 14;
inline bool Message1_M1_M25_M31::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Message1_M1_M25_M31::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_11)
  return _internal_f_11();
}
inline void Message1_M1_M25_M31::set_f_11(::int32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_11)
}
inline ::int32_t Message1_M1_M25_M31::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message1_M1_M25_M31::_internal_set_f_11(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 15;
inline bool Message1_M1_M25_M31::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M1_M25_M31::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float Message1_M1_M25_M31::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_12)
  return _internal_f_12();
}
inline void Message1_M1_M25_M31::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.M31.f_12)
}
inline float Message1_M1_M25_M31::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message1_M1_M25_M31::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional .fleetbench.proto.Message1.M1.M25.M31.M51 f_15 = 16;
inline bool Message1_M1_M25_M31::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_15_ != nullptr);
  return value;
}
inline void Message1_M1_M25_M31::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_15_ != nullptr) _impl_.f_15_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message1_M1_M25_M31_M51& Message1_M1_M25_M31::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1_M25_M31_M51* p = _impl_.f_15_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1_M25_M31_M51&>(::fleetbench::proto::_Message1_M1_M25_M31_M51_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1_M25_M31_M51& Message1_M1_M25_M31::f_15() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.M31.f_15)
  return _internal_f_15();
}
inline void Message1_M1_M25_M31::unsafe_arena_set_allocated_f_15(::fleetbench::proto::Message1_M1_M25_M31_M51* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_15_);
  }
  _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M1.M25.M31.f_15)
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51* Message1_M1_M25_M31::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51* released = _impl_.f_15_;
  _impl_.f_15_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51* Message1_M1_M25_M31::unsafe_arena_release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.M31.f_15)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51* temp = _impl_.f_15_;
  _impl_.f_15_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51* Message1_M1_M25_M31::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_15_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1_M25_M31_M51>(GetArena());
    _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51*>(p);
  }
  return _impl_.f_15_;
}
inline ::fleetbench::proto::Message1_M1_M25_M31_M51* Message1_M1_M25_M31::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message1_M1_M25_M31_M51* _msg = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.M31.f_15)
  return _msg;
}
inline void Message1_M1_M25_M31::set_allocated_f_15(::fleetbench::proto::Message1_M1_M25_M31_M51* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_15_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31_M51*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.M31.f_15)
}

// -------------------------------------------------------------------

// Message1_M1_M25

// optional .fleetbench.proto.Message1.M1.M25.E4 f_0 = 1;
inline bool Message1_M1_M25::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M1_M25::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M1_M25_E4 Message1_M1_M25::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M25::set_f_0(::fleetbench::proto::Message1_M1_M25_E4 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M25.f_0)
}
inline ::fleetbench::proto::Message1_M1_M25_E4 Message1_M1_M25::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M1_M25_E4>(_impl_.f_0_);
}
inline void Message1_M1_M25::_internal_set_f_0(::fleetbench::proto::Message1_M1_M25_E4 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M1_M25_E4_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M1.M25.M31 f_1 = 2;
inline bool Message1_M1_M25::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M1_M25::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M1_M25_M31& Message1_M1_M25::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1_M25_M31* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1_M25_M31&>(::fleetbench::proto::_Message1_M1_M25_M31_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1_M25_M31& Message1_M1_M25::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M25.f_1)
  return _internal_f_1();
}
inline void Message1_M1_M25::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M1.M25.f_1)
}
inline ::fleetbench::proto::Message1_M1_M25_M31* Message1_M1_M25::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1_M25_M31* Message1_M1_M25::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M25.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1_M25_M31* Message1_M1_M25::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1_M25_M31>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M1_M25_M31* Message1_M1_M25::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M1_M25_M31* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M25.f_1)
  return _msg;
}
inline void Message1_M1_M25::set_allocated_f_1(::fleetbench::proto::Message1_M1_M25_M31* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M25_M31*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M25.f_1)
}

// -------------------------------------------------------------------

// Message1_M1_M26

// optional .fleetbench.proto.Message1.M1.M26.E5 f_0 = 1;
inline bool Message1_M1_M26::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M1_M26::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M1_M26_E5 Message1_M1_M26::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M26.f_0)
  return _internal_f_0();
}
inline void Message1_M1_M26::set_f_0(::fleetbench::proto::Message1_M1_M26_E5 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M26.f_0)
}
inline ::fleetbench::proto::Message1_M1_M26_E5 Message1_M1_M26::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M1_M26_E5>(_impl_.f_0_);
}
inline void Message1_M1_M26::_internal_set_f_0(::fleetbench::proto::Message1_M1_M26_E5 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M1_M26_E5_IsValid(value));
  _impl_.f_0_ = value;
}

// optional string f_1 = 2;
inline bool Message1_M1_M26::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M1_M26::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M1_M26::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M26.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M26::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M26.f_1)
}
inline std::string* Message1_M1_M26::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M26.f_1)
  return _s;
}
inline const std::string& Message1_M1_M26::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M1_M26::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M1_M26::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M1_M26::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M26.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M26::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M26.f_1)
}

// optional string f_2 = 3;
inline bool Message1_M1_M26::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M1_M26::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M1_M26::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M26.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M1_M26::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M26.f_2)
}
inline std::string* Message1_M1_M26::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.M26.f_2)
  return _s;
}
inline const std::string& Message1_M1_M26::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message1_M1_M26::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message1_M1_M26::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message1_M1_M26::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.M26.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M1_M26::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.M26.f_2)
}

// optional float f_3 = 4;
inline bool Message1_M1_M26::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M1_M26::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message1_M1_M26::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M26.f_3)
  return _internal_f_3();
}
inline void Message1_M1_M26::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M26.f_3)
}
inline float Message1_M1_M26::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M1_M26::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message1.M1.M26.E6 f_4 = 5;
inline bool Message1_M1_M26::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M1_M26::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message1_M1_M26_E6 Message1_M1_M26::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.M26.f_4)
  return _internal_f_4();
}
inline void Message1_M1_M26::set_f_4(::fleetbench::proto::Message1_M1_M26_E6 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.M26.f_4)
}
inline ::fleetbench::proto::Message1_M1_M26_E6 Message1_M1_M26::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M1_M26_E6>(_impl_.f_4_);
}
inline void Message1_M1_M26::_internal_set_f_4(::fleetbench::proto::Message1_M1_M26_E6 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M1_M26_E6_IsValid(value));
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message1_M1

// optional bool f_0 = 1;
inline bool Message1_M1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message1_M1::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.f_0)
  return _internal_f_0();
}
inline void Message1_M1::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M1.f_0)
}
inline bool Message1_M1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M1::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M1.M21 f_1 = 3;
inline bool Message1_M1::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M1_M21& Message1_M1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1_M21* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1_M21&>(::fleetbench::proto::_Message1_M1_M21_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1_M21& Message1_M1::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.f_1)
  return _internal_f_1();
}
inline void Message1_M1::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M1_M21* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M21*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M1.f_1)
}
inline ::fleetbench::proto::Message1_M1_M21* Message1_M1::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M21* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1_M21* Message1_M1::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1_M21* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1_M21* Message1_M1::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1_M21>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M21*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M1_M21* Message1_M1::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M1_M21* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.f_1)
  return _msg;
}
inline void Message1_M1::set_allocated_f_1(::fleetbench::proto::Message1_M1_M21* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M21*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.f_1)
}

// repeated .fleetbench.proto.Message1.M1.M25 f_3 = 4;
inline int Message1_M1::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M1::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M1::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message1_M1_M25* Message1_M1::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>* Message1_M1::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M1.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message1_M1_M25& Message1_M1::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message1_M1_M25* Message1_M1::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M1_M25* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M1.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>& Message1_M1::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M1.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>&
Message1_M1::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M1_M25>*
Message1_M1::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message1.M1.M26 f_4 = 5;
inline bool Message1_M1::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M1::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M1_M26& Message1_M1::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1_M26* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1_M26&>(::fleetbench::proto::_Message1_M1_M26_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1_M26& Message1_M1::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M1.f_4)
  return _internal_f_4();
}
inline void Message1_M1::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M1_M26* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M26*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M1.f_4)
}
inline ::fleetbench::proto::Message1_M1_M26* Message1_M1::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M1_M26* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1_M26* Message1_M1::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M1.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M1_M26* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1_M26* Message1_M1::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1_M26>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M26*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M1_M26* Message1_M1::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M1_M26* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M1.f_4)
  return _msg;
}
inline void Message1_M1::set_allocated_f_4(::fleetbench::proto::Message1_M1_M26* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M1_M26*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M1.f_4)
}

// -------------------------------------------------------------------

// Message1_M2_M22_M34_M44

// optional float f_0 = 4;
inline bool Message1_M2_M22_M34_M44::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message1_M2_M22_M34_M44::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22_M34_M44::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_0)
}
inline float Message1_M2_M22_M34_M44::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bool f_1 = 6;
inline bool Message1_M2_M22_M34_M44::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message1_M2_M22_M34_M44::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_1)
  return _internal_f_1();
}
inline void Message1_M2_M22_M34_M44::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_1)
}
inline bool Message1_M2_M22_M34_M44::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 7;
inline bool Message1_M2_M22_M34_M44::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message1_M2_M22_M34_M44::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_2)
  return _internal_f_2();
}
inline void Message1_M2_M22_M34_M44::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_2)
}
inline ::int32_t Message1_M2_M22_M34_M44::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 9;
inline bool Message1_M2_M22_M34_M44::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Message1_M2_M22_M34_M44::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_3)
  return _internal_f_3();
}
inline void Message1_M2_M22_M34_M44::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_3)
}
inline float Message1_M2_M22_M34_M44::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 11;
inline bool Message1_M2_M22_M34_M44::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M2_M22_M34_M44::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M2_M22_M34_M44::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_4)
}
inline std::string* Message1_M2_M22_M34_M44::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.M44.f_4)
  return _s;
}
inline const std::string& Message1_M2_M22_M34_M44::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message1_M2_M22_M34_M44::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message1_M2_M22_M34_M44::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M22.M34.M44.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M2_M22_M34_M44::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M22.M34.M44.f_4)
}

// optional int64 f_5 = 13;
inline bool Message1_M2_M22_M34_M44::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message1_M2_M22_M34_M44::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_5)
  return _internal_f_5();
}
inline void Message1_M2_M22_M34_M44::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_5)
}
inline ::int64_t Message1_M2_M22_M34_M44::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional string f_6 = 15;
inline bool Message1_M2_M22_M34_M44::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M2_M22_M34_M44::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M2_M22_M34_M44::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_6)
}
inline std::string* Message1_M2_M22_M34_M44::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.M44.f_6)
  return _s;
}
inline const std::string& Message1_M2_M22_M34_M44::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message1_M2_M22_M34_M44::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message1_M2_M22_M34_M44::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M22.M34.M44.f_6)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M2_M22_M34_M44::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M22.M34.M44.f_6)
}

// optional int64 f_7 = 16;
inline bool Message1_M2_M22_M34_M44::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M44::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message1_M2_M22_M34_M44::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M44.f_7)
  return _internal_f_7();
}
inline void Message1_M2_M22_M34_M44::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M44.f_7)
}
inline ::int64_t Message1_M2_M22_M34_M44::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message1_M2_M22_M34_M44::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// -------------------------------------------------------------------

// Message1_M2_M22_M34_M48_M60_M69

// optional bool f_0 = 2;
inline bool Message1_M2_M22_M34_M48_M60_M69::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M48_M60_M69::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M2_M22_M34_M48_M60_M69::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22_M34_M48_M60_M69::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69.f_0)
}
inline bool Message1_M2_M22_M34_M48_M60_M69::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22_M34_M48_M60_M69::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message1_M2_M22_M34_M48_M60_M69::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M48_M60_M69::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M2_M22_M34_M48_M60_M69::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69.f_1)
  return _internal_f_1();
}
inline void Message1_M2_M22_M34_M48_M60_M69::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69.f_1)
}
inline ::int64_t Message1_M2_M22_M34_M48_M60_M69::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M2_M22_M34_M48_M60_M69::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message1_M2_M22_M34_M48_M60

// optional bool f_0 = 2;
inline bool Message1_M2_M22_M34_M48_M60::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M48_M60::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M2_M22_M34_M48_M60::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22_M34_M48_M60::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_0)
}
inline bool Message1_M2_M22_M34_M48_M60::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22_M34_M48_M60::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M2.M22.M34.M48.M60.M69 f_2 = 3;
inline bool Message1_M2_M22_M34_M48_M60::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M2_M22_M34_M48_M60::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69& Message1_M2_M22_M34_M48_M60::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69&>(::fleetbench::proto::_Message1_M2_M22_M34_M48_M60_M69_default_instance_);
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69& Message1_M2_M22_M34_M48_M60::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_2)
  return _internal_f_2();
}
inline void Message1_M2_M22_M34_M48_M60::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_2)
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* Message1_M2_M22_M34_M48_M60::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* Message1_M2_M22_M34_M48_M60::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* Message1_M2_M22_M34_M48_M60::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* Message1_M2_M22_M34_M48_M60::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_2)
  return _msg;
}
inline void Message1_M2_M22_M34_M48_M60::set_allocated_f_2(::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M48_M60_M69*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M22.M34.M48.M60.f_2)
}

// -------------------------------------------------------------------

// Message1_M2_M22_M34_M48

// optional int32 f_0 = 1;
inline bool Message1_M2_M22_M34_M48::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M2_M22_M34_M48::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M2_M22_M34_M48::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22_M34_M48::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.M48.f_0)
}
inline ::int32_t Message1_M2_M22_M34_M48::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22_M34_M48::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M2.M22.M34.M48.M60 f_1 = 3;
inline int Message1_M2_M22_M34_M48::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M2_M22_M34_M48::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M2_M22_M34_M48::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60* Message1_M2_M22_M34_M48::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.M48.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>* Message1_M2_M22_M34_M48::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M2.M22.M34.M48.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M48_M60& Message1_M2_M22_M34_M48::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.M48.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48_M60* Message1_M2_M22_M34_M48::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M2_M22_M34_M48_M60* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M2.M22.M34.M48.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>& Message1_M2_M22_M34_M48::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M2.M22.M34.M48.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>&
Message1_M2_M22_M34_M48::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48_M60>*
Message1_M2_M22_M34_M48::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M2_M22_M34

// optional int64 f_0 = 1;
inline bool Message1_M2_M22_M34::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M22_M34::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M2_M22_M34::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22_M34::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.M34.f_0)
}
inline ::int64_t Message1_M2_M22_M34::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22_M34::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M2.M22.M34.M44 f_1 = 2;
inline bool Message1_M2_M22_M34::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M2_M22_M34::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M44& Message1_M2_M22_M34::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M2_M22_M34_M44* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M2_M22_M34_M44&>(::fleetbench::proto::_Message1_M2_M22_M34_M44_default_instance_);
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M44& Message1_M2_M22_M34::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.f_1)
  return _internal_f_1();
}
inline void Message1_M2_M22_M34::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34_M44* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M44*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M2.M22.M34.f_1)
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M44* Message1_M2_M22_M34::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M44* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M44* Message1_M2_M22_M34::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M22.M34.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M44* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M44* Message1_M2_M22_M34::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M2_M22_M34_M44>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M44*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M44* Message1_M2_M22_M34::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34_M44* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.f_1)
  return _msg;
}
inline void Message1_M2_M22_M34::set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34_M44* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34_M44*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M22.M34.f_1)
}

// repeated .fleetbench.proto.Message1.M2.M22.M34.M48 f_2 = 4;
inline int Message1_M2_M22_M34::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M2_M22_M34::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M2_M22_M34::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48* Message1_M2_M22_M34::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.M34.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>* Message1_M2_M22_M34::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M2.M22.M34.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M2_M22_M34_M48& Message1_M2_M22_M34::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.M34.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M2_M22_M34_M48* Message1_M2_M22_M34::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M2_M22_M34_M48* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M2.M22.M34.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>& Message1_M2_M22_M34::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M2.M22.M34.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>&
Message1_M2_M22_M34::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22_M34_M48>*
Message1_M2_M22_M34::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M2_M22

// optional int32 f_0 = 1;
inline bool Message1_M2_M22::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M22::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M2_M22::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M22::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M22.f_0)
}
inline ::int32_t Message1_M2_M22::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M22::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M2.M22.M34 f_1 = 2;
inline bool Message1_M2_M22::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M2_M22::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M2_M22_M34& Message1_M2_M22::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M2_M22_M34* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M2_M22_M34&>(::fleetbench::proto::_Message1_M2_M22_M34_default_instance_);
}
inline const ::fleetbench::proto::Message1_M2_M22_M34& Message1_M2_M22::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M22.f_1)
  return _internal_f_1();
}
inline void Message1_M2_M22::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M2.M22.f_1)
}
inline ::fleetbench::proto::Message1_M2_M22_M34* Message1_M2_M22::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M2_M22_M34* Message1_M2_M22::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M22.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M2_M22_M34* Message1_M2_M22::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M2_M22_M34>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M2_M22_M34* Message1_M2_M22::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M2_M22_M34* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M22.f_1)
  return _msg;
}
inline void Message1_M2_M22::set_allocated_f_1(::fleetbench::proto::Message1_M2_M22_M34* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M22_M34*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M22.f_1)
}

// -------------------------------------------------------------------

// Message1_M2_M29_M35

// optional bool f_0 = 1;
inline bool Message1_M2_M29_M35::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M2_M29_M35::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message1_M2_M29_M35::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M29.M35.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M29_M35::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M29.M35.f_0)
}
inline bool Message1_M2_M29_M35::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M29_M35::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M2_M29

// optional float f_0 = 4;
inline bool Message1_M2_M29::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M2_M29::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message1_M2_M29::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M29.f_0)
  return _internal_f_0();
}
inline void Message1_M2_M29::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.M29.f_0)
}
inline float Message1_M2_M29::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2_M29::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M2.M29.M35 f_4 = 6;
inline bool Message1_M2_M29::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M2_M29::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M2_M29_M35& Message1_M2_M29::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M2_M29_M35* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M2_M29_M35&>(::fleetbench::proto::_Message1_M2_M29_M35_default_instance_);
}
inline const ::fleetbench::proto::Message1_M2_M29_M35& Message1_M2_M29::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.M29.f_4)
  return _internal_f_4();
}
inline void Message1_M2_M29::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M2_M29_M35* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M29_M35*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M2.M29.f_4)
}
inline ::fleetbench::proto::Message1_M2_M29_M35* Message1_M2_M29::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M29_M35* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M2_M29_M35* Message1_M2_M29::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M2.M29.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M2_M29_M35* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M2_M29_M35* Message1_M2_M29::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M2_M29_M35>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M29_M35*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M2_M29_M35* Message1_M2_M29::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M2_M29_M35* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.M29.f_4)
  return _msg;
}
inline void Message1_M2_M29::set_allocated_f_4(::fleetbench::proto::Message1_M2_M29_M35* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M2_M29_M35*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M2.M29.f_4)
}

// -------------------------------------------------------------------

// Message1_M2

// optional int64 f_0 = 1;
inline bool Message1_M2::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M2::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M2::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.f_0)
  return _internal_f_0();
}
inline void Message1_M2::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M2.f_0)
}
inline ::int64_t Message1_M2::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M2::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M2.M22 f_1 = 2;
inline int Message1_M2::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M2::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M2::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M2_M22* Message1_M2::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>* Message1_M2::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M2.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M2_M22& Message1_M2::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M2_M22* Message1_M2::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M2_M22* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M2.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>& Message1_M2::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M2.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>&
Message1_M2::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M22>*
Message1_M2::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message1.M2.M29 f_2 = 3;
inline int Message1_M2::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M2::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M2::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M2_M29* Message1_M2::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M2.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>* Message1_M2::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M2.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M2_M29& Message1_M2::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M2.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M2_M29* Message1_M2::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M2_M29* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M2.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>& Message1_M2::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M2.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>&
Message1_M2::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M2_M29>*
Message1_M2::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M3

// optional string f_0 = 1;
inline bool Message1_M3::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M3::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M3::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M3.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M3::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M3.f_0)
}
inline std::string* Message1_M3::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M3.f_0)
  return _s;
}
inline const std::string& Message1_M3::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M3::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M3::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M3::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M3.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M3::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M3.f_0)
}

// -------------------------------------------------------------------

// Message1_M4_M28

// optional .fleetbench.proto.Message1.M4.M28.E7 f_0 = 1;
inline bool Message1_M4_M28::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M4_M28::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M4_M28_E7 Message1_M4_M28::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M4.M28.f_0)
  return _internal_f_0();
}
inline void Message1_M4_M28::set_f_0(::fleetbench::proto::Message1_M4_M28_E7 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M4.M28.f_0)
}
inline ::fleetbench::proto::Message1_M4_M28_E7 Message1_M4_M28::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M4_M28_E7>(_impl_.f_0_);
}
inline void Message1_M4_M28::_internal_set_f_0(::fleetbench::proto::Message1_M4_M28_E7 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M4_M28_E7_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M4

// repeated int64 f_0 = 2 [packed = true];
inline int Message1_M4::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message1_M4::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message1_M4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int64_t Message1_M4::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M4.f_0)
  return _internal_f_0().Get(index);
}
inline void Message1_M4::set_f_0(int index, ::int64_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M4.f_0)
}
inline void Message1_M4::add_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M4.f_0)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message1_M4::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M4.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M4::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M4.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message1_M4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M4::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message1.M4.M28 f_2 = 4;
inline bool Message1_M4::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M4::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M4_M28& Message1_M4::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M4_M28* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M4_M28&>(::fleetbench::proto::_Message1_M4_M28_default_instance_);
}
inline const ::fleetbench::proto::Message1_M4_M28& Message1_M4::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M4.f_2)
  return _internal_f_2();
}
inline void Message1_M4::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M4_M28* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M4_M28*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M4.f_2)
}
inline ::fleetbench::proto::Message1_M4_M28* Message1_M4::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M4_M28* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M4_M28* Message1_M4::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M4.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M4_M28* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M4_M28* Message1_M4::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M4_M28>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M4_M28*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M4_M28* Message1_M4::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M4_M28* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M4.f_2)
  return _msg;
}
inline void Message1_M4::set_allocated_f_2(::fleetbench::proto::Message1_M4_M28* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M4_M28*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M4.f_2)
}

// -------------------------------------------------------------------

// Message1_M5

// optional fixed64 f_0 = 2;
inline bool Message1_M5::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M5::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message1_M5::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M5.f_0)
  return _internal_f_0();
}
inline void Message1_M5::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M5.f_0)
}
inline ::uint64_t Message1_M5::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M5::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M6_M16_M38_M46_M55

// optional bytes f_0 = 2;
inline bool Message1_M6_M16_M38_M46_M55::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M46_M55::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M6_M16_M38_M46_M55::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M6_M16_M38_M46_M55::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_0)
}
inline std::string* Message1_M6_M16_M38_M46_M55::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_0)
  return _s;
}
inline const std::string& Message1_M6_M16_M38_M46_M55::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M6_M16_M38_M46_M55::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M6_M16_M38_M46_M55::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M6_M16_M38_M46_M55::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M6_M16_M38_M46_M55::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_0)
}

// optional int64 f_1 = 3;
inline bool Message1_M6_M16_M38_M46_M55::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M46_M55::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M6_M16_M38_M46_M55::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_1)
  return _internal_f_1();
}
inline void Message1_M6_M16_M38_M46_M55::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_1)
}
inline ::int64_t Message1_M6_M16_M38_M46_M55::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M6_M16_M38_M46_M55::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message1.M6.M16.M38.M46.M55.E22 f_2 = 4;
inline bool Message1_M6_M16_M38_M46_M55::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M46_M55::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 Message1_M6_M16_M38_M46_M55::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_2)
  return _internal_f_2();
}
inline void Message1_M6_M16_M38_M46_M55::set_f_2(::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_2)
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 Message1_M6_M16_M38_M46_M55::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22>(_impl_.f_2_);
}
inline void Message1_M6_M16_M38_M46_M55::_internal_set_f_2(::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22_IsValid(value));
  _impl_.f_2_ = value;
}

// optional bool f_3 = 5;
inline bool Message1_M6_M16_M38_M46_M55::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M46_M55::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message1_M6_M16_M38_M46_M55::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_3)
  return _internal_f_3();
}
inline void Message1_M6_M16_M38_M46_M55::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M46.M55.f_3)
}
inline bool Message1_M6_M16_M38_M46_M55::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M6_M16_M38_M46_M55::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// -------------------------------------------------------------------

// Message1_M6_M16_M38_M46

// optional int64 f_0 = 3;
inline bool Message1_M6_M16_M38_M46::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M46::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M6_M16_M38_M46::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.f_0)
  return _internal_f_0();
}
inline void Message1_M6_M16_M38_M46::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M46.f_0)
}
inline ::int64_t Message1_M6_M16_M38_M46::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M6_M16_M38_M46::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M6.M16.M38.M46.M55 f_3 = 4;
inline bool Message1_M6_M16_M38_M46::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M6_M16_M38_M46::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55& Message1_M6_M16_M38_M46::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55&>(::fleetbench::proto::_Message1_M6_M16_M38_M46_M55_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M46_M55& Message1_M6_M16_M38_M46::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M46.f_3)
  return _internal_f_3();
}
inline void Message1_M6_M16_M38_M46::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46_M55* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46_M55*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.M16.M38.M46.f_3)
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* Message1_M6_M16_M38_M46::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* Message1_M6_M16_M38_M46::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.M46.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* Message1_M6_M16_M38_M46::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M16_M38_M46_M55>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46_M55*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* Message1_M6_M16_M38_M46::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46_M55* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.M46.f_3)
  return _msg;
}
inline void Message1_M6_M16_M38_M46::set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46_M55* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46_M55*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.M46.f_3)
}

// -------------------------------------------------------------------

// Message1_M6_M16_M38_M50_M64

// optional .fleetbench.proto.Message1.M6.M16.M38.M50.M64.E23 f_0 = 2;
inline bool Message1_M6_M16_M38_M50_M64::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 Message1_M6_M16_M38_M50_M64::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_0)
  return _internal_f_0();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_0(::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_0)
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 Message1_M6_M16_M38_M50_M64::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23>(_impl_.f_0_);
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_0(::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated int64 f_1 = 3 [packed = true];
inline int Message1_M6_M16_M38_M50_M64::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M6_M16_M38_M50_M64::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int64_t Message1_M6_M16_M38_M50_M64::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_1)
  return _internal_f_1().Get(index);
}
inline void Message1_M6_M16_M38_M50_M64::set_f_1(int index, ::int64_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_1)
}
inline void Message1_M6_M16_M38_M50_M64::add_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_1)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message1_M6_M16_M38_M50_M64::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M6_M16_M38_M50_M64::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message1_M6_M16_M38_M50_M64::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M6_M16_M38_M50_M64::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional double f_2 = 5;
inline bool Message1_M6_M16_M38_M50_M64::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Message1_M6_M16_M38_M50_M64::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_2)
  return _internal_f_2();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_2(double value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_2)
}
inline double Message1_M6_M16_M38_M50_M64::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 6;
inline bool Message1_M6_M16_M38_M50_M64::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message1_M6_M16_M38_M50_M64::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_3)
  return _internal_f_3();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_3)
}
inline ::int64_t Message1_M6_M16_M38_M50_M64::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 7;
inline bool Message1_M6_M16_M38_M50_M64::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M6_M16_M38_M50_M64::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_4)
  return _internal_f_4();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_4)
}
inline ::int32_t Message1_M6_M16_M38_M50_M64::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional uint64 f_5 = 8;
inline bool Message1_M6_M16_M38_M50_M64::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Message1_M6_M16_M38_M50_M64::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_5)
  return _internal_f_5();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_5(::uint64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_5)
}
inline ::uint64_t Message1_M6_M16_M38_M50_M64::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_5(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional float f_6 = 9;
inline bool Message1_M6_M16_M38_M50_M64::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50_M64::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Message1_M6_M16_M38_M50_M64::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_6)
  return _internal_f_6();
}
inline void Message1_M6_M16_M38_M50_M64::set_f_6(float value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.M64.f_6)
}
inline float Message1_M6_M16_M38_M50_M64::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message1_M6_M16_M38_M50_M64::_internal_set_f_6(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// -------------------------------------------------------------------

// Message1_M6_M16_M38_M50

// optional string f_0 = 4;
inline bool Message1_M6_M16_M38_M50::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M16_M38_M50::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M6_M16_M38_M50::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M6_M16_M38_M50::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.M50.f_0)
}
inline std::string* Message1_M6_M16_M38_M50::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.M50.f_0)
  return _s;
}
inline const std::string& Message1_M6_M16_M38_M50::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M6_M16_M38_M50::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M6_M16_M38_M50::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M6_M16_M38_M50::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.M50.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M6_M16_M38_M50::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.M50.f_0)
}

// repeated .fleetbench.proto.Message1.M6.M16.M38.M50.M64 f_4 = 5;
inline int Message1_M6_M16_M38_M50::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message1_M6_M16_M38_M50::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message1_M6_M16_M38_M50::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50_M64* Message1_M6_M16_M38_M50::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.M50.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>* Message1_M6_M16_M38_M50::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M6.M16.M38.M50.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M50_M64& Message1_M6_M16_M38_M50::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.M50.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50_M64* Message1_M6_M16_M38_M50::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M6_M16_M38_M50_M64* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M6.M16.M38.M50.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>& Message1_M6_M16_M38_M50::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M6.M16.M38.M50.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>&
Message1_M6_M16_M38_M50::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M6_M16_M38_M50_M64>*
Message1_M6_M16_M38_M50::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message1_M6_M16_M38

// optional int32 f_0 = 1;
inline bool Message1_M6_M16_M38::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M6_M16_M38::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message1_M6_M16_M38::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.f_0)
  return _internal_f_0();
}
inline void Message1_M6_M16_M38::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.f_0)
}
inline ::int32_t Message1_M6_M16_M38::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M6_M16_M38::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 3;
inline bool Message1_M6_M16_M38::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M16_M38::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M6_M16_M38::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M6_M16_M38::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.M38.f_1)
}
inline std::string* Message1_M6_M16_M38::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.f_1)
  return _s;
}
inline const std::string& Message1_M6_M16_M38::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M6_M16_M38::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M6_M16_M38::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M6_M16_M38::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M6_M16_M38::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.f_1)
}

// optional .fleetbench.proto.Message1.M6.M16.M38.M46 f_3 = 4;
inline bool Message1_M6_M16_M38::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M6_M16_M38::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M46& Message1_M6_M16_M38::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M16_M38_M46* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M16_M38_M46&>(::fleetbench::proto::_Message1_M6_M16_M38_M46_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M46& Message1_M6_M16_M38::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.f_3)
  return _internal_f_3();
}
inline void Message1_M6_M16_M38::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.M16.M38.f_3)
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46* Message1_M6_M16_M38::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46* Message1_M6_M16_M38::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46* Message1_M6_M16_M38::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M16_M38_M46>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M46* Message1_M6_M16_M38::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M6_M16_M38_M46* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.f_3)
  return _msg;
}
inline void Message1_M6_M16_M38::set_allocated_f_3(::fleetbench::proto::Message1_M6_M16_M38_M46* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M46*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.f_3)
}

// optional .fleetbench.proto.Message1.M6.M16.M38.M50 f_4 = 5;
inline bool Message1_M6_M16_M38::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M6_M16_M38::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M50& Message1_M6_M16_M38::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M16_M38_M50* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M16_M38_M50&>(::fleetbench::proto::_Message1_M6_M16_M38_M50_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M16_M38_M50& Message1_M6_M16_M38::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.M38.f_4)
  return _internal_f_4();
}
inline void Message1_M6_M16_M38::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M6_M16_M38_M50* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M50*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.M16.M38.f_4)
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50* Message1_M6_M16_M38::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M6_M16_M38_M50* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50* Message1_M6_M16_M38::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.M38.f_4)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M6_M16_M38_M50* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50* Message1_M6_M16_M38::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M16_M38_M50>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M50*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M6_M16_M38_M50* Message1_M6_M16_M38::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M6_M16_M38_M50* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.M38.f_4)
  return _msg;
}
inline void Message1_M6_M16_M38::set_allocated_f_4(::fleetbench::proto::Message1_M6_M16_M38_M50* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38_M50*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.M38.f_4)
}

// -------------------------------------------------------------------

// Message1_M6_M16

// optional bool f_0 = 1;
inline bool Message1_M6_M16::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M6_M16::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M6_M16::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.f_0)
  return _internal_f_0();
}
inline void Message1_M6_M16::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M16.f_0)
}
inline bool Message1_M6_M16::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M6_M16::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M6.M16.M38 f_1 = 2;
inline bool Message1_M6_M16::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M6_M16::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M6_M16_M38& Message1_M6_M16::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M16_M38* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M16_M38&>(::fleetbench::proto::_Message1_M6_M16_M38_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M16_M38& Message1_M6_M16::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M16.f_1)
  return _internal_f_1();
}
inline void Message1_M6_M16::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M6_M16_M38* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.M16.f_1)
}
inline ::fleetbench::proto::Message1_M6_M16_M38* Message1_M6_M16::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M16_M38* Message1_M6_M16::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M16.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M16_M38* Message1_M6_M16::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M16_M38>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M6_M16_M38* Message1_M6_M16::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M6_M16_M38* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M16.f_1)
  return _msg;
}
inline void Message1_M6_M16::set_allocated_f_1(::fleetbench::proto::Message1_M6_M16_M38* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16_M38*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M16.f_1)
}

// -------------------------------------------------------------------

// Message1_M6_M24

// optional .fleetbench.proto.Message1.M6.M24.E2 f_0 = 1;
inline bool Message1_M6_M24::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M24::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M6_M24_E2 Message1_M6_M24::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M24.f_0)
  return _internal_f_0();
}
inline void Message1_M6_M24::set_f_0(::fleetbench::proto::Message1_M6_M24_E2 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M24.f_0)
}
inline ::fleetbench::proto::Message1_M6_M24_E2 Message1_M6_M24::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M6_M24_E2>(_impl_.f_0_);
}
inline void Message1_M6_M24::_internal_set_f_0(::fleetbench::proto::Message1_M6_M24_E2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M6_M24_E2_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M6.M24.E3 f_1 = 3;
inline bool Message1_M6_M24::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M6_M24::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M6_M24_E3 Message1_M6_M24::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M24.f_1)
  return _internal_f_1();
}
inline void Message1_M6_M24::set_f_1(::fleetbench::proto::Message1_M6_M24_E3 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M24.f_1)
}
inline ::fleetbench::proto::Message1_M6_M24_E3 Message1_M6_M24::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M6_M24_E3>(_impl_.f_1_);
}
inline void Message1_M6_M24::_internal_set_f_1(::fleetbench::proto::Message1_M6_M24_E3 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M6_M24_E3_IsValid(value));
  _impl_.f_1_ = value;
}

// optional double f_2 = 5;
inline bool Message1_M6_M24::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M6_M24::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Message1_M6_M24::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M24.f_2)
  return _internal_f_2();
}
inline void Message1_M6_M24::set_f_2(double value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M24.f_2)
}
inline double Message1_M6_M24::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M6_M24::_internal_set_f_2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message1_M6_M27

// optional bytes f_0 = 1;
inline bool Message1_M6_M27::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M6_M27::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M6_M27::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.M27.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M6_M27::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.M27.f_0)
}
inline std::string* Message1_M6_M27::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.M27.f_0)
  return _s;
}
inline const std::string& Message1_M6_M27::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M6_M27::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M6_M27::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M6_M27::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.M27.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M6_M27::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.M27.f_0)
}

// -------------------------------------------------------------------

// Message1_M6

// optional int64 f_0 = 1;
inline bool Message1_M6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message1_M6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.f_0)
  return _internal_f_0();
}
inline void Message1_M6::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M6.f_0)
}
inline ::int64_t Message1_M6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M6::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M6.M16 f_1 = 4;
inline bool Message1_M6::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M6::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M6_M16& Message1_M6::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M16* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M16&>(::fleetbench::proto::_Message1_M6_M16_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M16& Message1_M6::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.f_1)
  return _internal_f_1();
}
inline void Message1_M6::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M6_M16* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.f_1)
}
inline ::fleetbench::proto::Message1_M6_M16* Message1_M6::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M16* Message1_M6::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M6_M16* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M16* Message1_M6::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M16>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M6_M16* Message1_M6::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M6_M16* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.f_1)
  return _msg;
}
inline void Message1_M6::set_allocated_f_1(::fleetbench::proto::Message1_M6_M16* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M16*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.f_1)
}

// optional .fleetbench.proto.Message1.M6.M24 f_4 = 6;
inline bool Message1_M6::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M6::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M6_M24& Message1_M6::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M24* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M24&>(::fleetbench::proto::_Message1_M6_M24_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M24& Message1_M6::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.f_4)
  return _internal_f_4();
}
inline void Message1_M6::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M6_M24* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M24*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.f_4)
}
inline ::fleetbench::proto::Message1_M6_M24* Message1_M6::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M6_M24* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M24* Message1_M6::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M6_M24* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M24* Message1_M6::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M24>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M24*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M6_M24* Message1_M6::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M6_M24* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.f_4)
  return _msg;
}
inline void Message1_M6::set_allocated_f_4(::fleetbench::proto::Message1_M6_M24* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M24*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.f_4)
}

// optional .fleetbench.proto.Message1.M6.M27 f_6 = 9;
inline bool Message1_M6::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message1_M6::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M6_M27& Message1_M6::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6_M27* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6_M27&>(::fleetbench::proto::_Message1_M6_M27_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6_M27& Message1_M6::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M6.f_6)
  return _internal_f_6();
}
inline void Message1_M6::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M6_M27* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M27*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M6.f_6)
}
inline ::fleetbench::proto::Message1_M6_M27* Message1_M6::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M6_M27* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6_M27* Message1_M6::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M6.f_6)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M6_M27* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6_M27* Message1_M6::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6_M27>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M27*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message1_M6_M27* Message1_M6::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M6_M27* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M6.f_6)
  return _msg;
}
inline void Message1_M6::set_allocated_f_6(::fleetbench::proto::Message1_M6_M27* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M6_M27*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M6.f_6)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M88

// optional int32 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M88::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M88::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M88::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M88::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M88::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M88::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109

// optional int32 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118

// optional int64 f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118.f_0)
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119

// optional string f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119.f_0)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119.f_0)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.E49 f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::set_f_0(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_0)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>(_impl_.f_0_);
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_set_f_0(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M118 f_2 = 4;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M118*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_2)
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.M119 f_4 = 5;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_4)
  return _internal_f_4();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_4)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_4)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117::set_allocated_f_4(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_M119*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117.f_4)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116

// optional bool f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_0)
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.M117 f_2 = 4;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115

// optional float f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_0)
}
inline float Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.M116 f_2 = 3;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114

// optional bool f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_0)
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.M115 f_2 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113

// optional int32 f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint64 f_1 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_1)
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.M114 f_3 = 6;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_3)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_3)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113::set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111

// optional int32 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.M113 f_1 = 2;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112

// optional bytes f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112.f_0)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112.f_0)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110

// optional fixed64 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_0)
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M111 f_1 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_1)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_1)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_1)
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.M112 f_2 = 3;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M112>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105

// optional string f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_0)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_0)
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M109 f_2 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M109*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_2)
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.M110 f_3 = 4;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_3)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_3)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_3)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105::set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108

// optional uint64 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108.f_0)
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107

// optional int32 f_0 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bool f_1 = 5;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_1)
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 6;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_2)
}
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional uint64 f_3 = 8;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_3)
}
inline ::uint64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.M108 f_8 = 9;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_8)
  return _internal_f_8();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_8)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_8)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_8)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107::set_allocated_f_8(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107_M108*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107.f_8)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101

// optional int64 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_0)
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M105 f_1 = 3;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.M107 f_3 = 5;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M107>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103

// optional bytes f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_0)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_0)
}

// optional string f_1 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_1)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_1)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104

// optional bytes f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104.f_0)
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104.f_0)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M95

// optional int32 f_0 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M101 f_3 = 4;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101& Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_3)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* Message1_M7_M14_M41_M47_M63_M70_M89_M95::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* Message1_M7_M14_M41_M47_M63_M70_M89_M95::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* Message1_M7_M14_M41_M47_M63_M70_M89_M95::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_3)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_3)
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M103 f_4 = 6;
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* Message1_M7_M14_M41_M47_M63_M70_M89_M95::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>* Message1_M7_M14_M41_M47_M63_M70_M89_M95::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103& Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* Message1_M7_M14_M41_M47_M63_M70_M89_M95::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>& Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>&
Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M103>*
Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.M104 f_6 = 8;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M95::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104& Message1_M7_M14_M41_M47_M63_M70_M89_M95::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_6)
  return _internal_f_6();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_6)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* Message1_M7_M14_M41_M47_M63_M70_M89_M95::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* Message1_M7_M14_M41_M47_M63_M70_M89_M95::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_6)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* Message1_M7_M14_M41_M47_M63_M70_M89_M95::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* Message1_M7_M14_M41_M47_M63_M70_M89_M95::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_6)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M95::set_allocated_f_6(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M104*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95.f_6)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89_M99

// optional int32 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89_M99::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M99::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M99::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M99::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47_M63_M70_M89_M99::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89_M99::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70_M89

// optional float f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message1_M7_M14_M41_M47_M63_M70_M89::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_0)
}
inline float Message1_M7_M14_M41_M47_M63_M70_M89::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M95 f_1 = 2;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95& Message1_M7_M14_M41_M47_M63_M70_M89::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M95_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95& Message1_M7_M14_M41_M47_M63_M70_M89::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_1)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* Message1_M7_M14_M41_M47_M63_M70_M89::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* Message1_M7_M14_M41_M47_M63_M70_M89::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* Message1_M7_M14_M41_M47_M63_M70_M89::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* Message1_M7_M14_M41_M47_M63_M70_M89::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_1)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::set_allocated_f_1(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_1)
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.M99 f_2 = 4;
inline bool Message1_M7_M14_M41_M47_M63_M70_M89::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99& Message1_M7_M14_M41_M47_M63_M70_M89::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M89_M99_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99& Message1_M7_M14_M41_M47_M63_M70_M89::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* Message1_M7_M14_M41_M47_M63_M70_M89::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* Message1_M7_M14_M41_M47_M63_M70_M89::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* Message1_M7_M14_M41_M47_M63_M70_M89::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* Message1_M7_M14_M41_M47_M63_M70_M89::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70_M89::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M99*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M70

// repeated float f_0 = 2 [packed = true];
inline int Message1_M7_M14_M41_M47_M63_M70::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline float Message1_M7_M14_M41_M47_M63_M70::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_0)
  return _internal_f_0().Get(index);
}
inline void Message1_M7_M14_M41_M47_M63_M70::set_f_0(int index, float value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_0)
}
inline void Message1_M7_M14_M41_M47_M63_M70::add_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_0)
}
inline const ::google::protobuf::RepeatedField<float>& Message1_M7_M14_M41_M47_M63_M70::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<float>* Message1_M7_M14_M41_M47_M63_M70::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<float>&
Message1_M7_M14_M41_M47_M63_M70::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<float>* Message1_M7_M14_M41_M47_M63_M70::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M88 f_2 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M70::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M70::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88& Message1_M7_M14_M41_M47_M63_M70::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_M88_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88& Message1_M7_M14_M41_M47_M63_M70::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63_M70::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* Message1_M7_M14_M41_M47_M63_M70::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* Message1_M7_M14_M41_M47_M63_M70::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* Message1_M7_M14_M41_M47_M63_M70::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* Message1_M7_M14_M41_M47_M63_M70::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63_M70::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M88*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_2)
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.M89 f_3 = 4;
inline int Message1_M7_M14_M41_M47_M63_M70::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M7_M14_M41_M47_M63_M70::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M7_M14_M41_M47_M63_M70::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89* Message1_M7_M14_M41_M47_M63_M70::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>* Message1_M7_M14_M41_M47_M63_M70::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89& Message1_M7_M14_M41_M47_M63_M70::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89* Message1_M7_M14_M41_M47_M63_M70::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>& Message1_M7_M14_M41_M47_M63_M70::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>&
Message1_M7_M14_M41_M47_M63_M70::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89>*
Message1_M7_M14_M41_M47_M63_M70::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M74

// optional float f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M74::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M74::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message1_M7_M14_M41_M47_M63_M74::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M74::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74.f_0)
}
inline float Message1_M7_M14_M41_M47_M63_M74::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M74::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message1_M7_M14_M41_M47_M63_M74::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M74::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M74::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M47_M63_M74::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74.f_1)
}
inline ::int64_t Message1_M7_M14_M41_M47_M63_M74::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M14_M41_M47_M63_M74::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63_M79

// optional fixed32 f_0 = 1;
inline bool Message1_M7_M14_M41_M47_M63_M79::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63_M79::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message1_M7_M14_M41_M47_M63_M79::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63_M79::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79.f_0)
}
inline ::uint32_t Message1_M7_M14_M41_M47_M63_M79::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63_M79::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47_M63

// optional int64 f_0 = 2;
inline bool Message1_M7_M14_M41_M47_M63::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47_M63::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M7_M14_M41_M47_M63::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47_M63::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_0)
}
inline ::int64_t Message1_M7_M14_M41_M47_M63::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47_M63::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M70 f_2 = 4;
inline bool Message1_M7_M14_M41_M47_M63::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47_M63::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70& Message1_M7_M14_M41_M47_M63::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_M70_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70& Message1_M7_M14_M41_M47_M63::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47_M63::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* Message1_M7_M14_M41_M47_M63::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* Message1_M7_M14_M41_M47_M63::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* Message1_M7_M14_M41_M47_M63::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* Message1_M7_M14_M41_M47_M63::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47_M63::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_2)
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M74 f_4 = 5;
inline int Message1_M7_M14_M41_M47_M63::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message1_M7_M14_M41_M47_M63::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message1_M7_M14_M41_M47_M63::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74* Message1_M7_M14_M41_M47_M63::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>* Message1_M7_M14_M41_M47_M63::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74& Message1_M7_M14_M41_M47_M63::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74* Message1_M7_M14_M41_M47_M63::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>& Message1_M7_M14_M41_M47_M63::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>&
Message1_M7_M14_M41_M47_M63::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M74>*
Message1_M7_M14_M41_M47_M63::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47.M63.M79 f_5 = 7;
inline int Message1_M7_M14_M41_M47_M63::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message1_M7_M14_M41_M47_M63::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message1_M7_M14_M41_M47_M63::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79* Message1_M7_M14_M41_M47_M63::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>* Message1_M7_M14_M41_M47_M63::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79& Message1_M7_M14_M41_M47_M63::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_5)
  return _internal_f_5().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79* Message1_M7_M14_M41_M47_M63::add_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79* _add = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_5)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>& Message1_M7_M14_M41_M47_M63::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.M47.M63.f_5)
  return _internal_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>&
Message1_M7_M14_M41_M47_M63::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M79>*
Message1_M7_M14_M41_M47_M63::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M47

// optional int32 f_0 = 2;
inline bool Message1_M7_M14_M41_M47::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M47::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M7_M14_M41_M47::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M47::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M47.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M47::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M47::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M47.M63 f_2 = 3;
inline bool Message1_M7_M14_M41_M47::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M47::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63& Message1_M7_M14_M41_M47::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63&>(::fleetbench::proto::_Message1_M7_M14_M41_M47_M63_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47_M63& Message1_M7_M14_M41_M47::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M47.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14_M41_M47::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* Message1_M7_M14_M41_M47::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* Message1_M7_M14_M41_M47::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M47.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* Message1_M7_M14_M41_M47::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M47_M63>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* Message1_M7_M14_M41_M47::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M47_M63* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M47.f_2)
  return _msg;
}
inline void Message1_M7_M14_M41_M47::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41_M47_M63* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M47_M63*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M47.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M52_M66

// optional uint64 f_0 = 4;
inline bool Message1_M7_M14_M41_M52_M66::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M52_M66::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message1_M7_M14_M41_M52_M66::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M52_M66::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_0)
}
inline ::uint64_t Message1_M7_M14_M41_M52_M66::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M52_M66::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 5;
inline bool Message1_M7_M14_M41_M52_M66::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M52_M66::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message1_M7_M14_M41_M52_M66::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M14_M41_M52_M66::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_1)
}
inline float Message1_M7_M14_M41_M52_M66::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M14_M41_M52_M66::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 6;
inline bool Message1_M7_M14_M41_M52_M66::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M52_M66::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41_M52_M66::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41_M52_M66::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_2)
}
inline std::string* Message1_M7_M14_M41_M52_M66::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_2)
  return _s;
}
inline const std::string& Message1_M7_M14_M41_M52_M66::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message1_M7_M14_M41_M52_M66::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41_M52_M66::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41_M52_M66::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41_M52_M66::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M52.M66.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41_M52

// optional int32 f_0 = 3;
inline bool Message1_M7_M14_M41_M52::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14_M41_M52::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M7_M14_M41_M52::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M52.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14_M41_M52::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.M52.f_0)
}
inline ::int32_t Message1_M7_M14_M41_M52::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14_M41_M52::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M52.M66 f_3 = 4;
inline bool Message1_M7_M14_M41_M52::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41_M52::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66& Message1_M7_M14_M41_M52::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66&>(::fleetbench::proto::_Message1_M7_M14_M41_M52_M66_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M52_M66& Message1_M7_M14_M41_M52::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.M52.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41_M52::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52_M66* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52_M66*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M52.f_3)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* Message1_M7_M14_M41_M52::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* Message1_M7_M14_M41_M52::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.M52.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* Message1_M7_M14_M41_M52::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M52_M66>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52_M66*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* Message1_M7_M14_M41_M52::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52_M66* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.M52.f_3)
  return _msg;
}
inline void Message1_M7_M14_M41_M52::set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52_M66* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52_M66*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.M52.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M14_M41

// optional string f_0 = 2;
inline bool Message1_M7_M14_M41::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M14_M41::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M14_M41::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M14_M41::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.M41.f_0)
}
inline std::string* Message1_M7_M14_M41::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.f_0)
  return _s;
}
inline const std::string& Message1_M7_M14_M41::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M14_M41::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M14_M41::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M14_M41::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M14_M41::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.f_0)
}

// repeated .fleetbench.proto.Message1.M7.M14.M41.M47 f_2 = 3;
inline int Message1_M7_M14_M41::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M14_M41::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M14_M41::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47* Message1_M7_M14_M41::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>* Message1_M7_M14_M41::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M14.M41.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M47& Message1_M7_M14_M41::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M47* Message1_M7_M14_M41::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14_M41_M47* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M14.M41.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>& Message1_M7_M14_M41::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M14.M41.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>&
Message1_M7_M14_M41::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14_M41_M47>*
Message1_M7_M14_M41::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message1.M7.M14.M41.M52 f_3 = 4;
inline bool Message1_M7_M14_M41::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M14_M41::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M52& Message1_M7_M14_M41::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41_M52* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41_M52&>(::fleetbench::proto::_Message1_M7_M14_M41_M52_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41_M52& Message1_M7_M14_M41::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.M41.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M14_M41::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.M41.f_3)
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52* Message1_M7_M14_M41::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52* Message1_M7_M14_M41::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.M41.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52* Message1_M7_M14_M41::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41_M52>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41_M52* Message1_M7_M14_M41::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M14_M41_M52* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.M41.f_3)
  return _msg;
}
inline void Message1_M7_M14_M41::set_allocated_f_3(::fleetbench::proto::Message1_M7_M14_M41_M52* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41_M52*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.M41.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M14

// optional uint64 f_0 = 2;
inline bool Message1_M7_M14::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M14::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message1_M7_M14::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M14::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M14.f_0)
}
inline ::uint64_t Message1_M7_M14::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M14::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M14.M41 f_2 = 4;
inline bool Message1_M7_M14::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M14::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M14_M41& Message1_M7_M14::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M14_M41* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M14_M41&>(::fleetbench::proto::_Message1_M7_M14_M41_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M14_M41& Message1_M7_M14::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M14.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M14::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M14.f_2)
}
inline ::fleetbench::proto::Message1_M7_M14_M41* Message1_M7_M14::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M14_M41* Message1_M7_M14::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M14.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M14_M41* Message1_M7_M14::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M14_M41>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M14_M41* Message1_M7_M14::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M14_M41* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M14.f_2)
  return _msg;
}
inline void Message1_M7_M14::set_allocated_f_2(::fleetbench::proto::Message1_M7_M14_M41* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M14_M41*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M14.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M32_M53

// optional int32 f_0 = 1;
inline bool Message1_M7_M18_M32_M53::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message1_M7_M18_M32_M53::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M32_M53::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_0)
}
inline ::int32_t Message1_M7_M18_M32_M53::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 2;
inline bool Message1_M7_M18_M32_M53::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M32_M53::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M32_M53::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_1)
}
inline std::string* Message1_M7_M18_M32_M53::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M32.M53.f_1)
  return _s;
}
inline const std::string& Message1_M7_M18_M32_M53::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M32.M53.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M32_M53::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M32.M53.f_1)
}

// optional .fleetbench.proto.Message1.M7.M18.M32.M53.E21 f_2 = 3;
inline bool Message1_M7_M18_M32_M53::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53_E21 Message1_M7_M18_M32_M53::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M18_M32_M53::set_f_2(::fleetbench::proto::Message1_M7_M18_M32_M53_E21 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_2)
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53_E21 Message1_M7_M18_M32_M53::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M32_M53_E21>(_impl_.f_2_);
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_2(::fleetbench::proto::Message1_M7_M18_M32_M53_E21 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M32_M53_E21_IsValid(value));
  _impl_.f_2_ = value;
}

// optional float f_3 = 4;
inline bool Message1_M7_M18_M32_M53::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Message1_M7_M18_M32_M53::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M18_M32_M53::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_3)
}
inline float Message1_M7_M18_M32_M53::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 7;
inline bool Message1_M7_M18_M32_M53::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Message1_M7_M18_M32_M53::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_4)
  return _internal_f_4();
}
inline void Message1_M7_M18_M32_M53::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_4)
}
inline ::int32_t Message1_M7_M18_M32_M53::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 8;
inline bool Message1_M7_M18_M32_M53::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message1_M7_M18_M32_M53::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_5)
  return _internal_f_5();
}
inline void Message1_M7_M18_M32_M53::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_5)
}
inline ::int64_t Message1_M7_M18_M32_M53::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 9;
inline bool Message1_M7_M18_M32_M53::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message1_M7_M18_M32_M53::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_6)
  return _internal_f_6();
}
inline void Message1_M7_M18_M32_M53::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_6)
}
inline ::int64_t Message1_M7_M18_M32_M53::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional string f_7 = 12;
inline bool Message1_M7_M18_M32_M53::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M7_M18_M32_M53::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M32_M53::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_7)
}
inline std::string* Message1_M7_M18_M32_M53::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M32.M53.f_7)
  return _s;
}
inline const std::string& Message1_M7_M18_M32_M53::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M32.M53.f_7)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M32_M53::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M32.M53.f_7)
}

// optional string f_8 = 13;
inline bool Message1_M7_M18_M32_M53::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message1_M7_M18_M32_M53::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M32_M53::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_8_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_8)
}
inline std::string* Message1_M7_M18_M32_M53::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M32.M53.f_8)
  return _s;
}
inline const std::string& Message1_M7_M18_M32_M53::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M32.M53.f_8)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M32_M53::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M32.M53.f_8)
}

// optional int32 f_9 = 14;
inline bool Message1_M7_M18_M32_M53::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Message1_M7_M18_M32_M53::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_9)
  return _internal_f_9();
}
inline void Message1_M7_M18_M32_M53::set_f_9(::int32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_9)
}
inline ::int32_t Message1_M7_M18_M32_M53::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional string f_10 = 15;
inline bool Message1_M7_M18_M32_M53::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message1_M7_M18_M32_M53::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M32_M53::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_10)
}
inline std::string* Message1_M7_M18_M32_M53::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M32.M53.f_10)
  return _s;
}
inline const std::string& Message1_M7_M18_M32_M53::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M32_M53::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M32.M53.f_10)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M32_M53::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M32.M53.f_10)
}

// optional int64 f_11 = 17;
inline bool Message1_M7_M18_M32_M53::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Message1_M7_M18_M32_M53::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_11)
  return _internal_f_11();
}
inline void Message1_M7_M18_M32_M53::set_f_11(::int64_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_11)
}
inline ::int64_t Message1_M7_M18_M32_M53::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_11(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional int64 f_12 = 19;
inline bool Message1_M7_M18_M32_M53::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t Message1_M7_M18_M32_M53::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_12)
  return _internal_f_12();
}
inline void Message1_M7_M18_M32_M53::set_f_12(::int64_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_12)
}
inline ::int64_t Message1_M7_M18_M32_M53::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_12(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional int32 f_13 = 20;
inline bool Message1_M7_M18_M32_M53::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Message1_M7_M18_M32_M53::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_13)
  return _internal_f_13();
}
inline void Message1_M7_M18_M32_M53::set_f_13(::int32_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_13)
}
inline ::int32_t Message1_M7_M18_M32_M53::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_13(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int64 f_14 = 21;
inline bool Message1_M7_M18_M32_M53::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M7_M18_M32_M53::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int64_t Message1_M7_M18_M32_M53::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.M53.f_14)
  return _internal_f_14();
}
inline void Message1_M7_M18_M32_M53::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.M53.f_14)
}
inline ::int64_t Message1_M7_M18_M32_M53::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message1_M7_M18_M32_M53::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M32

// optional int32 f_0 = 1;
inline bool Message1_M7_M18_M32::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M32::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M7_M18_M32::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M32::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M32.f_0)
}
inline ::int32_t Message1_M7_M18_M32::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M32::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M32.M53 f_1 = 2;
inline bool Message1_M7_M18_M32::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M32::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M32_M53& Message1_M7_M18_M32::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M32_M53* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M32_M53&>(::fleetbench::proto::_Message1_M7_M18_M32_M53_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M32_M53& Message1_M7_M18_M32::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M32.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M32::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M32_M53* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M32_M53*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M32.f_1)
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53* Message1_M7_M18_M32::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M32_M53* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53* Message1_M7_M18_M32::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M32.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M32_M53* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53* Message1_M7_M18_M32::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M32_M53>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M32_M53*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M18_M32_M53* Message1_M7_M18_M32::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M32_M53* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M32.f_1)
  return _msg;
}
inline void Message1_M7_M18_M32::set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M32_M53* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M32_M53*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M32.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M77

// optional int64 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M77::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M77::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M77::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M77::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M77::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M54_M77::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M91_M96

// optional int64 f_0 = 5;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91_M96::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M96::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91_M96::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M96::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91_M96::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M96::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106

// optional int64 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102

// repeated bytes f_0 = 1;
inline int Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_0()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::f_0(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
  return _internal_f_0().Get(index);
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::mutable_f_0(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
  return _internal_mutable_f_0()->Mutable(index);
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_f_0(int index, const std::string& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_f_0(int index, std::string&& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_f_0(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_f_0(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_f_0(int index, absl::string_view value) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::add_f_0(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::f_0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.M106 f_1 = 2;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106& Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_1)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_1)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102::set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_M106*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M91_M97

// optional string f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91_M97::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M80_M91_M97::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M54_M80_M91_M97::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_0)
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91_M97::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_0)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M80_M91_M97::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91_M97::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91_M97::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_0)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.M102 f_1 = 3;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91_M97::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& Message1_M7_M18_M39_M45_M54_M80_M91_M97::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102& Message1_M7_M18_M39_M45_M54_M80_M91_M97::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_1)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* Message1_M7_M18_M39_M45_M54_M80_M91_M97::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* Message1_M7_M18_M39_M45_M54_M80_M91_M97::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* Message1_M7_M18_M39_M45_M54_M80_M91_M97::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* Message1_M7_M18_M39_M45_M54_M80_M91_M97::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_1)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91_M97::set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97_M102*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M91

// optional float f_0 = 3;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message1_M7_M18_M39_M45_M54_M80_M91::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_0)
}
inline float Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 5;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_1)
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated bytes f_2 = 6;
inline int Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M18_M39_M45_M54_M80_M91::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M80_M91::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
  return _internal_f_2().Get(index);
}
inline std::string* Message1_M7_M18_M39_M45_M54_M80_M91::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_2(int index, const std::string& value) {
  _internal_mutable_f_2()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_2(int index, std::string&& value) {
  _internal_mutable_f_2()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_2(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_2()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_2(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_2()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_f_2(int index, absl::string_view value) {
  _internal_mutable_f_2()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::add_f_2(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M54_M80_M91::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M54_M80_M91::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M54_M80_M91::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M96 f_6 = 7;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96& Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M80_M91_M96_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96& Message1_M7_M18_M39_M45_M54_M80_M91::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_6)
  return _internal_f_6();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_6)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* Message1_M7_M18_M39_M45_M54_M80_M91::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* Message1_M7_M18_M39_M45_M54_M80_M91::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_6)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* Message1_M7_M18_M39_M45_M54_M80_M91::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* Message1_M7_M18_M39_M45_M54_M80_M91::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_6)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M96*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_6)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.M97 f_7 = 8;
inline bool Message1_M7_M18_M39_M45_M54_M80_M91::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97& Message1_M7_M18_M39_M45_M54_M80_M91::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M80_M91_M97_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97& Message1_M7_M18_M39_M45_M54_M80_M91::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_7)
  return _internal_f_7();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_7)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* Message1_M7_M18_M39_M45_M54_M80_M91::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* Message1_M7_M18_M39_M45_M54_M80_M91::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_7)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* Message1_M7_M18_M39_M45_M54_M80_M91::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* Message1_M7_M18_M39_M45_M54_M80_M91::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_7)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M91::set_allocated_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91_M97*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91.f_7)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80_M94

// optional int64 f_0 = 3;
inline bool Message1_M7_M18_M39_M45_M54_M80_M94::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M94::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M94::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M80_M94::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M54_M80_M94::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M54_M80_M94::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M80

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.E24 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M80::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M80::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 Message1_M7_M18_M39_M45_M54_M80::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M80::set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_0)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 Message1_M7_M18_M39_M45_M54_M80::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24>(_impl_.f_0_);
}
inline void Message1_M7_M18_M39_M45_M54_M80::_internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M91 f_1 = 2;
inline int Message1_M7_M18_M39_M45_M54_M80::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M18_M39_M45_M54_M80::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M18_M39_M45_M54_M80::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91* Message1_M7_M18_M39_M45_M54_M80::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>* Message1_M7_M18_M39_M45_M54_M80::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91& Message1_M7_M18_M39_M45_M54_M80::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91* Message1_M7_M18_M39_M45_M54_M80::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>& Message1_M7_M18_M39_M45_M54_M80::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>&
Message1_M7_M18_M39_M45_M54_M80::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M91>*
Message1_M7_M18_M39_M45_M54_M80::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.M94 f_2 = 4;
inline int Message1_M7_M18_M39_M45_M54_M80::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M18_M39_M45_M54_M80::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M18_M39_M45_M54_M80::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94* Message1_M7_M18_M39_M45_M54_M80::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>* Message1_M7_M18_M39_M45_M54_M80::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94& Message1_M7_M18_M39_M45_M54_M80::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94* Message1_M7_M18_M39_M45_M54_M80::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>& Message1_M7_M18_M39_M45_M54_M80::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>&
Message1_M7_M18_M39_M45_M54_M80::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_M94>*
Message1_M7_M18_M39_M45_M54_M80::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M82_M93

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93.E29 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M82_M93::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M82_M93::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 Message1_M7_M18_M39_M45_M54_M82_M93::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M54_M82_M93::set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93.f_0)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 Message1_M7_M18_M39_M45_M54_M82_M93::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29>(_impl_.f_0_);
}
inline void Message1_M7_M18_M39_M45_M54_M82_M93::_internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54_M82

// optional string f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54_M82::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M82::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M82::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M54_M82::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_0)
}
inline std::string* Message1_M7_M18_M39_M45_M54_M82::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_0)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M54_M82::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M18_M39_M45_M54_M82::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54_M82::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54_M82::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M54_M82::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_0)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.M93 f_1 = 4;
inline bool Message1_M7_M18_M39_M45_M54_M82::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54_M82::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93& Message1_M7_M18_M39_M45_M54_M82::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M82_M93_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93& Message1_M7_M18_M39_M45_M54_M82::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M54_M82::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_1)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* Message1_M7_M18_M39_M45_M54_M82::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* Message1_M7_M18_M39_M45_M54_M82::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* Message1_M7_M18_M39_M45_M54_M82::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* Message1_M7_M18_M39_M45_M54_M82::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_1)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54_M82::set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M54

// optional string f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M54::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M54::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M54::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M54::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_0)
}
inline std::string* Message1_M7_M18_M39_M45_M54::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_0)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M54::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M18_M39_M45_M54::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M54::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M54::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_0)
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M77 f_1 = 2;
inline int Message1_M7_M18_M39_M45_M54::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M18_M39_M45_M54::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M18_M39_M45_M54::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77* Message1_M7_M18_M39_M45_M54::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>* Message1_M7_M18_M39_M45_M54::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77& Message1_M7_M18_M39_M45_M54::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77* Message1_M7_M18_M39_M45_M54::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>& Message1_M7_M18_M39_M45_M54::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>&
Message1_M7_M18_M39_M45_M54::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M77>*
Message1_M7_M18_M39_M45_M54::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M80 f_2 = 3;
inline bool Message1_M7_M18_M39_M45_M54::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M54::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80& Message1_M7_M18_M39_M45_M54::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M54_M80_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80& Message1_M7_M18_M39_M45_M54::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M18_M39_M45_M54::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_2)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* Message1_M7_M18_M39_M45_M54::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* Message1_M7_M18_M39_M45_M54::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* Message1_M7_M18_M39_M45_M54::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* Message1_M7_M18_M39_M45_M54::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_2)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M54::set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_2)
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54.M82 f_3 = 4;
inline int Message1_M7_M18_M39_M45_M54::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M7_M18_M39_M45_M54::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M7_M18_M39_M45_M54::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82* Message1_M7_M18_M39_M45_M54::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>* Message1_M7_M18_M39_M45_M54::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82& Message1_M7_M18_M39_M45_M54::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82* Message1_M7_M18_M39_M45_M54::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>& Message1_M7_M18_M39_M45_M54::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M54.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>&
Message1_M7_M18_M39_M45_M54::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82>*
Message1_M7_M18_M39_M45_M54::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M67_M85_M98

// optional int64 f_0 = 3;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M98::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M98::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M98::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 4;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M98::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M98::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M98::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_1)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M98::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_1)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M98::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M98::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M98::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M98::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M67_M85_M100

// optional uint64 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_0)
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_1)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E30 f_2 = 3;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_2)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>(_impl_.f_2_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_IsValid(value));
  _impl_.f_2_ = value;
}

// optional float f_3 = 4;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_3)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 5;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_4)
  return _internal_f_4();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_4)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 7;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_5)
  return _internal_f_5();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_5)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E31 f_6 = 8;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_6)
  return _internal_f_6();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_6)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>(_impl_.f_6_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_IsValid(value));
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E32 f_7 = 9;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_7)
  return _internal_f_7();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_7)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>(_impl_.f_7_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_7(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_IsValid(value));
  _impl_.f_7_ = value;
}

// optional bytes f_8 = 10;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_8)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_8)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_8)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_8)
}

// optional string f_9 = 12;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_9_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_9)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_9)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_9)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_9)
}

// optional bytes f_10 = 13;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_10_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_10)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_10)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_10)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_10)
}

// optional uint32 f_11 = 16;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_11)
  return _internal_f_11();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_11(::uint32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_11)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_11(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional string f_12 = 17;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_12)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_12)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_12)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_12)
}

// optional bool f_13 = 19;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_13() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_13)
  return _internal_f_13();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_13(bool value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_13)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_13(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int64 f_14 = 22;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_14)
  return _internal_f_14();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_14)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E33 f_15 = 23;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_15)
  return _internal_f_15();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_15(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_15)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>(_impl_.f_15_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_15(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_IsValid(value));
  _impl_.f_15_ = value;
}

// optional fixed64 f_16 = 24;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_16)
  return _internal_f_16();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_16(::uint64_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_16)
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_16(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional int32 f_17 = 25;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_17)
  return _internal_f_17();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_17(::int32_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_17)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_17(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional fixed32 f_18 = 26;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_18)
  return _internal_f_18();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_18(::uint32_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_18)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_18(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional int32 f_19 = 28;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_19)
  return _internal_f_19();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_19(::int32_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_19)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional double f_20 = 30;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_20() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline double Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_20)
  return _internal_f_20();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_20(double value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_20)
}
inline double Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_20(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional fixed32 f_21 = 31;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_21() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_21)
  return _internal_f_21();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_21(::uint32_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_21)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_21(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E34 f_22 = 32;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_22() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_22)
  return _internal_f_22();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_22(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_22)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>(_impl_.f_22_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_22(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_IsValid(value));
  _impl_.f_22_ = value;
}

// optional uint32 f_23 = 33;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_23() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_23)
  return _internal_f_23();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_23(::uint32_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_23)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_23(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional string f_24 = 34;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_24)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_24)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_24)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_24)
}

// optional string f_25 = 36;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_25() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_25)
  return _internal_f_25();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_25(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_25_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_25)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_25() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_25();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_25)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_25(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_25_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_25_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_25)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_25_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_25_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_25(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_25_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_25_.IsDefault()) {
          _impl_.f_25_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_25)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E35 f_26 = 37;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_26)
  return _internal_f_26();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_26(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_26)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>(_impl_.f_26_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_26(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_IsValid(value));
  _impl_.f_26_ = value;
}

// optional uint64 f_27 = 39;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_27)
  return _internal_f_27();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_27(::uint64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_27)
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_27(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E36 f_28 = 41;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_28)
  return _internal_f_28();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_28(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_28)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>(_impl_.f_28_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_28(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_IsValid(value));
  _impl_.f_28_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E37 f_29 = 43;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_29() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_29)
  return _internal_f_29();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_29(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_29)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>(_impl_.f_29_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_29(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_IsValid(value));
  _impl_.f_29_ = value;
}

// optional string f_30 = 45;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_30() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_30() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_30)
  return _internal_f_30();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_30(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_30_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_30)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_30() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_30();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_30)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_30(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_30_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_30_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_30)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_30_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_30_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_30(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_30_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_30_.IsDefault()) {
          _impl_.f_30_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_30)
}

// optional string f_31 = 47;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_31() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_31)
  return _internal_f_31();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_31(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_31_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_31)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_31)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_31(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_31_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_31_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_31)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_31_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_31_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_31(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_31_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_31_.IsDefault()) {
          _impl_.f_31_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_31)
}

// optional bool f_32 = 48;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_32)
  return _internal_f_32();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_32(bool value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_32)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_32(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E38 f_33 = 49;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_33() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_33)
  return _internal_f_33();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_33(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_33)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>(_impl_.f_33_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_33(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_IsValid(value));
  _impl_.f_33_ = value;
}

// optional int64 f_34 = 50;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_34)
  return _internal_f_34();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_34(::int64_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_34)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_34(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// repeated string f_35 = 51;
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_35_size() const {
  return _internal_f_35().size();
}
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_35_size() const {
  return _internal_f_35_size();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_.Clear();
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_35()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_35(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
  return _internal_f_35().Get(index);
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_35(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
  return _internal_mutable_f_35()->Mutable(index);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_35(int index, const std::string& value) {
  _internal_mutable_f_35()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_35(int index, std::string&& value) {
  _internal_mutable_f_35()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_35(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_35()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_35(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_35()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_35(int index, absl::string_view value) {
  _internal_mutable_f_35()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_35()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_35()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_35()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_35()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_35(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_35()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_35() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
  return _internal_f_35();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_35() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_35)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_35();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_35() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_35_;
}

// optional bool f_36 = 52;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_36)
  return _internal_f_36();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_36(bool value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_36)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_36(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional int32 f_37 = 53;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_37)
  return _internal_f_37();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_37(::int32_t value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_37)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_37(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional bool f_38 = 54;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_38() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = false;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_38)
  return _internal_f_38();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_38(bool value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_38)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_38(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = value;
}

// optional fixed32 f_39 = 56;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0u;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_39)
  return _internal_f_39();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_39(::uint32_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_39)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_39(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional int64 f_40 = 59;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_40)
  return _internal_f_40();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_40(::int64_t value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_40)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_40(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = value;
}

// optional int64 f_41 = 60;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_41)
  return _internal_f_41();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_41(::int64_t value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_41)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_41(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional int32 f_42 = 61;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = 0;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_42)
  return _internal_f_42();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_42(::int32_t value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_42)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_42(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// optional string f_43 = 62;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_43() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_43() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_43)
  return _internal_f_43();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_43(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_43_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_43)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_43() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_43();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_43)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_43(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_43_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_43_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_43)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_43_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_43_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_43(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_43_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_43_.IsDefault()) {
          _impl_.f_43_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_43)
}

// optional bool f_44 = 63;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_44() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = false;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_44)
  return _internal_f_44();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_44(bool value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_44)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_44(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E39 f_45 = 65;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_45)
  return _internal_f_45();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_45(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_45)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>(_impl_.f_45_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_45(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_IsValid(value));
  _impl_.f_45_ = value;
}

// optional float f_46 = 66;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_46() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_46() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_46)
  return _internal_f_46();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_46(float value) {
  _internal_set_f_46(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_46)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_46(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E40 f_47 = 68;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_47() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_47)
  return _internal_f_47();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_47(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_47)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>(_impl_.f_47_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_47(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_IsValid(value));
  _impl_.f_47_ = value;
}

// optional float f_48 = 71;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_48)
  return _internal_f_48();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_48(float value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_48)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_48(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// optional int32 f_49 = 72;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_49() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_49() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_49)
  return _internal_f_49();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_49(::int32_t value) {
  _internal_set_f_49(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_49)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_49(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = value;
}

// optional string f_50 = 74;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_50() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_50() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_50)
  return _internal_f_50();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_50(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_50_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_50)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_50() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_50();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_50)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_50(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_50_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_50_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_50)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_50_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_50_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_50(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_50_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_50_.IsDefault()) {
          _impl_.f_50_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_50)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E41 f_51 = 76;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_51() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_51)
  return _internal_f_51();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_51(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_51)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>(_impl_.f_51_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_51(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_IsValid(value));
  _impl_.f_51_ = value;
}

// optional int64 f_52 = 80;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_52() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_52() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_52)
  return _internal_f_52();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_52(::int64_t value) {
  _internal_set_f_52(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_52)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_52(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = value;
}

// optional int64 f_53 = 81;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_53() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_53() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_53)
  return _internal_f_53();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_53(::int64_t value) {
  _internal_set_f_53(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_53)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_53(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = value;
}

// optional float f_54 = 83;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_54() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_54)
  return _internal_f_54();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_54(float value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_54)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_54(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = value;
}

// optional int64 f_55 = 84;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_55() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_55)
  return _internal_f_55();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_55(::int64_t value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_55)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_55(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// optional float f_56 = 85;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_56() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_56() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_56)
  return _internal_f_56();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_56(float value) {
  _internal_set_f_56(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_56)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_56(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = value;
}

// optional int32 f_57 = 86;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_57() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = 0;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_57)
  return _internal_f_57();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_57(::int32_t value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_57)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_57(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional uint64 f_58 = 89;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_58() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_58)
  return _internal_f_58();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_58(::uint64_t value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_58)
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_58(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional uint32 f_59 = 91;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_59() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_59)
  return _internal_f_59();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_59(::uint32_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_59)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_59(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// optional float f_60 = 92;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_60() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = 0;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_60)
  return _internal_f_60();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_60(float value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_60)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_60_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_60(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = value;
}

// optional int64 f_61 = 94;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_61() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_61() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_61)
  return _internal_f_61();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_61(::int64_t value) {
  _internal_set_f_61(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_61)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_61(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = value;
}

// optional bool f_62 = 96;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_62() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = false;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_62)
  return _internal_f_62();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_62(bool value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_62)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_62(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E42 f_63 = 97;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_63() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = 0;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_63() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_63)
  return _internal_f_63();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_63(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 value) {
  _internal_set_f_63(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_63)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>(_impl_.f_63_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_63(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_IsValid(value));
  _impl_.f_63_ = value;
}

// optional bool f_64 = 100;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = false;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_64)
  return _internal_f_64();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_64(bool value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_64)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_64_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_64(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = value;
}

// optional bool f_65 = 102;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_65() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = false;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_65() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_65)
  return _internal_f_65();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_65(bool value) {
  _internal_set_f_65(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_65)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_65_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_65(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = value;
}

// optional int64 f_66 = 103;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_66() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_66)
  return _internal_f_66();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_66(::int64_t value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_66)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_66_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_66(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = value;
}

// optional int32 f_67 = 104;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_67() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = 0;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_67() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_67)
  return _internal_f_67();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_67(::int32_t value) {
  _internal_set_f_67(value);
  _impl_._has_bits_[2] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_67)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_67(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = value;
}

// optional int64 f_68 = 105;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_68)
  return _internal_f_68();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_68(::int64_t value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_68)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_68_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_68(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = value;
}

// optional fixed64 f_69 = 107;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_69() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_69() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_69)
  return _internal_f_69();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_69(::uint64_t value) {
  _internal_set_f_69(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_69)
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_69(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = value;
}

// optional bytes f_70 = 110;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_70() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_70() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_70)
  return _internal_f_70();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_70(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_70_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_70)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_70() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_70();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_70)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_70(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_70_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_70_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_70)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_70_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_70_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_70(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_70_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_70_.IsDefault()) {
          _impl_.f_70_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_70)
}

// optional string f_71 = 111;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_71() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_71() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_71)
  return _internal_f_71();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_71(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_71_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_71)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_71() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_71();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_71)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_71(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_71_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_71_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_71)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_71_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_71_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_71(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_71_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_71_.IsDefault()) {
          _impl_.f_71_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_71)
}

// optional fixed32 f_72 = 112;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_72() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = 0u;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_72() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_72)
  return _internal_f_72();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_72(::uint32_t value) {
  _internal_set_f_72(value);
  _impl_._has_bits_[2] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_72)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_72(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E43 f_73 = 113 [packed = true];
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_73_size() const {
  return _internal_f_73().size();
}
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_73_size() const {
  return _internal_f_73_size();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_73(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_73)
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>(_internal_f_73().Get(index));
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_73(int index, ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 value) {
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_IsValid(value));
  _internal_mutable_f_73()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_73)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_73(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43 value) {
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_73)
}
inline const ::google::protobuf::RepeatedField<int>& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_73() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_73)
  return _internal_f_73();
}
inline ::google::protobuf::RepeatedField<int>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_73()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_73)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_73();
}
inline const ::google::protobuf::RepeatedField<int>& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_73()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_73_;
}
inline ::google::protobuf::RepeatedField<int>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_73() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_73_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E44 f_74 = 114;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_74() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = 0;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_74() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_74)
  return _internal_f_74();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_74(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 value) {
  _internal_set_f_74(value);
  _impl_._has_bits_[2] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_74)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>(_impl_.f_74_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_74(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_IsValid(value));
  _impl_.f_74_ = value;
}

// optional float f_75 = 115;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_75() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = 0;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_75() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_75)
  return _internal_f_75();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_75(float value) {
  _internal_set_f_75(value);
  _impl_._has_bits_[2] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_75)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_75(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = value;
}

// optional int64 f_76 = 116;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_76() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_76() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_76)
  return _internal_f_76();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_76(::int64_t value) {
  _internal_set_f_76(value);
  _impl_._has_bits_[2] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_76)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_76(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = value;
}

// optional float f_77 = 117;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_77() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = 0;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_77() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_77)
  return _internal_f_77();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_77(float value) {
  _internal_set_f_77(value);
  _impl_._has_bits_[2] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_77)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_77(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E45 f_78 = 118;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_78() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_ = 0;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_78() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_78)
  return _internal_f_78();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_78(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 value) {
  _internal_set_f_78(value);
  _impl_._has_bits_[2] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_78)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>(_impl_.f_78_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_78(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_IsValid(value));
  _impl_.f_78_ = value;
}

// optional int64 f_79 = 120;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_79() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_79() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_79() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_79)
  return _internal_f_79();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_79(::int64_t value) {
  _internal_set_f_79(value);
  _impl_._has_bits_[2] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_79)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_79() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_79_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_79(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = value;
}

// optional string f_80 = 121;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_80() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_80() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_80)
  return _internal_f_80();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_80(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_80_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_80)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_80() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_80();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_80)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_80() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_80_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_80(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_80_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_80_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_80)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_80_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_80_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_80(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_80_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_80_.IsDefault()) {
          _impl_.f_80_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_80)
}

// optional int32 f_81 = 122;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_81() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_81() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = 0;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_81() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_81)
  return _internal_f_81();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_81(::int32_t value) {
  _internal_set_f_81(value);
  _impl_._has_bits_[2] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_81)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_81() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_81_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_81(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = value;
}

// optional float f_82 = 124;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_82() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_82() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = 0;
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_82() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_82)
  return _internal_f_82();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_82(float value) {
  _internal_set_f_82(value);
  _impl_._has_bits_[2] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_82)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_82() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_82_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_82(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = value;
}

// optional int32 f_83 = 125;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_83() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = 0;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_83() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_83)
  return _internal_f_83();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_83(::int32_t value) {
  _internal_set_f_83(value);
  _impl_._has_bits_[2] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_83)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_83() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_83_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_83(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = value;
}

// optional string f_84 = 129;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_84() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_84() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_84)
  return _internal_f_84();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_84(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_84_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_84)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_84() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_84();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_84)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_84() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_84_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_84(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_84_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_84_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_84)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_84_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_84_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_84(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_84_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_84_.IsDefault()) {
          _impl_.f_84_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_84)
}

// optional float f_85 = 130;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_85() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = 0;
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_85() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_85)
  return _internal_f_85();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_85(float value) {
  _internal_set_f_85(value);
  _impl_._has_bits_[2] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_85)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_85() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_85_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_85(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = value;
}

// optional int64 f_86 = 131;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_86() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_86() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_86)
  return _internal_f_86();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_86(::int64_t value) {
  _internal_set_f_86(value);
  _impl_._has_bits_[2] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_86)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_86() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_86_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_86(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_ = value;
}

// optional int32 f_87 = 132;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_87() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_87() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_87)
  return _internal_f_87();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_87(::int32_t value) {
  _internal_set_f_87(value);
  _impl_._has_bits_[2] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_87)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_87() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_87_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_87(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E46 f_88 = 134;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_88() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_88() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_88() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_88)
  return _internal_f_88();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_88(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 value) {
  _internal_set_f_88(value);
  _impl_._has_bits_[2] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_88)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_88() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>(_impl_.f_88_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_88(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_IsValid(value));
  _impl_.f_88_ = value;
}

// optional int32 f_89 = 136;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_89() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = 0;
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_89() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_89)
  return _internal_f_89();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_89(::int32_t value) {
  _internal_set_f_89(value);
  _impl_._has_bits_[2] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_89)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_89() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_89_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_89(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = value;
}

// optional int64 f_90 = 138;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_90() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_90() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_90)
  return _internal_f_90();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_90(::int64_t value) {
  _internal_set_f_90(value);
  _impl_._has_bits_[2] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_90)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_90() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_90_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_90(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = value;
}

// optional string f_91 = 139;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_91() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_91() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_91)
  return _internal_f_91();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_91(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_91_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_91)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_91() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_91();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_91)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_91() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_91_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_91(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_91_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_91_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_91)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_91_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_91_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_91(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_91_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_91_.IsDefault()) {
          _impl_.f_91_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_91)
}

// optional int32 f_92 = 140;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_92() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = 0;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_92() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_92)
  return _internal_f_92();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_92(::int32_t value) {
  _internal_set_f_92(value);
  _impl_._has_bits_[2] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_92)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_92() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_92_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_92(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = value;
}

// optional uint32 f_93 = 144;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_93() const {
  bool value = (_impl_._has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = 0u;
  _impl_._has_bits_[2] &= ~0x20000000u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_93() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_93)
  return _internal_f_93();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_93(::uint32_t value) {
  _internal_set_f_93(value);
  _impl_._has_bits_[2] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_93)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_93_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_93(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = value;
}

// optional string f_94 = 145;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_94() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_94() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_94)
  return _internal_f_94();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_94(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_94_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_94)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_94() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_94();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_94)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_94() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_94_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_94(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_94_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.f_94_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_94)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.f_94_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_94_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_94(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.f_94_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_94_.IsDefault()) {
          _impl_.f_94_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_94)
}

// optional int64 f_95 = 147;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_95() const {
  bool value = (_impl_._has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x80000000u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_95() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_95)
  return _internal_f_95();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_95(::int64_t value) {
  _internal_set_f_95(value);
  _impl_._has_bits_[2] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_95)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_95() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_95_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_95(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_ = value;
}

// optional float f_96 = 148;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_96() const {
  bool value = (_impl_._has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = 0;
  _impl_._has_bits_[2] &= ~0x40000000u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_96() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_96)
  return _internal_f_96();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_96(float value) {
  _internal_set_f_96(value);
  _impl_._has_bits_[2] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_96)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_96() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_96_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_96(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = value;
}

// optional float f_97 = 149;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_97() const {
  bool value = (_impl_._has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = 0;
  _impl_._has_bits_[3] &= ~0x00000001u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_97() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_97)
  return _internal_f_97();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_97(float value) {
  _internal_set_f_97(value);
  _impl_._has_bits_[3] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_97)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_97() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_97_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_97(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = value;
}

// optional int32 f_98 = 152;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_98() const {
  bool value = (_impl_._has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_98() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = 0;
  _impl_._has_bits_[3] &= ~0x00000002u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_98() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_98)
  return _internal_f_98();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_98(::int32_t value) {
  _internal_set_f_98(value);
  _impl_._has_bits_[3] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_98)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_98() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_98_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_98(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = value;
}

// optional uint32 f_99 = 153;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_99() const {
  bool value = (_impl_._has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_99() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = 0u;
  _impl_._has_bits_[3] &= ~0x00000008u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_99() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_99)
  return _internal_f_99();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_99(::uint32_t value) {
  _internal_set_f_99(value);
  _impl_._has_bits_[3] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_99)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_99() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_99_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_99(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = value;
}

// optional int64 f_100 = 154;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_100() const {
  bool value = (_impl_._has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_100() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000004u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_100() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_100)
  return _internal_f_100();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_100(::int64_t value) {
  _internal_set_f_100(value);
  _impl_._has_bits_[3] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_100)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_100() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_100_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_100(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = value;
}

// repeated int32 f_101 = 156 [packed = true];
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_101_size() const {
  return _internal_f_101().size();
}
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_101_size() const {
  return _internal_f_101_size();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_101_.Clear();
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_101(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_101)
  return _internal_f_101().Get(index);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_101(int index, ::int32_t value) {
  _internal_mutable_f_101()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_101)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_101(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_101()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_101)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_101() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_101)
  return _internal_f_101();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_101()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_101)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_101();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_101() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_101_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_101() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_101_;
}

// optional float f_102 = 158;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_102() const {
  bool value = (_impl_._has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_102() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = 0;
  _impl_._has_bits_[3] &= ~0x00000010u;
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_102() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_102)
  return _internal_f_102();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_102(float value) {
  _internal_set_f_102(value);
  _impl_._has_bits_[3] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_102)
}
inline float Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_102() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_102_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_102(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = value;
}

// optional int32 f_103 = 160;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_103() const {
  bool value = (_impl_._has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = 0;
  _impl_._has_bits_[3] &= ~0x00000020u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_103() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_103)
  return _internal_f_103();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_103(::int32_t value) {
  _internal_set_f_103(value);
  _impl_._has_bits_[3] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_103)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_103() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_103_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_103(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E47 f_104 = 161;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_104() const {
  bool value = (_impl_._has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_104_ = 0;
  _impl_._has_bits_[3] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_104() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_104)
  return _internal_f_104();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_104(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 value) {
  _internal_set_f_104(value);
  _impl_._has_bits_[3] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_104)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_104() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>(_impl_.f_104_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_104(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_IsValid(value));
  _impl_.f_104_ = value;
}

// optional int32 f_105 = 163;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_105() const {
  bool value = (_impl_._has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_105() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = 0;
  _impl_._has_bits_[3] &= ~0x00000080u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_105() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_105)
  return _internal_f_105();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_105(::int32_t value) {
  _internal_set_f_105(value);
  _impl_._has_bits_[3] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_105)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_105() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_105_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_105(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = value;
}

// optional bytes f_106 = 164;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_106() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_106() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_106)
  return _internal_f_106();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_106(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_106_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_106)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_106() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_106();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_106)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_106() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_106_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_106(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_106_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.f_106_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M67_M85_M100::release_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_106)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.f_106_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_106_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_allocated_f_106(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.f_106_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_106_.IsDefault()) {
          _impl_.f_106_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_106)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.E48 f_107 = 166;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_107() const {
  bool value = (_impl_._has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_107() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = 0;
  _impl_._has_bits_[3] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_107() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_107)
  return _internal_f_107();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_107(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 value) {
  _internal_set_f_107(value);
  _impl_._has_bits_[3] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_107)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_107() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>(_impl_.f_107_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_107(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_IsValid(value));
  _impl_.f_107_ = value;
}

// optional int64 f_108 = 167;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_108() const {
  bool value = (_impl_._has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000200u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_108() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_108)
  return _internal_f_108();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_108(::int64_t value) {
  _internal_set_f_108(value);
  _impl_._has_bits_[3] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_108)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_108() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_108_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_108(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_ = value;
}

// repeated fixed64 f_109 = 168 [packed = true];
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_109_size() const {
  return _internal_f_109().size();
}
inline int Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_109_size() const {
  return _internal_f_109_size();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_109_.Clear();
}
inline ::uint64_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_109(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_109)
  return _internal_f_109().Get(index);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_109(int index, ::uint64_t value) {
  _internal_mutable_f_109()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_109)
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::add_f_109(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_109()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_109)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_109() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_109)
  return _internal_f_109();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::mutable_f_109()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_109)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_109();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_109() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_109_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_mutable_f_109() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_109_;
}

// optional bool f_110 = 169;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_110() const {
  bool value = (_impl_._has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_110() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = false;
  _impl_._has_bits_[3] &= ~0x00000400u;
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_110() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_110)
  return _internal_f_110();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_110(bool value) {
  _internal_set_f_110(value);
  _impl_._has_bits_[3] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_110)
}
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_110() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_110_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_110(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = value;
}

// optional uint32 f_111 = 170;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85_M100::has_f_111() const {
  bool value = (_impl_._has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::clear_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = 0u;
  _impl_._has_bits_[3] &= ~0x00000800u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::f_111() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_111)
  return _internal_f_111();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::set_f_111(::uint32_t value) {
  _internal_set_f_111(value);
  _impl_._has_bits_[3] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100.f_111)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_f_111() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_111_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85_M100::_internal_set_f_111(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M67_M85

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.E26 f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 Message1_M7_M18_M39_M45_M59_M67_M85::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_0)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 Message1_M7_M18_M39_M45_M59_M67_M85::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26>(_impl_.f_0_);
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::_internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_1)
}
inline ::int32_t Message1_M7_M18_M39_M45_M59_M67_M85::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional double f_2 = 4;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Message1_M7_M18_M39_M45_M59_M67_M85::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::set_f_2(double value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_2)
}
inline double Message1_M7_M18_M39_M45_M59_M67_M85::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::_internal_set_f_2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M98 f_4 = 6;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98& Message1_M7_M18_M39_M45_M59_M67_M85::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M59_M67_M85_M98_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98& Message1_M7_M18_M39_M45_M59_M67_M85::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_4)
  return _internal_f_4();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_4)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* Message1_M7_M18_M39_M45_M59_M67_M85::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* Message1_M7_M18_M39_M45_M59_M67_M85::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* Message1_M7_M18_M39_M45_M59_M67_M85::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* Message1_M7_M18_M39_M45_M59_M67_M85::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_4)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::set_allocated_f_4(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M98*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_4)
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.M100 f_6 = 7;
inline bool Message1_M7_M18_M39_M45_M59_M67_M85::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100& Message1_M7_M18_M39_M45_M59_M67_M85::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M59_M67_M85_M100_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100& Message1_M7_M18_M39_M45_M59_M67_M85::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_6)
  return _internal_f_6();
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_6)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* Message1_M7_M18_M39_M45_M59_M67_M85::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* Message1_M7_M18_M39_M45_M59_M67_M85::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_6)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* Message1_M7_M18_M39_M45_M59_M67_M85::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* Message1_M7_M18_M39_M45_M59_M67_M85::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_6)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M59_M67_M85::set_allocated_f_6(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85.f_6)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M67

// optional uint32 f_0 = 2;
inline bool Message1_M7_M18_M39_M45_M59_M67::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59_M67::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_0)
}
inline ::uint32_t Message1_M7_M18_M39_M45_M59_M67::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M59_M67::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.M85 f_2 = 3;
inline bool Message1_M7_M18_M39_M45_M59_M67::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M67::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85& Message1_M7_M18_M39_M45_M59_M67::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M59_M67_M85_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85& Message1_M7_M18_M39_M45_M59_M67::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_2)
  return _internal_f_2();
}
inline void Message1_M7_M18_M39_M45_M59_M67::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_2)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* Message1_M7_M18_M39_M45_M59_M67::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* Message1_M7_M18_M39_M45_M59_M67::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* Message1_M7_M18_M39_M45_M59_M67::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* Message1_M7_M18_M39_M45_M59_M67::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_2)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M59_M67::set_allocated_f_2(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67.f_2)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M73_M87

// optional bool f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M59_M73_M87::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M73_M87::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message1_M7_M18_M39_M45_M59_M73_M87::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59_M73_M87::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87.f_0)
}
inline bool Message1_M7_M18_M39_M45_M59_M73_M87::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M59_M73_M87::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59_M73

// optional bytes f_0 = 1;
inline bool Message1_M7_M18_M39_M45_M59_M73::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59_M73::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M73::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M7_M18_M39_M45_M59_M73::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_0)
}
inline std::string* Message1_M7_M18_M39_M45_M59_M73::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_0)
  return _s;
}
inline const std::string& Message1_M7_M18_M39_M45_M59_M73::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M7_M18_M39_M45_M59_M73::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M73::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M7_M18_M39_M45_M59_M73::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M7_M18_M39_M45_M59_M73::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_0)
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.M87 f_1 = 2;
inline int Message1_M7_M18_M39_M45_M59_M73::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M18_M39_M45_M59_M73::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M18_M39_M45_M59_M73::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87* Message1_M7_M18_M39_M45_M59_M73::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>* Message1_M7_M18_M39_M45_M59_M73::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87& Message1_M7_M18_M39_M45_M59_M73::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87* Message1_M7_M18_M39_M45_M59_M73::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>& Message1_M7_M18_M39_M45_M59_M73::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>&
Message1_M7_M18_M39_M45_M59_M73::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73_M87>*
Message1_M7_M18_M39_M45_M59_M73::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45_M59

// optional int64 f_0 = 2;
inline bool Message1_M7_M18_M39_M45_M59::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45_M59::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M7_M18_M39_M45_M59::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45_M59::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_0)
}
inline ::int64_t Message1_M7_M18_M39_M45_M59::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18_M39_M45_M59::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M67 f_2 = 3;
inline int Message1_M7_M18_M39_M45_M59::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M18_M39_M45_M59::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M18_M39_M45_M59::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67* Message1_M7_M18_M39_M45_M59::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>* Message1_M7_M18_M39_M45_M59::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67& Message1_M7_M18_M39_M45_M59::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67* Message1_M7_M18_M39_M45_M59::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>& Message1_M7_M18_M39_M45_M59::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>&
Message1_M7_M18_M39_M45_M59::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67>*
Message1_M7_M18_M39_M45_M59::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59.M73 f_3 = 4;
inline bool Message1_M7_M18_M39_M45_M59::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45_M59::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73& Message1_M7_M18_M39_M45_M59::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M59_M73_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73& Message1_M7_M18_M39_M45_M59::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M18_M39_M45_M59::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_3)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* Message1_M7_M18_M39_M45_M59::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* Message1_M7_M18_M39_M45_M59::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* Message1_M7_M18_M39_M45_M59::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* Message1_M7_M18_M39_M45_M59::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_3)
  return _msg;
}
inline void Message1_M7_M18_M39_M45_M59::set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M73*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.M59.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39_M45

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.E20 f_0 = 2;
inline bool Message1_M7_M18_M39_M45::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39_M45::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_E20 Message1_M7_M18_M39_M45::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39_M45::set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_E20 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.M45.f_0)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_E20 Message1_M7_M18_M39_M45::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_E20>(_impl_.f_0_);
}
inline void Message1_M7_M18_M39_M45::_internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_M45_E20 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_M45_E20_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39.M45.M54 f_2 = 3;
inline int Message1_M7_M18_M39_M45::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M7_M18_M39_M45::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M7_M18_M39_M45::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54* Message1_M7_M18_M39_M45::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>* Message1_M7_M18_M39_M45::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.M39.M45.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M54& Message1_M7_M18_M39_M45::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M54* Message1_M7_M18_M39_M45::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M54* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.M39.M45.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>& Message1_M7_M18_M39_M45::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.M39.M45.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>&
Message1_M7_M18_M39_M45::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39_M45_M54>*
Message1_M7_M18_M39_M45::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45.M59 f_3 = 5;
inline bool Message1_M7_M18_M39_M45::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39_M45::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59& Message1_M7_M18_M39_M45::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_M59_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45_M59& Message1_M7_M18_M39_M45::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.M45.f_3)
  return _internal_f_3();
}
inline void Message1_M7_M18_M39_M45::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.f_3)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* Message1_M7_M18_M39_M45::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* Message1_M7_M18_M39_M45::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.M45.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* Message1_M7_M18_M39_M45::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45_M59>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* Message1_M7_M18_M39_M45::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45_M59* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.M45.f_3)
  return _msg;
}
inline void Message1_M7_M18_M39_M45::set_allocated_f_3(::fleetbench::proto::Message1_M7_M18_M39_M45_M59* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45_M59*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.M45.f_3)
}

// -------------------------------------------------------------------

// Message1_M7_M18_M39

// optional .fleetbench.proto.Message1.M7.M18.M39.E8 f_0 = 1;
inline bool Message1_M7_M18_M39::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7_M18_M39::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_E8 Message1_M7_M18_M39::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18_M39::set_f_0(::fleetbench::proto::Message1_M7_M18_M39_E8 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.M39.f_0)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_E8 Message1_M7_M18_M39::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M7_M18_M39_E8>(_impl_.f_0_);
}
inline void Message1_M7_M18_M39::_internal_set_f_0(::fleetbench::proto::Message1_M7_M18_M39_E8 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M7_M18_M39_E8_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M7.M18.M39.M45 f_1 = 2;
inline bool Message1_M7_M18_M39::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M7_M18_M39::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45& Message1_M7_M18_M39::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18_M39_M45* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18_M39_M45&>(::fleetbench::proto::_Message1_M7_M18_M39_M45_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18_M39_M45& Message1_M7_M18_M39::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.M39.f_1)
  return _internal_f_1();
}
inline void Message1_M7_M18_M39::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.M18.M39.f_1)
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45* Message1_M7_M18_M39::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45* Message1_M7_M18_M39::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.M18.M39.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45* Message1_M7_M18_M39::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18_M39_M45>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M7_M18_M39_M45* Message1_M7_M18_M39::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18_M39_M45* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.M39.f_1)
  return _msg;
}
inline void Message1_M7_M18_M39::set_allocated_f_1(::fleetbench::proto::Message1_M7_M18_M39_M45* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18_M39_M45*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.M18.M39.f_1)
}

// -------------------------------------------------------------------

// Message1_M7_M18

// optional int64 f_0 = 1;
inline bool Message1_M7_M18::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M7_M18::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M7_M18::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.f_0)
  return _internal_f_0();
}
inline void Message1_M7_M18::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.M18.f_0)
}
inline ::int64_t Message1_M7_M18::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7_M18::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M18.M32 f_1 = 3;
inline int Message1_M7_M18::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7_M18::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7_M18::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M32* Message1_M7_M18::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>* Message1_M7_M18::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M18_M32& Message1_M7_M18::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M32* Message1_M7_M18::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M32* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>& Message1_M7_M18::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>&
Message1_M7_M18::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M32>*
Message1_M7_M18::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message1.M7.M18.M39 f_3 = 6;
inline int Message1_M7_M18::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M7_M18::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M7_M18::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M18_M39* Message1_M7_M18::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.M18.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>* Message1_M7_M18::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.M18.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message1_M7_M18_M39& Message1_M7_M18::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.M18.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M18_M39* Message1_M7_M18::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M18_M39* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.M18.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>& Message1_M7_M18::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.M18.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>&
Message1_M7_M18::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M18_M39>*
Message1_M7_M18::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message1_M7

// optional float f_0 = 1;
inline bool Message1_M7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message1_M7::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.f_0)
  return _internal_f_0();
}
inline void Message1_M7::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M7.f_0)
}
inline float Message1_M7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M7::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M7.M14 f_1 = 3;
inline int Message1_M7::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M7::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M7::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M7_M14* Message1_M7::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>* Message1_M7::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M7.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M7_M14& Message1_M7::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M7_M14* Message1_M7::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M7_M14* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M7.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>& Message1_M7::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M7.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>&
Message1_M7::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M7_M14>*
Message1_M7::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message1.M7.M18 f_3 = 4;
inline bool Message1_M7::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M7::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M7_M18& Message1_M7::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7_M18* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7_M18&>(::fleetbench::proto::_Message1_M7_M18_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7_M18& Message1_M7::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M7.f_3)
  return _internal_f_3();
}
inline void Message1_M7::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M7_M18* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M7.f_3)
}
inline ::fleetbench::proto::Message1_M7_M18* Message1_M7::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7_M18* Message1_M7::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M7.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M7_M18* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7_M18* Message1_M7::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7_M18>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M7_M18* Message1_M7::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M7_M18* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M7.f_3)
  return _msg;
}
inline void Message1_M7::set_allocated_f_3(::fleetbench::proto::Message1_M7_M18* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M7_M18*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M7.f_3)
}

// -------------------------------------------------------------------

// Message1_M8

// optional uint64 f_0 = 1;
inline bool Message1_M8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message1_M8::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M8.f_0)
  return _internal_f_0();
}
inline void Message1_M8::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M8.f_0)
}
inline ::uint64_t Message1_M8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M8::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional fixed32 f_1 = 2;
inline bool Message1_M8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message1_M8::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M8.f_1)
  return _internal_f_1();
}
inline void Message1_M8::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M8.f_1)
}
inline ::uint32_t Message1_M8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M8::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 4;
inline bool Message1_M8::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M8::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message1_M8::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M8.f_2)
  return _internal_f_2();
}
inline void Message1_M8::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M8.f_2)
}
inline ::int32_t Message1_M8::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M8::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message1_M9_M17

// optional double f_0 = 2;
inline bool Message1_M9_M17::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M9_M17::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message1_M9_M17::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M9.M17.f_0)
  return _internal_f_0();
}
inline void Message1_M9_M17::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M9.M17.f_0)
}
inline double Message1_M9_M17::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M9_M17::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M9

// optional string f_0 = 1;
inline bool Message1_M9::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M9::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M9::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M9.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M9::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M9.f_0)
}
inline std::string* Message1_M9::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M9.f_0)
  return _s;
}
inline const std::string& Message1_M9::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M9::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M9::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M9::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M9.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M9::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M9.f_0)
}

// repeated .fleetbench.proto.Message1.M9.M17 f_1 = 3;
inline int Message1_M9::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M9::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M9::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M9_M17* Message1_M9::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M9.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>* Message1_M9::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M9.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M9_M17& Message1_M9::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M9.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M9_M17* Message1_M9::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M9_M17* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M9.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>& Message1_M9::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M9.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>&
Message1_M9::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M9_M17>*
Message1_M9::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M56

// optional float f_0 = 2;
inline bool Message1_M10_M19_M40_M49_M56::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M56::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message1_M10_M19_M40_M49_M56::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M56.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M56::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M56.f_0)
}
inline float Message1_M10_M19_M40_M49_M56::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M56::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message1_M10_M19_M40_M49_M56::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M56::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M10_M19_M40_M49_M56::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M56.f_1)
  return _internal_f_1();
}
inline void Message1_M10_M19_M40_M49_M56::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M56.f_1)
}
inline ::int64_t Message1_M10_M19_M40_M49_M56::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M10_M19_M40_M49_M56::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M57_M71

// optional uint64 f_0 = 1;
inline bool Message1_M10_M19_M40_M49_M57_M71::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M71::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message1_M10_M19_M40_M49_M57_M71::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M57_M71::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71.f_0)
}
inline ::uint64_t Message1_M10_M19_M40_M49_M57_M71::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M57_M71::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M57_M72_M84

// optional float f_0 = 1;
inline bool Message1_M10_M19_M40_M49_M57_M72_M84::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M72_M84::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message1_M10_M19_M40_M49_M57_M72_M84::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M57_M72_M84::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84.f_0)
}
inline float Message1_M10_M19_M40_M49_M57_M72_M84::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M57_M72_M84::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M57_M72

// optional int32 f_0 = 2;
inline bool Message1_M10_M19_M40_M49_M57_M72::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M72::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M10_M19_M40_M49_M57_M72::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M57_M72::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_0)
}
inline ::int32_t Message1_M10_M19_M40_M49_M57_M72::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M57_M72::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.M84 f_2 = 4;
inline bool Message1_M10_M19_M40_M49_M57_M72::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M72::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84& Message1_M10_M19_M40_M49_M57_M72::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_M57_M72_M84_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84& Message1_M10_M19_M40_M49_M57_M72::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_2)
  return _internal_f_2();
}
inline void Message1_M10_M19_M40_M49_M57_M72::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_2)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* Message1_M10_M19_M40_M49_M57_M72::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* Message1_M10_M19_M40_M49_M57_M72::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* Message1_M10_M19_M40_M49_M57_M72::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* Message1_M10_M19_M40_M49_M57_M72::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_2)
  return _msg;
}
inline void Message1_M10_M19_M40_M49_M57_M72::set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72_M84*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72.f_2)
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M57_M75

// optional fixed64 f_0 = 1;
inline bool Message1_M10_M19_M40_M49_M57_M75::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M75::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message1_M10_M19_M40_M49_M57_M75::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M57_M75::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75.f_0)
}
inline ::uint64_t Message1_M10_M19_M40_M49_M57_M75::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M57_M75::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 4;
inline bool Message1_M10_M19_M40_M49_M57_M75::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57_M75::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message1_M10_M19_M40_M49_M57_M75::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75.f_1)
  return _internal_f_1();
}
inline void Message1_M10_M19_M40_M49_M57_M75::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75.f_1)
}
inline ::int32_t Message1_M10_M19_M40_M49_M57_M75::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M10_M19_M40_M49_M57_M75::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M57

// optional int64 f_0 = 1;
inline bool Message1_M10_M19_M40_M49_M57::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M57::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message1_M10_M19_M40_M49_M57::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49_M57::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_0)
}
inline ::int64_t Message1_M10_M19_M40_M49_M57::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49_M57::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M71 f_1 = 3;
inline bool Message1_M10_M19_M40_M49_M57::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40_M49_M57::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71& Message1_M10_M19_M40_M49_M57::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_M57_M71_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71& Message1_M10_M19_M40_M49_M57::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_1)
  return _internal_f_1();
}
inline void Message1_M10_M19_M40_M49_M57::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_1)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* Message1_M10_M19_M40_M49_M57::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* Message1_M10_M19_M40_M49_M57::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* Message1_M10_M19_M40_M49_M57::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* Message1_M10_M19_M40_M49_M57::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_1)
  return _msg;
}
inline void Message1_M10_M19_M40_M49_M57::set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M71*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_1)
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M72 f_3 = 5;
inline bool Message1_M10_M19_M40_M49_M57::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40_M49_M57::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72& Message1_M10_M19_M40_M49_M57::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_M57_M72_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72& Message1_M10_M19_M40_M49_M57::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_3)
  return _internal_f_3();
}
inline void Message1_M10_M19_M40_M49_M57::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_3)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* Message1_M10_M19_M40_M49_M57::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* Message1_M10_M19_M40_M49_M57::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* Message1_M10_M19_M40_M49_M57::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* Message1_M10_M19_M40_M49_M57::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_3)
  return _msg;
}
inline void Message1_M10_M19_M40_M49_M57::set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M72*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_3)
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49.M57.M75 f_5 = 6;
inline bool Message1_M10_M19_M40_M49_M57::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40_M49_M57::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75& Message1_M10_M19_M40_M49_M57::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_M57_M75_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75& Message1_M10_M19_M40_M49_M57::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_5)
  return _internal_f_5();
}
inline void Message1_M10_M19_M40_M49_M57::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_5)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* Message1_M10_M19_M40_M49_M57::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* Message1_M10_M19_M40_M49_M57::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* Message1_M10_M19_M40_M49_M57::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* Message1_M10_M19_M40_M49_M57::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_5)
  return _msg;
}
inline void Message1_M10_M19_M40_M49_M57::set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M57_M75*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M57.f_5)
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49_M61

// optional string f_0 = 1;
inline bool Message1_M10_M19_M40_M49_M61::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49_M61::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M10_M19_M40_M49_M61::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.M61.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M40_M49_M61::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.M61.f_0)
}
inline std::string* Message1_M10_M19_M40_M49_M61::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.M61.f_0)
  return _s;
}
inline const std::string& Message1_M10_M19_M40_M49_M61::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M10_M19_M40_M49_M61::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M40_M49_M61::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M40_M49_M61::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.M61.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M40_M49_M61::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.M61.f_0)
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40_M49

// optional bool f_0 = 1;
inline bool Message1_M10_M19_M40_M49::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M40_M49::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M10_M19_M40_M49::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40_M49::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.M49.f_0)
}
inline bool Message1_M10_M19_M40_M49::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M40_M49::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M10.M19.M40.M49.M56 f_1 = 2;
inline int Message1_M10_M19_M40_M49::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M10_M19_M40_M49::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M10_M19_M40_M49::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M56* Message1_M10_M19_M40_M49::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>* Message1_M10_M19_M40_M49::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M10.M19.M40.M49.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M56& Message1_M10_M19_M40_M49::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M56* Message1_M10_M19_M40_M49::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M56* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M10.M19.M40.M49.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>& Message1_M10_M19_M40_M49::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M10.M19.M40.M49.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>&
Message1_M10_M19_M40_M49::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M56>*
Message1_M10_M19_M40_M49::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message1.M10.M19.M40.M49.M57 f_2 = 3;
inline int Message1_M10_M19_M40_M49::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M10_M19_M40_M49::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M10_M19_M40_M49::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57* Message1_M10_M19_M40_M49::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>* Message1_M10_M19_M40_M49::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M10.M19.M40.M49.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M57& Message1_M10_M19_M40_M49::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M57* Message1_M10_M19_M40_M49::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M57* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M10.M19.M40.M49.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>& Message1_M10_M19_M40_M49::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M10.M19.M40.M49.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>&
Message1_M10_M19_M40_M49::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10_M19_M40_M49_M57>*
Message1_M10_M19_M40_M49::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49.M61 f_3 = 4;
inline bool Message1_M10_M19_M40_M49::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40_M49::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61& Message1_M10_M19_M40_M49::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_M61_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49_M61& Message1_M10_M19_M40_M49::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.M49.f_3)
  return _internal_f_3();
}
inline void Message1_M10_M19_M40_M49::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M61* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M61*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.f_3)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* Message1_M10_M19_M40_M49::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* Message1_M10_M19_M40_M49::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.M49.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* Message1_M10_M19_M40_M49::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49_M61>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M61*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* Message1_M10_M19_M40_M49::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49_M61* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.M49.f_3)
  return _msg;
}
inline void Message1_M10_M19_M40_M49::set_allocated_f_3(::fleetbench::proto::Message1_M10_M19_M40_M49_M61* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49_M61*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.M49.f_3)
}

// -------------------------------------------------------------------

// Message1_M10_M19_M40

// optional .fleetbench.proto.Message1.M10.M19.M40.E9 f_0 = 1;
inline bool Message1_M10_M19_M40::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M40::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_E9 Message1_M10_M19_M40::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M40::set_f_0(::fleetbench::proto::Message1_M10_M19_M40_E9 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M40.f_0)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_E9 Message1_M10_M19_M40::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M40_E9>(_impl_.f_0_);
}
inline void Message1_M10_M19_M40::_internal_set_f_0(::fleetbench::proto::Message1_M10_M19_M40_E9 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M40_E9_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M40.M49 f_1 = 5;
inline bool Message1_M10_M19_M40::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M10_M19_M40::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49& Message1_M10_M19_M40::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40_M49* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40_M49&>(::fleetbench::proto::_Message1_M10_M19_M40_M49_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40_M49& Message1_M10_M19_M40::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M40.f_1)
  return _internal_f_1();
}
inline void Message1_M10_M19_M40::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.M40.f_1)
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49* Message1_M10_M19_M40::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49* Message1_M10_M19_M40::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M40.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49* Message1_M10_M19_M40::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40_M49>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40_M49* Message1_M10_M19_M40::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40_M49* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M40.f_1)
  return _msg;
}
inline void Message1_M10_M19_M40::set_allocated_f_1(::fleetbench::proto::Message1_M10_M19_M40_M49* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40_M49*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M40.f_1)
}

// -------------------------------------------------------------------

// Message1_M10_M19_M42

// optional float f_0 = 1;
inline bool Message1_M10_M19_M42::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Message1_M10_M19_M42::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19_M42::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_0)
}
inline float Message1_M10_M19_M42::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19_M42::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 4;
inline bool Message1_M10_M19_M42::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Message1_M10_M19_M42::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_1)
  return _internal_f_1();
}
inline void Message1_M10_M19_M42::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_1)
}
inline float Message1_M10_M19_M42::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M10_M19_M42::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated int64 f_2 = 8 [packed = true];
inline int Message1_M10_M19_M42::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M10_M19_M42::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M10_M19_M42::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int64_t Message1_M10_M19_M42::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_2)
  return _internal_f_2().Get(index);
}
inline void Message1_M10_M19_M42::set_f_2(int index, ::int64_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_2)
}
inline void Message1_M10_M19_M42::add_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M10.M19.M42.f_2)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message1_M10_M19_M42::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M10.M19.M42.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M10_M19_M42::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M10.M19.M42.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message1_M10_M19_M42::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M10_M19_M42::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional float f_3 = 9;
inline bool Message1_M10_M19_M42::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Message1_M10_M19_M42::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_3)
  return _internal_f_3();
}
inline void Message1_M10_M19_M42::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_3)
}
inline float Message1_M10_M19_M42::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1_M10_M19_M42::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 10;
inline bool Message1_M10_M19_M42::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t Message1_M10_M19_M42::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_4)
  return _internal_f_4();
}
inline void Message1_M10_M19_M42::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_4)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message1_M10_M19_M42::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 13;
inline bool Message1_M10_M19_M42::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message1_M10_M19_M42::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_5)
  return _internal_f_5();
}
inline void Message1_M10_M19_M42::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_5)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message1_M10_M19_M42::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 14;
inline bool Message1_M10_M19_M42::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int64_t Message1_M10_M19_M42::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_6)
  return _internal_f_6();
}
inline void Message1_M10_M19_M42::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_6)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message1_M10_M19_M42::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional string f_7 = 15;
inline bool Message1_M10_M19_M42::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M10_M19_M42::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_7)
}
inline std::string* Message1_M10_M19_M42::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_7)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_7)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_7)
}

// optional int32 f_8 = 16;
inline bool Message1_M10_M19_M42::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t Message1_M10_M19_M42::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_8)
  return _internal_f_8();
}
inline void Message1_M10_M19_M42::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_8)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message1_M10_M19_M42::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional bool f_9 = 18;
inline bool Message1_M10_M19_M42::has_f_9() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool Message1_M10_M19_M42::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_9)
  return _internal_f_9();
}
inline void Message1_M10_M19_M42::set_f_9(bool value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_9)
}
inline bool Message1_M10_M19_M42::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message1_M10_M19_M42::_internal_set_f_9(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E10 f_10 = 19;
inline bool Message1_M10_M19_M42::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E10 Message1_M10_M19_M42::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_10)
  return _internal_f_10();
}
inline void Message1_M10_M19_M42::set_f_10(::fleetbench::proto::Message1_M10_M19_M42_E10 value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_10)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E10 Message1_M10_M19_M42::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E10>(_impl_.f_10_);
}
inline void Message1_M10_M19_M42::_internal_set_f_10(::fleetbench::proto::Message1_M10_M19_M42_E10 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E10_IsValid(value));
  _impl_.f_10_ = value;
}

// repeated .fleetbench.proto.Message1.M10.M19.M42.E11 f_11 = 20 [packed = true];
inline int Message1_M10_M19_M42::_internal_f_11_size() const {
  return _internal_f_11().size();
}
inline int Message1_M10_M19_M42::f_11_size() const {
  return _internal_f_11_size();
}
inline void Message1_M10_M19_M42::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.Clear();
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E11 Message1_M10_M19_M42::f_11(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_11)
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E11>(_internal_f_11().Get(index));
}
inline void Message1_M10_M19_M42::set_f_11(int index, ::fleetbench::proto::Message1_M10_M19_M42_E11 value) {
  assert(::fleetbench::proto::Message1_M10_M19_M42_E11_IsValid(value));
  _internal_mutable_f_11()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_11)
}
inline void Message1_M10_M19_M42::add_f_11(::fleetbench::proto::Message1_M10_M19_M42_E11 value) {
  assert(::fleetbench::proto::Message1_M10_M19_M42_E11_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_11()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M10.M19.M42.f_11)
}
inline const ::google::protobuf::RepeatedField<int>& Message1_M10_M19_M42::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M10.M19.M42.f_11)
  return _internal_f_11();
}
inline ::google::protobuf::RepeatedField<int>* Message1_M10_M19_M42::mutable_f_11()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M10.M19.M42.f_11)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_11();
}
inline const ::google::protobuf::RepeatedField<int>& Message1_M10_M19_M42::_internal_f_11()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline ::google::protobuf::RepeatedField<int>* Message1_M10_M19_M42::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_11_;
}

// optional int64 f_12 = 22;
inline bool Message1_M10_M19_M42::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t Message1_M10_M19_M42::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_12)
  return _internal_f_12();
}
inline void Message1_M10_M19_M42::set_f_12(::int64_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_12)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message1_M10_M19_M42::_internal_set_f_12(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E12 f_13 = 23;
inline bool Message1_M10_M19_M42::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E12 Message1_M10_M19_M42::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_13)
  return _internal_f_13();
}
inline void Message1_M10_M19_M42::set_f_13(::fleetbench::proto::Message1_M10_M19_M42_E12 value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_13)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E12 Message1_M10_M19_M42::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E12>(_impl_.f_13_);
}
inline void Message1_M10_M19_M42::_internal_set_f_13(::fleetbench::proto::Message1_M10_M19_M42_E12 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E12_IsValid(value));
  _impl_.f_13_ = value;
}

// optional int64 f_14 = 24;
inline bool Message1_M10_M19_M42::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int64_t Message1_M10_M19_M42::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_14)
  return _internal_f_14();
}
inline void Message1_M10_M19_M42::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_14)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message1_M10_M19_M42::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional double f_15 = 26;
inline bool Message1_M10_M19_M42::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double Message1_M10_M19_M42::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_15)
  return _internal_f_15();
}
inline void Message1_M10_M19_M42::set_f_15(double value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_15)
}
inline double Message1_M10_M19_M42::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message1_M10_M19_M42::_internal_set_f_15(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E13 f_16 = 27;
inline bool Message1_M10_M19_M42::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E13 Message1_M10_M19_M42::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_16)
  return _internal_f_16();
}
inline void Message1_M10_M19_M42::set_f_16(::fleetbench::proto::Message1_M10_M19_M42_E13 value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_16)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E13 Message1_M10_M19_M42::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E13>(_impl_.f_16_);
}
inline void Message1_M10_M19_M42::_internal_set_f_16(::fleetbench::proto::Message1_M10_M19_M42_E13 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E13_IsValid(value));
  _impl_.f_16_ = value;
}

// optional int32 f_17 = 28;
inline bool Message1_M10_M19_M42::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t Message1_M10_M19_M42::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_17)
  return _internal_f_17();
}
inline void Message1_M10_M19_M42::set_f_17(::int32_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_17)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message1_M10_M19_M42::_internal_set_f_17(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E14 f_18 = 29;
inline bool Message1_M10_M19_M42::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E14 Message1_M10_M19_M42::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_18)
  return _internal_f_18();
}
inline void Message1_M10_M19_M42::set_f_18(::fleetbench::proto::Message1_M10_M19_M42_E14 value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_18)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E14 Message1_M10_M19_M42::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E14>(_impl_.f_18_);
}
inline void Message1_M10_M19_M42::_internal_set_f_18(::fleetbench::proto::Message1_M10_M19_M42_E14 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E14_IsValid(value));
  _impl_.f_18_ = value;
}

// optional bool f_19 = 31;
inline bool Message1_M10_M19_M42::has_f_19() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool Message1_M10_M19_M42::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_19)
  return _internal_f_19();
}
inline void Message1_M10_M19_M42::set_f_19(bool value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_19)
}
inline bool Message1_M10_M19_M42::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message1_M10_M19_M42::_internal_set_f_19(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional string f_20 = 32;
inline bool Message1_M10_M19_M42::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M10_M19_M42::f_20() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_20)
  return _internal_f_20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_20(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_20_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_20)
}
inline std::string* Message1_M10_M19_M42::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_20)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_20(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_20_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_20_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_20)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_20_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_20_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_20(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_20_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_20_.IsDefault()) {
          _impl_.f_20_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_20)
}

// optional float f_21 = 35;
inline bool Message1_M10_M19_M42::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float Message1_M10_M19_M42::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_21)
  return _internal_f_21();
}
inline void Message1_M10_M19_M42::set_f_21(float value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_21)
}
inline float Message1_M10_M19_M42::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message1_M10_M19_M42::_internal_set_f_21(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional float f_22 = 37;
inline bool Message1_M10_M19_M42::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float Message1_M10_M19_M42::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_22)
  return _internal_f_22();
}
inline void Message1_M10_M19_M42::set_f_22(float value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_22)
}
inline float Message1_M10_M19_M42::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message1_M10_M19_M42::_internal_set_f_22(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional int64 f_23 = 38;
inline bool Message1_M10_M19_M42::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int64_t Message1_M10_M19_M42::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_23)
  return _internal_f_23();
}
inline void Message1_M10_M19_M42::set_f_23(::int64_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_23)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message1_M10_M19_M42::_internal_set_f_23(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E15 f_24 = 39;
inline bool Message1_M10_M19_M42::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E15 Message1_M10_M19_M42::f_24() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_24)
  return _internal_f_24();
}
inline void Message1_M10_M19_M42::set_f_24(::fleetbench::proto::Message1_M10_M19_M42_E15 value) {
  _internal_set_f_24(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_24)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E15 Message1_M10_M19_M42::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E15>(_impl_.f_24_);
}
inline void Message1_M10_M19_M42::_internal_set_f_24(::fleetbench::proto::Message1_M10_M19_M42_E15 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E15_IsValid(value));
  _impl_.f_24_ = value;
}

// optional uint64 f_25 = 40;
inline bool Message1_M10_M19_M42::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint64_t Message1_M10_M19_M42::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_25)
  return _internal_f_25();
}
inline void Message1_M10_M19_M42::set_f_25(::uint64_t value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_25)
}
inline ::uint64_t Message1_M10_M19_M42::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message1_M10_M19_M42::_internal_set_f_25(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional int32 f_26 = 43;
inline bool Message1_M10_M19_M42::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t Message1_M10_M19_M42::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_26)
  return _internal_f_26();
}
inline void Message1_M10_M19_M42::set_f_26(::int32_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_26)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message1_M10_M19_M42::_internal_set_f_26(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional double f_27 = 45;
inline bool Message1_M10_M19_M42::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double Message1_M10_M19_M42::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_27)
  return _internal_f_27();
}
inline void Message1_M10_M19_M42::set_f_27(double value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_27)
}
inline double Message1_M10_M19_M42::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message1_M10_M19_M42::_internal_set_f_27(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional string f_28 = 47;
inline bool Message1_M10_M19_M42::has_f_28() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message1_M10_M19_M42::f_28() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_28)
  return _internal_f_28();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_28(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_28_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_28)
}
inline std::string* Message1_M10_M19_M42::mutable_f_28() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_28();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_28)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_28(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_28_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_28_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_28)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_28_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_28_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_28(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_28_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_28_.IsDefault()) {
          _impl_.f_28_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_28)
}

// optional string f_29 = 48;
inline bool Message1_M10_M19_M42::has_f_29() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message1_M10_M19_M42::f_29() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_29)
  return _internal_f_29();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_29(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_29_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_29)
}
inline std::string* Message1_M10_M19_M42::mutable_f_29() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_29();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_29)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_29(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_29_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_29_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_29)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_29_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_29_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_29(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_29_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_29_.IsDefault()) {
          _impl_.f_29_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_29)
}

// optional int64 f_30 = 50;
inline bool Message1_M10_M19_M42::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::int64_t Message1_M10_M19_M42::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_30)
  return _internal_f_30();
}
inline void Message1_M10_M19_M42::set_f_30(::int64_t value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_30)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message1_M10_M19_M42::_internal_set_f_30(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional int64 f_31 = 51;
inline bool Message1_M10_M19_M42::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::int64_t Message1_M10_M19_M42::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_31)
  return _internal_f_31();
}
inline void Message1_M10_M19_M42::set_f_31(::int64_t value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_31)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message1_M10_M19_M42::_internal_set_f_31(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional int64 f_32 = 52;
inline bool Message1_M10_M19_M42::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::int64_t Message1_M10_M19_M42::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_32)
  return _internal_f_32();
}
inline void Message1_M10_M19_M42::set_f_32(::int64_t value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_32)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message1_M10_M19_M42::_internal_set_f_32(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional string f_33 = 53;
inline bool Message1_M10_M19_M42::has_f_33() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message1_M10_M19_M42::f_33() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_33)
  return _internal_f_33();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_33(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_33_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_33)
}
inline std::string* Message1_M10_M19_M42::mutable_f_33() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_33();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_33)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_33(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_33_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_33_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_33)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_33_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_33_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_33(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_33_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_33_.IsDefault()) {
          _impl_.f_33_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_33)
}

// optional int64 f_34 = 54;
inline bool Message1_M10_M19_M42::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int64_t Message1_M10_M19_M42::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_34)
  return _internal_f_34();
}
inline void Message1_M10_M19_M42::set_f_34(::int64_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_34)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message1_M10_M19_M42::_internal_set_f_34(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional float f_35 = 55;
inline bool Message1_M10_M19_M42::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline float Message1_M10_M19_M42::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_35)
  return _internal_f_35();
}
inline void Message1_M10_M19_M42::set_f_35(float value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_35)
}
inline float Message1_M10_M19_M42::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline void Message1_M10_M19_M42::_internal_set_f_35(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E16 f_36 = 56;
inline bool Message1_M10_M19_M42::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E16 Message1_M10_M19_M42::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_36)
  return _internal_f_36();
}
inline void Message1_M10_M19_M42::set_f_36(::fleetbench::proto::Message1_M10_M19_M42_E16 value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_36)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E16 Message1_M10_M19_M42::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E16>(_impl_.f_36_);
}
inline void Message1_M10_M19_M42::_internal_set_f_36(::fleetbench::proto::Message1_M10_M19_M42_E16 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E16_IsValid(value));
  _impl_.f_36_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E17 f_37 = 58;
inline bool Message1_M10_M19_M42::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E17 Message1_M10_M19_M42::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_37)
  return _internal_f_37();
}
inline void Message1_M10_M19_M42::set_f_37(::fleetbench::proto::Message1_M10_M19_M42_E17 value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_37)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E17 Message1_M10_M19_M42::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E17>(_impl_.f_37_);
}
inline void Message1_M10_M19_M42::_internal_set_f_37(::fleetbench::proto::Message1_M10_M19_M42_E17 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E17_IsValid(value));
  _impl_.f_37_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E18 f_38 = 60;
inline bool Message1_M10_M19_M42::has_f_38() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E18 Message1_M10_M19_M42::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_38)
  return _internal_f_38();
}
inline void Message1_M10_M19_M42::set_f_38(::fleetbench::proto::Message1_M10_M19_M42_E18 value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_38)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E18 Message1_M10_M19_M42::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E18>(_impl_.f_38_);
}
inline void Message1_M10_M19_M42::_internal_set_f_38(::fleetbench::proto::Message1_M10_M19_M42_E18 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E18_IsValid(value));
  _impl_.f_38_ = value;
}

// optional int32 f_39 = 62;
inline bool Message1_M10_M19_M42::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::int32_t Message1_M10_M19_M42::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_39)
  return _internal_f_39();
}
inline void Message1_M10_M19_M42::set_f_39(::int32_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_39)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message1_M10_M19_M42::_internal_set_f_39(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional string f_40 = 64;
inline bool Message1_M10_M19_M42::has_f_40() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message1_M10_M19_M42::f_40() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_40)
  return _internal_f_40();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_40(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_40_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_40)
}
inline std::string* Message1_M10_M19_M42::mutable_f_40() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_40();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_40)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_40(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_40_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_40_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_40)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_40_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_40_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_40(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_40_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_40_.IsDefault()) {
          _impl_.f_40_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_40)
}

// optional float f_41 = 65;
inline bool Message1_M10_M19_M42::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline float Message1_M10_M19_M42::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_41)
  return _internal_f_41();
}
inline void Message1_M10_M19_M42::set_f_41(float value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_41)
}
inline float Message1_M10_M19_M42::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message1_M10_M19_M42::_internal_set_f_41(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional bytes f_42 = 67;
inline bool Message1_M10_M19_M42::has_f_42() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message1_M10_M19_M42::f_42() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_42)
  return _internal_f_42();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_42(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_42_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_42)
}
inline std::string* Message1_M10_M19_M42::mutable_f_42() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_42();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_42)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_42(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_42_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_42_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_42)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_42_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_42_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_42(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_42_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_42_.IsDefault()) {
          _impl_.f_42_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_42)
}

// optional sint64 f_43 = 68;
inline bool Message1_M10_M19_M42::has_f_43() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::int64_t Message1_M10_M19_M42::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_43)
  return _internal_f_43();
}
inline void Message1_M10_M19_M42::set_f_43(::int64_t value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_43)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_;
}
inline void Message1_M10_M19_M42::_internal_set_f_43(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = value;
}

// optional double f_44 = 69;
inline bool Message1_M10_M19_M42::has_f_44() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline double Message1_M10_M19_M42::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_44)
  return _internal_f_44();
}
inline void Message1_M10_M19_M42::set_f_44(double value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_44)
}
inline double Message1_M10_M19_M42::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message1_M10_M19_M42::_internal_set_f_44(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// optional fixed32 f_45 = 70;
inline bool Message1_M10_M19_M42::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::uint32_t Message1_M10_M19_M42::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_45)
  return _internal_f_45();
}
inline void Message1_M10_M19_M42::set_f_45(::uint32_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_45)
}
inline ::uint32_t Message1_M10_M19_M42::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message1_M10_M19_M42::_internal_set_f_45(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional string f_46 = 71;
inline bool Message1_M10_M19_M42::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message1_M10_M19_M42::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_46_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_46)
}
inline std::string* Message1_M10_M19_M42::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_46)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_46)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_46)
}

// optional .fleetbench.proto.Message1.M10.M19.M42.E19 f_47 = 74;
inline bool Message1_M10_M19_M42::has_f_47() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E19 Message1_M10_M19_M42::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_47)
  return _internal_f_47();
}
inline void Message1_M10_M19_M42::set_f_47(::fleetbench::proto::Message1_M10_M19_M42_E19 value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_47)
}
inline ::fleetbench::proto::Message1_M10_M19_M42_E19 Message1_M10_M19_M42::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M10_M19_M42_E19>(_impl_.f_47_);
}
inline void Message1_M10_M19_M42::_internal_set_f_47(::fleetbench::proto::Message1_M10_M19_M42_E19 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M10_M19_M42_E19_IsValid(value));
  _impl_.f_47_ = value;
}

// optional int32 f_48 = 75;
inline bool Message1_M10_M19_M42::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int32_t Message1_M10_M19_M42::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_48)
  return _internal_f_48();
}
inline void Message1_M10_M19_M42::set_f_48(::int32_t value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_48)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message1_M10_M19_M42::_internal_set_f_48(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// optional int32 f_49 = 78;
inline bool Message1_M10_M19_M42::has_f_49() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::int32_t Message1_M10_M19_M42::f_49() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_49)
  return _internal_f_49();
}
inline void Message1_M10_M19_M42::set_f_49(::int32_t value) {
  _internal_set_f_49(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_49)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline void Message1_M10_M19_M42::_internal_set_f_49(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = value;
}

// optional string f_50 = 79;
inline bool Message1_M10_M19_M42::has_f_50() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message1_M10_M19_M42::f_50() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_50)
  return _internal_f_50();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_50(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_50_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_50)
}
inline std::string* Message1_M10_M19_M42::mutable_f_50() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_50();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_50)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_50(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_50_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_50_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_50)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_50_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_50_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_50(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_50_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_50_.IsDefault()) {
          _impl_.f_50_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_50)
}

// optional bool f_51 = 80;
inline bool Message1_M10_M19_M42::has_f_51() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool Message1_M10_M19_M42::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_51)
  return _internal_f_51();
}
inline void Message1_M10_M19_M42::set_f_51(bool value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_51)
}
inline bool Message1_M10_M19_M42::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline void Message1_M10_M19_M42::_internal_set_f_51(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = value;
}

// optional int32 f_52 = 82;
inline bool Message1_M10_M19_M42::has_f_52() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::int32_t Message1_M10_M19_M42::f_52() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_52)
  return _internal_f_52();
}
inline void Message1_M10_M19_M42::set_f_52(::int32_t value) {
  _internal_set_f_52(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_52)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_;
}
inline void Message1_M10_M19_M42::_internal_set_f_52(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = value;
}

// optional string f_53 = 83;
inline bool Message1_M10_M19_M42::has_f_53() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message1_M10_M19_M42::f_53() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_53)
  return _internal_f_53();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_53(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_53_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_53)
}
inline std::string* Message1_M10_M19_M42::mutable_f_53() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_53();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_53)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_53(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_53_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_53_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_53)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_53_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_53_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_53(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_53_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_53_.IsDefault()) {
          _impl_.f_53_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_53)
}

// optional string f_54 = 84;
inline bool Message1_M10_M19_M42::has_f_54() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message1_M10_M19_M42::f_54() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_54)
  return _internal_f_54();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M10_M19_M42::set_f_54(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_54_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_54)
}
inline std::string* Message1_M10_M19_M42::mutable_f_54() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_54();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.M42.f_54)
  return _s;
}
inline const std::string& Message1_M10_M19_M42::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_.Get();
}
inline void Message1_M10_M19_M42::_internal_set_f_54(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_54_.Set(value, GetArena());
}
inline std::string* Message1_M10_M19_M42::_internal_mutable_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_54_.Mutable( GetArena());
}
inline std::string* Message1_M10_M19_M42::release_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.M42.f_54)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_54_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_54_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M10_M19_M42::set_allocated_f_54(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_54_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_54_.IsDefault()) {
          _impl_.f_54_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.M42.f_54)
}

// repeated int64 f_55 = 86 [packed = true];
inline int Message1_M10_M19_M42::_internal_f_55_size() const {
  return _internal_f_55().size();
}
inline int Message1_M10_M19_M42::f_55_size() const {
  return _internal_f_55_size();
}
inline void Message1_M10_M19_M42::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_.Clear();
}
inline ::int64_t Message1_M10_M19_M42::f_55(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_55)
  return _internal_f_55().Get(index);
}
inline void Message1_M10_M19_M42::set_f_55(int index, ::int64_t value) {
  _internal_mutable_f_55()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_55)
}
inline void Message1_M10_M19_M42::add_f_55(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_55()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M10.M19.M42.f_55)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message1_M10_M19_M42::f_55() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M10.M19.M42.f_55)
  return _internal_f_55();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M10_M19_M42::mutable_f_55()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M10.M19.M42.f_55)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_55();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message1_M10_M19_M42::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message1_M10_M19_M42::_internal_mutable_f_55() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_55_;
}

// optional int64 f_56 = 89;
inline bool Message1_M10_M19_M42::has_f_56() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int64_t Message1_M10_M19_M42::f_56() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_56)
  return _internal_f_56();
}
inline void Message1_M10_M19_M42::set_f_56(::int64_t value) {
  _internal_set_f_56(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_56)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_;
}
inline void Message1_M10_M19_M42::_internal_set_f_56(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = value;
}

// optional int64 f_57 = 92;
inline bool Message1_M10_M19_M42::has_f_57() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::int64_t Message1_M10_M19_M42::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_57)
  return _internal_f_57();
}
inline void Message1_M10_M19_M42::set_f_57(::int64_t value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_57)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message1_M10_M19_M42::_internal_set_f_57(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional int64 f_58 = 93;
inline bool Message1_M10_M19_M42::has_f_58() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::int64_t Message1_M10_M19_M42::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_58)
  return _internal_f_58();
}
inline void Message1_M10_M19_M42::set_f_58(::int64_t value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_58)
}
inline ::int64_t Message1_M10_M19_M42::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message1_M10_M19_M42::_internal_set_f_58(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional int32 f_59 = 95;
inline bool Message1_M10_M19_M42::has_f_59() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message1_M10_M19_M42::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::int32_t Message1_M10_M19_M42::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.M42.f_59)
  return _internal_f_59();
}
inline void Message1_M10_M19_M42::set_f_59(::int32_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.M42.f_59)
}
inline ::int32_t Message1_M10_M19_M42::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message1_M10_M19_M42::_internal_set_f_59(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// -------------------------------------------------------------------

// Message1_M10_M19

// optional int64 f_0 = 2;
inline bool Message1_M10_M19::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M10_M19::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message1_M10_M19::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.f_0)
  return _internal_f_0();
}
inline void Message1_M10_M19::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.M19.f_0)
}
inline ::int64_t Message1_M10_M19::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10_M19::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19.M40 f_2 = 5;
inline bool Message1_M10_M19::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M10_M19::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M40& Message1_M10_M19::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M40* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M40&>(::fleetbench::proto::_Message1_M10_M19_M40_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M40& Message1_M10_M19::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.f_2)
  return _internal_f_2();
}
inline void Message1_M10_M19::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.f_2)
}
inline ::fleetbench::proto::Message1_M10_M19_M40* Message1_M10_M19::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M40* Message1_M10_M19::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M40* Message1_M10_M19::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M40>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M10_M19_M40* Message1_M10_M19::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19_M40* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.f_2)
  return _msg;
}
inline void Message1_M10_M19::set_allocated_f_2(::fleetbench::proto::Message1_M10_M19_M40* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M40*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.f_2)
}

// optional .fleetbench.proto.Message1.M10.M19.M42 f_5 = 7;
inline bool Message1_M10_M19::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message1_M10_M19::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M10_M19_M42& Message1_M10_M19::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19_M42* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19_M42&>(::fleetbench::proto::_Message1_M10_M19_M42_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19_M42& Message1_M10_M19::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.M19.f_5)
  return _internal_f_5();
}
inline void Message1_M10_M19::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M42* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M42*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.M19.f_5)
}
inline ::fleetbench::proto::Message1_M10_M19_M42* Message1_M10_M19::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M42* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19_M42* Message1_M10_M19::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.M19.f_5)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M42* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19_M42* Message1_M10_M19::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19_M42>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M42*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message1_M10_M19_M42* Message1_M10_M19::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M10_M19_M42* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.M19.f_5)
  return _msg;
}
inline void Message1_M10_M19::set_allocated_f_5(::fleetbench::proto::Message1_M10_M19_M42* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19_M42*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.M19.f_5)
}

// -------------------------------------------------------------------

// Message1_M10

// optional int64 f_0 = 1;
inline bool Message1_M10::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M10::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message1_M10::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.f_0)
  return _internal_f_0();
}
inline void Message1_M10::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M10.f_0)
}
inline ::int64_t Message1_M10::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M10::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M10.M19 f_1 = 2;
inline bool Message1_M10::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M10::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M10_M19& Message1_M10::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M10_M19* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M10_M19&>(::fleetbench::proto::_Message1_M10_M19_default_instance_);
}
inline const ::fleetbench::proto::Message1_M10_M19& Message1_M10::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M10.f_1)
  return _internal_f_1();
}
inline void Message1_M10::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M10_M19* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M10.f_1)
}
inline ::fleetbench::proto::Message1_M10_M19* Message1_M10::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M10_M19* Message1_M10::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M10.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M10_M19* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M10_M19* Message1_M10::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M10_M19>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M10_M19* Message1_M10::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M10_M19* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M10.f_1)
  return _msg;
}
inline void Message1_M10::set_allocated_f_1(::fleetbench::proto::Message1_M10_M19* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M10_M19*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M10.f_1)
}

// -------------------------------------------------------------------

// Message1_M11_M20

// optional bool f_0 = 1;
inline bool Message1_M11_M20::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M20::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message1_M11_M20::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M20.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M20::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M20.f_0)
}
inline bool Message1_M11_M20::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M20::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M58_M81

// optional bool f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M58_M81::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M81::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message1_M11_M23_M37_M43_M58_M81::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43_M58_M81::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81.f_0)
}
inline bool Message1_M11_M23_M37_M43_M58_M81::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37_M43_M58_M81::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M58_M83_M92

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.E27 f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M58_M83_M92::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 Message1_M11_M23_M37_M43_M58_M83_M92::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::set_f_0(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.f_0)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 Message1_M11_M23_M37_M43_M58_M83_M92::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27>(_impl_.f_0_);
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::_internal_set_f_0(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.E28 f_1 = 3;
inline bool Message1_M11_M23_M37_M43_M58_M83_M92::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 Message1_M11_M23_M37_M43_M58_M83_M92::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.f_1)
  return _internal_f_1();
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92.f_1)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 Message1_M11_M23_M37_M43_M58_M83_M92::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28>(_impl_.f_1_);
}
inline void Message1_M11_M23_M37_M43_M58_M83_M92::_internal_set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28_IsValid(value));
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M58_M83

// optional bytes f_0 = 3;
inline bool Message1_M11_M23_M37_M43_M58_M83::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M11_M23_M37_M43_M58_M83::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M58_M83::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_0)
}
inline std::string* Message1_M11_M23_M37_M43_M58_M83::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_0)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M58_M83::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M11_M23_M37_M43_M58_M83::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M58_M83::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M58_M83::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M58_M83::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_0)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.E25 f_1 = 4;
inline bool Message1_M11_M23_M37_M43_M58_M83::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 Message1_M11_M23_M37_M43_M58_M83::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_1)
  return _internal_f_1();
}
inline void Message1_M11_M23_M37_M43_M58_M83::set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_1)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 Message1_M11_M23_M37_M43_M58_M83::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25>(_impl_.f_1_);
}
inline void Message1_M11_M23_M37_M43_M58_M83::_internal_set_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 6;
inline bool Message1_M11_M23_M37_M43_M58_M83::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message1_M11_M23_M37_M43_M58_M83::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_2)
  return _internal_f_2();
}
inline void Message1_M11_M23_M37_M43_M58_M83::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_2)
}
inline ::int64_t Message1_M11_M23_M37_M43_M58_M83::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M11_M23_M37_M43_M58_M83::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.M92 f_6 = 8;
inline bool Message1_M11_M23_M37_M43_M58_M83::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43_M58_M83::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92& Message1_M11_M23_M37_M43_M58_M83::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M58_M83_M92_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92& Message1_M11_M23_M37_M43_M58_M83::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_6)
  return _internal_f_6();
}
inline void Message1_M11_M23_M37_M43_M58_M83::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_6)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* Message1_M11_M23_M37_M43_M58_M83::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* Message1_M11_M23_M37_M43_M58_M83::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_6)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* Message1_M11_M23_M37_M43_M58_M83::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* Message1_M11_M23_M37_M43_M58_M83::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_6)
  return _msg;
}
inline void Message1_M11_M23_M37_M43_M58_M83::set_allocated_f_6(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83.f_6)
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M58

// optional string f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M58::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M58::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M11_M23_M37_M43_M58::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M58::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_0)
}
inline std::string* Message1_M11_M23_M37_M43_M58::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_0)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M58::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M11_M23_M37_M43_M58::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M58::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M58::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M58::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_0)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M81 f_1 = 2;
inline bool Message1_M11_M23_M37_M43_M58::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43_M58::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81& Message1_M11_M23_M37_M43_M58::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M58_M81_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81& Message1_M11_M23_M37_M43_M58::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_1)
  return _internal_f_1();
}
inline void Message1_M11_M23_M37_M43_M58::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_1)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* Message1_M11_M23_M37_M43_M58::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* Message1_M11_M23_M37_M43_M58::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* Message1_M11_M23_M37_M43_M58::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* Message1_M11_M23_M37_M43_M58::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_1)
  return _msg;
}
inline void Message1_M11_M23_M37_M43_M58::set_allocated_f_1(::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M81*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_1)
}

// repeated .fleetbench.proto.Message1.M11.M23.M37.M43.M58.M83 f_2 = 3;
inline int Message1_M11_M23_M37_M43_M58::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M11_M23_M37_M43_M58::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M11_M23_M37_M43_M58::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83* Message1_M11_M23_M37_M43_M58::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>* Message1_M11_M23_M37_M43_M58::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83& Message1_M11_M23_M37_M43_M58::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83* Message1_M11_M23_M37_M43_M58::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>& Message1_M11_M23_M37_M43_M58::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M11.M23.M37.M43.M58.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>&
Message1_M11_M23_M37_M43_M58::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83>*
Message1_M11_M23_M37_M43_M58::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M62_M68_M90

// optional bytes f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M62_M68_M90::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M68_M90::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M68_M90::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62_M68_M90::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90.f_0)
}
inline std::string* Message1_M11_M23_M37_M43_M62_M68_M90::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90.f_0)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M68_M90::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M11_M23_M37_M43_M62_M68_M90::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M68_M90::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M68_M90::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62_M68_M90::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90.f_0)
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M62_M68

// optional int64 f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M62_M68::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M68::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M11_M23_M37_M43_M62_M68::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43_M62_M68::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_0)
}
inline ::int64_t Message1_M11_M23_M37_M43_M62_M68::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37_M43_M62_M68::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.M90 f_1 = 2;
inline int Message1_M11_M23_M37_M43_M62_M68::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message1_M11_M23_M37_M43_M62_M68::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message1_M11_M23_M37_M43_M62_M68::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90* Message1_M11_M23_M37_M43_M62_M68::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>* Message1_M11_M23_M37_M43_M62_M68::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90& Message1_M11_M23_M37_M43_M62_M68::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90* Message1_M11_M23_M37_M43_M62_M68::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>& Message1_M11_M23_M37_M43_M62_M68::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>&
Message1_M11_M23_M37_M43_M62_M68::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68_M90>*
Message1_M11_M23_M37_M43_M62_M68::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M62_M78_M86

// optional bool f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M62_M78_M86::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78_M86::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message1_M11_M23_M37_M43_M62_M78_M86::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43_M62_M78_M86::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86.f_0)
}
inline bool Message1_M11_M23_M37_M43_M62_M78_M86::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37_M43_M62_M78_M86::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M62_M78

// optional int32 f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message1_M11_M23_M37_M43_M62_M78::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_0)
}
inline ::int32_t Message1_M11_M23_M37_M43_M62_M78::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37_M43_M62_M78::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bytes f_1 = 3;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62_M78::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_1)
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_1)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M11_M23_M37_M43_M62_M78::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_1)
}

// optional int64 f_2 = 4;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message1_M11_M23_M37_M43_M62_M78::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_2)
  return _internal_f_2();
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_2)
}
inline ::int64_t Message1_M11_M23_M37_M43_M62_M78::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1_M11_M23_M37_M43_M62_M78::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// repeated int32 f_3 = 7 [packed = true];
inline int Message1_M11_M23_M37_M43_M62_M78::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message1_M11_M23_M37_M43_M62_M78::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::int32_t Message1_M11_M23_M37_M43_M62_M78::f_3(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_3)
  return _internal_f_3().Get(index);
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_f_3(int index, ::int32_t value) {
  _internal_mutable_f_3()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_3)
}
inline void Message1_M11_M23_M37_M43_M62_M78::add_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_3()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_3)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message1_M11_M23_M37_M43_M62_M78::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_3)
  return _internal_f_3();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M11_M23_M37_M43_M62_M78::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message1_M11_M23_M37_M43_M62_M78::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M11_M23_M37_M43_M62_M78::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional string f_4 = 8;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62_M78::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_4)
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_4)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message1_M11_M23_M37_M43_M62_M78::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_4)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_4)
}

// optional string f_5 = 9;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62_M78::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_5)
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_5)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62_M78::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message1_M11_M23_M37_M43_M62_M78::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62_M78::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_5)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_5)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.M86 f_9 = 11;
inline bool Message1_M11_M23_M37_M43_M62_M78::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43_M62_M78::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86& Message1_M11_M23_M37_M43_M62_M78::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M62_M78_M86_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86& Message1_M11_M23_M37_M43_M62_M78::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_9)
  return _internal_f_9();
}
inline void Message1_M11_M23_M37_M43_M62_M78::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_9)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* Message1_M11_M23_M37_M43_M62_M78::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* Message1_M11_M23_M37_M43_M62_M78::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_9)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* Message1_M11_M23_M37_M43_M62_M78::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* Message1_M11_M23_M37_M43_M62_M78::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_9)
  return _msg;
}
inline void Message1_M11_M23_M37_M43_M62_M78::set_allocated_f_9(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78_M86*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78.f_9)
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43_M62

// optional bytes f_0 = 1;
inline bool Message1_M11_M23_M37_M43_M62::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_0)
}
inline std::string* Message1_M11_M23_M37_M43_M62::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_0)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M11_M23_M37_M43_M62::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_0)
}

// optional string f_1 = 3;
inline bool Message1_M11_M23_M37_M43_M62::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43_M62::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message1_M11_M23_M37_M43_M62::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M11_M23_M37_M43_M62::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_1)
}
inline std::string* Message1_M11_M23_M37_M43_M62::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_1)
  return _s;
}
inline const std::string& Message1_M11_M23_M37_M43_M62::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message1_M11_M23_M37_M43_M62::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message1_M11_M23_M37_M43_M62::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M11_M23_M37_M43_M62::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_1)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M68 f_3 = 5;
inline bool Message1_M11_M23_M37_M43_M62::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43_M62::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68& Message1_M11_M23_M37_M43_M62::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M62_M68_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68& Message1_M11_M23_M37_M43_M62::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_3)
  return _internal_f_3();
}
inline void Message1_M11_M23_M37_M43_M62::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_3)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* Message1_M11_M23_M37_M43_M62::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* Message1_M11_M23_M37_M43_M62::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_3)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* Message1_M11_M23_M37_M43_M62::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* Message1_M11_M23_M37_M43_M62::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_3)
  return _msg;
}
inline void Message1_M11_M23_M37_M43_M62::set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M68*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_3)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62.M78 f_5 = 6;
inline bool Message1_M11_M23_M37_M43_M62::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43_M62::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78& Message1_M11_M23_M37_M43_M62::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M62_M78_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78& Message1_M11_M23_M37_M43_M62::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_5)
  return _internal_f_5();
}
inline void Message1_M11_M23_M37_M43_M62::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_5)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* Message1_M11_M23_M37_M43_M62::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* Message1_M11_M23_M37_M43_M62::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_5)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* Message1_M11_M23_M37_M43_M62::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* Message1_M11_M23_M37_M43_M62::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_5)
  return _msg;
}
inline void Message1_M11_M23_M37_M43_M62::set_allocated_f_5(::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62_M78*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.M62.f_5)
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37_M43

// optional int64 f_0 = 2;
inline bool Message1_M11_M23_M37_M43::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M11_M23_M37_M43::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message1_M11_M23_M37_M43::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37_M43::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.M43.f_0)
}
inline ::int64_t Message1_M11_M23_M37_M43::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37_M43::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M58 f_2 = 3;
inline bool Message1_M11_M23_M37_M43::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58& Message1_M11_M23_M37_M43::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M58_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M58& Message1_M11_M23_M37_M43::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.f_2)
  return _internal_f_2();
}
inline void Message1_M11_M23_M37_M43::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43_M58* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.f_2)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* Message1_M11_M23_M37_M43::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* Message1_M11_M23_M37_M43::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* Message1_M11_M23_M37_M43::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M58>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* Message1_M11_M23_M37_M43::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M58* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.f_2)
  return _msg;
}
inline void Message1_M11_M23_M37_M43::set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43_M58* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M58*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.f_2)
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43.M62 f_3 = 4;
inline bool Message1_M11_M23_M37_M43::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37_M43::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62& Message1_M11_M23_M37_M43::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_M62_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43_M62& Message1_M11_M23_M37_M43::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.M43.f_3)
  return _internal_f_3();
}
inline void Message1_M11_M23_M37_M43::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.f_3)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* Message1_M11_M23_M37_M43::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* Message1_M11_M23_M37_M43::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.M43.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* Message1_M11_M23_M37_M43::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43_M62>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* Message1_M11_M23_M37_M43::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43_M62* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.M43.f_3)
  return _msg;
}
inline void Message1_M11_M23_M37_M43::set_allocated_f_3(::fleetbench::proto::Message1_M11_M23_M37_M43_M62* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43_M62*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.M43.f_3)
}

// -------------------------------------------------------------------

// Message1_M11_M23_M37

// optional float f_0 = 2;
inline bool Message1_M11_M23_M37::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M11_M23_M37::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message1_M11_M23_M37::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23_M37::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.M37.f_0)
}
inline float Message1_M11_M23_M37::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23_M37::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M11.M23.M37.M43 f_2 = 3;
inline bool Message1_M11_M23_M37::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M11_M23_M37::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43& Message1_M11_M23_M37::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M23_M37_M43* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M23_M37_M43&>(::fleetbench::proto::_Message1_M11_M23_M37_M43_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M23_M37_M43& Message1_M11_M23_M37::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.M37.f_2)
  return _internal_f_2();
}
inline void Message1_M11_M23_M37::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.M23.M37.f_2)
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43* Message1_M11_M23_M37::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43* Message1_M11_M23_M37::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.M23.M37.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43* Message1_M11_M23_M37::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M23_M37_M43>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M11_M23_M37_M43* Message1_M11_M23_M37::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M11_M23_M37_M43* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.M37.f_2)
  return _msg;
}
inline void Message1_M11_M23_M37::set_allocated_f_2(::fleetbench::proto::Message1_M11_M23_M37_M43* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M23_M37_M43*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.M23.M37.f_2)
}

// -------------------------------------------------------------------

// Message1_M11_M23

// optional int64 f_0 = 2;
inline bool Message1_M11_M23::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M11_M23::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message1_M11_M23::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.f_0)
  return _internal_f_0();
}
inline void Message1_M11_M23::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.M23.f_0)
}
inline ::int64_t Message1_M11_M23::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11_M23::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message1.M11.M23.M37 f_2 = 3;
inline int Message1_M11_M23::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message1_M11_M23::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message1_M11_M23::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message1_M11_M23_M37* Message1_M11_M23::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.M23.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>* Message1_M11_M23::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M11.M23.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message1_M11_M23_M37& Message1_M11_M23::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.M23.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message1_M11_M23_M37* Message1_M11_M23::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M11_M23_M37* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M11.M23.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>& Message1_M11_M23::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M11.M23.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>&
Message1_M11_M23::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23_M37>*
Message1_M11_M23::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message1_M11

// optional uint64 f_0 = 2;
inline bool Message1_M11::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M11::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message1_M11::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.f_0)
  return _internal_f_0();
}
inline void Message1_M11::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M11.f_0)
}
inline ::uint64_t Message1_M11::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M11::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M11.M20 f_2 = 4;
inline bool Message1_M11::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M11::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M11_M20& Message1_M11::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M11_M20* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M11_M20&>(::fleetbench::proto::_Message1_M11_M20_default_instance_);
}
inline const ::fleetbench::proto::Message1_M11_M20& Message1_M11::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.f_2)
  return _internal_f_2();
}
inline void Message1_M11::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M11_M20* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M20*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M11.f_2)
}
inline ::fleetbench::proto::Message1_M11_M20* Message1_M11::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M20* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M11_M20* Message1_M11::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M11.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M11_M20* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M11_M20* Message1_M11::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M11_M20>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M20*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M11_M20* Message1_M11::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M11_M20* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.f_2)
  return _msg;
}
inline void Message1_M11::set_allocated_f_2(::fleetbench::proto::Message1_M11_M20* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M11_M20*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M11.f_2)
}

// repeated .fleetbench.proto.Message1.M11.M23 f_4 = 5;
inline int Message1_M11::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message1_M11::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message1_M11::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message1_M11_M23* Message1_M11::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M11.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>* Message1_M11::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M11.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message1_M11_M23& Message1_M11::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M11.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message1_M11_M23* Message1_M11::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M11_M23* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M11.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>& Message1_M11::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M11.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>&
Message1_M11::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11_M23>*
Message1_M11::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message1_M12

// repeated int32 f_0 = 1 [packed = true];
inline int Message1_M12::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message1_M12::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message1_M12::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message1_M12::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M12.f_0)
  return _internal_f_0().Get(index);
}
inline void Message1_M12::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M12.f_0)
}
inline void Message1_M12::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M12.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message1_M12::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M12.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M12::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M12.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message1_M12::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message1_M12::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message1_M13_M15_M33

// optional string f_0 = 1;
inline bool Message1_M13_M15_M33::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M13_M15_M33::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M13_M15_M33::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M15.M33.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M13_M15_M33::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.M15.M33.f_0)
}
inline std::string* Message1_M13_M15_M33::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.M15.M33.f_0)
  return _s;
}
inline const std::string& Message1_M13_M15_M33::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M13_M15_M33::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M13_M15_M33::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M13_M15_M33::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M13.M15.M33.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M13_M15_M33::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M13.M15.M33.f_0)
}

// -------------------------------------------------------------------

// Message1_M13_M15_M36

// optional string f_0 = 1;
inline bool Message1_M13_M15_M36::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M13_M15_M36::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message1_M13_M15_M36::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M15.M36.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message1_M13_M15_M36::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.M15.M36.f_0)
}
inline std::string* Message1_M13_M15_M36::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.M15.M36.f_0)
  return _s;
}
inline const std::string& Message1_M13_M15_M36::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message1_M13_M15_M36::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message1_M13_M15_M36::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message1_M13_M15_M36::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M13.M15.M36.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message1_M13_M15_M36::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M13.M15.M36.f_0)
}

// -------------------------------------------------------------------

// Message1_M13_M15

// optional bool f_0 = 1;
inline bool Message1_M13_M15::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message1_M13_M15::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message1_M13_M15::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M15.f_0)
  return _internal_f_0();
}
inline void Message1_M13_M15::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.M15.f_0)
}
inline bool Message1_M13_M15::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M13_M15::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message1.M13.M15.M33 f_1 = 4;
inline bool Message1_M13_M15::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message1_M13_M15::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M13_M15_M33& Message1_M13_M15::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M13_M15_M33* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M13_M15_M33&>(::fleetbench::proto::_Message1_M13_M15_M33_default_instance_);
}
inline const ::fleetbench::proto::Message1_M13_M15_M33& Message1_M13_M15::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M15.f_1)
  return _internal_f_1();
}
inline void Message1_M13_M15::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message1_M13_M15_M33* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15_M33*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M13.M15.f_1)
}
inline ::fleetbench::proto::Message1_M13_M15_M33* Message1_M13_M15::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M13_M15_M33* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M13_M15_M33* Message1_M13_M15::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M13.M15.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M13_M15_M33* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M13_M15_M33* Message1_M13_M15::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M13_M15_M33>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15_M33*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message1_M13_M15_M33* Message1_M13_M15::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M13_M15_M33* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.M15.f_1)
  return _msg;
}
inline void Message1_M13_M15::set_allocated_f_1(::fleetbench::proto::Message1_M13_M15_M33* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15_M33*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M13.M15.f_1)
}

// repeated .fleetbench.proto.Message1.M13.M15.M36 f_4 = 5;
inline int Message1_M13_M15::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message1_M13_M15::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message1_M13_M15::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message1_M13_M15_M36* Message1_M13_M15::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.M15.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>* Message1_M13_M15::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.M13.M15.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message1_M13_M15_M36& Message1_M13_M15::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M15.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message1_M13_M15_M36* Message1_M13_M15::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M13_M15_M36* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.M13.M15.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>& Message1_M13_M15::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.M13.M15.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>&
Message1_M13_M15::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13_M15_M36>*
Message1_M13_M15::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message1_M13_M30

// optional int32 f_0 = 1;
inline bool Message1_M13_M30::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message1_M13_M30::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message1_M13_M30::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.M30.f_0)
  return _internal_f_0();
}
inline void Message1_M13_M30::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.M30.f_0)
}
inline ::int32_t Message1_M13_M30::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1_M13_M30::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message1_M13

// optional .fleetbench.proto.Message1.M13.E1 f_0 = 1;
inline bool Message1_M13::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message1_M13::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message1_M13_E1 Message1_M13::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.f_0)
  return _internal_f_0();
}
inline void Message1_M13::set_f_0(::fleetbench::proto::Message1_M13_E1 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.f_0)
}
inline ::fleetbench::proto::Message1_M13_E1 Message1_M13::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message1_M13_E1>(_impl_.f_0_);
}
inline void Message1_M13::_internal_set_f_0(::fleetbench::proto::Message1_M13_E1 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message1_M13_E1_IsValid(value));
  _impl_.f_0_ = value;
}

// optional bool f_1 = 2;
inline bool Message1_M13::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message1_M13::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message1_M13::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.f_1)
  return _internal_f_1();
}
inline void Message1_M13::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.M13.f_1)
}
inline bool Message1_M13::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1_M13::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message1.M13.M15 f_2 = 3;
inline bool Message1_M13::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message1_M13::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M13_M15& Message1_M13::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M13_M15* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M13_M15&>(::fleetbench::proto::_Message1_M13_M15_default_instance_);
}
inline const ::fleetbench::proto::Message1_M13_M15& Message1_M13::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.f_2)
  return _internal_f_2();
}
inline void Message1_M13::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message1_M13_M15* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M13.f_2)
}
inline ::fleetbench::proto::Message1_M13_M15* Message1_M13::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M13_M15* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M13_M15* Message1_M13::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M13.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M13_M15* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M13_M15* Message1_M13::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M13_M15>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message1_M13_M15* Message1_M13::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M13_M15* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.f_2)
  return _msg;
}
inline void Message1_M13::set_allocated_f_2(::fleetbench::proto::Message1_M13_M15* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M15*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M13.f_2)
}

// optional .fleetbench.proto.Message1.M13.M30 f_3 = 4;
inline bool Message1_M13::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message1_M13::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M13_M30& Message1_M13::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M13_M30* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M13_M30&>(::fleetbench::proto::_Message1_M13_M30_default_instance_);
}
inline const ::fleetbench::proto::Message1_M13_M30& Message1_M13::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.M13.f_3)
  return _internal_f_3();
}
inline void Message1_M13::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message1_M13_M30* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M30*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.M13.f_3)
}
inline ::fleetbench::proto::Message1_M13_M30* Message1_M13::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M13_M30* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M13_M30* Message1_M13::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.M13.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M13_M30* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M13_M30* Message1_M13::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M13_M30>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M30*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message1_M13_M30* Message1_M13::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M13_M30* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.M13.f_3)
  return _msg;
}
inline void Message1_M13::set_allocated_f_3(::fleetbench::proto::Message1_M13_M30* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message1_M13_M30*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.M13.f_3)
}

// -------------------------------------------------------------------

// Message1

// optional int32 f_0 = 1;
inline bool Message1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Message1::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_0)
  return _internal_f_0();
}
inline void Message1::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_0)
}
inline ::int32_t Message1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message1::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message1::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Message1::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_1)
  return _internal_f_1();
}
inline void Message1::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_1)
}
inline ::int32_t Message1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message1::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional float f_2 = 4;
inline bool Message1::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message1::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Message1::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_2)
  return _internal_f_2();
}
inline void Message1::set_f_2(float value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_2)
}
inline float Message1::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message1::_internal_set_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 5;
inline bool Message1::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message1::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Message1::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_3)
  return _internal_f_3();
}
inline void Message1::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_3)
}
inline ::int32_t Message1::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message1::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 6;
inline bool Message1::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message1::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Message1::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_4)
  return _internal_f_4();
}
inline void Message1::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_4)
}
inline ::int64_t Message1::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message1::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// repeated string f_5 = 7;
inline int Message1::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message1::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message1::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline std::string* Message1::add_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message1.f_5)
  return _s;
}
inline const std::string& Message1::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_5)
  return _internal_f_5().Get(index);
}
inline std::string* Message1::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline void Message1::set_f_5(int index, const std::string& value) {
  _internal_mutable_f_5()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_5)
}
inline void Message1::set_f_5(int index, std::string&& value) {
  _internal_mutable_f_5()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message1.f_5)
}
inline void Message1::set_f_5(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_5()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message1.f_5)
}
inline void Message1::set_f_5(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_5()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message1.f_5)
}
inline void Message1::set_f_5(int index, absl::string_view value) {
  _internal_mutable_f_5()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message1.f_5)
}
inline void Message1::add_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_5)
}
inline void Message1::add_f_5(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_5)
}
inline void Message1::add_f_5(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message1.f_5)
}
inline void Message1::add_f_5(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message1.f_5)
}
inline void Message1::add_f_5(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message1.f_5)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_5)
  return _internal_f_5();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message1::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message1::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// optional .fleetbench.proto.Message1.M1 f_7 = 8;
inline bool Message1::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message1::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message1_M1& Message1::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M1* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M1&>(::fleetbench::proto::_Message1_M1_default_instance_);
}
inline const ::fleetbench::proto::Message1_M1& Message1::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_7)
  return _internal_f_7();
}
inline void Message1::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message1_M1* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M1*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_7)
}
inline ::fleetbench::proto::Message1_M1* Message1::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M1* Message1::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_7)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message1_M1* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M1* Message1::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M1>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M1*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message1_M1* Message1::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message1_M1* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_7)
  return _msg;
}
inline void Message1::set_allocated_f_7(::fleetbench::proto::Message1_M1* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message1_M1*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_7)
}

// optional .fleetbench.proto.Message1.M2 f_8 = 9;
inline bool Message1::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message1::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message1_M2& Message1::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M2* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M2&>(::fleetbench::proto::_Message1_M2_default_instance_);
}
inline const ::fleetbench::proto::Message1_M2& Message1::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_8)
  return _internal_f_8();
}
inline void Message1::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message1_M2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_8)
}
inline ::fleetbench::proto::Message1_M2* Message1::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M2* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M2* Message1::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_8)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message1_M2* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M2* Message1::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M2>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M2*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message1_M2* Message1::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message1_M2* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_8)
  return _msg;
}
inline void Message1::set_allocated_f_8(::fleetbench::proto::Message1_M2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message1_M2*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_8)
}

// optional .fleetbench.proto.Message1.M3 f_9 = 11;
inline bool Message1::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message1::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message1_M3& Message1::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M3* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M3&>(::fleetbench::proto::_Message1_M3_default_instance_);
}
inline const ::fleetbench::proto::Message1_M3& Message1::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_9)
  return _internal_f_9();
}
inline void Message1::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message1_M3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_9)
}
inline ::fleetbench::proto::Message1_M3* Message1::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M3* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M3* Message1::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_9)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message1_M3* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M3* Message1::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M3>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M3*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message1_M3* Message1::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message1_M3* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_9)
  return _msg;
}
inline void Message1::set_allocated_f_9(::fleetbench::proto::Message1_M3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message1_M3*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_9)
}

// repeated .fleetbench.proto.Message1.M4 f_11 = 12;
inline int Message1::_internal_f_11_size() const {
  return _internal_f_11().size();
}
inline int Message1::f_11_size() const {
  return _internal_f_11_size();
}
inline void Message1::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.Clear();
}
inline ::fleetbench::proto::Message1_M4* Message1::mutable_f_11(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_11)
  return _internal_mutable_f_11()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>* Message1::mutable_f_11()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_11)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_11();
}
inline const ::fleetbench::proto::Message1_M4& Message1::f_11(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_11)
  return _internal_f_11().Get(index);
}
inline ::fleetbench::proto::Message1_M4* Message1::add_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M4* _add = _internal_mutable_f_11()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_11)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>& Message1::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_11)
  return _internal_f_11();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>&
Message1::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M4>*
Message1::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_11_;
}

// repeated .fleetbench.proto.Message1.M5 f_12 = 13;
inline int Message1::_internal_f_12_size() const {
  return _internal_f_12().size();
}
inline int Message1::f_12_size() const {
  return _internal_f_12_size();
}
inline void Message1::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.Clear();
}
inline ::fleetbench::proto::Message1_M5* Message1::mutable_f_12(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_12)
  return _internal_mutable_f_12()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>* Message1::mutable_f_12()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_12)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_12();
}
inline const ::fleetbench::proto::Message1_M5& Message1::f_12(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_12)
  return _internal_f_12().Get(index);
}
inline ::fleetbench::proto::Message1_M5* Message1::add_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M5* _add = _internal_mutable_f_12()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_12)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>& Message1::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_12)
  return _internal_f_12();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>&
Message1::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M5>*
Message1::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_12_;
}

// optional .fleetbench.proto.Message1.M6 f_13 = 14;
inline bool Message1::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_13_ != nullptr);
  return value;
}
inline void Message1::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ != nullptr) _impl_.f_13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message1_M6& Message1::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M6* p = _impl_.f_13_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M6&>(::fleetbench::proto::_Message1_M6_default_instance_);
}
inline const ::fleetbench::proto::Message1_M6& Message1::f_13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_13)
  return _internal_f_13();
}
inline void Message1::unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message1_M6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_13_);
  }
  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message1_M6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_13)
}
inline ::fleetbench::proto::Message1_M6* Message1::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M6* released = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M6* Message1::unsafe_arena_release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_13)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message1_M6* temp = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M6* Message1::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M6>(GetArena());
    _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message1_M6*>(p);
  }
  return _impl_.f_13_;
}
inline ::fleetbench::proto::Message1_M6* Message1::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message1_M6* _msg = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_13)
  return _msg;
}
inline void Message1::set_allocated_f_13(::fleetbench::proto::Message1_M6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message1_M6*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_13)
}

// optional .fleetbench.proto.Message1.M7 f_14 = 16;
inline bool Message1::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_14_ != nullptr);
  return value;
}
inline void Message1::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ != nullptr) _impl_.f_14_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message1_M7& Message1::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M7* p = _impl_.f_14_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M7&>(::fleetbench::proto::_Message1_M7_default_instance_);
}
inline const ::fleetbench::proto::Message1_M7& Message1::f_14() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_14)
  return _internal_f_14();
}
inline void Message1::unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message1_M7* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_14_);
  }
  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message1_M7*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_14)
}
inline ::fleetbench::proto::Message1_M7* Message1::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message1_M7* released = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M7* Message1::unsafe_arena_release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_14)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message1_M7* temp = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M7* Message1::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M7>(GetArena());
    _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message1_M7*>(p);
  }
  return _impl_.f_14_;
}
inline ::fleetbench::proto::Message1_M7* Message1::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message1_M7* _msg = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_14)
  return _msg;
}
inline void Message1::set_allocated_f_14(::fleetbench::proto::Message1_M7* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_14_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message1_M7*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_14)
}

// optional .fleetbench.proto.Message1.M8 f_16 = 17;
inline bool Message1::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_16_ != nullptr);
  return value;
}
inline void Message1::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ != nullptr) _impl_.f_16_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message1_M8& Message1::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M8* p = _impl_.f_16_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M8&>(::fleetbench::proto::_Message1_M8_default_instance_);
}
inline const ::fleetbench::proto::Message1_M8& Message1::f_16() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_16)
  return _internal_f_16();
}
inline void Message1::unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message1_M8* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_16_);
  }
  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message1_M8*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_16)
}
inline ::fleetbench::proto::Message1_M8* Message1::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message1_M8* released = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M8* Message1::unsafe_arena_release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_16)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message1_M8* temp = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M8* Message1::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M8>(GetArena());
    _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message1_M8*>(p);
  }
  return _impl_.f_16_;
}
inline ::fleetbench::proto::Message1_M8* Message1::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message1_M8* _msg = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_16)
  return _msg;
}
inline void Message1::set_allocated_f_16(::fleetbench::proto::Message1_M8* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_16_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message1_M8*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_16)
}

// optional .fleetbench.proto.Message1.M9 f_17 = 21;
inline bool Message1::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_17_ != nullptr);
  return value;
}
inline void Message1::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_17_ != nullptr) _impl_.f_17_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::fleetbench::proto::Message1_M9& Message1::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M9* p = _impl_.f_17_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M9&>(::fleetbench::proto::_Message1_M9_default_instance_);
}
inline const ::fleetbench::proto::Message1_M9& Message1::f_17() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_17)
  return _internal_f_17();
}
inline void Message1::unsafe_arena_set_allocated_f_17(::fleetbench::proto::Message1_M9* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_17_);
  }
  _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message1_M9*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_17)
}
inline ::fleetbench::proto::Message1_M9* Message1::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message1_M9* released = _impl_.f_17_;
  _impl_.f_17_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M9* Message1::unsafe_arena_release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_17)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message1_M9* temp = _impl_.f_17_;
  _impl_.f_17_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M9* Message1::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_17_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M9>(GetArena());
    _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message1_M9*>(p);
  }
  return _impl_.f_17_;
}
inline ::fleetbench::proto::Message1_M9* Message1::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::fleetbench::proto::Message1_M9* _msg = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_17)
  return _msg;
}
inline void Message1::set_allocated_f_17(::fleetbench::proto::Message1_M9* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_17_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message1_M9*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_17)
}

// repeated .fleetbench.proto.Message1.M10 f_21 = 22;
inline int Message1::_internal_f_21_size() const {
  return _internal_f_21().size();
}
inline int Message1::f_21_size() const {
  return _internal_f_21_size();
}
inline void Message1::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_.Clear();
}
inline ::fleetbench::proto::Message1_M10* Message1::mutable_f_21(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_21)
  return _internal_mutable_f_21()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>* Message1::mutable_f_21()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_21)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_21();
}
inline const ::fleetbench::proto::Message1_M10& Message1::f_21(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_21)
  return _internal_f_21().Get(index);
}
inline ::fleetbench::proto::Message1_M10* Message1::add_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M10* _add = _internal_mutable_f_21()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_21)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>& Message1::f_21() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_21)
  return _internal_f_21();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>&
Message1::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M10>*
Message1::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_21_;
}

// repeated .fleetbench.proto.Message1.M11 f_22 = 23;
inline int Message1::_internal_f_22_size() const {
  return _internal_f_22().size();
}
inline int Message1::f_22_size() const {
  return _internal_f_22_size();
}
inline void Message1::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.Clear();
}
inline ::fleetbench::proto::Message1_M11* Message1::mutable_f_22(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_22)
  return _internal_mutable_f_22()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>* Message1::mutable_f_22()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_22)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_22();
}
inline const ::fleetbench::proto::Message1_M11& Message1::f_22(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_22)
  return _internal_f_22().Get(index);
}
inline ::fleetbench::proto::Message1_M11* Message1::add_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M11* _add = _internal_mutable_f_22()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_22)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>& Message1::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_22)
  return _internal_f_22();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>&
Message1::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M11>*
Message1::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_22_;
}

// optional .fleetbench.proto.Message1.M12 f_23 = 25;
inline bool Message1::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_23_ != nullptr);
  return value;
}
inline void Message1::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ != nullptr) _impl_.f_23_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::fleetbench::proto::Message1_M12& Message1::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message1_M12* p = _impl_.f_23_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message1_M12&>(::fleetbench::proto::_Message1_M12_default_instance_);
}
inline const ::fleetbench::proto::Message1_M12& Message1::f_23() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_23)
  return _internal_f_23();
}
inline void Message1::unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message1_M12* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_23_);
  }
  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message1_M12*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message1.f_23)
}
inline ::fleetbench::proto::Message1_M12* Message1::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message1_M12* released = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message1_M12* Message1::unsafe_arena_release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message1.f_23)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message1_M12* temp = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message1_M12* Message1::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message1_M12>(GetArena());
    _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message1_M12*>(p);
  }
  return _impl_.f_23_;
}
inline ::fleetbench::proto::Message1_M12* Message1::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::fleetbench::proto::Message1_M12* _msg = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_23)
  return _msg;
}
inline void Message1::set_allocated_f_23(::fleetbench::proto::Message1_M12* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_23_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message1_M12*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message1.f_23)
}

// repeated .fleetbench.proto.Message1.M13 f_25 = 26;
inline int Message1::_internal_f_25_size() const {
  return _internal_f_25().size();
}
inline int Message1::f_25_size() const {
  return _internal_f_25_size();
}
inline void Message1::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_.Clear();
}
inline ::fleetbench::proto::Message1_M13* Message1::mutable_f_25(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message1.f_25)
  return _internal_mutable_f_25()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>* Message1::mutable_f_25()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message1.f_25)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_25();
}
inline const ::fleetbench::proto::Message1_M13& Message1::f_25(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message1.f_25)
  return _internal_f_25().Get(index);
}
inline ::fleetbench::proto::Message1_M13* Message1::add_f_25() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message1_M13* _add = _internal_mutable_f_25()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message1.f_25)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>& Message1::f_25() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message1.f_25)
  return _internal_f_25();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>&
Message1::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message1_M13>*
Message1::_internal_mutable_f_25() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_25_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fleetbench


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fleetbench::proto::Message1_M1_M25_E4> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M1_M25_E4>() {
  return ::fleetbench::proto::Message1_M1_M25_E4_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M1_M26_E5> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M1_M26_E5>() {
  return ::fleetbench::proto::Message1_M1_M26_E5_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M1_M26_E6> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M1_M26_E6>() {
  return ::fleetbench::proto::Message1_M1_M26_E6_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M4_M28_E7> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M4_M28_E7>() {
  return ::fleetbench::proto::Message1_M4_M28_E7_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22>() {
  return ::fleetbench::proto::Message1_M6_M16_M38_M46_M55_E22_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23>() {
  return ::fleetbench::proto::Message1_M6_M16_M38_M50_M64_E23_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M6_M24_E2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M6_M24_E2>() {
  return ::fleetbench::proto::Message1_M6_M24_E2_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M6_M24_E3> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M6_M24_E3>() {
  return ::fleetbench::proto::Message1_M6_M24_E3_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49>() {
  return ::fleetbench::proto::Message1_M7_M14_M41_M47_M63_M70_M89_M95_M101_M105_M110_M111_M113_M114_M115_M116_M117_E49_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M32_M53_E21> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M32_M53_E21>() {
  return ::fleetbench::proto::Message1_M7_M18_M32_M53_E21_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M80_E24_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M54_M82_M93_E29_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E30_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E31_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E32_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E33_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E34_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E35_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E36_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E37_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E38_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E39_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E40_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E41_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E42_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E43_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E44_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E45_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E46_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E47_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_M100_E48_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_M59_M67_M85_E26_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_M45_E20> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_M45_E20>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_M45_E20_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M7_M18_M39_E8> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M7_M18_M39_E8>() {
  return ::fleetbench::proto::Message1_M7_M18_M39_E8_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M40_E9> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M40_E9>() {
  return ::fleetbench::proto::Message1_M10_M19_M40_E9_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E10> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E10>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E10_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E11> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E11>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E11_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E12> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E12>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E12_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E13> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E13>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E13_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E14> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E14>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E14_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E15> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E15>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E15_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E16> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E16>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E16_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E17> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E17>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E17_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E18> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E18>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E18_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M10_M19_M42_E19> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M10_M19_M42_E19>() {
  return ::fleetbench::proto::Message1_M10_M19_M42_E19_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27>() {
  return ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E27_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28>() {
  return ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_M92_E28_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25>() {
  return ::fleetbench::proto::Message1_M11_M23_M37_M43_M58_M83_E25_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message1_M13_E1> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message1_M13_E1>() {
  return ::fleetbench::proto::Message1_M13_E1_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage1_2eproto_2epb_2eh
