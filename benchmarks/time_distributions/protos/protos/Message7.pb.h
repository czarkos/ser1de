// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/Message7.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage7_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage7_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fMessage7_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fMessage7_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fMessage7_2eproto;
namespace fleetbench {
namespace proto {
class Message7;
struct Message7DefaultTypeInternal;
extern Message7DefaultTypeInternal _Message7_default_instance_;
class Message7_M1;
struct Message7_M1DefaultTypeInternal;
extern Message7_M1DefaultTypeInternal _Message7_M1_default_instance_;
class Message7_M1_M14;
struct Message7_M1_M14DefaultTypeInternal;
extern Message7_M1_M14DefaultTypeInternal _Message7_M1_M14_default_instance_;
class Message7_M1_M14_M34;
struct Message7_M1_M14_M34DefaultTypeInternal;
extern Message7_M1_M14_M34DefaultTypeInternal _Message7_M1_M14_M34_default_instance_;
class Message7_M1_M14_M34_M48;
struct Message7_M1_M14_M34_M48DefaultTypeInternal;
extern Message7_M1_M14_M34_M48DefaultTypeInternal _Message7_M1_M14_M34_M48_default_instance_;
class Message7_M2;
struct Message7_M2DefaultTypeInternal;
extern Message7_M2DefaultTypeInternal _Message7_M2_default_instance_;
class Message7_M2_M19;
struct Message7_M2_M19DefaultTypeInternal;
extern Message7_M2_M19DefaultTypeInternal _Message7_M2_M19_default_instance_;
class Message7_M2_M19_M21;
struct Message7_M2_M19_M21DefaultTypeInternal;
extern Message7_M2_M19_M21DefaultTypeInternal _Message7_M2_M19_M21_default_instance_;
class Message7_M2_M19_M21_M44;
struct Message7_M2_M19_M21_M44DefaultTypeInternal;
extern Message7_M2_M19_M21_M44DefaultTypeInternal _Message7_M2_M19_M21_M44_default_instance_;
class Message7_M2_M19_M21_M53;
struct Message7_M2_M19_M21_M53DefaultTypeInternal;
extern Message7_M2_M19_M21_M53DefaultTypeInternal _Message7_M2_M19_M21_M53_default_instance_;
class Message7_M2_M19_M29;
struct Message7_M2_M19_M29DefaultTypeInternal;
extern Message7_M2_M19_M29DefaultTypeInternal _Message7_M2_M19_M29_default_instance_;
class Message7_M2_M19_M29_M38;
struct Message7_M2_M19_M29_M38DefaultTypeInternal;
extern Message7_M2_M19_M29_M38DefaultTypeInternal _Message7_M2_M19_M29_M38_default_instance_;
class Message7_M2_M19_M29_M38_M60;
struct Message7_M2_M19_M29_M38_M60DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62;
struct Message7_M2_M19_M29_M38_M60_M62DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M66;
struct Message7_M2_M19_M29_M38_M60_M62_M66DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M66DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M66_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69;
struct Message7_M2_M19_M29_M38_M60_M62_M69DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M80;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M80DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M80DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M80_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84;
struct Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M70;
struct Message7_M2_M19_M29_M38_M60_M62_M70DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M70DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M70_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72;
struct Message7_M2_M19_M29_M38_M60_M62_M72DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M75;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M75DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M75DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M75_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91_default_instance_;
class Message7_M2_M19_M29_M38_M60_M62_M72_M83;
struct Message7_M2_M19_M29_M38_M60_M62_M72_M83DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M62_M72_M83DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M62_M72_M83_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64;
struct Message7_M2_M19_M29_M38_M60_M64DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M67;
struct Message7_M2_M19_M29_M38_M60_M64_M67DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M67DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M67_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M67_M76;
struct Message7_M2_M19_M29_M38_M60_M64_M67_M76DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M67_M76DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M67_M76_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M67_M79;
struct Message7_M2_M19_M29_M38_M60_M64_M67_M79DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M67_M79DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M67_M79_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73;
struct Message7_M2_M19_M29_M38_M60_M64_M73DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73_M74;
struct Message7_M2_M19_M29_M38_M60_M64_M73_M74DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73_M74DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_M74_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87;
struct Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92;
struct Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93;
struct Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93_default_instance_;
class Message7_M2_M19_M29_M38_M60_M64_M73_M82;
struct Message7_M2_M19_M29_M38_M60_M64_M73_M82DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M64_M73_M82DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M64_M73_M82_default_instance_;
class Message7_M2_M19_M29_M38_M60_M65;
struct Message7_M2_M19_M29_M38_M60_M65DefaultTypeInternal;
extern Message7_M2_M19_M29_M38_M60_M65DefaultTypeInternal _Message7_M2_M19_M29_M38_M60_M65_default_instance_;
class Message7_M3;
struct Message7_M3DefaultTypeInternal;
extern Message7_M3DefaultTypeInternal _Message7_M3_default_instance_;
class Message7_M3_M11;
struct Message7_M3_M11DefaultTypeInternal;
extern Message7_M3_M11DefaultTypeInternal _Message7_M3_M11_default_instance_;
class Message7_M3_M17;
struct Message7_M3_M17DefaultTypeInternal;
extern Message7_M3_M17DefaultTypeInternal _Message7_M3_M17_default_instance_;
class Message7_M4;
struct Message7_M4DefaultTypeInternal;
extern Message7_M4DefaultTypeInternal _Message7_M4_default_instance_;
class Message7_M5;
struct Message7_M5DefaultTypeInternal;
extern Message7_M5DefaultTypeInternal _Message7_M5_default_instance_;
class Message7_M5_M13;
struct Message7_M5_M13DefaultTypeInternal;
extern Message7_M5_M13DefaultTypeInternal _Message7_M5_M13_default_instance_;
class Message7_M5_M13_M31;
struct Message7_M5_M13_M31DefaultTypeInternal;
extern Message7_M5_M13_M31DefaultTypeInternal _Message7_M5_M13_M31_default_instance_;
class Message7_M5_M13_M31_M39;
struct Message7_M5_M13_M31_M39DefaultTypeInternal;
extern Message7_M5_M13_M31_M39DefaultTypeInternal _Message7_M5_M13_M31_M39_default_instance_;
class Message7_M6;
struct Message7_M6DefaultTypeInternal;
extern Message7_M6DefaultTypeInternal _Message7_M6_default_instance_;
class Message7_M6_M10;
struct Message7_M6_M10DefaultTypeInternal;
extern Message7_M6_M10DefaultTypeInternal _Message7_M6_M10_default_instance_;
class Message7_M6_M10_M27;
struct Message7_M6_M10_M27DefaultTypeInternal;
extern Message7_M6_M10_M27DefaultTypeInternal _Message7_M6_M10_M27_default_instance_;
class Message7_M6_M10_M27_M50;
struct Message7_M6_M10_M27_M50DefaultTypeInternal;
extern Message7_M6_M10_M27_M50DefaultTypeInternal _Message7_M6_M10_M27_M50_default_instance_;
class Message7_M6_M10_M32;
struct Message7_M6_M10_M32DefaultTypeInternal;
extern Message7_M6_M10_M32DefaultTypeInternal _Message7_M6_M10_M32_default_instance_;
class Message7_M6_M10_M32_M43;
struct Message7_M6_M10_M32_M43DefaultTypeInternal;
extern Message7_M6_M10_M32_M43DefaultTypeInternal _Message7_M6_M10_M32_M43_default_instance_;
class Message7_M6_M12;
struct Message7_M6_M12DefaultTypeInternal;
extern Message7_M6_M12DefaultTypeInternal _Message7_M6_M12_default_instance_;
class Message7_M6_M12_M24;
struct Message7_M6_M12_M24DefaultTypeInternal;
extern Message7_M6_M12_M24DefaultTypeInternal _Message7_M6_M12_M24_default_instance_;
class Message7_M6_M12_M24_M36;
struct Message7_M6_M12_M24_M36DefaultTypeInternal;
extern Message7_M6_M12_M24_M36DefaultTypeInternal _Message7_M6_M12_M24_M36_default_instance_;
class Message7_M6_M12_M24_M51;
struct Message7_M6_M12_M24_M51DefaultTypeInternal;
extern Message7_M6_M12_M24_M51DefaultTypeInternal _Message7_M6_M12_M24_M51_default_instance_;
class Message7_M6_M12_M30;
struct Message7_M6_M12_M30DefaultTypeInternal;
extern Message7_M6_M12_M30DefaultTypeInternal _Message7_M6_M12_M30_default_instance_;
class Message7_M6_M12_M30_M35;
struct Message7_M6_M12_M30_M35DefaultTypeInternal;
extern Message7_M6_M12_M30_M35DefaultTypeInternal _Message7_M6_M12_M30_M35_default_instance_;
class Message7_M6_M12_M30_M35_M61;
struct Message7_M6_M12_M30_M35_M61DefaultTypeInternal;
extern Message7_M6_M12_M30_M35_M61DefaultTypeInternal _Message7_M6_M12_M30_M35_M61_default_instance_;
class Message7_M6_M12_M30_M37;
struct Message7_M6_M12_M30_M37DefaultTypeInternal;
extern Message7_M6_M12_M30_M37DefaultTypeInternal _Message7_M6_M12_M30_M37_default_instance_;
class Message7_M6_M12_M30_M49;
struct Message7_M6_M12_M30_M49DefaultTypeInternal;
extern Message7_M6_M12_M30_M49DefaultTypeInternal _Message7_M6_M12_M30_M49_default_instance_;
class Message7_M6_M12_M30_M49_M59;
struct Message7_M6_M12_M30_M49_M59DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63;
struct Message7_M6_M12_M30_M49_M59_M63DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63_M68;
struct Message7_M6_M12_M30_M49_M59_M63_M68DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63_M68DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_M68_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63_M68_M77;
struct Message7_M6_M12_M30_M49_M59_M63_M68_M77DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63_M68_M77DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_M68_M77_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86;
struct Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63_M68_M81;
struct Message7_M6_M12_M30_M49_M59_M63_M68_M81DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63_M68_M81DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_M68_M81_default_instance_;
class Message7_M6_M12_M30_M49_M59_M63_M71;
struct Message7_M6_M12_M30_M49_M59_M63_M71DefaultTypeInternal;
extern Message7_M6_M12_M30_M49_M59_M63_M71DefaultTypeInternal _Message7_M6_M12_M30_M49_M59_M63_M71_default_instance_;
class Message7_M6_M12_M30_M56;
struct Message7_M6_M12_M30_M56DefaultTypeInternal;
extern Message7_M6_M12_M30_M56DefaultTypeInternal _Message7_M6_M12_M30_M56_default_instance_;
class Message7_M7;
struct Message7_M7DefaultTypeInternal;
extern Message7_M7DefaultTypeInternal _Message7_M7_default_instance_;
class Message7_M8;
struct Message7_M8DefaultTypeInternal;
extern Message7_M8DefaultTypeInternal _Message7_M8_default_instance_;
class Message7_M8_M16;
struct Message7_M8_M16DefaultTypeInternal;
extern Message7_M8_M16DefaultTypeInternal _Message7_M8_M16_default_instance_;
class Message7_M8_M16_M28;
struct Message7_M8_M16_M28DefaultTypeInternal;
extern Message7_M8_M16_M28DefaultTypeInternal _Message7_M8_M16_M28_default_instance_;
class Message7_M8_M16_M28_M40;
struct Message7_M8_M16_M28_M40DefaultTypeInternal;
extern Message7_M8_M16_M28_M40DefaultTypeInternal _Message7_M8_M16_M28_M40_default_instance_;
class Message7_M8_M16_M28_M40_M58;
struct Message7_M8_M16_M28_M40_M58DefaultTypeInternal;
extern Message7_M8_M16_M28_M40_M58DefaultTypeInternal _Message7_M8_M16_M28_M40_M58_default_instance_;
class Message7_M8_M18;
struct Message7_M8_M18DefaultTypeInternal;
extern Message7_M8_M18DefaultTypeInternal _Message7_M8_M18_default_instance_;
class Message7_M8_M18_M20;
struct Message7_M8_M18_M20DefaultTypeInternal;
extern Message7_M8_M18_M20DefaultTypeInternal _Message7_M8_M18_M20_default_instance_;
class Message7_M8_M18_M22;
struct Message7_M8_M18_M22DefaultTypeInternal;
extern Message7_M8_M18_M22DefaultTypeInternal _Message7_M8_M18_M22_default_instance_;
class Message7_M8_M18_M22_M45;
struct Message7_M8_M18_M22_M45DefaultTypeInternal;
extern Message7_M8_M18_M22_M45DefaultTypeInternal _Message7_M8_M18_M22_M45_default_instance_;
class Message7_M8_M18_M22_M46;
struct Message7_M8_M18_M22_M46DefaultTypeInternal;
extern Message7_M8_M18_M22_M46DefaultTypeInternal _Message7_M8_M18_M22_M46_default_instance_;
class Message7_M8_M18_M22_M47;
struct Message7_M8_M18_M22_M47DefaultTypeInternal;
extern Message7_M8_M18_M22_M47DefaultTypeInternal _Message7_M8_M18_M22_M47_default_instance_;
class Message7_M8_M18_M22_M52;
struct Message7_M8_M18_M22_M52DefaultTypeInternal;
extern Message7_M8_M18_M22_M52DefaultTypeInternal _Message7_M8_M18_M22_M52_default_instance_;
class Message7_M8_M18_M22_M55;
struct Message7_M8_M18_M22_M55DefaultTypeInternal;
extern Message7_M8_M18_M22_M55DefaultTypeInternal _Message7_M8_M18_M22_M55_default_instance_;
class Message7_M8_M18_M22_M55_M57;
struct Message7_M8_M18_M22_M55_M57DefaultTypeInternal;
extern Message7_M8_M18_M22_M55_M57DefaultTypeInternal _Message7_M8_M18_M22_M55_M57_default_instance_;
class Message7_M8_M18_M25;
struct Message7_M8_M18_M25DefaultTypeInternal;
extern Message7_M8_M18_M25DefaultTypeInternal _Message7_M8_M18_M25_default_instance_;
class Message7_M8_M18_M25_M42;
struct Message7_M8_M18_M25_M42DefaultTypeInternal;
extern Message7_M8_M18_M25_M42DefaultTypeInternal _Message7_M8_M18_M25_M42_default_instance_;
class Message7_M8_M18_M26;
struct Message7_M8_M18_M26DefaultTypeInternal;
extern Message7_M8_M18_M26DefaultTypeInternal _Message7_M8_M18_M26_default_instance_;
class Message7_M9;
struct Message7_M9DefaultTypeInternal;
extern Message7_M9DefaultTypeInternal _Message7_M9_default_instance_;
class Message7_M9_M15;
struct Message7_M9_M15DefaultTypeInternal;
extern Message7_M9_M15DefaultTypeInternal _Message7_M9_M15_default_instance_;
class Message7_M9_M15_M23;
struct Message7_M9_M15_M23DefaultTypeInternal;
extern Message7_M9_M15_M23DefaultTypeInternal _Message7_M9_M15_M23_default_instance_;
class Message7_M9_M15_M23_M41;
struct Message7_M9_M15_M23_M41DefaultTypeInternal;
extern Message7_M9_M15_M23_M41DefaultTypeInternal _Message7_M9_M15_M23_M41_default_instance_;
class Message7_M9_M15_M23_M54;
struct Message7_M9_M15_M23_M54DefaultTypeInternal;
extern Message7_M9_M15_M23_M54DefaultTypeInternal _Message7_M9_M15_M23_M54_default_instance_;
class Message7_M9_M15_M33;
struct Message7_M9_M15_M33DefaultTypeInternal;
extern Message7_M9_M15_M33DefaultTypeInternal _Message7_M9_M15_M33_default_instance_;
}  // namespace proto
}  // namespace fleetbench
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fleetbench {
namespace proto {
enum Message7_M1_M14_M34_E26 : int {
  Message7_M1_M14_M34_E26_E26_UNSPECIFIED = 0,
  Message7_M1_M14_M34_E26_E26_CONST_1 = 114,
  Message7_M1_M14_M34_E26_E26_CONST_2 = 90,
  Message7_M1_M14_M34_E26_E26_CONST_3 = 6,
  Message7_M1_M14_M34_E26_E26_CONST_4 = 51,
  Message7_M1_M14_M34_E26_E26_CONST_5 = 56,
};

bool Message7_M1_M14_M34_E26_IsValid(int value);
extern const uint32_t Message7_M1_M14_M34_E26_internal_data_[];
constexpr Message7_M1_M14_M34_E26 Message7_M1_M14_M34_E26_E26_MIN = static_cast<Message7_M1_M14_M34_E26>(0);
constexpr Message7_M1_M14_M34_E26 Message7_M1_M14_M34_E26_E26_MAX = static_cast<Message7_M1_M14_M34_E26>(114);
constexpr int Message7_M1_M14_M34_E26_E26_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M1_M14_M34_E26_descriptor();
template <typename T>
const std::string& Message7_M1_M14_M34_E26_Name(T value) {
  static_assert(std::is_same<T, Message7_M1_M14_M34_E26>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E26_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M1_M14_M34_E26_descriptor(), value);
}
inline bool Message7_M1_M14_M34_E26_Parse(absl::string_view name, Message7_M1_M14_M34_E26* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M1_M14_M34_E26>(
      Message7_M1_M14_M34_E26_descriptor(), name, value);
}
enum Message7_M1_M14_M34_E27 : int {
  Message7_M1_M14_M34_E27_E27_UNSPECIFIED = 0,
  Message7_M1_M14_M34_E27_E27_CONST_1 = 80,
  Message7_M1_M14_M34_E27_E27_CONST_2 = 112,
  Message7_M1_M14_M34_E27_E27_CONST_3 = 68,
  Message7_M1_M14_M34_E27_E27_CONST_4 = 32,
  Message7_M1_M14_M34_E27_E27_CONST_5 = 45,
};

bool Message7_M1_M14_M34_E27_IsValid(int value);
extern const uint32_t Message7_M1_M14_M34_E27_internal_data_[];
constexpr Message7_M1_M14_M34_E27 Message7_M1_M14_M34_E27_E27_MIN = static_cast<Message7_M1_M14_M34_E27>(0);
constexpr Message7_M1_M14_M34_E27 Message7_M1_M14_M34_E27_E27_MAX = static_cast<Message7_M1_M14_M34_E27>(112);
constexpr int Message7_M1_M14_M34_E27_E27_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M1_M14_M34_E27_descriptor();
template <typename T>
const std::string& Message7_M1_M14_M34_E27_Name(T value) {
  static_assert(std::is_same<T, Message7_M1_M14_M34_E27>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E27_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M1_M14_M34_E27_descriptor(), value);
}
inline bool Message7_M1_M14_M34_E27_Parse(absl::string_view name, Message7_M1_M14_M34_E27* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M1_M14_M34_E27>(
      Message7_M1_M14_M34_E27_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_1 = 110,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_2 = 118,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_3 = 44,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_4 = 37,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_5 = 56,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>(118);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E50_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_1 = 39,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_2 = 54,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_3 = 67,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_4 = 34,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_5 = 27,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>(67);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_ARRAYSIZE = 67 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E51_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_1 = 120,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_2 = 79,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_3 = 84,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_4 = 76,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_5 = 50,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>(120);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E52_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_1 = 76,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_2 = 56,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_3 = 52,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_4 = 107,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_5 = 11,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>(107);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E53_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_1 = 95,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_2 = 3,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_3 = 83,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_4 = 49,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_5 = 78,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>(95);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_ARRAYSIZE = 95 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E54_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_1 = 107,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_2 = 52,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_3 = 74,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_4 = 82,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_5 = 99,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>(107);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E55_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_1 = 83,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_2 = 65,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_3 = 79,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_4 = 58,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_5 = 116,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>(116);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E56_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_1 = 57,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_2 = 56,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_3 = 98,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_4 = 7,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_5 = 16,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>(98);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_ARRAYSIZE = 98 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E57_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_1 = 74,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_2 = 1,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_3 = 48,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_4 = 55,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_5 = 104,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>(104);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E58_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_1 = 67,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_2 = 94,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_3 = 93,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_4 = 124,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_5 = 66,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>(124);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E49_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_1 = 62,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_2 = 100,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_3 = 118,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_4 = 49,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_5 = 51,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>(118);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E48_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 : int {
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_1 = 114,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_2 = 116,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_3 = 59,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_4 = 102,
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_5 = 104,
};

bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>(116);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E45_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>(
      Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 : int {
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_1 = 47,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_2 = 114,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_3 = 84,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_4 = 75,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_5 = 88,
};

bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>(114);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E47_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>(
      Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 : int {
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_1 = 89,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_2 = 38,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_3 = 46,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_4 = 12,
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_5 = 2,
};

bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>(0);
constexpr Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>(89);
constexpr int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_ARRAYSIZE = 89 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E46_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>(
      Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M64_M67_E42 : int {
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_1 = 17,
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_2 = 10,
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_3 = 125,
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_4 = 14,
  Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_5 = 82,
};

bool Message7_M2_M19_M29_M38_M60_M64_M67_E42_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M64_M67_E42_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M64_M67_E42 Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M64_M67_E42>(0);
constexpr Message7_M2_M19_M29_M38_M60_M64_M67_E42 Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M64_M67_E42>(125);
constexpr int Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M64_M67_E42_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M64_M67_E42_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M64_M67_E42>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E42_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M64_M67_E42_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M67_E42_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M64_M67_E42* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M64_M67_E42>(
      Message7_M2_M19_M29_M38_M60_M64_M67_E42_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M64_M73_E43 : int {
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_1 = 2,
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_2 = 121,
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_3 = 33,
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_4 = 26,
  Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_5 = 66,
};

bool Message7_M2_M19_M29_M38_M60_M64_M73_E43_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M64_M73_E43_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M64_M73_E43 Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M64_M73_E43>(0);
constexpr Message7_M2_M19_M29_M38_M60_M64_M73_E43 Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M64_M73_E43>(121);
constexpr int Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M64_M73_E43_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M64_M73_E43_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M64_M73_E43>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E43_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M64_M73_E43_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_E43_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M64_M73_E43* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M64_M73_E43>(
      Message7_M2_M19_M29_M38_M60_M64_M73_E43_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M64_M73_E44 : int {
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_1 = 65,
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_2 = 96,
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_3 = 49,
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_4 = 48,
  Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_5 = 93,
};

bool Message7_M2_M19_M29_M38_M60_M64_M73_E44_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M64_M73_E44_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M64_M73_E44 Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M64_M73_E44>(0);
constexpr Message7_M2_M19_M29_M38_M60_M64_M73_E44 Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M64_M73_E44>(96);
constexpr int Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_ARRAYSIZE = 96 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M64_M73_E44_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M64_M73_E44_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M64_M73_E44>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E44_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M64_M73_E44_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_E44_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M64_M73_E44* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M64_M73_E44>(
      Message7_M2_M19_M29_M38_M60_M64_M73_E44_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M65_E40 : int {
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_1 = 107,
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_2 = 27,
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_3 = 99,
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_4 = 118,
  Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_5 = 38,
};

bool Message7_M2_M19_M29_M38_M60_M65_E40_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M65_E40_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M65_E40 Message7_M2_M19_M29_M38_M60_M65_E40_E40_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M65_E40>(0);
constexpr Message7_M2_M19_M29_M38_M60_M65_E40 Message7_M2_M19_M29_M38_M60_M65_E40_E40_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M65_E40>(118);
constexpr int Message7_M2_M19_M29_M38_M60_M65_E40_E40_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M65_E40_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M65_E40_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M65_E40>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E40_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M65_E40_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M65_E40_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M65_E40* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M65_E40>(
      Message7_M2_M19_M29_M38_M60_M65_E40_descriptor(), name, value);
}
enum Message7_M2_M19_M29_M38_M60_M65_E41 : int {
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_UNSPECIFIED = 0,
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_1 = 7,
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_2 = 103,
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_3 = 115,
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_4 = 109,
  Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_5 = 40,
};

bool Message7_M2_M19_M29_M38_M60_M65_E41_IsValid(int value);
extern const uint32_t Message7_M2_M19_M29_M38_M60_M65_E41_internal_data_[];
constexpr Message7_M2_M19_M29_M38_M60_M65_E41 Message7_M2_M19_M29_M38_M60_M65_E41_E41_MIN = static_cast<Message7_M2_M19_M29_M38_M60_M65_E41>(0);
constexpr Message7_M2_M19_M29_M38_M60_M65_E41 Message7_M2_M19_M29_M38_M60_M65_E41_E41_MAX = static_cast<Message7_M2_M19_M29_M38_M60_M65_E41>(115);
constexpr int Message7_M2_M19_M29_M38_M60_M65_E41_E41_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_M29_M38_M60_M65_E41_descriptor();
template <typename T>
const std::string& Message7_M2_M19_M29_M38_M60_M65_E41_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_M29_M38_M60_M65_E41>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E41_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_M29_M38_M60_M65_E41_descriptor(), value);
}
inline bool Message7_M2_M19_M29_M38_M60_M65_E41_Parse(absl::string_view name, Message7_M2_M19_M29_M38_M60_M65_E41* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_M29_M38_M60_M65_E41>(
      Message7_M2_M19_M29_M38_M60_M65_E41_descriptor(), name, value);
}
enum Message7_M2_M19_E4 : int {
  Message7_M2_M19_E4_E4_UNSPECIFIED = 0,
  Message7_M2_M19_E4_E4_CONST_1 = 14,
  Message7_M2_M19_E4_E4_CONST_2 = 77,
  Message7_M2_M19_E4_E4_CONST_3 = 91,
  Message7_M2_M19_E4_E4_CONST_4 = 48,
  Message7_M2_M19_E4_E4_CONST_5 = 123,
};

bool Message7_M2_M19_E4_IsValid(int value);
extern const uint32_t Message7_M2_M19_E4_internal_data_[];
constexpr Message7_M2_M19_E4 Message7_M2_M19_E4_E4_MIN = static_cast<Message7_M2_M19_E4>(0);
constexpr Message7_M2_M19_E4 Message7_M2_M19_E4_E4_MAX = static_cast<Message7_M2_M19_E4>(123);
constexpr int Message7_M2_M19_E4_E4_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E4_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E4_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E4>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E4_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E4_descriptor(), value);
}
inline bool Message7_M2_M19_E4_Parse(absl::string_view name, Message7_M2_M19_E4* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E4>(
      Message7_M2_M19_E4_descriptor(), name, value);
}
enum Message7_M2_M19_E5 : int {
  Message7_M2_M19_E5_E5_UNSPECIFIED = 0,
  Message7_M2_M19_E5_E5_CONST_1 = 20,
  Message7_M2_M19_E5_E5_CONST_2 = 59,
  Message7_M2_M19_E5_E5_CONST_3 = 107,
  Message7_M2_M19_E5_E5_CONST_4 = 58,
  Message7_M2_M19_E5_E5_CONST_5 = 118,
};

bool Message7_M2_M19_E5_IsValid(int value);
extern const uint32_t Message7_M2_M19_E5_internal_data_[];
constexpr Message7_M2_M19_E5 Message7_M2_M19_E5_E5_MIN = static_cast<Message7_M2_M19_E5>(0);
constexpr Message7_M2_M19_E5 Message7_M2_M19_E5_E5_MAX = static_cast<Message7_M2_M19_E5>(118);
constexpr int Message7_M2_M19_E5_E5_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E5_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E5_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E5>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E5_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E5_descriptor(), value);
}
inline bool Message7_M2_M19_E5_Parse(absl::string_view name, Message7_M2_M19_E5* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E5>(
      Message7_M2_M19_E5_descriptor(), name, value);
}
enum Message7_M2_M19_E6 : int {
  Message7_M2_M19_E6_E6_UNSPECIFIED = 0,
  Message7_M2_M19_E6_E6_CONST_1 = 30,
  Message7_M2_M19_E6_E6_CONST_2 = 122,
  Message7_M2_M19_E6_E6_CONST_3 = 84,
  Message7_M2_M19_E6_E6_CONST_4 = 90,
  Message7_M2_M19_E6_E6_CONST_5 = 29,
};

bool Message7_M2_M19_E6_IsValid(int value);
extern const uint32_t Message7_M2_M19_E6_internal_data_[];
constexpr Message7_M2_M19_E6 Message7_M2_M19_E6_E6_MIN = static_cast<Message7_M2_M19_E6>(0);
constexpr Message7_M2_M19_E6 Message7_M2_M19_E6_E6_MAX = static_cast<Message7_M2_M19_E6>(122);
constexpr int Message7_M2_M19_E6_E6_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E6_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E6_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E6>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E6_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E6_descriptor(), value);
}
inline bool Message7_M2_M19_E6_Parse(absl::string_view name, Message7_M2_M19_E6* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E6>(
      Message7_M2_M19_E6_descriptor(), name, value);
}
enum Message7_M2_M19_E7 : int {
  Message7_M2_M19_E7_E7_UNSPECIFIED = 0,
  Message7_M2_M19_E7_E7_CONST_1 = 50,
  Message7_M2_M19_E7_E7_CONST_2 = 105,
  Message7_M2_M19_E7_E7_CONST_3 = 67,
  Message7_M2_M19_E7_E7_CONST_4 = 47,
  Message7_M2_M19_E7_E7_CONST_5 = 98,
};

bool Message7_M2_M19_E7_IsValid(int value);
extern const uint32_t Message7_M2_M19_E7_internal_data_[];
constexpr Message7_M2_M19_E7 Message7_M2_M19_E7_E7_MIN = static_cast<Message7_M2_M19_E7>(0);
constexpr Message7_M2_M19_E7 Message7_M2_M19_E7_E7_MAX = static_cast<Message7_M2_M19_E7>(105);
constexpr int Message7_M2_M19_E7_E7_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E7_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E7_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E7>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E7_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E7_descriptor(), value);
}
inline bool Message7_M2_M19_E7_Parse(absl::string_view name, Message7_M2_M19_E7* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E7>(
      Message7_M2_M19_E7_descriptor(), name, value);
}
enum Message7_M2_M19_E8 : int {
  Message7_M2_M19_E8_E8_UNSPECIFIED = 0,
  Message7_M2_M19_E8_E8_CONST_1 = 50,
  Message7_M2_M19_E8_E8_CONST_2 = 99,
  Message7_M2_M19_E8_E8_CONST_3 = 55,
  Message7_M2_M19_E8_E8_CONST_4 = 67,
  Message7_M2_M19_E8_E8_CONST_5 = 76,
};

bool Message7_M2_M19_E8_IsValid(int value);
extern const uint32_t Message7_M2_M19_E8_internal_data_[];
constexpr Message7_M2_M19_E8 Message7_M2_M19_E8_E8_MIN = static_cast<Message7_M2_M19_E8>(0);
constexpr Message7_M2_M19_E8 Message7_M2_M19_E8_E8_MAX = static_cast<Message7_M2_M19_E8>(99);
constexpr int Message7_M2_M19_E8_E8_ARRAYSIZE = 99 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E8_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E8_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E8>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E8_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E8_descriptor(), value);
}
inline bool Message7_M2_M19_E8_Parse(absl::string_view name, Message7_M2_M19_E8* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E8>(
      Message7_M2_M19_E8_descriptor(), name, value);
}
enum Message7_M2_M19_E9 : int {
  Message7_M2_M19_E9_E9_UNSPECIFIED = 0,
  Message7_M2_M19_E9_E9_CONST_1 = 13,
  Message7_M2_M19_E9_E9_CONST_2 = 2,
  Message7_M2_M19_E9_E9_CONST_3 = 4,
  Message7_M2_M19_E9_E9_CONST_4 = 63,
  Message7_M2_M19_E9_E9_CONST_5 = 100,
};

bool Message7_M2_M19_E9_IsValid(int value);
extern const uint32_t Message7_M2_M19_E9_internal_data_[];
constexpr Message7_M2_M19_E9 Message7_M2_M19_E9_E9_MIN = static_cast<Message7_M2_M19_E9>(0);
constexpr Message7_M2_M19_E9 Message7_M2_M19_E9_E9_MAX = static_cast<Message7_M2_M19_E9>(100);
constexpr int Message7_M2_M19_E9_E9_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E9_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E9_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E9>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E9_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E9_descriptor(), value);
}
inline bool Message7_M2_M19_E9_Parse(absl::string_view name, Message7_M2_M19_E9* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E9>(
      Message7_M2_M19_E9_descriptor(), name, value);
}
enum Message7_M2_M19_E10 : int {
  Message7_M2_M19_E10_E10_UNSPECIFIED = 0,
  Message7_M2_M19_E10_E10_CONST_1 = 4,
  Message7_M2_M19_E10_E10_CONST_2 = 9,
  Message7_M2_M19_E10_E10_CONST_3 = 66,
  Message7_M2_M19_E10_E10_CONST_4 = 83,
  Message7_M2_M19_E10_E10_CONST_5 = 79,
};

bool Message7_M2_M19_E10_IsValid(int value);
extern const uint32_t Message7_M2_M19_E10_internal_data_[];
constexpr Message7_M2_M19_E10 Message7_M2_M19_E10_E10_MIN = static_cast<Message7_M2_M19_E10>(0);
constexpr Message7_M2_M19_E10 Message7_M2_M19_E10_E10_MAX = static_cast<Message7_M2_M19_E10>(83);
constexpr int Message7_M2_M19_E10_E10_ARRAYSIZE = 83 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E10_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E10_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E10>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E10_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E10_descriptor(), value);
}
inline bool Message7_M2_M19_E10_Parse(absl::string_view name, Message7_M2_M19_E10* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E10>(
      Message7_M2_M19_E10_descriptor(), name, value);
}
enum Message7_M2_M19_E11 : int {
  Message7_M2_M19_E11_E11_UNSPECIFIED = 0,
  Message7_M2_M19_E11_E11_CONST_1 = 12,
  Message7_M2_M19_E11_E11_CONST_2 = 75,
  Message7_M2_M19_E11_E11_CONST_3 = 96,
  Message7_M2_M19_E11_E11_CONST_4 = 101,
  Message7_M2_M19_E11_E11_CONST_5 = 35,
};

bool Message7_M2_M19_E11_IsValid(int value);
extern const uint32_t Message7_M2_M19_E11_internal_data_[];
constexpr Message7_M2_M19_E11 Message7_M2_M19_E11_E11_MIN = static_cast<Message7_M2_M19_E11>(0);
constexpr Message7_M2_M19_E11 Message7_M2_M19_E11_E11_MAX = static_cast<Message7_M2_M19_E11>(101);
constexpr int Message7_M2_M19_E11_E11_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E11_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E11_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E11>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E11_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E11_descriptor(), value);
}
inline bool Message7_M2_M19_E11_Parse(absl::string_view name, Message7_M2_M19_E11* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E11>(
      Message7_M2_M19_E11_descriptor(), name, value);
}
enum Message7_M2_M19_E12 : int {
  Message7_M2_M19_E12_E12_UNSPECIFIED = 0,
  Message7_M2_M19_E12_E12_CONST_1 = 56,
  Message7_M2_M19_E12_E12_CONST_2 = 29,
  Message7_M2_M19_E12_E12_CONST_3 = 121,
  Message7_M2_M19_E12_E12_CONST_4 = 37,
  Message7_M2_M19_E12_E12_CONST_5 = 67,
};

bool Message7_M2_M19_E12_IsValid(int value);
extern const uint32_t Message7_M2_M19_E12_internal_data_[];
constexpr Message7_M2_M19_E12 Message7_M2_M19_E12_E12_MIN = static_cast<Message7_M2_M19_E12>(0);
constexpr Message7_M2_M19_E12 Message7_M2_M19_E12_E12_MAX = static_cast<Message7_M2_M19_E12>(121);
constexpr int Message7_M2_M19_E12_E12_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E12_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E12_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E12>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E12_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E12_descriptor(), value);
}
inline bool Message7_M2_M19_E12_Parse(absl::string_view name, Message7_M2_M19_E12* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E12>(
      Message7_M2_M19_E12_descriptor(), name, value);
}
enum Message7_M2_M19_E13 : int {
  Message7_M2_M19_E13_E13_UNSPECIFIED = 0,
  Message7_M2_M19_E13_E13_CONST_1 = 58,
  Message7_M2_M19_E13_E13_CONST_2 = 118,
  Message7_M2_M19_E13_E13_CONST_3 = 94,
  Message7_M2_M19_E13_E13_CONST_4 = 115,
  Message7_M2_M19_E13_E13_CONST_5 = 56,
};

bool Message7_M2_M19_E13_IsValid(int value);
extern const uint32_t Message7_M2_M19_E13_internal_data_[];
constexpr Message7_M2_M19_E13 Message7_M2_M19_E13_E13_MIN = static_cast<Message7_M2_M19_E13>(0);
constexpr Message7_M2_M19_E13 Message7_M2_M19_E13_E13_MAX = static_cast<Message7_M2_M19_E13>(118);
constexpr int Message7_M2_M19_E13_E13_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E13_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E13_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E13>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E13_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E13_descriptor(), value);
}
inline bool Message7_M2_M19_E13_Parse(absl::string_view name, Message7_M2_M19_E13* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E13>(
      Message7_M2_M19_E13_descriptor(), name, value);
}
enum Message7_M2_M19_E14 : int {
  Message7_M2_M19_E14_E14_UNSPECIFIED = 0,
  Message7_M2_M19_E14_E14_CONST_1 = 56,
  Message7_M2_M19_E14_E14_CONST_2 = 107,
  Message7_M2_M19_E14_E14_CONST_3 = 26,
  Message7_M2_M19_E14_E14_CONST_4 = 32,
  Message7_M2_M19_E14_E14_CONST_5 = 117,
};

bool Message7_M2_M19_E14_IsValid(int value);
extern const uint32_t Message7_M2_M19_E14_internal_data_[];
constexpr Message7_M2_M19_E14 Message7_M2_M19_E14_E14_MIN = static_cast<Message7_M2_M19_E14>(0);
constexpr Message7_M2_M19_E14 Message7_M2_M19_E14_E14_MAX = static_cast<Message7_M2_M19_E14>(117);
constexpr int Message7_M2_M19_E14_E14_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E14_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E14_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E14>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E14_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E14_descriptor(), value);
}
inline bool Message7_M2_M19_E14_Parse(absl::string_view name, Message7_M2_M19_E14* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E14>(
      Message7_M2_M19_E14_descriptor(), name, value);
}
enum Message7_M2_M19_E15 : int {
  Message7_M2_M19_E15_E15_UNSPECIFIED = 0,
  Message7_M2_M19_E15_E15_CONST_1 = 78,
  Message7_M2_M19_E15_E15_CONST_2 = 64,
  Message7_M2_M19_E15_E15_CONST_3 = 29,
  Message7_M2_M19_E15_E15_CONST_4 = 105,
  Message7_M2_M19_E15_E15_CONST_5 = 55,
};

bool Message7_M2_M19_E15_IsValid(int value);
extern const uint32_t Message7_M2_M19_E15_internal_data_[];
constexpr Message7_M2_M19_E15 Message7_M2_M19_E15_E15_MIN = static_cast<Message7_M2_M19_E15>(0);
constexpr Message7_M2_M19_E15 Message7_M2_M19_E15_E15_MAX = static_cast<Message7_M2_M19_E15>(105);
constexpr int Message7_M2_M19_E15_E15_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E15_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E15_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E15>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E15_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E15_descriptor(), value);
}
inline bool Message7_M2_M19_E15_Parse(absl::string_view name, Message7_M2_M19_E15* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E15>(
      Message7_M2_M19_E15_descriptor(), name, value);
}
enum Message7_M2_M19_E16 : int {
  Message7_M2_M19_E16_E16_UNSPECIFIED = 0,
  Message7_M2_M19_E16_E16_CONST_1 = 47,
  Message7_M2_M19_E16_E16_CONST_2 = 61,
  Message7_M2_M19_E16_E16_CONST_3 = 9,
  Message7_M2_M19_E16_E16_CONST_4 = 19,
  Message7_M2_M19_E16_E16_CONST_5 = 34,
};

bool Message7_M2_M19_E16_IsValid(int value);
extern const uint32_t Message7_M2_M19_E16_internal_data_[];
constexpr Message7_M2_M19_E16 Message7_M2_M19_E16_E16_MIN = static_cast<Message7_M2_M19_E16>(0);
constexpr Message7_M2_M19_E16 Message7_M2_M19_E16_E16_MAX = static_cast<Message7_M2_M19_E16>(61);
constexpr int Message7_M2_M19_E16_E16_ARRAYSIZE = 61 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E16_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E16_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E16>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E16_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E16_descriptor(), value);
}
inline bool Message7_M2_M19_E16_Parse(absl::string_view name, Message7_M2_M19_E16* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E16>(
      Message7_M2_M19_E16_descriptor(), name, value);
}
enum Message7_M2_M19_E17 : int {
  Message7_M2_M19_E17_E17_UNSPECIFIED = 0,
  Message7_M2_M19_E17_E17_CONST_1 = 122,
  Message7_M2_M19_E17_E17_CONST_2 = 20,
  Message7_M2_M19_E17_E17_CONST_3 = 102,
  Message7_M2_M19_E17_E17_CONST_4 = 33,
  Message7_M2_M19_E17_E17_CONST_5 = 35,
};

bool Message7_M2_M19_E17_IsValid(int value);
extern const uint32_t Message7_M2_M19_E17_internal_data_[];
constexpr Message7_M2_M19_E17 Message7_M2_M19_E17_E17_MIN = static_cast<Message7_M2_M19_E17>(0);
constexpr Message7_M2_M19_E17 Message7_M2_M19_E17_E17_MAX = static_cast<Message7_M2_M19_E17>(122);
constexpr int Message7_M2_M19_E17_E17_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E17_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E17_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E17>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E17_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E17_descriptor(), value);
}
inline bool Message7_M2_M19_E17_Parse(absl::string_view name, Message7_M2_M19_E17* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E17>(
      Message7_M2_M19_E17_descriptor(), name, value);
}
enum Message7_M2_M19_E18 : int {
  Message7_M2_M19_E18_E18_UNSPECIFIED = 0,
  Message7_M2_M19_E18_E18_CONST_1 = 124,
  Message7_M2_M19_E18_E18_CONST_2 = 67,
  Message7_M2_M19_E18_E18_CONST_3 = 11,
  Message7_M2_M19_E18_E18_CONST_4 = 93,
  Message7_M2_M19_E18_E18_CONST_5 = 26,
};

bool Message7_M2_M19_E18_IsValid(int value);
extern const uint32_t Message7_M2_M19_E18_internal_data_[];
constexpr Message7_M2_M19_E18 Message7_M2_M19_E18_E18_MIN = static_cast<Message7_M2_M19_E18>(0);
constexpr Message7_M2_M19_E18 Message7_M2_M19_E18_E18_MAX = static_cast<Message7_M2_M19_E18>(124);
constexpr int Message7_M2_M19_E18_E18_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E18_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E18_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E18>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E18_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E18_descriptor(), value);
}
inline bool Message7_M2_M19_E18_Parse(absl::string_view name, Message7_M2_M19_E18* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E18>(
      Message7_M2_M19_E18_descriptor(), name, value);
}
enum Message7_M2_M19_E19 : int {
  Message7_M2_M19_E19_E19_UNSPECIFIED = 0,
  Message7_M2_M19_E19_E19_CONST_1 = 5,
  Message7_M2_M19_E19_E19_CONST_2 = 23,
  Message7_M2_M19_E19_E19_CONST_3 = 116,
  Message7_M2_M19_E19_E19_CONST_4 = 112,
  Message7_M2_M19_E19_E19_CONST_5 = 85,
};

bool Message7_M2_M19_E19_IsValid(int value);
extern const uint32_t Message7_M2_M19_E19_internal_data_[];
constexpr Message7_M2_M19_E19 Message7_M2_M19_E19_E19_MIN = static_cast<Message7_M2_M19_E19>(0);
constexpr Message7_M2_M19_E19 Message7_M2_M19_E19_E19_MAX = static_cast<Message7_M2_M19_E19>(116);
constexpr int Message7_M2_M19_E19_E19_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E19_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E19_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E19>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E19_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E19_descriptor(), value);
}
inline bool Message7_M2_M19_E19_Parse(absl::string_view name, Message7_M2_M19_E19* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E19>(
      Message7_M2_M19_E19_descriptor(), name, value);
}
enum Message7_M2_M19_E20 : int {
  Message7_M2_M19_E20_E20_UNSPECIFIED = 0,
  Message7_M2_M19_E20_E20_CONST_1 = 70,
  Message7_M2_M19_E20_E20_CONST_2 = 78,
  Message7_M2_M19_E20_E20_CONST_3 = 30,
  Message7_M2_M19_E20_E20_CONST_4 = 81,
  Message7_M2_M19_E20_E20_CONST_5 = 28,
};

bool Message7_M2_M19_E20_IsValid(int value);
extern const uint32_t Message7_M2_M19_E20_internal_data_[];
constexpr Message7_M2_M19_E20 Message7_M2_M19_E20_E20_MIN = static_cast<Message7_M2_M19_E20>(0);
constexpr Message7_M2_M19_E20 Message7_M2_M19_E20_E20_MAX = static_cast<Message7_M2_M19_E20>(81);
constexpr int Message7_M2_M19_E20_E20_ARRAYSIZE = 81 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E20_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E20_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E20>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E20_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E20_descriptor(), value);
}
inline bool Message7_M2_M19_E20_Parse(absl::string_view name, Message7_M2_M19_E20* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E20>(
      Message7_M2_M19_E20_descriptor(), name, value);
}
enum Message7_M2_M19_E21 : int {
  Message7_M2_M19_E21_E21_UNSPECIFIED = 0,
  Message7_M2_M19_E21_E21_CONST_1 = 94,
  Message7_M2_M19_E21_E21_CONST_2 = 62,
  Message7_M2_M19_E21_E21_CONST_3 = 1,
  Message7_M2_M19_E21_E21_CONST_4 = 46,
  Message7_M2_M19_E21_E21_CONST_5 = 84,
};

bool Message7_M2_M19_E21_IsValid(int value);
extern const uint32_t Message7_M2_M19_E21_internal_data_[];
constexpr Message7_M2_M19_E21 Message7_M2_M19_E21_E21_MIN = static_cast<Message7_M2_M19_E21>(0);
constexpr Message7_M2_M19_E21 Message7_M2_M19_E21_E21_MAX = static_cast<Message7_M2_M19_E21>(94);
constexpr int Message7_M2_M19_E21_E21_ARRAYSIZE = 94 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E21_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E21_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E21>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E21_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E21_descriptor(), value);
}
inline bool Message7_M2_M19_E21_Parse(absl::string_view name, Message7_M2_M19_E21* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E21>(
      Message7_M2_M19_E21_descriptor(), name, value);
}
enum Message7_M2_M19_E22 : int {
  Message7_M2_M19_E22_E22_UNSPECIFIED = 0,
  Message7_M2_M19_E22_E22_CONST_1 = 25,
  Message7_M2_M19_E22_E22_CONST_2 = 35,
  Message7_M2_M19_E22_E22_CONST_3 = 44,
  Message7_M2_M19_E22_E22_CONST_4 = 8,
  Message7_M2_M19_E22_E22_CONST_5 = 42,
};

bool Message7_M2_M19_E22_IsValid(int value);
extern const uint32_t Message7_M2_M19_E22_internal_data_[];
constexpr Message7_M2_M19_E22 Message7_M2_M19_E22_E22_MIN = static_cast<Message7_M2_M19_E22>(0);
constexpr Message7_M2_M19_E22 Message7_M2_M19_E22_E22_MAX = static_cast<Message7_M2_M19_E22>(44);
constexpr int Message7_M2_M19_E22_E22_ARRAYSIZE = 44 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E22_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E22_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E22>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E22_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E22_descriptor(), value);
}
inline bool Message7_M2_M19_E22_Parse(absl::string_view name, Message7_M2_M19_E22* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E22>(
      Message7_M2_M19_E22_descriptor(), name, value);
}
enum Message7_M2_M19_E23 : int {
  Message7_M2_M19_E23_E23_UNSPECIFIED = 0,
  Message7_M2_M19_E23_E23_CONST_1 = 85,
  Message7_M2_M19_E23_E23_CONST_2 = 122,
  Message7_M2_M19_E23_E23_CONST_3 = 82,
  Message7_M2_M19_E23_E23_CONST_4 = 36,
  Message7_M2_M19_E23_E23_CONST_5 = 60,
};

bool Message7_M2_M19_E23_IsValid(int value);
extern const uint32_t Message7_M2_M19_E23_internal_data_[];
constexpr Message7_M2_M19_E23 Message7_M2_M19_E23_E23_MIN = static_cast<Message7_M2_M19_E23>(0);
constexpr Message7_M2_M19_E23 Message7_M2_M19_E23_E23_MAX = static_cast<Message7_M2_M19_E23>(122);
constexpr int Message7_M2_M19_E23_E23_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M2_M19_E23_descriptor();
template <typename T>
const std::string& Message7_M2_M19_E23_Name(T value) {
  static_assert(std::is_same<T, Message7_M2_M19_E23>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E23_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M2_M19_E23_descriptor(), value);
}
inline bool Message7_M2_M19_E23_Parse(absl::string_view name, Message7_M2_M19_E23* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M2_M19_E23>(
      Message7_M2_M19_E23_descriptor(), name, value);
}
enum Message7_M5_M13_M31_M39_E31 : int {
  Message7_M5_M13_M31_M39_E31_E31_UNSPECIFIED = 0,
  Message7_M5_M13_M31_M39_E31_E31_CONST_1 = 4,
  Message7_M5_M13_M31_M39_E31_E31_CONST_2 = 33,
  Message7_M5_M13_M31_M39_E31_E31_CONST_3 = 116,
  Message7_M5_M13_M31_M39_E31_E31_CONST_4 = 16,
  Message7_M5_M13_M31_M39_E31_E31_CONST_5 = 97,
};

bool Message7_M5_M13_M31_M39_E31_IsValid(int value);
extern const uint32_t Message7_M5_M13_M31_M39_E31_internal_data_[];
constexpr Message7_M5_M13_M31_M39_E31 Message7_M5_M13_M31_M39_E31_E31_MIN = static_cast<Message7_M5_M13_M31_M39_E31>(0);
constexpr Message7_M5_M13_M31_M39_E31 Message7_M5_M13_M31_M39_E31_E31_MAX = static_cast<Message7_M5_M13_M31_M39_E31>(116);
constexpr int Message7_M5_M13_M31_M39_E31_E31_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M5_M13_M31_M39_E31_descriptor();
template <typename T>
const std::string& Message7_M5_M13_M31_M39_E31_Name(T value) {
  static_assert(std::is_same<T, Message7_M5_M13_M31_M39_E31>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E31_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M5_M13_M31_M39_E31_descriptor(), value);
}
inline bool Message7_M5_M13_M31_M39_E31_Parse(absl::string_view name, Message7_M5_M13_M31_M39_E31* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M5_M13_M31_M39_E31>(
      Message7_M5_M13_M31_M39_E31_descriptor(), name, value);
}
enum Message7_M6_M10_M27_M50_E35 : int {
  Message7_M6_M10_M27_M50_E35_E35_UNSPECIFIED = 0,
  Message7_M6_M10_M27_M50_E35_E35_CONST_1 = 115,
  Message7_M6_M10_M27_M50_E35_E35_CONST_2 = 70,
  Message7_M6_M10_M27_M50_E35_E35_CONST_3 = 27,
  Message7_M6_M10_M27_M50_E35_E35_CONST_4 = 30,
  Message7_M6_M10_M27_M50_E35_E35_CONST_5 = 73,
};

bool Message7_M6_M10_M27_M50_E35_IsValid(int value);
extern const uint32_t Message7_M6_M10_M27_M50_E35_internal_data_[];
constexpr Message7_M6_M10_M27_M50_E35 Message7_M6_M10_M27_M50_E35_E35_MIN = static_cast<Message7_M6_M10_M27_M50_E35>(0);
constexpr Message7_M6_M10_M27_M50_E35 Message7_M6_M10_M27_M50_E35_E35_MAX = static_cast<Message7_M6_M10_M27_M50_E35>(115);
constexpr int Message7_M6_M10_M27_M50_E35_E35_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M10_M27_M50_E35_descriptor();
template <typename T>
const std::string& Message7_M6_M10_M27_M50_E35_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M10_M27_M50_E35>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E35_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M10_M27_M50_E35_descriptor(), value);
}
inline bool Message7_M6_M10_M27_M50_E35_Parse(absl::string_view name, Message7_M6_M10_M27_M50_E35* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M10_M27_M50_E35>(
      Message7_M6_M10_M27_M50_E35_descriptor(), name, value);
}
enum Message7_M6_M12_M24_M36_E29 : int {
  Message7_M6_M12_M24_M36_E29_E29_UNSPECIFIED = 0,
  Message7_M6_M12_M24_M36_E29_E29_CONST_1 = 125,
  Message7_M6_M12_M24_M36_E29_E29_CONST_2 = 79,
  Message7_M6_M12_M24_M36_E29_E29_CONST_3 = 105,
  Message7_M6_M12_M24_M36_E29_E29_CONST_4 = 17,
  Message7_M6_M12_M24_M36_E29_E29_CONST_5 = 109,
};

bool Message7_M6_M12_M24_M36_E29_IsValid(int value);
extern const uint32_t Message7_M6_M12_M24_M36_E29_internal_data_[];
constexpr Message7_M6_M12_M24_M36_E29 Message7_M6_M12_M24_M36_E29_E29_MIN = static_cast<Message7_M6_M12_M24_M36_E29>(0);
constexpr Message7_M6_M12_M24_M36_E29 Message7_M6_M12_M24_M36_E29_E29_MAX = static_cast<Message7_M6_M12_M24_M36_E29>(125);
constexpr int Message7_M6_M12_M24_M36_E29_E29_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M24_M36_E29_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M24_M36_E29_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M24_M36_E29>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E29_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M24_M36_E29_descriptor(), value);
}
inline bool Message7_M6_M12_M24_M36_E29_Parse(absl::string_view name, Message7_M6_M12_M24_M36_E29* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M24_M36_E29>(
      Message7_M6_M12_M24_M36_E29_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M35_M61_E37 : int {
  Message7_M6_M12_M30_M35_M61_E37_E37_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M35_M61_E37_E37_CONST_1 = 125,
  Message7_M6_M12_M30_M35_M61_E37_E37_CONST_2 = 74,
  Message7_M6_M12_M30_M35_M61_E37_E37_CONST_3 = 22,
  Message7_M6_M12_M30_M35_M61_E37_E37_CONST_4 = 94,
  Message7_M6_M12_M30_M35_M61_E37_E37_CONST_5 = 45,
};

bool Message7_M6_M12_M30_M35_M61_E37_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M35_M61_E37_internal_data_[];
constexpr Message7_M6_M12_M30_M35_M61_E37 Message7_M6_M12_M30_M35_M61_E37_E37_MIN = static_cast<Message7_M6_M12_M30_M35_M61_E37>(0);
constexpr Message7_M6_M12_M30_M35_M61_E37 Message7_M6_M12_M30_M35_M61_E37_E37_MAX = static_cast<Message7_M6_M12_M30_M35_M61_E37>(125);
constexpr int Message7_M6_M12_M30_M35_M61_E37_E37_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M35_M61_E37_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M35_M61_E37_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M35_M61_E37>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E37_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M35_M61_E37_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M35_M61_E37_Parse(absl::string_view name, Message7_M6_M12_M30_M35_M61_E37* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M35_M61_E37>(
      Message7_M6_M12_M30_M35_M61_E37_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M35_M61_E38 : int {
  Message7_M6_M12_M30_M35_M61_E38_E38_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M35_M61_E38_E38_CONST_1 = 115,
  Message7_M6_M12_M30_M35_M61_E38_E38_CONST_2 = 92,
  Message7_M6_M12_M30_M35_M61_E38_E38_CONST_3 = 49,
  Message7_M6_M12_M30_M35_M61_E38_E38_CONST_4 = 103,
  Message7_M6_M12_M30_M35_M61_E38_E38_CONST_5 = 101,
};

bool Message7_M6_M12_M30_M35_M61_E38_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M35_M61_E38_internal_data_[];
constexpr Message7_M6_M12_M30_M35_M61_E38 Message7_M6_M12_M30_M35_M61_E38_E38_MIN = static_cast<Message7_M6_M12_M30_M35_M61_E38>(0);
constexpr Message7_M6_M12_M30_M35_M61_E38 Message7_M6_M12_M30_M35_M61_E38_E38_MAX = static_cast<Message7_M6_M12_M30_M35_M61_E38>(115);
constexpr int Message7_M6_M12_M30_M35_M61_E38_E38_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M35_M61_E38_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M35_M61_E38_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M35_M61_E38>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E38_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M35_M61_E38_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M35_M61_E38_Parse(absl::string_view name, Message7_M6_M12_M30_M35_M61_E38* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M35_M61_E38>(
      Message7_M6_M12_M30_M35_M61_E38_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M35_E28 : int {
  Message7_M6_M12_M30_M35_E28_E28_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M35_E28_E28_CONST_1 = 39,
  Message7_M6_M12_M30_M35_E28_E28_CONST_2 = 94,
  Message7_M6_M12_M30_M35_E28_E28_CONST_3 = 108,
  Message7_M6_M12_M30_M35_E28_E28_CONST_4 = 56,
  Message7_M6_M12_M30_M35_E28_E28_CONST_5 = 66,
};

bool Message7_M6_M12_M30_M35_E28_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M35_E28_internal_data_[];
constexpr Message7_M6_M12_M30_M35_E28 Message7_M6_M12_M30_M35_E28_E28_MIN = static_cast<Message7_M6_M12_M30_M35_E28>(0);
constexpr Message7_M6_M12_M30_M35_E28 Message7_M6_M12_M30_M35_E28_E28_MAX = static_cast<Message7_M6_M12_M30_M35_E28>(108);
constexpr int Message7_M6_M12_M30_M35_E28_E28_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M35_E28_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M35_E28_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M35_E28>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E28_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M35_E28_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M35_E28_Parse(absl::string_view name, Message7_M6_M12_M30_M35_E28* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M35_E28>(
      Message7_M6_M12_M30_M35_E28_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M37_E30 : int {
  Message7_M6_M12_M30_M37_E30_E30_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M37_E30_E30_CONST_1 = 16,
  Message7_M6_M12_M30_M37_E30_E30_CONST_2 = 13,
  Message7_M6_M12_M30_M37_E30_E30_CONST_3 = 25,
  Message7_M6_M12_M30_M37_E30_E30_CONST_4 = 113,
  Message7_M6_M12_M30_M37_E30_E30_CONST_5 = 55,
};

bool Message7_M6_M12_M30_M37_E30_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M37_E30_internal_data_[];
constexpr Message7_M6_M12_M30_M37_E30 Message7_M6_M12_M30_M37_E30_E30_MIN = static_cast<Message7_M6_M12_M30_M37_E30>(0);
constexpr Message7_M6_M12_M30_M37_E30 Message7_M6_M12_M30_M37_E30_E30_MAX = static_cast<Message7_M6_M12_M30_M37_E30>(113);
constexpr int Message7_M6_M12_M30_M37_E30_E30_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M37_E30_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M37_E30_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M37_E30>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E30_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M37_E30_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M37_E30_Parse(absl::string_view name, Message7_M6_M12_M30_M37_E30* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M37_E30>(
      Message7_M6_M12_M30_M37_E30_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M49_M59_M63_E39 : int {
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_1 = 68,
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_2 = 44,
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_3 = 89,
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_4 = 95,
  Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_5 = 51,
};

bool Message7_M6_M12_M30_M49_M59_M63_E39_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M49_M59_M63_E39_internal_data_[];
constexpr Message7_M6_M12_M30_M49_M59_M63_E39 Message7_M6_M12_M30_M49_M59_M63_E39_E39_MIN = static_cast<Message7_M6_M12_M30_M49_M59_M63_E39>(0);
constexpr Message7_M6_M12_M30_M49_M59_M63_E39 Message7_M6_M12_M30_M49_M59_M63_E39_E39_MAX = static_cast<Message7_M6_M12_M30_M49_M59_M63_E39>(95);
constexpr int Message7_M6_M12_M30_M49_M59_M63_E39_E39_ARRAYSIZE = 95 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M49_M59_M63_E39_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M49_M59_M63_E39_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M49_M59_M63_E39>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E39_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M49_M59_M63_E39_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M49_M59_M63_E39_Parse(absl::string_view name, Message7_M6_M12_M30_M49_M59_M63_E39* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M49_M59_M63_E39>(
      Message7_M6_M12_M30_M49_M59_M63_E39_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M49_E33 : int {
  Message7_M6_M12_M30_M49_E33_E33_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M49_E33_E33_CONST_1 = 62,
  Message7_M6_M12_M30_M49_E33_E33_CONST_2 = 114,
  Message7_M6_M12_M30_M49_E33_E33_CONST_3 = 18,
  Message7_M6_M12_M30_M49_E33_E33_CONST_4 = 69,
  Message7_M6_M12_M30_M49_E33_E33_CONST_5 = 17,
};

bool Message7_M6_M12_M30_M49_E33_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M49_E33_internal_data_[];
constexpr Message7_M6_M12_M30_M49_E33 Message7_M6_M12_M30_M49_E33_E33_MIN = static_cast<Message7_M6_M12_M30_M49_E33>(0);
constexpr Message7_M6_M12_M30_M49_E33 Message7_M6_M12_M30_M49_E33_E33_MAX = static_cast<Message7_M6_M12_M30_M49_E33>(114);
constexpr int Message7_M6_M12_M30_M49_E33_E33_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M49_E33_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M49_E33_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M49_E33>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E33_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M49_E33_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M49_E33_Parse(absl::string_view name, Message7_M6_M12_M30_M49_E33* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M49_E33>(
      Message7_M6_M12_M30_M49_E33_descriptor(), name, value);
}
enum Message7_M6_M12_M30_M49_E34 : int {
  Message7_M6_M12_M30_M49_E34_E34_UNSPECIFIED = 0,
  Message7_M6_M12_M30_M49_E34_E34_CONST_1 = 107,
  Message7_M6_M12_M30_M49_E34_E34_CONST_2 = 59,
  Message7_M6_M12_M30_M49_E34_E34_CONST_3 = 10,
  Message7_M6_M12_M30_M49_E34_E34_CONST_4 = 117,
  Message7_M6_M12_M30_M49_E34_E34_CONST_5 = 48,
};

bool Message7_M6_M12_M30_M49_E34_IsValid(int value);
extern const uint32_t Message7_M6_M12_M30_M49_E34_internal_data_[];
constexpr Message7_M6_M12_M30_M49_E34 Message7_M6_M12_M30_M49_E34_E34_MIN = static_cast<Message7_M6_M12_M30_M49_E34>(0);
constexpr Message7_M6_M12_M30_M49_E34 Message7_M6_M12_M30_M49_E34_E34_MAX = static_cast<Message7_M6_M12_M30_M49_E34>(117);
constexpr int Message7_M6_M12_M30_M49_E34_E34_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M6_M12_M30_M49_E34_descriptor();
template <typename T>
const std::string& Message7_M6_M12_M30_M49_E34_Name(T value) {
  static_assert(std::is_same<T, Message7_M6_M12_M30_M49_E34>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E34_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M6_M12_M30_M49_E34_descriptor(), value);
}
inline bool Message7_M6_M12_M30_M49_E34_Parse(absl::string_view name, Message7_M6_M12_M30_M49_E34* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M6_M12_M30_M49_E34>(
      Message7_M6_M12_M30_M49_E34_descriptor(), name, value);
}
enum Message7_M7_E1 : int {
  Message7_M7_E1_E1_UNSPECIFIED = 0,
  Message7_M7_E1_E1_CONST_1 = 42,
  Message7_M7_E1_E1_CONST_2 = 63,
  Message7_M7_E1_E1_CONST_3 = 77,
  Message7_M7_E1_E1_CONST_4 = 41,
  Message7_M7_E1_E1_CONST_5 = 55,
};

bool Message7_M7_E1_IsValid(int value);
extern const uint32_t Message7_M7_E1_internal_data_[];
constexpr Message7_M7_E1 Message7_M7_E1_E1_MIN = static_cast<Message7_M7_E1>(0);
constexpr Message7_M7_E1 Message7_M7_E1_E1_MAX = static_cast<Message7_M7_E1>(77);
constexpr int Message7_M7_E1_E1_ARRAYSIZE = 77 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M7_E1_descriptor();
template <typename T>
const std::string& Message7_M7_E1_Name(T value) {
  static_assert(std::is_same<T, Message7_M7_E1>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E1_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M7_E1_descriptor(), value);
}
inline bool Message7_M7_E1_Parse(absl::string_view name, Message7_M7_E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M7_E1>(
      Message7_M7_E1_descriptor(), name, value);
}
enum Message7_M7_E2 : int {
  Message7_M7_E2_E2_UNSPECIFIED = 0,
  Message7_M7_E2_E2_CONST_1 = 78,
  Message7_M7_E2_E2_CONST_2 = 25,
  Message7_M7_E2_E2_CONST_3 = 10,
  Message7_M7_E2_E2_CONST_4 = 116,
  Message7_M7_E2_E2_CONST_5 = 80,
};

bool Message7_M7_E2_IsValid(int value);
extern const uint32_t Message7_M7_E2_internal_data_[];
constexpr Message7_M7_E2 Message7_M7_E2_E2_MIN = static_cast<Message7_M7_E2>(0);
constexpr Message7_M7_E2 Message7_M7_E2_E2_MAX = static_cast<Message7_M7_E2>(116);
constexpr int Message7_M7_E2_E2_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M7_E2_descriptor();
template <typename T>
const std::string& Message7_M7_E2_Name(T value) {
  static_assert(std::is_same<T, Message7_M7_E2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E2_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M7_E2_descriptor(), value);
}
inline bool Message7_M7_E2_Parse(absl::string_view name, Message7_M7_E2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M7_E2>(
      Message7_M7_E2_descriptor(), name, value);
}
enum Message7_M7_E3 : int {
  Message7_M7_E3_E3_UNSPECIFIED = 0,
  Message7_M7_E3_E3_CONST_1 = 81,
  Message7_M7_E3_E3_CONST_2 = 110,
  Message7_M7_E3_E3_CONST_3 = 21,
  Message7_M7_E3_E3_CONST_4 = 66,
  Message7_M7_E3_E3_CONST_5 = 2,
};

bool Message7_M7_E3_IsValid(int value);
extern const uint32_t Message7_M7_E3_internal_data_[];
constexpr Message7_M7_E3 Message7_M7_E3_E3_MIN = static_cast<Message7_M7_E3>(0);
constexpr Message7_M7_E3 Message7_M7_E3_E3_MAX = static_cast<Message7_M7_E3>(110);
constexpr int Message7_M7_E3_E3_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M7_E3_descriptor();
template <typename T>
const std::string& Message7_M7_E3_Name(T value) {
  static_assert(std::is_same<T, Message7_M7_E3>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E3_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M7_E3_descriptor(), value);
}
inline bool Message7_M7_E3_Parse(absl::string_view name, Message7_M7_E3* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M7_E3>(
      Message7_M7_E3_descriptor(), name, value);
}
enum Message7_M8_M16_M28_M40_M58_E36 : int {
  Message7_M8_M16_M28_M40_M58_E36_E36_UNSPECIFIED = 0,
  Message7_M8_M16_M28_M40_M58_E36_E36_CONST_1 = 33,
  Message7_M8_M16_M28_M40_M58_E36_E36_CONST_2 = 43,
  Message7_M8_M16_M28_M40_M58_E36_E36_CONST_3 = 20,
  Message7_M8_M16_M28_M40_M58_E36_E36_CONST_4 = 113,
  Message7_M8_M16_M28_M40_M58_E36_E36_CONST_5 = 84,
};

bool Message7_M8_M16_M28_M40_M58_E36_IsValid(int value);
extern const uint32_t Message7_M8_M16_M28_M40_M58_E36_internal_data_[];
constexpr Message7_M8_M16_M28_M40_M58_E36 Message7_M8_M16_M28_M40_M58_E36_E36_MIN = static_cast<Message7_M8_M16_M28_M40_M58_E36>(0);
constexpr Message7_M8_M16_M28_M40_M58_E36 Message7_M8_M16_M28_M40_M58_E36_E36_MAX = static_cast<Message7_M8_M16_M28_M40_M58_E36>(113);
constexpr int Message7_M8_M16_M28_M40_M58_E36_E36_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M8_M16_M28_M40_M58_E36_descriptor();
template <typename T>
const std::string& Message7_M8_M16_M28_M40_M58_E36_Name(T value) {
  static_assert(std::is_same<T, Message7_M8_M16_M28_M40_M58_E36>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E36_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M8_M16_M28_M40_M58_E36_descriptor(), value);
}
inline bool Message7_M8_M16_M28_M40_M58_E36_Parse(absl::string_view name, Message7_M8_M16_M28_M40_M58_E36* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M8_M16_M28_M40_M58_E36>(
      Message7_M8_M16_M28_M40_M58_E36_descriptor(), name, value);
}
enum Message7_M8_M16_M28_M40_E32 : int {
  Message7_M8_M16_M28_M40_E32_E32_UNSPECIFIED = 0,
  Message7_M8_M16_M28_M40_E32_E32_CONST_1 = 71,
  Message7_M8_M16_M28_M40_E32_E32_CONST_2 = 26,
  Message7_M8_M16_M28_M40_E32_E32_CONST_3 = 92,
  Message7_M8_M16_M28_M40_E32_E32_CONST_4 = 82,
  Message7_M8_M16_M28_M40_E32_E32_CONST_5 = 109,
};

bool Message7_M8_M16_M28_M40_E32_IsValid(int value);
extern const uint32_t Message7_M8_M16_M28_M40_E32_internal_data_[];
constexpr Message7_M8_M16_M28_M40_E32 Message7_M8_M16_M28_M40_E32_E32_MIN = static_cast<Message7_M8_M16_M28_M40_E32>(0);
constexpr Message7_M8_M16_M28_M40_E32 Message7_M8_M16_M28_M40_E32_E32_MAX = static_cast<Message7_M8_M16_M28_M40_E32>(109);
constexpr int Message7_M8_M16_M28_M40_E32_E32_ARRAYSIZE = 109 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M8_M16_M28_M40_E32_descriptor();
template <typename T>
const std::string& Message7_M8_M16_M28_M40_E32_Name(T value) {
  static_assert(std::is_same<T, Message7_M8_M16_M28_M40_E32>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E32_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M8_M16_M28_M40_E32_descriptor(), value);
}
inline bool Message7_M8_M16_M28_M40_E32_Parse(absl::string_view name, Message7_M8_M16_M28_M40_E32* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M8_M16_M28_M40_E32>(
      Message7_M8_M16_M28_M40_E32_descriptor(), name, value);
}
enum Message7_M8_M16_M28_E25 : int {
  Message7_M8_M16_M28_E25_E25_UNSPECIFIED = 0,
  Message7_M8_M16_M28_E25_E25_CONST_1 = 20,
  Message7_M8_M16_M28_E25_E25_CONST_2 = 75,
  Message7_M8_M16_M28_E25_E25_CONST_3 = 62,
  Message7_M8_M16_M28_E25_E25_CONST_4 = 22,
  Message7_M8_M16_M28_E25_E25_CONST_5 = 81,
};

bool Message7_M8_M16_M28_E25_IsValid(int value);
extern const uint32_t Message7_M8_M16_M28_E25_internal_data_[];
constexpr Message7_M8_M16_M28_E25 Message7_M8_M16_M28_E25_E25_MIN = static_cast<Message7_M8_M16_M28_E25>(0);
constexpr Message7_M8_M16_M28_E25 Message7_M8_M16_M28_E25_E25_MAX = static_cast<Message7_M8_M16_M28_E25>(81);
constexpr int Message7_M8_M16_M28_E25_E25_ARRAYSIZE = 81 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M8_M16_M28_E25_descriptor();
template <typename T>
const std::string& Message7_M8_M16_M28_E25_Name(T value) {
  static_assert(std::is_same<T, Message7_M8_M16_M28_E25>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E25_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M8_M16_M28_E25_descriptor(), value);
}
inline bool Message7_M8_M16_M28_E25_Parse(absl::string_view name, Message7_M8_M16_M28_E25* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M8_M16_M28_E25>(
      Message7_M8_M16_M28_E25_descriptor(), name, value);
}
enum Message7_M8_M18_M20_E24 : int {
  Message7_M8_M18_M20_E24_E24_UNSPECIFIED = 0,
  Message7_M8_M18_M20_E24_E24_CONST_1 = 28,
  Message7_M8_M18_M20_E24_E24_CONST_2 = 24,
  Message7_M8_M18_M20_E24_E24_CONST_3 = 9,
  Message7_M8_M18_M20_E24_E24_CONST_4 = 17,
  Message7_M8_M18_M20_E24_E24_CONST_5 = 49,
};

bool Message7_M8_M18_M20_E24_IsValid(int value);
extern const uint32_t Message7_M8_M18_M20_E24_internal_data_[];
constexpr Message7_M8_M18_M20_E24 Message7_M8_M18_M20_E24_E24_MIN = static_cast<Message7_M8_M18_M20_E24>(0);
constexpr Message7_M8_M18_M20_E24 Message7_M8_M18_M20_E24_E24_MAX = static_cast<Message7_M8_M18_M20_E24>(49);
constexpr int Message7_M8_M18_M20_E24_E24_ARRAYSIZE = 49 + 1;
const ::google::protobuf::EnumDescriptor*
Message7_M8_M18_M20_E24_descriptor();
template <typename T>
const std::string& Message7_M8_M18_M20_E24_Name(T value) {
  static_assert(std::is_same<T, Message7_M8_M18_M20_E24>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E24_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message7_M8_M18_M20_E24_descriptor(), value);
}
inline bool Message7_M8_M18_M20_E24_Parse(absl::string_view name, Message7_M8_M18_M20_E24* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message7_M8_M18_M20_E24>(
      Message7_M8_M18_M20_E24_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message7_M9_M15_M33 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9.M15.M33) */ {
 public:
  inline Message7_M9_M15_M33() : Message7_M9_M15_M33(nullptr) {}
  ~Message7_M9_M15_M33() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9_M15_M33(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9_M15_M33(const Message7_M9_M15_M33& from) : Message7_M9_M15_M33(nullptr, from) {}
  inline Message7_M9_M15_M33(Message7_M9_M15_M33&& from) noexcept
      : Message7_M9_M15_M33(nullptr, std::move(from)) {}
  inline Message7_M9_M15_M33& operator=(const Message7_M9_M15_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9_M15_M33& operator=(Message7_M9_M15_M33&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9_M15_M33& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9_M15_M33* internal_default_instance() {
    return reinterpret_cast<const Message7_M9_M15_M33*>(
        &_Message7_M9_M15_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 99;
  friend void swap(Message7_M9_M15_M33& a, Message7_M9_M15_M33& b) { a.Swap(&b); }
  inline void Swap(Message7_M9_M15_M33* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9_M15_M33* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9_M15_M33* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9_M15_M33>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9_M15_M33& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9_M15_M33& from) { Message7_M9_M15_M33::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9_M15_M33* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9.M15.M33"; }

 protected:
  explicit Message7_M9_M15_M33(::google::protobuf::Arena* arena);
  Message7_M9_M15_M33(::google::protobuf::Arena* arena, const Message7_M9_M15_M33& from);
  Message7_M9_M15_M33(::google::protobuf::Arena* arena, Message7_M9_M15_M33&& from) noexcept
      : Message7_M9_M15_M33(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9.M15.M33)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_M15_M33_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M9_M15_M23_M54 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9.M15.M23.M54) */ {
 public:
  inline Message7_M9_M15_M23_M54() : Message7_M9_M15_M23_M54(nullptr) {}
  ~Message7_M9_M15_M23_M54() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9_M15_M23_M54(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9_M15_M23_M54(const Message7_M9_M15_M23_M54& from) : Message7_M9_M15_M23_M54(nullptr, from) {}
  inline Message7_M9_M15_M23_M54(Message7_M9_M15_M23_M54&& from) noexcept
      : Message7_M9_M15_M23_M54(nullptr, std::move(from)) {}
  inline Message7_M9_M15_M23_M54& operator=(const Message7_M9_M15_M23_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9_M15_M23_M54& operator=(Message7_M9_M15_M23_M54&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9_M15_M23_M54& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9_M15_M23_M54* internal_default_instance() {
    return reinterpret_cast<const Message7_M9_M15_M23_M54*>(
        &_Message7_M9_M15_M23_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 97;
  friend void swap(Message7_M9_M15_M23_M54& a, Message7_M9_M15_M23_M54& b) { a.Swap(&b); }
  inline void Swap(Message7_M9_M15_M23_M54* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9_M15_M23_M54* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9_M15_M23_M54* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9_M15_M23_M54>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9_M15_M23_M54& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9_M15_M23_M54& from) { Message7_M9_M15_M23_M54::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9_M15_M23_M54* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9.M15.M23.M54"; }

 protected:
  explicit Message7_M9_M15_M23_M54(::google::protobuf::Arena* arena);
  Message7_M9_M15_M23_M54(::google::protobuf::Arena* arena, const Message7_M9_M15_M23_M54& from);
  Message7_M9_M15_M23_M54(::google::protobuf::Arena* arena, Message7_M9_M15_M23_M54&& from) noexcept
      : Message7_M9_M15_M23_M54(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9.M15.M23.M54)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_M15_M23_M54_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M9_M15_M23_M41 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9.M15.M23.M41) */ {
 public:
  inline Message7_M9_M15_M23_M41() : Message7_M9_M15_M23_M41(nullptr) {}
  ~Message7_M9_M15_M23_M41() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9_M15_M23_M41(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9_M15_M23_M41(const Message7_M9_M15_M23_M41& from) : Message7_M9_M15_M23_M41(nullptr, from) {}
  inline Message7_M9_M15_M23_M41(Message7_M9_M15_M23_M41&& from) noexcept
      : Message7_M9_M15_M23_M41(nullptr, std::move(from)) {}
  inline Message7_M9_M15_M23_M41& operator=(const Message7_M9_M15_M23_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9_M15_M23_M41& operator=(Message7_M9_M15_M23_M41&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9_M15_M23_M41& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9_M15_M23_M41* internal_default_instance() {
    return reinterpret_cast<const Message7_M9_M15_M23_M41*>(
        &_Message7_M9_M15_M23_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 96;
  friend void swap(Message7_M9_M15_M23_M41& a, Message7_M9_M15_M23_M41& b) { a.Swap(&b); }
  inline void Swap(Message7_M9_M15_M23_M41* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9_M15_M23_M41* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9_M15_M23_M41* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9_M15_M23_M41>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9_M15_M23_M41& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9_M15_M23_M41& from) { Message7_M9_M15_M23_M41::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9_M15_M23_M41* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9.M15.M23.M41"; }

 protected:
  explicit Message7_M9_M15_M23_M41(::google::protobuf::Arena* arena);
  Message7_M9_M15_M23_M41(::google::protobuf::Arena* arena, const Message7_M9_M15_M23_M41& from);
  Message7_M9_M15_M23_M41(::google::protobuf::Arena* arena, Message7_M9_M15_M23_M41&& from) noexcept
      : Message7_M9_M15_M23_M41(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9.M15.M23.M41)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_M15_M23_M41_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M26 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M26) */ {
 public:
  inline Message7_M8_M18_M26() : Message7_M8_M18_M26(nullptr) {}
  ~Message7_M8_M18_M26() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M26(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M26(const Message7_M8_M18_M26& from) : Message7_M8_M18_M26(nullptr, from) {}
  inline Message7_M8_M18_M26(Message7_M8_M18_M26&& from) noexcept
      : Message7_M8_M18_M26(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M26& operator=(const Message7_M8_M18_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M26& operator=(Message7_M8_M18_M26&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M26& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M26* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M26*>(
        &_Message7_M8_M18_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 93;
  friend void swap(Message7_M8_M18_M26& a, Message7_M8_M18_M26& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M26* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M26* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M26* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M26>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M26& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M26& from) { Message7_M8_M18_M26::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M26* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M26"; }

 protected:
  explicit Message7_M8_M18_M26(::google::protobuf::Arena* arena);
  Message7_M8_M18_M26(::google::protobuf::Arena* arena, const Message7_M8_M18_M26& from);
  Message7_M8_M18_M26(::google::protobuf::Arena* arena, Message7_M8_M18_M26&& from) noexcept
      : Message7_M8_M18_M26(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_0_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).data())), f_0(i).size()));
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
        sizes_list.push_back(f_0(i).size());
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        sizes.push_back(f_0(i).size());
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_0_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_0_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // repeated bytes f_0 = 3;
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  const std::string& f_0(int index) const;
  std::string* mutable_f_0(int index);
  void set_f_0(int index, const std::string& value);
  void set_f_0(int index, std::string&& value);
  void set_f_0(int index, const char* value);
  void set_f_0(int index, const void* value, std::size_t size);
  void set_f_0(int index, absl::string_view value);
  std::string* add_f_0();
  void add_f_0(const std::string& value);
  void add_f_0(std::string&& value);
  void add_f_0(const char* value);
  void add_f_0(const void* value, std::size_t size);
  void add_f_0(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M26)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M26_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> f_0_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M25_M42 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M25.M42) */ {
 public:
  inline Message7_M8_M18_M25_M42() : Message7_M8_M18_M25_M42(nullptr) {}
  ~Message7_M8_M18_M25_M42() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M25_M42(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M25_M42(const Message7_M8_M18_M25_M42& from) : Message7_M8_M18_M25_M42(nullptr, from) {}
  inline Message7_M8_M18_M25_M42(Message7_M8_M18_M25_M42&& from) noexcept
      : Message7_M8_M18_M25_M42(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M25_M42& operator=(const Message7_M8_M18_M25_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M25_M42& operator=(Message7_M8_M18_M25_M42&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M25_M42& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M25_M42* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M25_M42*>(
        &_Message7_M8_M18_M25_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 91;
  friend void swap(Message7_M8_M18_M25_M42& a, Message7_M8_M18_M25_M42& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M25_M42* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M25_M42* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M25_M42* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M25_M42>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M25_M42& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M25_M42& from) { Message7_M8_M18_M25_M42::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M25_M42* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M25.M42"; }

 protected:
  explicit Message7_M8_M18_M25_M42(::google::protobuf::Arena* arena);
  Message7_M8_M18_M25_M42(::google::protobuf::Arena* arena, const Message7_M8_M18_M25_M42& from);
  Message7_M8_M18_M25_M42(::google::protobuf::Arena* arena, Message7_M8_M18_M25_M42&& from) noexcept
      : Message7_M8_M18_M25_M42(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M25.M42)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M25_M42_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M55_M57 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M55.M57) */ {
 public:
  inline Message7_M8_M18_M22_M55_M57() : Message7_M8_M18_M22_M55_M57(nullptr) {}
  ~Message7_M8_M18_M22_M55_M57() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M55_M57(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M55_M57(const Message7_M8_M18_M22_M55_M57& from) : Message7_M8_M18_M22_M55_M57(nullptr, from) {}
  inline Message7_M8_M18_M22_M55_M57(Message7_M8_M18_M22_M55_M57&& from) noexcept
      : Message7_M8_M18_M22_M55_M57(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M55_M57& operator=(const Message7_M8_M18_M22_M55_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M55_M57& operator=(Message7_M8_M18_M22_M55_M57&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M55_M57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M55_M57* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M55_M57*>(
        &_Message7_M8_M18_M22_M55_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 88;
  friend void swap(Message7_M8_M18_M22_M55_M57& a, Message7_M8_M18_M22_M55_M57& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M55_M57* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M55_M57* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M55_M57* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M55_M57>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M55_M57& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M55_M57& from) { Message7_M8_M18_M22_M55_M57::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M55_M57* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M55.M57"; }

 protected:
  explicit Message7_M8_M18_M22_M55_M57(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M55_M57(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M55_M57& from);
  Message7_M8_M18_M22_M55_M57(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M55_M57&& from) noexcept
      : Message7_M8_M18_M22_M55_M57(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M55.M57)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M55_M57_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M52 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M52) */ {
 public:
  inline Message7_M8_M18_M22_M52() : Message7_M8_M18_M22_M52(nullptr) {}
  ~Message7_M8_M18_M22_M52() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M52(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M52(const Message7_M8_M18_M22_M52& from) : Message7_M8_M18_M22_M52(nullptr, from) {}
  inline Message7_M8_M18_M22_M52(Message7_M8_M18_M22_M52&& from) noexcept
      : Message7_M8_M18_M22_M52(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M52& operator=(const Message7_M8_M18_M22_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M52& operator=(Message7_M8_M18_M22_M52&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M52* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M52*>(
        &_Message7_M8_M18_M22_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 87;
  friend void swap(Message7_M8_M18_M22_M52& a, Message7_M8_M18_M22_M52& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M52* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M52* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M52* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M52>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M52& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M52& from) { Message7_M8_M18_M22_M52::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M52* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M52"; }

 protected:
  explicit Message7_M8_M18_M22_M52(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M52(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M52& from);
  Message7_M8_M18_M22_M52(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M52&& from) noexcept
      : Message7_M8_M18_M22_M52(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M52)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M52_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M47 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M47) */ {
 public:
  inline Message7_M8_M18_M22_M47() : Message7_M8_M18_M22_M47(nullptr) {}
  ~Message7_M8_M18_M22_M47() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M47(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M47(const Message7_M8_M18_M22_M47& from) : Message7_M8_M18_M22_M47(nullptr, from) {}
  inline Message7_M8_M18_M22_M47(Message7_M8_M18_M22_M47&& from) noexcept
      : Message7_M8_M18_M22_M47(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M47& operator=(const Message7_M8_M18_M22_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M47& operator=(Message7_M8_M18_M22_M47&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M47* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M47*>(
        &_Message7_M8_M18_M22_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 86;
  friend void swap(Message7_M8_M18_M22_M47& a, Message7_M8_M18_M22_M47& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M47* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M47* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M47* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M47>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M47& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M47& from) { Message7_M8_M18_M22_M47::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M47* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M47"; }

 protected:
  explicit Message7_M8_M18_M22_M47(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M47(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M47& from);
  Message7_M8_M18_M22_M47(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M47&& from) noexcept
      : Message7_M8_M18_M22_M47(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M47)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M47_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M46 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M46) */ {
 public:
  inline Message7_M8_M18_M22_M46() : Message7_M8_M18_M22_M46(nullptr) {}
  ~Message7_M8_M18_M22_M46() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M46(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M46(const Message7_M8_M18_M22_M46& from) : Message7_M8_M18_M22_M46(nullptr, from) {}
  inline Message7_M8_M18_M22_M46(Message7_M8_M18_M22_M46&& from) noexcept
      : Message7_M8_M18_M22_M46(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M46& operator=(const Message7_M8_M18_M22_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M46& operator=(Message7_M8_M18_M22_M46&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M46* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M46*>(
        &_Message7_M8_M18_M22_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 85;
  friend void swap(Message7_M8_M18_M22_M46& a, Message7_M8_M18_M22_M46& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M46* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M46* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M46* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M46>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M46& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M46& from) { Message7_M8_M18_M22_M46::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M46* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M46"; }

 protected:
  explicit Message7_M8_M18_M22_M46(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M46(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M46& from);
  Message7_M8_M18_M22_M46(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M46&& from) noexcept
      : Message7_M8_M18_M22_M46(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_0_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).data())), f_0(i).size()));
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
        sizes_list.push_back(f_0(i).size());
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        sizes.push_back(f_0(i).size());
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_0_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_0_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // repeated string f_0 = 2;
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  const std::string& f_0(int index) const;
  std::string* mutable_f_0(int index);
  void set_f_0(int index, const std::string& value);
  void set_f_0(int index, std::string&& value);
  void set_f_0(int index, const char* value);
  void set_f_0(int index, const char* value, std::size_t size);
  void set_f_0(int index, absl::string_view value);
  std::string* add_f_0();
  void add_f_0(const std::string& value);
  void add_f_0(std::string&& value);
  void add_f_0(const char* value);
  void add_f_0(const char* value, std::size_t size);
  void add_f_0(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M46)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M46_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> f_0_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M45 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M45) */ {
 public:
  inline Message7_M8_M18_M22_M45() : Message7_M8_M18_M22_M45(nullptr) {}
  ~Message7_M8_M18_M22_M45() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M45(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M45(const Message7_M8_M18_M22_M45& from) : Message7_M8_M18_M22_M45(nullptr, from) {}
  inline Message7_M8_M18_M22_M45(Message7_M8_M18_M22_M45&& from) noexcept
      : Message7_M8_M18_M22_M45(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M45& operator=(const Message7_M8_M18_M22_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M45& operator=(Message7_M8_M18_M22_M45&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M45& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M45* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M45*>(
        &_Message7_M8_M18_M22_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 84;
  friend void swap(Message7_M8_M18_M22_M45& a, Message7_M8_M18_M22_M45& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M45* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M45* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M45* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M45>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M45& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M45& from) { Message7_M8_M18_M22_M45::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M45* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M45"; }

 protected:
  explicit Message7_M8_M18_M22_M45(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M45(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M45& from);
  Message7_M8_M18_M22_M45(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M45&& from) noexcept
      : Message7_M8_M18_M22_M45(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M45)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M45_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M20 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M20) */ {
 public:
  inline Message7_M8_M18_M20() : Message7_M8_M18_M20(nullptr) {}
  ~Message7_M8_M18_M20() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M20(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M20(const Message7_M8_M18_M20& from) : Message7_M8_M18_M20(nullptr, from) {}
  inline Message7_M8_M18_M20(Message7_M8_M18_M20&& from) noexcept
      : Message7_M8_M18_M20(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M20& operator=(const Message7_M8_M18_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M20& operator=(Message7_M8_M18_M20&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M20& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M20* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M20*>(
        &_Message7_M8_M18_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 83;
  friend void swap(Message7_M8_M18_M20& a, Message7_M8_M18_M20& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M20* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M20* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M20* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M20>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M20& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M20& from) { Message7_M8_M18_M20::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M20* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M20"; }

 protected:
  explicit Message7_M8_M18_M20(::google::protobuf::Arena* arena);
  Message7_M8_M18_M20(::google::protobuf::Arena* arena, const Message7_M8_M18_M20& from);
  Message7_M8_M18_M20(::google::protobuf::Arena* arena, Message7_M8_M18_M20&& from) noexcept
      : Message7_M8_M18_M20(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E24 = Message7_M8_M18_M20_E24;
  static constexpr E24 E24_UNSPECIFIED = Message7_M8_M18_M20_E24_E24_UNSPECIFIED;
  static constexpr E24 E24_CONST_1 = Message7_M8_M18_M20_E24_E24_CONST_1;
  static constexpr E24 E24_CONST_2 = Message7_M8_M18_M20_E24_E24_CONST_2;
  static constexpr E24 E24_CONST_3 = Message7_M8_M18_M20_E24_E24_CONST_3;
  static constexpr E24 E24_CONST_4 = Message7_M8_M18_M20_E24_E24_CONST_4;
  static constexpr E24 E24_CONST_5 = Message7_M8_M18_M20_E24_E24_CONST_5;
  static inline bool E24_IsValid(int value) {
    return Message7_M8_M18_M20_E24_IsValid(value);
  }
  static constexpr E24 E24_MIN = Message7_M8_M18_M20_E24_E24_MIN;
  static constexpr E24 E24_MAX = Message7_M8_M18_M20_E24_E24_MAX;
  static constexpr int E24_ARRAYSIZE = Message7_M8_M18_M20_E24_E24_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E24_descriptor() {
    return Message7_M8_M18_M20_E24_descriptor();
  }
  template <typename T>
  static inline const std::string& E24_Name(T value) {
    return Message7_M8_M18_M20_E24_Name(value);
  }
  static inline bool E24_Parse(absl::string_view name, E24* value) {
    return Message7_M8_M18_M20_E24_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 6,
    kF3FieldNumber = 7,
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
    kF4FieldNumber = 9,
    kF5FieldNumber = 10,
  };
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M20.E24 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M8_M18_M20_E24 f_1() const;
  void set_f_1(::fleetbench::proto::Message7_M8_M18_M20_E24 value);

  private:
  ::fleetbench::proto::Message7_M8_M18_M20_E24 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message7_M8_M18_M20_E24 value);

  public:
  // optional float f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  float f_4() const;
  void set_f_4(float value);

  private:
  float _internal_f_4() const;
  void _internal_set_f_4(float value);

  public:
  // optional int32 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M20)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M20_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::int32_t f_0_;
    int f_1_;
    float f_4_;
    ::int32_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M16_M28_M40_M58 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M16.M28.M40.M58) */ {
 public:
  inline Message7_M8_M16_M28_M40_M58() : Message7_M8_M16_M28_M40_M58(nullptr) {}
  ~Message7_M8_M16_M28_M40_M58() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M16_M28_M40_M58(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M16_M28_M40_M58(const Message7_M8_M16_M28_M40_M58& from) : Message7_M8_M16_M28_M40_M58(nullptr, from) {}
  inline Message7_M8_M16_M28_M40_M58(Message7_M8_M16_M28_M40_M58&& from) noexcept
      : Message7_M8_M16_M28_M40_M58(nullptr, std::move(from)) {}
  inline Message7_M8_M16_M28_M40_M58& operator=(const Message7_M8_M16_M28_M40_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M16_M28_M40_M58& operator=(Message7_M8_M16_M28_M40_M58&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M16_M28_M40_M58& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M16_M28_M40_M58* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M16_M28_M40_M58*>(
        &_Message7_M8_M16_M28_M40_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 79;
  friend void swap(Message7_M8_M16_M28_M40_M58& a, Message7_M8_M16_M28_M40_M58& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M16_M28_M40_M58* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M16_M28_M40_M58* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M16_M28_M40_M58* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M16_M28_M40_M58>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M16_M28_M40_M58& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M16_M28_M40_M58& from) { Message7_M8_M16_M28_M40_M58::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M16_M28_M40_M58* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M16.M28.M40.M58"; }

 protected:
  explicit Message7_M8_M16_M28_M40_M58(::google::protobuf::Arena* arena);
  Message7_M8_M16_M28_M40_M58(::google::protobuf::Arena* arena, const Message7_M8_M16_M28_M40_M58& from);
  Message7_M8_M16_M28_M40_M58(::google::protobuf::Arena* arena, Message7_M8_M16_M28_M40_M58&& from) noexcept
      : Message7_M8_M16_M28_M40_M58(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E36 = Message7_M8_M16_M28_M40_M58_E36;
  static constexpr E36 E36_UNSPECIFIED = Message7_M8_M16_M28_M40_M58_E36_E36_UNSPECIFIED;
  static constexpr E36 E36_CONST_1 = Message7_M8_M16_M28_M40_M58_E36_E36_CONST_1;
  static constexpr E36 E36_CONST_2 = Message7_M8_M16_M28_M40_M58_E36_E36_CONST_2;
  static constexpr E36 E36_CONST_3 = Message7_M8_M16_M28_M40_M58_E36_E36_CONST_3;
  static constexpr E36 E36_CONST_4 = Message7_M8_M16_M28_M40_M58_E36_E36_CONST_4;
  static constexpr E36 E36_CONST_5 = Message7_M8_M16_M28_M40_M58_E36_E36_CONST_5;
  static inline bool E36_IsValid(int value) {
    return Message7_M8_M16_M28_M40_M58_E36_IsValid(value);
  }
  static constexpr E36 E36_MIN = Message7_M8_M16_M28_M40_M58_E36_E36_MIN;
  static constexpr E36 E36_MAX = Message7_M8_M16_M28_M40_M58_E36_E36_MAX;
  static constexpr int E36_ARRAYSIZE = Message7_M8_M16_M28_M40_M58_E36_E36_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E36_descriptor() {
    return Message7_M8_M16_M28_M40_M58_E36_descriptor();
  }
  template <typename T>
  static inline const std::string& E36_Name(T value) {
    return Message7_M8_M16_M28_M40_M58_E36_Name(value);
  }
  static inline bool E36_Parse(absl::string_view name, E36* value) {
    return Message7_M8_M16_M28_M40_M58_E36_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(int));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M8.M16.M28.M40.M58.E36 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 value);
  void add_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M16.M28.M40.M58)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M16_M28_M40_M58_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M7) */ {
 public:
  inline Message7_M7() : Message7_M7(nullptr) {}
  ~Message7_M7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M7(const Message7_M7& from) : Message7_M7(nullptr, from) {}
  inline Message7_M7(Message7_M7&& from) noexcept
      : Message7_M7(nullptr, std::move(from)) {}
  inline Message7_M7& operator=(const Message7_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M7& operator=(Message7_M7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M7* internal_default_instance() {
    return reinterpret_cast<const Message7_M7*>(
        &_Message7_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 78;
  friend void swap(Message7_M7& a, Message7_M7& b) { a.Swap(&b); }
  inline void Swap(Message7_M7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M7& from) { Message7_M7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M7"; }

 protected:
  explicit Message7_M7(::google::protobuf::Arena* arena);
  Message7_M7(::google::protobuf::Arena* arena, const Message7_M7& from);
  Message7_M7(::google::protobuf::Arena* arena, Message7_M7&& from) noexcept
      : Message7_M7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E1 = Message7_M7_E1;
  static constexpr E1 E1_UNSPECIFIED = Message7_M7_E1_E1_UNSPECIFIED;
  static constexpr E1 E1_CONST_1 = Message7_M7_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 = Message7_M7_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 = Message7_M7_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 = Message7_M7_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 = Message7_M7_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return Message7_M7_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN = Message7_M7_E1_E1_MIN;
  static constexpr E1 E1_MAX = Message7_M7_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE = Message7_M7_E1_E1_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E1_descriptor() {
    return Message7_M7_E1_descriptor();
  }
  template <typename T>
  static inline const std::string& E1_Name(T value) {
    return Message7_M7_E1_Name(value);
  }
  static inline bool E1_Parse(absl::string_view name, E1* value) {
    return Message7_M7_E1_Parse(name, value);
  }
  using E2 = Message7_M7_E2;
  static constexpr E2 E2_UNSPECIFIED = Message7_M7_E2_E2_UNSPECIFIED;
  static constexpr E2 E2_CONST_1 = Message7_M7_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 = Message7_M7_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 = Message7_M7_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 = Message7_M7_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 = Message7_M7_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return Message7_M7_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN = Message7_M7_E2_E2_MIN;
  static constexpr E2 E2_MAX = Message7_M7_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE = Message7_M7_E2_E2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E2_descriptor() {
    return Message7_M7_E2_descriptor();
  }
  template <typename T>
  static inline const std::string& E2_Name(T value) {
    return Message7_M7_E2_Name(value);
  }
  static inline bool E2_Parse(absl::string_view name, E2* value) {
    return Message7_M7_E2_Parse(name, value);
  }
  using E3 = Message7_M7_E3;
  static constexpr E3 E3_UNSPECIFIED = Message7_M7_E3_E3_UNSPECIFIED;
  static constexpr E3 E3_CONST_1 = Message7_M7_E3_E3_CONST_1;
  static constexpr E3 E3_CONST_2 = Message7_M7_E3_E3_CONST_2;
  static constexpr E3 E3_CONST_3 = Message7_M7_E3_E3_CONST_3;
  static constexpr E3 E3_CONST_4 = Message7_M7_E3_E3_CONST_4;
  static constexpr E3 E3_CONST_5 = Message7_M7_E3_E3_CONST_5;
  static inline bool E3_IsValid(int value) {
    return Message7_M7_E3_IsValid(value);
  }
  static constexpr E3 E3_MIN = Message7_M7_E3_E3_MIN;
  static constexpr E3 E3_MAX = Message7_M7_E3_E3_MAX;
  static constexpr int E3_ARRAYSIZE = Message7_M7_E3_E3_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E3_descriptor() {
    return Message7_M7_E3_descriptor();
  }
  template <typename T>
  static inline const std::string& E3_Name(T value) {
    return Message7_M7_E3_Name(value);
  }
  static inline bool E3_Parse(absl::string_view name, E3* value) {
    return Message7_M7_E3_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF5FieldNumber = 7,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M7.E1 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M7_E1 f_1() const;
  void set_f_1(::fleetbench::proto::Message7_M7_E1 value);

  private:
  ::fleetbench::proto::Message7_M7_E1 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message7_M7_E1 value);

  public:
  // optional .fleetbench.proto.Message7.M7.E2 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M7_E2 f_2() const;
  void set_f_2(::fleetbench::proto::Message7_M7_E2 value);

  private:
  ::fleetbench::proto::Message7_M7_E2 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message7_M7_E2 value);

  public:
  // optional int32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M7.E3 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M7_E3 f_4() const;
  void set_f_4(::fleetbench::proto::Message7_M7_E3 value);

  private:
  ::fleetbench::proto::Message7_M7_E3 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message7_M7_E3 value);

  public:
  // optional float f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  float f_5() const;
  void set_f_5(float value);

  private:
  float _internal_f_5() const;
  void _internal_set_f_5(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    int f_1_;
    int f_2_;
    ::int32_t f_3_;
    int f_4_;
    float f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M56 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M56) */ {
 public:
  inline Message7_M6_M12_M30_M56() : Message7_M6_M12_M30_M56(nullptr) {}
  ~Message7_M6_M12_M30_M56() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M56(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M56(const Message7_M6_M12_M30_M56& from) : Message7_M6_M12_M30_M56(nullptr, from) {}
  inline Message7_M6_M12_M30_M56(Message7_M6_M12_M30_M56&& from) noexcept
      : Message7_M6_M12_M30_M56(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M56& operator=(const Message7_M6_M12_M30_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M56& operator=(Message7_M6_M12_M30_M56&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M56* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M56*>(
        &_Message7_M6_M12_M30_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 74;
  friend void swap(Message7_M6_M12_M30_M56& a, Message7_M6_M12_M30_M56& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M56* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M56* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M56* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M56>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M56& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M56& from) { Message7_M6_M12_M30_M56::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M56* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M56"; }

 protected:
  explicit Message7_M6_M12_M30_M56(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M56(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M56& from);
  Message7_M6_M12_M30_M56(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M56&& from) noexcept
      : Message7_M6_M12_M30_M56(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M56)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M56_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63_M71 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63_M71() : Message7_M6_M12_M30_M49_M59_M63_M71(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63_M71() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63_M71(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63_M71(const Message7_M6_M12_M30_M49_M59_M63_M71& from) : Message7_M6_M12_M30_M49_M59_M63_M71(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M71(Message7_M6_M12_M30_M49_M59_M63_M71&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M71(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M71& operator=(const Message7_M6_M12_M30_M49_M59_M63_M71& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63_M71& operator=(Message7_M6_M12_M30_M49_M59_M63_M71&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63_M71& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63_M71* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63_M71*>(
        &_Message7_M6_M12_M30_M49_M59_M63_M71_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 70;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63_M71& a, Message7_M6_M12_M30_M49_M59_M63_M71& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63_M71* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63_M71* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63_M71* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63_M71>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63_M71& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63_M71& from) { Message7_M6_M12_M30_M49_M59_M63_M71::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63_M71* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63_M71(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63_M71(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63_M71& from);
  Message7_M6_M12_M30_M49_M59_M63_M71(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63_M71&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M71(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_M71_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63_M68_M81 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M81() : Message7_M6_M12_M30_M49_M59_M63_M68_M81(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63_M68_M81() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63_M68_M81(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63_M68_M81(const Message7_M6_M12_M30_M49_M59_M63_M68_M81& from) : Message7_M6_M12_M30_M49_M59_M63_M68_M81(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M81(Message7_M6_M12_M30_M49_M59_M63_M68_M81&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M81(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M81& operator=(const Message7_M6_M12_M30_M49_M59_M63_M68_M81& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M81& operator=(Message7_M6_M12_M30_M49_M59_M63_M68_M81&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63_M68_M81& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63_M68_M81* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63_M68_M81*>(
        &_Message7_M6_M12_M30_M49_M59_M63_M68_M81_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 68;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63_M68_M81& a, Message7_M6_M12_M30_M49_M59_M63_M68_M81& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63_M68_M81* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M81* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63_M68_M81* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63_M68_M81>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M81& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M81& from) { Message7_M6_M12_M30_M49_M59_M63_M68_M81::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M81* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63_M68_M81(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63_M68_M81(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63_M68_M81& from);
  Message7_M6_M12_M30_M49_M59_M63_M68_M81(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63_M68_M81&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M81(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_M68_M81_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86() : Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& from) : Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& operator=(const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& operator=(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86*>(
        &_Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 66;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& a, Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& from) { Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& from);
  Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M37 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M37) */ {
 public:
  inline Message7_M6_M12_M30_M37() : Message7_M6_M12_M30_M37(nullptr) {}
  ~Message7_M6_M12_M30_M37() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M37(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M37(const Message7_M6_M12_M30_M37& from) : Message7_M6_M12_M30_M37(nullptr, from) {}
  inline Message7_M6_M12_M30_M37(Message7_M6_M12_M30_M37&& from) noexcept
      : Message7_M6_M12_M30_M37(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M37& operator=(const Message7_M6_M12_M30_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M37& operator=(Message7_M6_M12_M30_M37&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M37& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M37* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M37*>(
        &_Message7_M6_M12_M30_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 65;
  friend void swap(Message7_M6_M12_M30_M37& a, Message7_M6_M12_M30_M37& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M37* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M37* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M37* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M37>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M37& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M37& from) { Message7_M6_M12_M30_M37::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M37* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M37"; }

 protected:
  explicit Message7_M6_M12_M30_M37(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M37(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M37& from);
  Message7_M6_M12_M30_M37(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M37&& from) noexcept
      : Message7_M6_M12_M30_M37(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E30 = Message7_M6_M12_M30_M37_E30;
  static constexpr E30 E30_UNSPECIFIED = Message7_M6_M12_M30_M37_E30_E30_UNSPECIFIED;
  static constexpr E30 E30_CONST_1 = Message7_M6_M12_M30_M37_E30_E30_CONST_1;
  static constexpr E30 E30_CONST_2 = Message7_M6_M12_M30_M37_E30_E30_CONST_2;
  static constexpr E30 E30_CONST_3 = Message7_M6_M12_M30_M37_E30_E30_CONST_3;
  static constexpr E30 E30_CONST_4 = Message7_M6_M12_M30_M37_E30_E30_CONST_4;
  static constexpr E30 E30_CONST_5 = Message7_M6_M12_M30_M37_E30_E30_CONST_5;
  static inline bool E30_IsValid(int value) {
    return Message7_M6_M12_M30_M37_E30_IsValid(value);
  }
  static constexpr E30 E30_MIN = Message7_M6_M12_M30_M37_E30_E30_MIN;
  static constexpr E30 E30_MAX = Message7_M6_M12_M30_M37_E30_E30_MAX;
  static constexpr int E30_ARRAYSIZE = Message7_M6_M12_M30_M37_E30_E30_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E30_descriptor() {
    return Message7_M6_M12_M30_M37_E30_descriptor();
  }
  template <typename T>
  static inline const std::string& E30_Name(T value) {
    return Message7_M6_M12_M30_M37_E30_Name(value);
  }
  static inline bool E30_Parse(absl::string_view name, E30* value) {
    return Message7_M6_M12_M30_M37_E30_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M12.M30.M37.E30 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M37_E30 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M37_E30 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M37_E30 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M37_E30 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M37)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M37_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M35_M61 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M35.M61) */ {
 public:
  inline Message7_M6_M12_M30_M35_M61() : Message7_M6_M12_M30_M35_M61(nullptr) {}
  ~Message7_M6_M12_M30_M35_M61() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M35_M61(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M35_M61(const Message7_M6_M12_M30_M35_M61& from) : Message7_M6_M12_M30_M35_M61(nullptr, from) {}
  inline Message7_M6_M12_M30_M35_M61(Message7_M6_M12_M30_M35_M61&& from) noexcept
      : Message7_M6_M12_M30_M35_M61(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M35_M61& operator=(const Message7_M6_M12_M30_M35_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M35_M61& operator=(Message7_M6_M12_M30_M35_M61&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M35_M61& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M35_M61* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M35_M61*>(
        &_Message7_M6_M12_M30_M35_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Message7_M6_M12_M30_M35_M61& a, Message7_M6_M12_M30_M35_M61& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M35_M61* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M35_M61* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M35_M61* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M35_M61>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M35_M61& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M35_M61& from) { Message7_M6_M12_M30_M35_M61::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M35_M61* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M35.M61"; }

 protected:
  explicit Message7_M6_M12_M30_M35_M61(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M35_M61(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M35_M61& from);
  Message7_M6_M12_M30_M35_M61(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M35_M61&& from) noexcept
      : Message7_M6_M12_M30_M35_M61(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E37 = Message7_M6_M12_M30_M35_M61_E37;
  static constexpr E37 E37_UNSPECIFIED = Message7_M6_M12_M30_M35_M61_E37_E37_UNSPECIFIED;
  static constexpr E37 E37_CONST_1 = Message7_M6_M12_M30_M35_M61_E37_E37_CONST_1;
  static constexpr E37 E37_CONST_2 = Message7_M6_M12_M30_M35_M61_E37_E37_CONST_2;
  static constexpr E37 E37_CONST_3 = Message7_M6_M12_M30_M35_M61_E37_E37_CONST_3;
  static constexpr E37 E37_CONST_4 = Message7_M6_M12_M30_M35_M61_E37_E37_CONST_4;
  static constexpr E37 E37_CONST_5 = Message7_M6_M12_M30_M35_M61_E37_E37_CONST_5;
  static inline bool E37_IsValid(int value) {
    return Message7_M6_M12_M30_M35_M61_E37_IsValid(value);
  }
  static constexpr E37 E37_MIN = Message7_M6_M12_M30_M35_M61_E37_E37_MIN;
  static constexpr E37 E37_MAX = Message7_M6_M12_M30_M35_M61_E37_E37_MAX;
  static constexpr int E37_ARRAYSIZE = Message7_M6_M12_M30_M35_M61_E37_E37_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E37_descriptor() {
    return Message7_M6_M12_M30_M35_M61_E37_descriptor();
  }
  template <typename T>
  static inline const std::string& E37_Name(T value) {
    return Message7_M6_M12_M30_M35_M61_E37_Name(value);
  }
  static inline bool E37_Parse(absl::string_view name, E37* value) {
    return Message7_M6_M12_M30_M35_M61_E37_Parse(name, value);
  }
  using E38 = Message7_M6_M12_M30_M35_M61_E38;
  static constexpr E38 E38_UNSPECIFIED = Message7_M6_M12_M30_M35_M61_E38_E38_UNSPECIFIED;
  static constexpr E38 E38_CONST_1 = Message7_M6_M12_M30_M35_M61_E38_E38_CONST_1;
  static constexpr E38 E38_CONST_2 = Message7_M6_M12_M30_M35_M61_E38_E38_CONST_2;
  static constexpr E38 E38_CONST_3 = Message7_M6_M12_M30_M35_M61_E38_E38_CONST_3;
  static constexpr E38 E38_CONST_4 = Message7_M6_M12_M30_M35_M61_E38_E38_CONST_4;
  static constexpr E38 E38_CONST_5 = Message7_M6_M12_M30_M35_M61_E38_E38_CONST_5;
  static inline bool E38_IsValid(int value) {
    return Message7_M6_M12_M30_M35_M61_E38_IsValid(value);
  }
  static constexpr E38 E38_MIN = Message7_M6_M12_M30_M35_M61_E38_E38_MIN;
  static constexpr E38 E38_MAX = Message7_M6_M12_M30_M35_M61_E38_E38_MAX;
  static constexpr int E38_ARRAYSIZE = Message7_M6_M12_M30_M35_M61_E38_E38_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E38_descriptor() {
    return Message7_M6_M12_M30_M35_M61_E38_descriptor();
  }
  template <typename T>
  static inline const std::string& E38_Name(T value) {
    return Message7_M6_M12_M30_M35_M61_E38_Name(value);
  }
  static inline bool E38_Parse(absl::string_view name, E38* value) {
    return Message7_M6_M12_M30_M35_M61_E38_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_27())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())), f_21().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())), f_22().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_27()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      sizes_list.push_back(f_21().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      sizes_list.push_back(f_22().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      sizes.push_back(end_addr - start_addr + sizeof(f_27()));
      sizes.push_back(f_4().size());
      sizes.push_back(f_10().size());
      sizes.push_back(f_21().size());
      sizes.push_back(f_22().size());
      sizes.push_back(f_24().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_21(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_21(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF10FieldNumber = 17,
    kF21FieldNumber = 35,
    kF22FieldNumber = 36,
    kF24FieldNumber = 38,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF5FieldNumber = 8,
    kF6FieldNumber = 10,
    kF7FieldNumber = 11,
    kF8FieldNumber = 12,
    kF9FieldNumber = 15,
    kF11FieldNumber = 18,
    kF12FieldNumber = 20,
    kF14FieldNumber = 23,
    kF15FieldNumber = 25,
    kF13FieldNumber = 22,
    kF17FieldNumber = 28,
    kF16FieldNumber = 27,
    kF18FieldNumber = 29,
    kF19FieldNumber = 30,
    kF20FieldNumber = 32,
    kF25FieldNumber = 41,
    kF23FieldNumber = 37,
    kF26FieldNumber = 43,
    kF27FieldNumber = 46,
  };
  // optional string f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_10 = 17;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional string f_21 = 35;
  bool has_f_21() const;
  void clear_f_21() ;
  const std::string& f_21() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_21(Arg_&& arg, Args_... args);
  std::string* mutable_f_21();
  PROTOBUF_NODISCARD std::string* release_f_21();
  void set_allocated_f_21(std::string* value);

  private:
  const std::string& _internal_f_21() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_21(
      const std::string& value);
  std::string* _internal_mutable_f_21();

  public:
  // optional string f_22 = 36;
  bool has_f_22() const;
  void clear_f_22() ;
  const std::string& f_22() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_22(Arg_&& arg, Args_... args);
  std::string* mutable_f_22();
  PROTOBUF_NODISCARD std::string* release_f_22();
  void set_allocated_f_22(std::string* value);

  private:
  const std::string& _internal_f_22() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_22(
      const std::string& value);
  std::string* _internal_mutable_f_22();

  public:
  // optional string f_24 = 38;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional double f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  double f_1() const;
  void set_f_1(double value);

  private:
  double _internal_f_1() const;
  void _internal_set_f_1(double value);

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M35.M61.E37 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 value);

  public:
  // optional bool f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional sfixed32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M35.M61.E38 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 f_6() const;
  void set_f_6(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 value);

  public:
  // optional float f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  float f_7() const;
  void set_f_7(float value);

  private:
  float _internal_f_7() const;
  void _internal_set_f_7(float value);

  public:
  // optional int32 f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional fixed32 f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  ::uint32_t f_9() const;
  void set_f_9(::uint32_t value);

  private:
  ::uint32_t _internal_f_9() const;
  void _internal_set_f_9(::uint32_t value);

  public:
  // optional float f_11 = 18;
  bool has_f_11() const;
  void clear_f_11() ;
  float f_11() const;
  void set_f_11(float value);

  private:
  float _internal_f_11() const;
  void _internal_set_f_11(float value);

  public:
  // optional float f_12 = 20;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // optional int64 f_14 = 23;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // optional uint64 f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  ::uint64_t f_15() const;
  void set_f_15(::uint64_t value);

  private:
  ::uint64_t _internal_f_15() const;
  void _internal_set_f_15(::uint64_t value);

  public:
  // optional int32 f_13 = 22;
  bool has_f_13() const;
  void clear_f_13() ;
  ::int32_t f_13() const;
  void set_f_13(::int32_t value);

  private:
  ::int32_t _internal_f_13() const;
  void _internal_set_f_13(::int32_t value);

  public:
  // optional int32 f_17 = 28;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int32_t f_17() const;
  void set_f_17(::int32_t value);

  private:
  ::int32_t _internal_f_17() const;
  void _internal_set_f_17(::int32_t value);

  public:
  // optional int64 f_16 = 27;
  bool has_f_16() const;
  void clear_f_16() ;
  ::int64_t f_16() const;
  void set_f_16(::int64_t value);

  private:
  ::int64_t _internal_f_16() const;
  void _internal_set_f_16(::int64_t value);

  public:
  // optional uint64 f_18 = 29;
  bool has_f_18() const;
  void clear_f_18() ;
  ::uint64_t f_18() const;
  void set_f_18(::uint64_t value);

  private:
  ::uint64_t _internal_f_18() const;
  void _internal_set_f_18(::uint64_t value);

  public:
  // optional int64 f_19 = 30;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int64_t f_19() const;
  void set_f_19(::int64_t value);

  private:
  ::int64_t _internal_f_19() const;
  void _internal_set_f_19(::int64_t value);

  public:
  // optional float f_20 = 32;
  bool has_f_20() const;
  void clear_f_20() ;
  float f_20() const;
  void set_f_20(float value);

  private:
  float _internal_f_20() const;
  void _internal_set_f_20(float value);

  public:
  // optional fixed32 f_25 = 41;
  bool has_f_25() const;
  void clear_f_25() ;
  ::uint32_t f_25() const;
  void set_f_25(::uint32_t value);

  private:
  ::uint32_t _internal_f_25() const;
  void _internal_set_f_25(::uint32_t value);

  public:
  // optional int64 f_23 = 37;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int64_t f_23() const;
  void set_f_23(::int64_t value);

  private:
  ::int64_t _internal_f_23() const;
  void _internal_set_f_23(::int64_t value);

  public:
  // optional int32 f_26 = 43;
  bool has_f_26() const;
  void clear_f_26() ;
  ::int32_t f_26() const;
  void set_f_26(::int32_t value);

  private:
  ::int32_t _internal_f_26() const;
  void _internal_set_f_26(::int32_t value);

  public:
  // optional int32 f_27 = 46;
  bool has_f_27() const;
  void clear_f_27() ;
  ::int32_t f_27() const;
  void set_f_27(::int32_t value);

  private:
  ::int32_t _internal_f_27() const;
  void _internal_set_f_27(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M35.M61)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 28, 2,
      96, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M35_M61_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_21_;
    ::google::protobuf::internal::ArenaStringPtr f_22_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    double f_1_;
    int f_0_;
    bool f_2_;
    ::int32_t f_3_;
    ::int32_t f_5_;
    int f_6_;
    float f_7_;
    ::int32_t f_8_;
    ::uint32_t f_9_;
    float f_11_;
    float f_12_;
    ::int64_t f_14_;
    ::uint64_t f_15_;
    ::int32_t f_13_;
    ::int32_t f_17_;
    ::int64_t f_16_;
    ::uint64_t f_18_;
    ::int64_t f_19_;
    float f_20_;
    ::uint32_t f_25_;
    ::int64_t f_23_;
    ::int32_t f_26_;
    ::int32_t f_27_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M24_M51 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M24.M51) */ {
 public:
  inline Message7_M6_M12_M24_M51() : Message7_M6_M12_M24_M51(nullptr) {}
  ~Message7_M6_M12_M24_M51() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M24_M51(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M24_M51(const Message7_M6_M12_M24_M51& from) : Message7_M6_M12_M24_M51(nullptr, from) {}
  inline Message7_M6_M12_M24_M51(Message7_M6_M12_M24_M51&& from) noexcept
      : Message7_M6_M12_M24_M51(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M24_M51& operator=(const Message7_M6_M12_M24_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M24_M51& operator=(Message7_M6_M12_M24_M51&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M24_M51& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M24_M51* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M24_M51*>(
        &_Message7_M6_M12_M24_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(Message7_M6_M12_M24_M51& a, Message7_M6_M12_M24_M51& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M24_M51* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M24_M51* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M24_M51* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M24_M51>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M24_M51& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M24_M51& from) { Message7_M6_M12_M24_M51::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M24_M51* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M24.M51"; }

 protected:
  explicit Message7_M6_M12_M24_M51(::google::protobuf::Arena* arena);
  Message7_M6_M12_M24_M51(::google::protobuf::Arena* arena, const Message7_M6_M12_M24_M51& from);
  Message7_M6_M12_M24_M51(::google::protobuf::Arena* arena, Message7_M6_M12_M24_M51&& from) noexcept
      : Message7_M6_M12_M24_M51(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M24.M51)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M24_M51_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M24_M36 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M24.M36) */ {
 public:
  inline Message7_M6_M12_M24_M36() : Message7_M6_M12_M24_M36(nullptr) {}
  ~Message7_M6_M12_M24_M36() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M24_M36(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M24_M36(const Message7_M6_M12_M24_M36& from) : Message7_M6_M12_M24_M36(nullptr, from) {}
  inline Message7_M6_M12_M24_M36(Message7_M6_M12_M24_M36&& from) noexcept
      : Message7_M6_M12_M24_M36(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M24_M36& operator=(const Message7_M6_M12_M24_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M24_M36& operator=(Message7_M6_M12_M24_M36&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M24_M36& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M24_M36* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M24_M36*>(
        &_Message7_M6_M12_M24_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(Message7_M6_M12_M24_M36& a, Message7_M6_M12_M24_M36& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M24_M36* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M24_M36* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M24_M36* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M24_M36>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M24_M36& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M24_M36& from) { Message7_M6_M12_M24_M36::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M24_M36* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M24.M36"; }

 protected:
  explicit Message7_M6_M12_M24_M36(::google::protobuf::Arena* arena);
  Message7_M6_M12_M24_M36(::google::protobuf::Arena* arena, const Message7_M6_M12_M24_M36& from);
  Message7_M6_M12_M24_M36(::google::protobuf::Arena* arena, Message7_M6_M12_M24_M36&& from) noexcept
      : Message7_M6_M12_M24_M36(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E29 = Message7_M6_M12_M24_M36_E29;
  static constexpr E29 E29_UNSPECIFIED = Message7_M6_M12_M24_M36_E29_E29_UNSPECIFIED;
  static constexpr E29 E29_CONST_1 = Message7_M6_M12_M24_M36_E29_E29_CONST_1;
  static constexpr E29 E29_CONST_2 = Message7_M6_M12_M24_M36_E29_E29_CONST_2;
  static constexpr E29 E29_CONST_3 = Message7_M6_M12_M24_M36_E29_E29_CONST_3;
  static constexpr E29 E29_CONST_4 = Message7_M6_M12_M24_M36_E29_E29_CONST_4;
  static constexpr E29 E29_CONST_5 = Message7_M6_M12_M24_M36_E29_E29_CONST_5;
  static inline bool E29_IsValid(int value) {
    return Message7_M6_M12_M24_M36_E29_IsValid(value);
  }
  static constexpr E29 E29_MIN = Message7_M6_M12_M24_M36_E29_E29_MIN;
  static constexpr E29 E29_MAX = Message7_M6_M12_M24_M36_E29_E29_MAX;
  static constexpr int E29_ARRAYSIZE = Message7_M6_M12_M24_M36_E29_E29_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E29_descriptor() {
    return Message7_M6_M12_M24_M36_E29_descriptor();
  }
  template <typename T>
  static inline const std::string& E29_Name(T value) {
    return Message7_M6_M12_M24_M36_E29_Name(value);
  }
  static inline bool E29_Parse(absl::string_view name, E29* value) {
    return Message7_M6_M12_M24_M36_E29_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M12.M24.M36.E29 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M12_M24_M36_E29 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M12_M24_M36_E29 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M24_M36_E29 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M24_M36_E29 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M24.M36)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M24_M36_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M10_M32_M43 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M10.M32.M43) */ {
 public:
  inline Message7_M6_M10_M32_M43() : Message7_M6_M10_M32_M43(nullptr) {}
  ~Message7_M6_M10_M32_M43() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M10_M32_M43(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M10_M32_M43(const Message7_M6_M10_M32_M43& from) : Message7_M6_M10_M32_M43(nullptr, from) {}
  inline Message7_M6_M10_M32_M43(Message7_M6_M10_M32_M43&& from) noexcept
      : Message7_M6_M10_M32_M43(nullptr, std::move(from)) {}
  inline Message7_M6_M10_M32_M43& operator=(const Message7_M6_M10_M32_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M10_M32_M43& operator=(Message7_M6_M10_M32_M43&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M10_M32_M43& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M10_M32_M43* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M10_M32_M43*>(
        &_Message7_M6_M10_M32_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(Message7_M6_M10_M32_M43& a, Message7_M6_M10_M32_M43& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M10_M32_M43* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M10_M32_M43* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M10_M32_M43* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M10_M32_M43>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M10_M32_M43& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M10_M32_M43& from) { Message7_M6_M10_M32_M43::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M10_M32_M43* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M10.M32.M43"; }

 protected:
  explicit Message7_M6_M10_M32_M43(::google::protobuf::Arena* arena);
  Message7_M6_M10_M32_M43(::google::protobuf::Arena* arena, const Message7_M6_M10_M32_M43& from);
  Message7_M6_M10_M32_M43(::google::protobuf::Arena* arena, Message7_M6_M10_M32_M43&& from) noexcept
      : Message7_M6_M10_M32_M43(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M10.M32.M43)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M10_M32_M43_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M10_M27_M50 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M10.M27.M50) */ {
 public:
  inline Message7_M6_M10_M27_M50() : Message7_M6_M10_M27_M50(nullptr) {}
  ~Message7_M6_M10_M27_M50() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M10_M27_M50(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M10_M27_M50(const Message7_M6_M10_M27_M50& from) : Message7_M6_M10_M27_M50(nullptr, from) {}
  inline Message7_M6_M10_M27_M50(Message7_M6_M10_M27_M50&& from) noexcept
      : Message7_M6_M10_M27_M50(nullptr, std::move(from)) {}
  inline Message7_M6_M10_M27_M50& operator=(const Message7_M6_M10_M27_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M10_M27_M50& operator=(Message7_M6_M10_M27_M50&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M10_M27_M50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M10_M27_M50* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M10_M27_M50*>(
        &_Message7_M6_M10_M27_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(Message7_M6_M10_M27_M50& a, Message7_M6_M10_M27_M50& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M10_M27_M50* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M10_M27_M50* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M10_M27_M50* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M10_M27_M50>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M10_M27_M50& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M10_M27_M50& from) { Message7_M6_M10_M27_M50::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M10_M27_M50* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M10.M27.M50"; }

 protected:
  explicit Message7_M6_M10_M27_M50(::google::protobuf::Arena* arena);
  Message7_M6_M10_M27_M50(::google::protobuf::Arena* arena, const Message7_M6_M10_M27_M50& from);
  Message7_M6_M10_M27_M50(::google::protobuf::Arena* arena, Message7_M6_M10_M27_M50&& from) noexcept
      : Message7_M6_M10_M27_M50(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E35 = Message7_M6_M10_M27_M50_E35;
  static constexpr E35 E35_UNSPECIFIED = Message7_M6_M10_M27_M50_E35_E35_UNSPECIFIED;
  static constexpr E35 E35_CONST_1 = Message7_M6_M10_M27_M50_E35_E35_CONST_1;
  static constexpr E35 E35_CONST_2 = Message7_M6_M10_M27_M50_E35_E35_CONST_2;
  static constexpr E35 E35_CONST_3 = Message7_M6_M10_M27_M50_E35_E35_CONST_3;
  static constexpr E35 E35_CONST_4 = Message7_M6_M10_M27_M50_E35_E35_CONST_4;
  static constexpr E35 E35_CONST_5 = Message7_M6_M10_M27_M50_E35_E35_CONST_5;
  static inline bool E35_IsValid(int value) {
    return Message7_M6_M10_M27_M50_E35_IsValid(value);
  }
  static constexpr E35 E35_MIN = Message7_M6_M10_M27_M50_E35_E35_MIN;
  static constexpr E35 E35_MAX = Message7_M6_M10_M27_M50_E35_E35_MAX;
  static constexpr int E35_ARRAYSIZE = Message7_M6_M10_M27_M50_E35_E35_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E35_descriptor() {
    return Message7_M6_M10_M27_M50_E35_descriptor();
  }
  template <typename T>
  static inline const std::string& E35_Name(T value) {
    return Message7_M6_M10_M27_M50_E35_Name(value);
  }
  static inline bool E35_Parse(absl::string_view name, E35* value) {
    return Message7_M6_M10_M27_M50_E35_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M10.M27.M50.E35 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M10_M27_M50_E35 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M10_M27_M50_E35 value);

  private:
  ::fleetbench::proto::Message7_M6_M10_M27_M50_E35 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M10_M27_M50_E35 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M10.M27.M50)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M10_M27_M50_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M5_M13_M31_M39 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M5.M13.M31.M39) */ {
 public:
  inline Message7_M5_M13_M31_M39() : Message7_M5_M13_M31_M39(nullptr) {}
  ~Message7_M5_M13_M31_M39() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M5_M13_M31_M39(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M5_M13_M31_M39(const Message7_M5_M13_M31_M39& from) : Message7_M5_M13_M31_M39(nullptr, from) {}
  inline Message7_M5_M13_M31_M39(Message7_M5_M13_M31_M39&& from) noexcept
      : Message7_M5_M13_M31_M39(nullptr, std::move(from)) {}
  inline Message7_M5_M13_M31_M39& operator=(const Message7_M5_M13_M31_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M5_M13_M31_M39& operator=(Message7_M5_M13_M31_M39&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M5_M13_M31_M39& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M5_M13_M31_M39* internal_default_instance() {
    return reinterpret_cast<const Message7_M5_M13_M31_M39*>(
        &_Message7_M5_M13_M31_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(Message7_M5_M13_M31_M39& a, Message7_M5_M13_M31_M39& b) { a.Swap(&b); }
  inline void Swap(Message7_M5_M13_M31_M39* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M5_M13_M31_M39* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M5_M13_M31_M39* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M5_M13_M31_M39>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M5_M13_M31_M39& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M5_M13_M31_M39& from) { Message7_M5_M13_M31_M39::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M5_M13_M31_M39* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M5.M13.M31.M39"; }

 protected:
  explicit Message7_M5_M13_M31_M39(::google::protobuf::Arena* arena);
  Message7_M5_M13_M31_M39(::google::protobuf::Arena* arena, const Message7_M5_M13_M31_M39& from);
  Message7_M5_M13_M31_M39(::google::protobuf::Arena* arena, Message7_M5_M13_M31_M39&& from) noexcept
      : Message7_M5_M13_M31_M39(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E31 = Message7_M5_M13_M31_M39_E31;
  static constexpr E31 E31_UNSPECIFIED = Message7_M5_M13_M31_M39_E31_E31_UNSPECIFIED;
  static constexpr E31 E31_CONST_1 = Message7_M5_M13_M31_M39_E31_E31_CONST_1;
  static constexpr E31 E31_CONST_2 = Message7_M5_M13_M31_M39_E31_E31_CONST_2;
  static constexpr E31 E31_CONST_3 = Message7_M5_M13_M31_M39_E31_E31_CONST_3;
  static constexpr E31 E31_CONST_4 = Message7_M5_M13_M31_M39_E31_E31_CONST_4;
  static constexpr E31 E31_CONST_5 = Message7_M5_M13_M31_M39_E31_E31_CONST_5;
  static inline bool E31_IsValid(int value) {
    return Message7_M5_M13_M31_M39_E31_IsValid(value);
  }
  static constexpr E31 E31_MIN = Message7_M5_M13_M31_M39_E31_E31_MIN;
  static constexpr E31 E31_MAX = Message7_M5_M13_M31_M39_E31_E31_MAX;
  static constexpr int E31_ARRAYSIZE = Message7_M5_M13_M31_M39_E31_E31_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E31_descriptor() {
    return Message7_M5_M13_M31_M39_E31_descriptor();
  }
  template <typename T>
  static inline const std::string& E31_Name(T value) {
    return Message7_M5_M13_M31_M39_E31_Name(value);
  }
  static inline bool E31_Parse(absl::string_view name, E31* value) {
    return Message7_M5_M13_M31_M39_E31_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M5.M13.M31.M39.E31 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M5_M13_M31_M39_E31 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M5_M13_M31_M39_E31 value);

  private:
  ::fleetbench::proto::Message7_M5_M13_M31_M39_E31 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M5_M13_M31_M39_E31 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M5.M13.M31.M39)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M5_M13_M31_M39_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M4) */ {
 public:
  inline Message7_M4() : Message7_M4(nullptr) {}
  ~Message7_M4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M4(const Message7_M4& from) : Message7_M4(nullptr, from) {}
  inline Message7_M4(Message7_M4&& from) noexcept
      : Message7_M4(nullptr, std::move(from)) {}
  inline Message7_M4& operator=(const Message7_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M4& operator=(Message7_M4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M4* internal_default_instance() {
    return reinterpret_cast<const Message7_M4*>(
        &_Message7_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(Message7_M4& a, Message7_M4& b) { a.Swap(&b); }
  inline void Swap(Message7_M4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M4& from) { Message7_M4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M4"; }

 protected:
  explicit Message7_M4(::google::protobuf::Arena* arena);
  Message7_M4(::google::protobuf::Arena* arena, const Message7_M4& from);
  Message7_M4(::google::protobuf::Arena* arena, Message7_M4&& from) noexcept
      : Message7_M4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int32_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // repeated int32 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M3_M17 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M3.M17) */ {
 public:
  inline Message7_M3_M17() : Message7_M3_M17(nullptr) {}
  ~Message7_M3_M17() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M3_M17(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M3_M17(const Message7_M3_M17& from) : Message7_M3_M17(nullptr, from) {}
  inline Message7_M3_M17(Message7_M3_M17&& from) noexcept
      : Message7_M3_M17(nullptr, std::move(from)) {}
  inline Message7_M3_M17& operator=(const Message7_M3_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M3_M17& operator=(Message7_M3_M17&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M3_M17& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M3_M17* internal_default_instance() {
    return reinterpret_cast<const Message7_M3_M17*>(
        &_Message7_M3_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(Message7_M3_M17& a, Message7_M3_M17& b) { a.Swap(&b); }
  inline void Swap(Message7_M3_M17* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M3_M17* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M3_M17* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M3_M17>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M3_M17& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M3_M17& from) { Message7_M3_M17::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M3_M17* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M3.M17"; }

 protected:
  explicit Message7_M3_M17(::google::protobuf::Arena* arena);
  Message7_M3_M17(::google::protobuf::Arena* arena, const Message7_M3_M17& from);
  Message7_M3_M17(::google::protobuf::Arena* arena, Message7_M3_M17&& from) noexcept
      : Message7_M3_M17(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M3.M17)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M3_M17_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M3_M11 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M3.M11) */ {
 public:
  inline Message7_M3_M11() : Message7_M3_M11(nullptr) {}
  ~Message7_M3_M11() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M3_M11(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M3_M11(const Message7_M3_M11& from) : Message7_M3_M11(nullptr, from) {}
  inline Message7_M3_M11(Message7_M3_M11&& from) noexcept
      : Message7_M3_M11(nullptr, std::move(from)) {}
  inline Message7_M3_M11& operator=(const Message7_M3_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M3_M11& operator=(Message7_M3_M11&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M3_M11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M3_M11* internal_default_instance() {
    return reinterpret_cast<const Message7_M3_M11*>(
        &_Message7_M3_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(Message7_M3_M11& a, Message7_M3_M11& b) { a.Swap(&b); }
  inline void Swap(Message7_M3_M11* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M3_M11* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M3_M11* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M3_M11>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M3_M11& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M3_M11& from) { Message7_M3_M11::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M3_M11* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M3.M11"; }

 protected:
  explicit Message7_M3_M11(::google::protobuf::Arena* arena);
  Message7_M3_M11(::google::protobuf::Arena* arena, const Message7_M3_M11& from);
  Message7_M3_M11(::google::protobuf::Arena* arena, Message7_M3_M11&& from) noexcept
      : Message7_M3_M11(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M3.M11)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M3_M11_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M65 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M65() : Message7_M2_M19_M29_M38_M60_M65(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M65() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M65(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M65(const Message7_M2_M19_M29_M38_M60_M65& from) : Message7_M2_M19_M29_M38_M60_M65(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M65(Message7_M2_M19_M29_M38_M60_M65&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M65(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M65& operator=(const Message7_M2_M19_M29_M38_M60_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M65& operator=(Message7_M2_M19_M29_M38_M60_M65&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M65& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M65* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M65*>(
        &_Message7_M2_M19_M29_M38_M60_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Message7_M2_M19_M29_M38_M60_M65& a, Message7_M2_M19_M29_M38_M60_M65& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M65* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M65* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M65* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M65>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M65& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M65& from) { Message7_M2_M19_M29_M38_M60_M65::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M65* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M65(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M65(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M65& from);
  Message7_M2_M19_M29_M38_M60_M65(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M65&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M65(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E40 = Message7_M2_M19_M29_M38_M60_M65_E40;
  static constexpr E40 E40_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M65_E40_E40_UNSPECIFIED;
  static constexpr E40 E40_CONST_1 = Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_1;
  static constexpr E40 E40_CONST_2 = Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_2;
  static constexpr E40 E40_CONST_3 = Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_3;
  static constexpr E40 E40_CONST_4 = Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_4;
  static constexpr E40 E40_CONST_5 = Message7_M2_M19_M29_M38_M60_M65_E40_E40_CONST_5;
  static inline bool E40_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M65_E40_IsValid(value);
  }
  static constexpr E40 E40_MIN = Message7_M2_M19_M29_M38_M60_M65_E40_E40_MIN;
  static constexpr E40 E40_MAX = Message7_M2_M19_M29_M38_M60_M65_E40_E40_MAX;
  static constexpr int E40_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M65_E40_E40_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E40_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M65_E40_descriptor();
  }
  template <typename T>
  static inline const std::string& E40_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M65_E40_Name(value);
  }
  static inline bool E40_Parse(absl::string_view name, E40* value) {
    return Message7_M2_M19_M29_M38_M60_M65_E40_Parse(name, value);
  }
  using E41 = Message7_M2_M19_M29_M38_M60_M65_E41;
  static constexpr E41 E41_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M65_E41_E41_UNSPECIFIED;
  static constexpr E41 E41_CONST_1 = Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_1;
  static constexpr E41 E41_CONST_2 = Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_2;
  static constexpr E41 E41_CONST_3 = Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_3;
  static constexpr E41 E41_CONST_4 = Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_4;
  static constexpr E41 E41_CONST_5 = Message7_M2_M19_M29_M38_M60_M65_E41_E41_CONST_5;
  static inline bool E41_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M65_E41_IsValid(value);
  }
  static constexpr E41 E41_MIN = Message7_M2_M19_M29_M38_M60_M65_E41_E41_MIN;
  static constexpr E41 E41_MAX = Message7_M2_M19_M29_M38_M60_M65_E41_E41_MAX;
  static constexpr int E41_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M65_E41_E41_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E41_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M65_E41_descriptor();
  }
  template <typename T>
  static inline const std::string& E41_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M65_E41_Name(value);
  }
  static inline bool E41_Parse(absl::string_view name, E41* value) {
    return Message7_M2_M19_M29_M38_M60_M65_E41_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_27())));
      for (int i = 0; i < f_7_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7(i).data())), f_7(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())), f_15().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())), f_20().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())), f_23().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())), f_25().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_27()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7(i).c_str())));
        sizes_list.push_back(f_7(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      sizes_list.push_back(f_15().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      sizes_list.push_back(f_20().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      sizes_list.push_back(f_23().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
      sizes_list.push_back(f_25().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_7_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      sizes.push_back(end_addr - start_addr + sizeof(f_27()));
      sizes.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        sizes.push_back(f_7(i).size());
      }
      sizes.push_back(f_5().size());
      sizes.push_back(f_8().size());
      sizes.push_back(f_15().size());
      sizes.push_back(f_20().size());
      sizes.push_back(f_23().size());
      sizes.push_back(f_25().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_27_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_7_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_7_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_7(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7(i).c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_25(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_25().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_7_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_7_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_7(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_25(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF7FieldNumber = 11,
    kF5FieldNumber = 8,
    kF8FieldNumber = 12,
    kF15FieldNumber = 21,
    kF20FieldNumber = 30,
    kF23FieldNumber = 35,
    kF25FieldNumber = 39,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF1FieldNumber = 3,
    kF6FieldNumber = 9,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
    kF11FieldNumber = 15,
    kF14FieldNumber = 20,
    kF9FieldNumber = 13,
    kF10FieldNumber = 14,
    kF13FieldNumber = 18,
    kF12FieldNumber = 17,
    kF18FieldNumber = 27,
    kF16FieldNumber = 23,
    kF17FieldNumber = 25,
    kF19FieldNumber = 28,
    kF22FieldNumber = 33,
    kF21FieldNumber = 31,
    kF24FieldNumber = 38,
    kF26FieldNumber = 40,
    kF27FieldNumber = 41,
  };
  // repeated bytes f_7 = 11;
  int f_7_size() const;
  private:
  int _internal_f_7_size() const;

  public:
  void clear_f_7() ;
  const std::string& f_7(int index) const;
  std::string* mutable_f_7(int index);
  void set_f_7(int index, const std::string& value);
  void set_f_7(int index, std::string&& value);
  void set_f_7(int index, const char* value);
  void set_f_7(int index, const void* value, std::size_t size);
  void set_f_7(int index, absl::string_view value);
  std::string* add_f_7();
  void add_f_7(const std::string& value);
  void add_f_7(std::string&& value);
  void add_f_7(const char* value);
  void add_f_7(const void* value, std::size_t size);
  void add_f_7(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_7() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_7();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_7() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_7();

  public:
  // optional string f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional bytes f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional string f_15 = 21;
  bool has_f_15() const;
  void clear_f_15() ;
  const std::string& f_15() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_15(Arg_&& arg, Args_... args);
  std::string* mutable_f_15();
  PROTOBUF_NODISCARD std::string* release_f_15();
  void set_allocated_f_15(std::string* value);

  private:
  const std::string& _internal_f_15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_15(
      const std::string& value);
  std::string* _internal_mutable_f_15();

  public:
  // optional string f_20 = 30;
  bool has_f_20() const;
  void clear_f_20() ;
  const std::string& f_20() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_20(Arg_&& arg, Args_... args);
  std::string* mutable_f_20();
  PROTOBUF_NODISCARD std::string* release_f_20();
  void set_allocated_f_20(std::string* value);

  private:
  const std::string& _internal_f_20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_20(
      const std::string& value);
  std::string* _internal_mutable_f_20();

  public:
  // optional string f_23 = 35;
  bool has_f_23() const;
  void clear_f_23() ;
  const std::string& f_23() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_23(Arg_&& arg, Args_... args);
  std::string* mutable_f_23();
  PROTOBUF_NODISCARD std::string* release_f_23();
  void set_allocated_f_23(std::string* value);

  private:
  const std::string& _internal_f_23() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_23(
      const std::string& value);
  std::string* _internal_mutable_f_23();

  public:
  // optional string f_25 = 39;
  bool has_f_25() const;
  void clear_f_25() ;
  const std::string& f_25() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_25(Arg_&& arg, Args_... args);
  std::string* mutable_f_25();
  PROTOBUF_NODISCARD std::string* release_f_25();
  void set_allocated_f_25(std::string* value);

  private:
  const std::string& _internal_f_25() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_25(
      const std::string& value);
  std::string* _internal_mutable_f_25();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.E40 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 value);

  public:
  // optional float f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  float f_2() const;
  void set_f_2(float value);

  private:
  float _internal_f_2() const;
  void _internal_set_f_2(float value);

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional float f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  float f_6() const;
  void set_f_6(float value);

  private:
  float _internal_f_6() const;
  void _internal_set_f_6(float value);

  public:
  // optional bool f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional bool f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  bool f_4() const;
  void set_f_4(bool value);

  private:
  bool _internal_f_4() const;
  void _internal_set_f_4(bool value);

  public:
  // optional bool f_11 = 15;
  bool has_f_11() const;
  void clear_f_11() ;
  bool f_11() const;
  void set_f_11(bool value);

  private:
  bool _internal_f_11() const;
  void _internal_set_f_11(bool value);

  public:
  // optional bool f_14 = 20;
  bool has_f_14() const;
  void clear_f_14() ;
  bool f_14() const;
  void set_f_14(bool value);

  private:
  bool _internal_f_14() const;
  void _internal_set_f_14(bool value);

  public:
  // optional float f_9 = 13;
  bool has_f_9() const;
  void clear_f_9() ;
  float f_9() const;
  void set_f_9(float value);

  private:
  float _internal_f_9() const;
  void _internal_set_f_9(float value);

  public:
  // optional int32 f_10 = 14;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int32_t f_10() const;
  void set_f_10(::int32_t value);

  private:
  ::int32_t _internal_f_10() const;
  void _internal_set_f_10(::int32_t value);

  public:
  // optional fixed64 f_13 = 18;
  bool has_f_13() const;
  void clear_f_13() ;
  ::uint64_t f_13() const;
  void set_f_13(::uint64_t value);

  private:
  ::uint64_t _internal_f_13() const;
  void _internal_set_f_13(::uint64_t value);

  public:
  // optional float f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // optional int32 f_18 = 27;
  bool has_f_18() const;
  void clear_f_18() ;
  ::int32_t f_18() const;
  void set_f_18(::int32_t value);

  private:
  ::int32_t _internal_f_18() const;
  void _internal_set_f_18(::int32_t value);

  public:
  // optional int64 f_16 = 23;
  bool has_f_16() const;
  void clear_f_16() ;
  ::int64_t f_16() const;
  void set_f_16(::int64_t value);

  private:
  ::int64_t _internal_f_16() const;
  void _internal_set_f_16(::int64_t value);

  public:
  // optional int64 f_17 = 25;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int64_t f_17() const;
  void set_f_17(::int64_t value);

  private:
  ::int64_t _internal_f_17() const;
  void _internal_set_f_17(::int64_t value);

  public:
  // optional double f_19 = 28;
  bool has_f_19() const;
  void clear_f_19() ;
  double f_19() const;
  void set_f_19(double value);

  private:
  double _internal_f_19() const;
  void _internal_set_f_19(double value);

  public:
  // optional int64 f_22 = 33;
  bool has_f_22() const;
  void clear_f_22() ;
  ::int64_t f_22() const;
  void set_f_22(::int64_t value);

  private:
  ::int64_t _internal_f_22() const;
  void _internal_set_f_22(::int64_t value);

  public:
  // optional bool f_21 = 31;
  bool has_f_21() const;
  void clear_f_21() ;
  bool f_21() const;
  void set_f_21(bool value);

  private:
  bool _internal_f_21() const;
  void _internal_set_f_21(bool value);

  public:
  // optional float f_24 = 38;
  bool has_f_24() const;
  void clear_f_24() ;
  float f_24() const;
  void set_f_24(float value);

  private:
  float _internal_f_24() const;
  void _internal_set_f_24(float value);

  public:
  // optional int64 f_26 = 40;
  bool has_f_26() const;
  void clear_f_26() ;
  ::int64_t f_26() const;
  void set_f_26(::int64_t value);

  private:
  ::int64_t _internal_f_26() const;
  void _internal_set_f_26(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.E41 f_27 = 41;
  bool has_f_27() const;
  void clear_f_27() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 f_27() const;
  void set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 _internal_f_27() const;
  void _internal_set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 28, 2,
      100, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M65_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::google::protobuf::internal::ArenaStringPtr f_15_;
    ::google::protobuf::internal::ArenaStringPtr f_20_;
    ::google::protobuf::internal::ArenaStringPtr f_23_;
    ::google::protobuf::internal::ArenaStringPtr f_25_;
    int f_0_;
    float f_2_;
    ::int64_t f_1_;
    float f_6_;
    bool f_3_;
    bool f_4_;
    bool f_11_;
    bool f_14_;
    float f_9_;
    ::int32_t f_10_;
    ::uint64_t f_13_;
    float f_12_;
    ::int32_t f_18_;
    ::int64_t f_16_;
    ::int64_t f_17_;
    double f_19_;
    ::int64_t f_22_;
    bool f_21_;
    float f_24_;
    ::int64_t f_26_;
    int f_27_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73_M82 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M82() : Message7_M2_M19_M29_M38_M60_M64_M73_M82(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73_M82() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73_M82(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73_M82(const Message7_M2_M19_M29_M38_M60_M64_M73_M82& from) : Message7_M2_M19_M29_M38_M60_M64_M73_M82(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M82(Message7_M2_M19_M29_M38_M60_M64_M73_M82&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M82(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M82& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73_M82& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M82& operator=(Message7_M2_M19_M29_M38_M60_M64_M73_M82&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73_M82& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73_M82* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73_M82*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_M82_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73_M82& a, Message7_M2_M19_M29_M38_M60_M64_M73_M82& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73_M82* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M82* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73_M82* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73_M82>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M82& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M82& from) { Message7_M2_M19_M29_M38_M60_M64_M73_M82::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M82* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73_M82(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73_M82(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73_M82& from);
  Message7_M2_M19_M29_M38_M60_M64_M73_M82(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73_M82&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M82(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_M82_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93() : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& from) : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& operator=(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& a, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& from) { Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& from);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M67_M79 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M79() : Message7_M2_M19_M29_M38_M60_M64_M67_M79(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M67_M79() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M67_M79(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M67_M79(const Message7_M2_M19_M29_M38_M60_M64_M67_M79& from) : Message7_M2_M19_M29_M38_M60_M64_M67_M79(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M79(Message7_M2_M19_M29_M38_M60_M64_M67_M79&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67_M79(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M79& operator=(const Message7_M2_M19_M29_M38_M60_M64_M67_M79& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M79& operator=(Message7_M2_M19_M29_M38_M60_M64_M67_M79&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M67_M79& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M67_M79* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M67_M79*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M67_M79_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M67_M79& a, Message7_M2_M19_M29_M38_M60_M64_M67_M79& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M67_M79* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M67_M79* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M67_M79* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M67_M79>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M67_M79& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M67_M79& from) { Message7_M2_M19_M29_M38_M60_M64_M67_M79::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M67_M79* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M67_M79(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M67_M79(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M67_M79& from);
  Message7_M2_M19_M29_M38_M60_M64_M67_M79(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M67_M79&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67_M79(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional uint64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M67_M79_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M67_M76 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M76() : Message7_M2_M19_M29_M38_M60_M64_M67_M76(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M67_M76() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M67_M76(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M67_M76(const Message7_M2_M19_M29_M38_M60_M64_M67_M76& from) : Message7_M2_M19_M29_M38_M60_M64_M67_M76(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M76(Message7_M2_M19_M29_M38_M60_M64_M67_M76&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67_M76(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M76& operator=(const Message7_M2_M19_M29_M38_M60_M64_M67_M76& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M67_M76& operator=(Message7_M2_M19_M29_M38_M60_M64_M67_M76&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M67_M76& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M67_M76* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M67_M76*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M67_M76_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M67_M76& a, Message7_M2_M19_M29_M38_M60_M64_M67_M76& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M67_M76* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M67_M76* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M67_M76* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M67_M76>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M67_M76& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M67_M76& from) { Message7_M2_M19_M29_M38_M60_M64_M67_M76::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M67_M76* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M67_M76(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M67_M76(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M67_M76& from);
  Message7_M2_M19_M29_M38_M60_M64_M67_M76(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M67_M76&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67_M76(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M67_M76_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M83 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M83() : Message7_M2_M19_M29_M38_M60_M62_M72_M83(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M83() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M83(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M83(const Message7_M2_M19_M29_M38_M60_M62_M72_M83& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M83(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M83(Message7_M2_M19_M29_M38_M60_M62_M72_M83&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M83(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M83& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M83& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M83& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M83&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M83& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M83* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M83*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M83_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M83& a, Message7_M2_M19_M29_M38_M60_M62_M72_M83& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M83* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M83* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M83* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M83>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M83& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M83& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M83::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M83* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M83(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M83(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M83& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M83(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M83&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M83(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())), f_1().size() * sizeof(float)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(float));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size() * sizeof(float));
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(float), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated float f_1 = 3 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  float f_1(int index) const;
  void set_f_1(int index, float value);
  void add_f_1(float value);
  const ::google::protobuf::RepeatedField<float>& f_1() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_1();

  public:
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M83_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91() : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& a, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94() : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& a, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      80, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M70 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M70() : Message7_M2_M19_M29_M38_M60_M62_M70(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M70() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M70(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M70(const Message7_M2_M19_M29_M38_M60_M62_M70& from) : Message7_M2_M19_M29_M38_M60_M62_M70(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M70(Message7_M2_M19_M29_M38_M60_M62_M70&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M70(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M70& operator=(const Message7_M2_M19_M29_M38_M60_M62_M70& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M70& operator=(Message7_M2_M19_M29_M38_M60_M62_M70&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M70& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M70* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M70*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M70_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M70& a, Message7_M2_M19_M29_M38_M60_M62_M70& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M70* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M70* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M70* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M70>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M70& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M70& from) { Message7_M2_M19_M29_M38_M60_M62_M70::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M70* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M70(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M70(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M70& from);
  Message7_M2_M19_M29_M38_M60_M62_M70(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M70&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M70(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M70_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84() : Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& a, Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E50 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50;
  static constexpr E50 E50_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_UNSPECIFIED;
  static constexpr E50 E50_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_1;
  static constexpr E50 E50_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_2;
  static constexpr E50 E50_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_3;
  static constexpr E50 E50_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_4;
  static constexpr E50 E50_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_CONST_5;
  static inline bool E50_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_IsValid(value);
  }
  static constexpr E50 E50_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_MIN;
  static constexpr E50 E50_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_MAX;
  static constexpr int E50_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_E50_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E50_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_descriptor();
  }
  template <typename T>
  static inline const std::string& E50_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_Name(value);
  }
  static inline bool E50_Parse(absl::string_view name, E50* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_Parse(name, value);
  }
  using E51 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51;
  static constexpr E51 E51_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_UNSPECIFIED;
  static constexpr E51 E51_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_1;
  static constexpr E51 E51_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_2;
  static constexpr E51 E51_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_3;
  static constexpr E51 E51_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_4;
  static constexpr E51 E51_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_CONST_5;
  static inline bool E51_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_IsValid(value);
  }
  static constexpr E51 E51_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_MIN;
  static constexpr E51 E51_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_MAX;
  static constexpr int E51_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_E51_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E51_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_descriptor();
  }
  template <typename T>
  static inline const std::string& E51_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_Name(value);
  }
  static inline bool E51_Parse(absl::string_view name, E51* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_Parse(name, value);
  }
  using E52 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52;
  static constexpr E52 E52_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_UNSPECIFIED;
  static constexpr E52 E52_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_1;
  static constexpr E52 E52_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_2;
  static constexpr E52 E52_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_3;
  static constexpr E52 E52_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_4;
  static constexpr E52 E52_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_CONST_5;
  static inline bool E52_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_IsValid(value);
  }
  static constexpr E52 E52_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_MIN;
  static constexpr E52 E52_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_MAX;
  static constexpr int E52_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_E52_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E52_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_descriptor();
  }
  template <typename T>
  static inline const std::string& E52_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_Name(value);
  }
  static inline bool E52_Parse(absl::string_view name, E52* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_Parse(name, value);
  }
  using E53 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53;
  static constexpr E53 E53_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_UNSPECIFIED;
  static constexpr E53 E53_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_1;
  static constexpr E53 E53_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_2;
  static constexpr E53 E53_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_3;
  static constexpr E53 E53_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_4;
  static constexpr E53 E53_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_CONST_5;
  static inline bool E53_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_IsValid(value);
  }
  static constexpr E53 E53_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_MIN;
  static constexpr E53 E53_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_MAX;
  static constexpr int E53_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_E53_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E53_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_descriptor();
  }
  template <typename T>
  static inline const std::string& E53_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_Name(value);
  }
  static inline bool E53_Parse(absl::string_view name, E53* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_Parse(name, value);
  }
  using E54 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54;
  static constexpr E54 E54_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_UNSPECIFIED;
  static constexpr E54 E54_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_1;
  static constexpr E54 E54_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_2;
  static constexpr E54 E54_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_3;
  static constexpr E54 E54_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_4;
  static constexpr E54 E54_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_CONST_5;
  static inline bool E54_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_IsValid(value);
  }
  static constexpr E54 E54_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_MIN;
  static constexpr E54 E54_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_MAX;
  static constexpr int E54_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_E54_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E54_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_descriptor();
  }
  template <typename T>
  static inline const std::string& E54_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_Name(value);
  }
  static inline bool E54_Parse(absl::string_view name, E54* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_Parse(name, value);
  }
  using E55 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55;
  static constexpr E55 E55_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_UNSPECIFIED;
  static constexpr E55 E55_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_1;
  static constexpr E55 E55_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_2;
  static constexpr E55 E55_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_3;
  static constexpr E55 E55_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_4;
  static constexpr E55 E55_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_CONST_5;
  static inline bool E55_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_IsValid(value);
  }
  static constexpr E55 E55_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_MIN;
  static constexpr E55 E55_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_MAX;
  static constexpr int E55_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_E55_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E55_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_descriptor();
  }
  template <typename T>
  static inline const std::string& E55_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_Name(value);
  }
  static inline bool E55_Parse(absl::string_view name, E55* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_Parse(name, value);
  }
  using E56 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56;
  static constexpr E56 E56_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_UNSPECIFIED;
  static constexpr E56 E56_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_1;
  static constexpr E56 E56_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_2;
  static constexpr E56 E56_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_3;
  static constexpr E56 E56_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_4;
  static constexpr E56 E56_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_CONST_5;
  static inline bool E56_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_IsValid(value);
  }
  static constexpr E56 E56_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_MIN;
  static constexpr E56 E56_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_MAX;
  static constexpr int E56_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_E56_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E56_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_descriptor();
  }
  template <typename T>
  static inline const std::string& E56_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_Name(value);
  }
  static inline bool E56_Parse(absl::string_view name, E56* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_Parse(name, value);
  }
  using E57 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57;
  static constexpr E57 E57_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_UNSPECIFIED;
  static constexpr E57 E57_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_1;
  static constexpr E57 E57_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_2;
  static constexpr E57 E57_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_3;
  static constexpr E57 E57_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_4;
  static constexpr E57 E57_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_CONST_5;
  static inline bool E57_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_IsValid(value);
  }
  static constexpr E57 E57_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_MIN;
  static constexpr E57 E57_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_MAX;
  static constexpr int E57_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_E57_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E57_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_descriptor();
  }
  template <typename T>
  static inline const std::string& E57_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_Name(value);
  }
  static inline bool E57_Parse(absl::string_view name, E57* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_Parse(name, value);
  }
  using E58 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58;
  static constexpr E58 E58_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_UNSPECIFIED;
  static constexpr E58 E58_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_1;
  static constexpr E58 E58_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_2;
  static constexpr E58 E58_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_3;
  static constexpr E58 E58_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_4;
  static constexpr E58 E58_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_CONST_5;
  static inline bool E58_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_IsValid(value);
  }
  static constexpr E58 E58_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_MIN;
  static constexpr E58 E58_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_MAX;
  static constexpr int E58_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_E58_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E58_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_descriptor();
  }
  template <typename T>
  static inline const std::string& E58_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_Name(value);
  }
  static inline bool E58_Parse(absl::string_view name, E58* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_40_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_40())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_43().data())), f_43().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())), f_17().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())), f_29().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())), f_31().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())), f_38().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())), f_41().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())), f_44().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_45().c_str())), f_45().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_40_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_40()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_28().data())));
      sizes_list.push_back(f_28().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_43().data())));
      sizes_list.push_back(f_43().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      sizes_list.push_back(f_17().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      sizes_list.push_back(f_29().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      sizes_list.push_back(f_31().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      sizes_list.push_back(f_38().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      sizes_list.push_back(f_41().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      sizes_list.push_back(f_44().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_45().c_str())));
      sizes_list.push_back(f_45().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_40_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_28().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_43().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_45().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_40_);
      sizes.push_back(end_addr - start_addr + sizeof(f_40()));
      sizes.push_back(f_28().size() * sizeof(int));
      sizes.push_back(f_43().size() * sizeof(::int64_t));
      sizes.push_back(f_0().size());
      sizes.push_back(f_11().size());
      sizes.push_back(f_12().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_17().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_29().size());
      sizes.push_back(f_31().size());
      sizes.push_back(f_38().size());
      sizes.push_back(f_41().size());
      sizes.push_back(f_44().size());
      sizes.push_back(f_45().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_40_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_28()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_28().data())));
      mutable_f_43()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_43().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_41(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_45(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_45().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_28()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_43()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_41(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_45(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF28FieldNumber = 44,
    kF43FieldNumber = 67,
    kF0FieldNumber = 1,
    kF11FieldNumber = 19,
    kF12FieldNumber = 20,
    kF16FieldNumber = 26,
    kF17FieldNumber = 27,
    kF24FieldNumber = 36,
    kF29FieldNumber = 45,
    kF31FieldNumber = 49,
    kF38FieldNumber = 59,
    kF41FieldNumber = 63,
    kF44FieldNumber = 68,
    kF45FieldNumber = 71,
    kF1FieldNumber = 2,
    kF4FieldNumber = 8,
    kF3FieldNumber = 6,
    kF5FieldNumber = 10,
    kF6FieldNumber = 12,
    kF7FieldNumber = 13,
    kF2FieldNumber = 4,
    kF8FieldNumber = 14,
    kF15FieldNumber = 25,
    kF10FieldNumber = 18,
    kF9FieldNumber = 15,
    kF13FieldNumber = 21,
    kF14FieldNumber = 24,
    kF18FieldNumber = 28,
    kF19FieldNumber = 29,
    kF20FieldNumber = 30,
    kF21FieldNumber = 31,
    kF22FieldNumber = 33,
    kF23FieldNumber = 34,
    kF25FieldNumber = 38,
    kF26FieldNumber = 39,
    kF27FieldNumber = 41,
    kF33FieldNumber = 51,
    kF30FieldNumber = 48,
    kF32FieldNumber = 50,
    kF34FieldNumber = 53,
    kF35FieldNumber = 55,
    kF36FieldNumber = 56,
    kF37FieldNumber = 58,
    kF39FieldNumber = 60,
    kF42FieldNumber = 65,
    kF40FieldNumber = 61,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E55 f_28 = 44 [packed = true];
  int f_28_size() const;
  private:
  int _internal_f_28_size() const;

  public:
  void clear_f_28() ;
  public:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 f_28(int index) const;
  void set_f_28(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 value);
  void add_f_28(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 value);
  const ::google::protobuf::RepeatedField<int>& f_28() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_28();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_28() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_28();

  public:
  // repeated sint64 f_43 = 67 [packed = true];
  int f_43_size() const;
  private:
  int _internal_f_43_size() const;

  public:
  void clear_f_43() ;
  ::int64_t f_43(int index) const;
  void set_f_43(int index, ::int64_t value);
  void add_f_43(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_43() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_43();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_43() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_43();

  public:
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_11 = 19;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional string f_12 = 20;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional string f_16 = 26;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_17 = 27;
  bool has_f_17() const;
  void clear_f_17() ;
  const std::string& f_17() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_17(Arg_&& arg, Args_... args);
  std::string* mutable_f_17();
  PROTOBUF_NODISCARD std::string* release_f_17();
  void set_allocated_f_17(std::string* value);

  private:
  const std::string& _internal_f_17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_17(
      const std::string& value);
  std::string* _internal_mutable_f_17();

  public:
  // optional string f_24 = 36;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional string f_29 = 45;
  bool has_f_29() const;
  void clear_f_29() ;
  const std::string& f_29() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_29(Arg_&& arg, Args_... args);
  std::string* mutable_f_29();
  PROTOBUF_NODISCARD std::string* release_f_29();
  void set_allocated_f_29(std::string* value);

  private:
  const std::string& _internal_f_29() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_29(
      const std::string& value);
  std::string* _internal_mutable_f_29();

  public:
  // optional bytes f_31 = 49;
  bool has_f_31() const;
  void clear_f_31() ;
  const std::string& f_31() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_31(Arg_&& arg, Args_... args);
  std::string* mutable_f_31();
  PROTOBUF_NODISCARD std::string* release_f_31();
  void set_allocated_f_31(std::string* value);

  private:
  const std::string& _internal_f_31() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_31(
      const std::string& value);
  std::string* _internal_mutable_f_31();

  public:
  // optional string f_38 = 59;
  bool has_f_38() const;
  void clear_f_38() ;
  const std::string& f_38() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_38(Arg_&& arg, Args_... args);
  std::string* mutable_f_38();
  PROTOBUF_NODISCARD std::string* release_f_38();
  void set_allocated_f_38(std::string* value);

  private:
  const std::string& _internal_f_38() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_38(
      const std::string& value);
  std::string* _internal_mutable_f_38();

  public:
  // optional string f_41 = 63;
  bool has_f_41() const;
  void clear_f_41() ;
  const std::string& f_41() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_41(Arg_&& arg, Args_... args);
  std::string* mutable_f_41();
  PROTOBUF_NODISCARD std::string* release_f_41();
  void set_allocated_f_41(std::string* value);

  private:
  const std::string& _internal_f_41() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_41(
      const std::string& value);
  std::string* _internal_mutable_f_41();

  public:
  // optional bytes f_44 = 68;
  bool has_f_44() const;
  void clear_f_44() ;
  const std::string& f_44() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_44(Arg_&& arg, Args_... args);
  std::string* mutable_f_44();
  PROTOBUF_NODISCARD std::string* release_f_44();
  void set_allocated_f_44(std::string* value);

  private:
  const std::string& _internal_f_44() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_44(
      const std::string& value);
  std::string* _internal_mutable_f_44();

  public:
  // optional bytes f_45 = 71;
  bool has_f_45() const;
  void clear_f_45() ;
  const std::string& f_45() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_45(Arg_&& arg, Args_... args);
  std::string* mutable_f_45();
  PROTOBUF_NODISCARD std::string* release_f_45();
  void set_allocated_f_45(std::string* value);

  private:
  const std::string& _internal_f_45() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_45(
      const std::string& value);
  std::string* _internal_mutable_f_45();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E50 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 f_1() const;
  void set_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 value);

  public:
  // optional int32 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // optional fixed64 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // optional float f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  float f_5() const;
  void set_f_5(float value);

  private:
  float _internal_f_5() const;
  void _internal_set_f_5(float value);

  public:
  // optional int32 f_6 = 12;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E51 f_7 = 13;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 f_7() const;
  void set_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 value);

  public:
  // optional bool f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional bool f_8 = 14;
  bool has_f_8() const;
  void clear_f_8() ;
  bool f_8() const;
  void set_f_8(bool value);

  private:
  bool _internal_f_8() const;
  void _internal_set_f_8(bool value);

  public:
  // optional bool f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  bool f_15() const;
  void set_f_15(bool value);

  private:
  bool _internal_f_15() const;
  void _internal_set_f_15(bool value);

  public:
  // optional int64 f_10 = 18;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int64_t f_10() const;
  void set_f_10(::int64_t value);

  private:
  ::int64_t _internal_f_10() const;
  void _internal_set_f_10(::int64_t value);

  public:
  // optional float f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  float f_9() const;
  void set_f_9(float value);

  private:
  float _internal_f_9() const;
  void _internal_set_f_9(float value);

  public:
  // optional fixed32 f_13 = 21;
  bool has_f_13() const;
  void clear_f_13() ;
  ::uint32_t f_13() const;
  void set_f_13(::uint32_t value);

  private:
  ::uint32_t _internal_f_13() const;
  void _internal_set_f_13(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E52 f_14 = 24;
  bool has_f_14() const;
  void clear_f_14() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 f_14() const;
  void set_f_14(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 _internal_f_14() const;
  void _internal_set_f_14(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 value);

  public:
  // optional int32 f_18 = 28;
  bool has_f_18() const;
  void clear_f_18() ;
  ::int32_t f_18() const;
  void set_f_18(::int32_t value);

  private:
  ::int32_t _internal_f_18() const;
  void _internal_set_f_18(::int32_t value);

  public:
  // optional int32 f_19 = 29;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int32_t f_19() const;
  void set_f_19(::int32_t value);

  private:
  ::int32_t _internal_f_19() const;
  void _internal_set_f_19(::int32_t value);

  public:
  // optional fixed32 f_20 = 30;
  bool has_f_20() const;
  void clear_f_20() ;
  ::uint32_t f_20() const;
  void set_f_20(::uint32_t value);

  private:
  ::uint32_t _internal_f_20() const;
  void _internal_set_f_20(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E53 f_21 = 31;
  bool has_f_21() const;
  void clear_f_21() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 f_21() const;
  void set_f_21(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 _internal_f_21() const;
  void _internal_set_f_21(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 value);

  public:
  // optional uint32 f_22 = 33;
  bool has_f_22() const;
  void clear_f_22() ;
  ::uint32_t f_22() const;
  void set_f_22(::uint32_t value);

  private:
  ::uint32_t _internal_f_22() const;
  void _internal_set_f_22(::uint32_t value);

  public:
  // optional int64 f_23 = 34;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int64_t f_23() const;
  void set_f_23(::int64_t value);

  private:
  ::int64_t _internal_f_23() const;
  void _internal_set_f_23(::int64_t value);

  public:
  // optional fixed32 f_25 = 38;
  bool has_f_25() const;
  void clear_f_25() ;
  ::uint32_t f_25() const;
  void set_f_25(::uint32_t value);

  private:
  ::uint32_t _internal_f_25() const;
  void _internal_set_f_25(::uint32_t value);

  public:
  // optional fixed32 f_26 = 39;
  bool has_f_26() const;
  void clear_f_26() ;
  ::uint32_t f_26() const;
  void set_f_26(::uint32_t value);

  private:
  ::uint32_t _internal_f_26() const;
  void _internal_set_f_26(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E54 f_27 = 41;
  bool has_f_27() const;
  void clear_f_27() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 f_27() const;
  void set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 _internal_f_27() const;
  void _internal_set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 value);

  public:
  // optional float f_33 = 51;
  bool has_f_33() const;
  void clear_f_33() ;
  float f_33() const;
  void set_f_33(float value);

  private:
  float _internal_f_33() const;
  void _internal_set_f_33(float value);

  public:
  // optional int64 f_30 = 48;
  bool has_f_30() const;
  void clear_f_30() ;
  ::int64_t f_30() const;
  void set_f_30(::int64_t value);

  private:
  ::int64_t _internal_f_30() const;
  void _internal_set_f_30(::int64_t value);

  public:
  // optional int64 f_32 = 50;
  bool has_f_32() const;
  void clear_f_32() ;
  ::int64_t f_32() const;
  void set_f_32(::int64_t value);

  private:
  ::int64_t _internal_f_32() const;
  void _internal_set_f_32(::int64_t value);

  public:
  // optional fixed64 f_34 = 53;
  bool has_f_34() const;
  void clear_f_34() ;
  ::uint64_t f_34() const;
  void set_f_34(::uint64_t value);

  private:
  ::uint64_t _internal_f_34() const;
  void _internal_set_f_34(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E56 f_35 = 55;
  bool has_f_35() const;
  void clear_f_35() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 f_35() const;
  void set_f_35(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 _internal_f_35() const;
  void _internal_set_f_35(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 value);

  public:
  // optional uint32 f_36 = 56;
  bool has_f_36() const;
  void clear_f_36() ;
  ::uint32_t f_36() const;
  void set_f_36(::uint32_t value);

  private:
  ::uint32_t _internal_f_36() const;
  void _internal_set_f_36(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E57 f_37 = 58;
  bool has_f_37() const;
  void clear_f_37() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 f_37() const;
  void set_f_37(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 _internal_f_37() const;
  void _internal_set_f_37(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 value);

  public:
  // optional int32 f_39 = 60;
  bool has_f_39() const;
  void clear_f_39() ;
  ::int32_t f_39() const;
  void set_f_39(::int32_t value);

  private:
  ::int32_t _internal_f_39() const;
  void _internal_set_f_39(::int32_t value);

  public:
  // optional double f_42 = 65;
  bool has_f_42() const;
  void clear_f_42() ;
  double f_42() const;
  void set_f_42(double value);

  private:
  double _internal_f_42() const;
  void _internal_set_f_42(double value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E58 f_40 = 61;
  bool has_f_40() const;
  void clear_f_40() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 f_40() const;
  void set_f_40(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 _internal_f_40() const;
  void _internal_set_f_40(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 46, 9,
      180, 11>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_28_;
    mutable ::google::protobuf::internal::CachedSize _f_28_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_43_;
    mutable ::google::protobuf::internal::CachedSize _f_43_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_17_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_29_;
    ::google::protobuf::internal::ArenaStringPtr f_31_;
    ::google::protobuf::internal::ArenaStringPtr f_38_;
    ::google::protobuf::internal::ArenaStringPtr f_41_;
    ::google::protobuf::internal::ArenaStringPtr f_44_;
    ::google::protobuf::internal::ArenaStringPtr f_45_;
    int f_1_;
    ::int32_t f_4_;
    ::uint64_t f_3_;
    float f_5_;
    ::int32_t f_6_;
    int f_7_;
    bool f_2_;
    bool f_8_;
    bool f_15_;
    ::int64_t f_10_;
    float f_9_;
    ::uint32_t f_13_;
    int f_14_;
    ::int32_t f_18_;
    ::int32_t f_19_;
    ::uint32_t f_20_;
    int f_21_;
    ::uint32_t f_22_;
    ::int64_t f_23_;
    ::uint32_t f_25_;
    ::uint32_t f_26_;
    int f_27_;
    float f_33_;
    ::int64_t f_30_;
    ::int64_t f_32_;
    ::uint64_t f_34_;
    int f_35_;
    ::uint32_t f_36_;
    int f_37_;
    ::int32_t f_39_;
    double f_42_;
    int f_40_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M66 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M66() : Message7_M2_M19_M29_M38_M60_M62_M66(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M66() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M66(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M66(const Message7_M2_M19_M29_M38_M60_M62_M66& from) : Message7_M2_M19_M29_M38_M60_M62_M66(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M66(Message7_M2_M19_M29_M38_M60_M62_M66&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M66(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M66& operator=(const Message7_M2_M19_M29_M38_M60_M62_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M66& operator=(Message7_M2_M19_M29_M38_M60_M62_M66&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M66& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M66* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M66*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M66& a, Message7_M2_M19_M29_M38_M60_M62_M66& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M66* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M66* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M66* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M66>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M66& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M66& from) { Message7_M2_M19_M29_M38_M60_M62_M66::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M66* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M66(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M66(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M66& from);
  Message7_M2_M19_M29_M38_M60_M62_M66(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M66&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M66(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M66_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M21_M53 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M21.M53) */ {
 public:
  inline Message7_M2_M19_M21_M53() : Message7_M2_M19_M21_M53(nullptr) {}
  ~Message7_M2_M19_M21_M53() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M21_M53(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M21_M53(const Message7_M2_M19_M21_M53& from) : Message7_M2_M19_M21_M53(nullptr, from) {}
  inline Message7_M2_M19_M21_M53(Message7_M2_M19_M21_M53&& from) noexcept
      : Message7_M2_M19_M21_M53(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M21_M53& operator=(const Message7_M2_M19_M21_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M21_M53& operator=(Message7_M2_M19_M21_M53&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M21_M53& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M21_M53* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M21_M53*>(
        &_Message7_M2_M19_M21_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message7_M2_M19_M21_M53& a, Message7_M2_M19_M21_M53& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M21_M53* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M21_M53* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M21_M53* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M21_M53>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M21_M53& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M21_M53& from) { Message7_M2_M19_M21_M53::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M21_M53* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M21.M53"; }

 protected:
  explicit Message7_M2_M19_M21_M53(::google::protobuf::Arena* arena);
  Message7_M2_M19_M21_M53(::google::protobuf::Arena* arena, const Message7_M2_M19_M21_M53& from);
  Message7_M2_M19_M21_M53(::google::protobuf::Arena* arena, Message7_M2_M19_M21_M53&& from) noexcept
      : Message7_M2_M19_M21_M53(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M21.M53)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M21_M53_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M21_M44 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M21.M44) */ {
 public:
  inline Message7_M2_M19_M21_M44() : Message7_M2_M19_M21_M44(nullptr) {}
  ~Message7_M2_M19_M21_M44() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M21_M44(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M21_M44(const Message7_M2_M19_M21_M44& from) : Message7_M2_M19_M21_M44(nullptr, from) {}
  inline Message7_M2_M19_M21_M44(Message7_M2_M19_M21_M44&& from) noexcept
      : Message7_M2_M19_M21_M44(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M21_M44& operator=(const Message7_M2_M19_M21_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M21_M44& operator=(Message7_M2_M19_M21_M44&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M21_M44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M21_M44* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M21_M44*>(
        &_Message7_M2_M19_M21_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Message7_M2_M19_M21_M44& a, Message7_M2_M19_M21_M44& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M21_M44* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M21_M44* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M21_M44* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M21_M44>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M21_M44& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M21_M44& from) { Message7_M2_M19_M21_M44::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M21_M44* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M21.M44"; }

 protected:
  explicit Message7_M2_M19_M21_M44(::google::protobuf::Arena* arena);
  Message7_M2_M19_M21_M44(::google::protobuf::Arena* arena, const Message7_M2_M19_M21_M44& from);
  Message7_M2_M19_M21_M44(::google::protobuf::Arena* arena, Message7_M2_M19_M21_M44&& from) noexcept
      : Message7_M2_M19_M21_M44(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M21.M44)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M21_M44_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M1_M14_M34_M48 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M1.M14.M34.M48) */ {
 public:
  inline Message7_M1_M14_M34_M48() : Message7_M1_M14_M34_M48(nullptr) {}
  ~Message7_M1_M14_M34_M48() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M1_M14_M34_M48(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M1_M14_M34_M48(const Message7_M1_M14_M34_M48& from) : Message7_M1_M14_M34_M48(nullptr, from) {}
  inline Message7_M1_M14_M34_M48(Message7_M1_M14_M34_M48&& from) noexcept
      : Message7_M1_M14_M34_M48(nullptr, std::move(from)) {}
  inline Message7_M1_M14_M34_M48& operator=(const Message7_M1_M14_M34_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M1_M14_M34_M48& operator=(Message7_M1_M14_M34_M48&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M1_M14_M34_M48& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M1_M14_M34_M48* internal_default_instance() {
    return reinterpret_cast<const Message7_M1_M14_M34_M48*>(
        &_Message7_M1_M14_M34_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message7_M1_M14_M34_M48& a, Message7_M1_M14_M34_M48& b) { a.Swap(&b); }
  inline void Swap(Message7_M1_M14_M34_M48* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M1_M14_M34_M48* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M1_M14_M34_M48* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M1_M14_M34_M48>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M1_M14_M34_M48& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M1_M14_M34_M48& from) { Message7_M1_M14_M34_M48::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M1_M14_M34_M48* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M1.M14.M34.M48"; }

 protected:
  explicit Message7_M1_M14_M34_M48(::google::protobuf::Arena* arena);
  Message7_M1_M14_M34_M48(::google::protobuf::Arena* arena, const Message7_M1_M14_M34_M48& from);
  Message7_M1_M14_M34_M48(::google::protobuf::Arena* arena, Message7_M1_M14_M34_M48&& from) noexcept
      : Message7_M1_M14_M34_M48(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M1.M14.M34.M48)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M1_M14_M34_M48_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M9_M15_M23 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9.M15.M23) */ {
 public:
  inline Message7_M9_M15_M23() : Message7_M9_M15_M23(nullptr) {}
  ~Message7_M9_M15_M23() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9_M15_M23(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9_M15_M23(const Message7_M9_M15_M23& from) : Message7_M9_M15_M23(nullptr, from) {}
  inline Message7_M9_M15_M23(Message7_M9_M15_M23&& from) noexcept
      : Message7_M9_M15_M23(nullptr, std::move(from)) {}
  inline Message7_M9_M15_M23& operator=(const Message7_M9_M15_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9_M15_M23& operator=(Message7_M9_M15_M23&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9_M15_M23& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9_M15_M23* internal_default_instance() {
    return reinterpret_cast<const Message7_M9_M15_M23*>(
        &_Message7_M9_M15_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 98;
  friend void swap(Message7_M9_M15_M23& a, Message7_M9_M15_M23& b) { a.Swap(&b); }
  inline void Swap(Message7_M9_M15_M23* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9_M15_M23* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9_M15_M23* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9_M15_M23>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9_M15_M23& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9_M15_M23& from) { Message7_M9_M15_M23::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9_M15_M23* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9.M15.M23"; }

 protected:
  explicit Message7_M9_M15_M23(::google::protobuf::Arena* arena);
  Message7_M9_M15_M23(::google::protobuf::Arena* arena, const Message7_M9_M15_M23& from);
  Message7_M9_M15_M23(::google::protobuf::Arena* arena, Message7_M9_M15_M23&& from) noexcept
      : Message7_M9_M15_M23(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M41 = Message7_M9_M15_M23_M41;
  using M54 = Message7_M9_M15_M23_M54;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M9.M15.M23.M41 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M9_M15_M23_M41& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M9_M15_M23_M41* release_f_1();
  ::fleetbench::proto::Message7_M9_M15_M23_M41* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M9_M15_M23_M41* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M9_M15_M23_M41* value);
  ::fleetbench::proto::Message7_M9_M15_M23_M41* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M9_M15_M23_M41& _internal_f_1() const;
  ::fleetbench::proto::Message7_M9_M15_M23_M41* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M9.M15.M23.M54 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M9_M15_M23_M54& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M9_M15_M23_M54* release_f_3();
  ::fleetbench::proto::Message7_M9_M15_M23_M54* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M23_M54* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M23_M54* value);
  ::fleetbench::proto::Message7_M9_M15_M23_M54* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M9_M15_M23_M54& _internal_f_3() const;
  ::fleetbench::proto::Message7_M9_M15_M23_M54* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9.M15.M23)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_M15_M23_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M9_M15_M23_M41* f_1_;
    ::fleetbench::proto::Message7_M9_M15_M23_M54* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M25 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M25) */ {
 public:
  inline Message7_M8_M18_M25() : Message7_M8_M18_M25(nullptr) {}
  ~Message7_M8_M18_M25() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M25(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M25(const Message7_M8_M18_M25& from) : Message7_M8_M18_M25(nullptr, from) {}
  inline Message7_M8_M18_M25(Message7_M8_M18_M25&& from) noexcept
      : Message7_M8_M18_M25(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M25& operator=(const Message7_M8_M18_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M25& operator=(Message7_M8_M18_M25&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M25& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M25* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M25*>(
        &_Message7_M8_M18_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 92;
  friend void swap(Message7_M8_M18_M25& a, Message7_M8_M18_M25& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M25* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M25* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M25* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M25>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M25& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M25& from) { Message7_M8_M18_M25::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M25* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M25"; }

 protected:
  explicit Message7_M8_M18_M25(::google::protobuf::Arena* arena);
  Message7_M8_M18_M25(::google::protobuf::Arena* arena, const Message7_M8_M18_M25& from);
  Message7_M8_M18_M25(::google::protobuf::Arena* arena, Message7_M8_M18_M25&& from) noexcept
      : Message7_M8_M18_M25(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M42 = Message7_M8_M18_M25_M42;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message7.M8.M18.M25.M42 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M8_M18_M25_M42* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M8_M18_M25_M42& f_4(int index) const;
  ::fleetbench::proto::Message7_M8_M18_M25_M42* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>& f_4() const;
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional uint32 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M25)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M25_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M8_M18_M25_M42 > f_4_;
    ::uint32_t f_0_;
    ::uint32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22_M55 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22.M55) */ {
 public:
  inline Message7_M8_M18_M22_M55() : Message7_M8_M18_M22_M55(nullptr) {}
  ~Message7_M8_M18_M22_M55() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22_M55(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22_M55(const Message7_M8_M18_M22_M55& from) : Message7_M8_M18_M22_M55(nullptr, from) {}
  inline Message7_M8_M18_M22_M55(Message7_M8_M18_M22_M55&& from) noexcept
      : Message7_M8_M18_M22_M55(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22_M55& operator=(const Message7_M8_M18_M22_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22_M55& operator=(Message7_M8_M18_M22_M55&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22_M55& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22_M55* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22_M55*>(
        &_Message7_M8_M18_M22_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 89;
  friend void swap(Message7_M8_M18_M22_M55& a, Message7_M8_M18_M22_M55& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22_M55* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22_M55* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22_M55* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22_M55>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22_M55& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22_M55& from) { Message7_M8_M18_M22_M55::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22_M55* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22.M55"; }

 protected:
  explicit Message7_M8_M18_M22_M55(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22_M55(::google::protobuf::Arena* arena, const Message7_M8_M18_M22_M55& from);
  Message7_M8_M18_M22_M55(::google::protobuf::Arena* arena, Message7_M8_M18_M22_M55&& from) noexcept
      : Message7_M8_M18_M22_M55(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M57 = Message7_M8_M18_M22_M55_M57;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message7.M8.M18.M22.M55.M57 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* release_f_2();
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M8_M18_M22_M55_M57* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M8_M18_M22_M55_M57* value);
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57& _internal_f_2() const;
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22.M55)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_M55_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M16_M28_M40 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M16.M28.M40) */ {
 public:
  inline Message7_M8_M16_M28_M40() : Message7_M8_M16_M28_M40(nullptr) {}
  ~Message7_M8_M16_M28_M40() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M16_M28_M40(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M16_M28_M40(const Message7_M8_M16_M28_M40& from) : Message7_M8_M16_M28_M40(nullptr, from) {}
  inline Message7_M8_M16_M28_M40(Message7_M8_M16_M28_M40&& from) noexcept
      : Message7_M8_M16_M28_M40(nullptr, std::move(from)) {}
  inline Message7_M8_M16_M28_M40& operator=(const Message7_M8_M16_M28_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M16_M28_M40& operator=(Message7_M8_M16_M28_M40&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M16_M28_M40& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M16_M28_M40* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M16_M28_M40*>(
        &_Message7_M8_M16_M28_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 80;
  friend void swap(Message7_M8_M16_M28_M40& a, Message7_M8_M16_M28_M40& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M16_M28_M40* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M16_M28_M40* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M16_M28_M40* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M16_M28_M40>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M16_M28_M40& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M16_M28_M40& from) { Message7_M8_M16_M28_M40::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M16_M28_M40* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M16.M28.M40"; }

 protected:
  explicit Message7_M8_M16_M28_M40(::google::protobuf::Arena* arena);
  Message7_M8_M16_M28_M40(::google::protobuf::Arena* arena, const Message7_M8_M16_M28_M40& from);
  Message7_M8_M16_M28_M40(::google::protobuf::Arena* arena, Message7_M8_M16_M28_M40&& from) noexcept
      : Message7_M8_M16_M28_M40(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M58 = Message7_M8_M16_M28_M40_M58;
  using E32 = Message7_M8_M16_M28_M40_E32;
  static constexpr E32 E32_UNSPECIFIED = Message7_M8_M16_M28_M40_E32_E32_UNSPECIFIED;
  static constexpr E32 E32_CONST_1 = Message7_M8_M16_M28_M40_E32_E32_CONST_1;
  static constexpr E32 E32_CONST_2 = Message7_M8_M16_M28_M40_E32_E32_CONST_2;
  static constexpr E32 E32_CONST_3 = Message7_M8_M16_M28_M40_E32_E32_CONST_3;
  static constexpr E32 E32_CONST_4 = Message7_M8_M16_M28_M40_E32_E32_CONST_4;
  static constexpr E32 E32_CONST_5 = Message7_M8_M16_M28_M40_E32_E32_CONST_5;
  static inline bool E32_IsValid(int value) {
    return Message7_M8_M16_M28_M40_E32_IsValid(value);
  }
  static constexpr E32 E32_MIN = Message7_M8_M16_M28_M40_E32_E32_MIN;
  static constexpr E32 E32_MAX = Message7_M8_M16_M28_M40_E32_E32_MAX;
  static constexpr int E32_ARRAYSIZE = Message7_M8_M16_M28_M40_E32_E32_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E32_descriptor() {
    return Message7_M8_M16_M28_M40_E32_descriptor();
  }
  template <typename T>
  static inline const std::string& E32_Name(T value) {
    return Message7_M8_M16_M28_M40_E32_Name(value);
  }
  static inline bool E32_Parse(absl::string_view name, E32* value) {
    return Message7_M8_M16_M28_M40_E32_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M8.M16.M28.M40.M58 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* release_f_1();
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M8_M16_M28_M40_M58* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M16_M28_M40_M58* value);
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58& _internal_f_1() const;
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M8.M16.M28.M40.E32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M8_M16_M28_M40_E32 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_E32 value);

  private:
  ::fleetbench::proto::Message7_M8_M16_M28_M40_E32 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_E32 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M16.M28.M40)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M16_M28_M40_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63_M68_M77 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77() : Message7_M6_M12_M30_M49_M59_M63_M68_M77(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63_M68_M77() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63_M68_M77(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77(const Message7_M6_M12_M30_M49_M59_M63_M68_M77& from) : Message7_M6_M12_M30_M49_M59_M63_M68_M77(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77(Message7_M6_M12_M30_M49_M59_M63_M68_M77&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M77(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77& operator=(const Message7_M6_M12_M30_M49_M59_M63_M68_M77& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63_M68_M77& operator=(Message7_M6_M12_M30_M49_M59_M63_M68_M77&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63_M68_M77& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63_M68_M77* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63_M68_M77*>(
        &_Message7_M6_M12_M30_M49_M59_M63_M68_M77_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 67;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63_M68_M77& a, Message7_M6_M12_M30_M49_M59_M63_M68_M77& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63_M68_M77* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M77* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63_M68_M77* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63_M68_M77>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M77& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63_M68_M77& from) { Message7_M6_M12_M30_M49_M59_M63_M68_M77::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63_M68_M77* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63_M68_M77(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63_M68_M77(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63_M68_M77& from);
  Message7_M6_M12_M30_M49_M59_M63_M68_M77(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63_M68_M77&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68_M77(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M86 = Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* release_f_1();
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& _internal_f_1() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_M68_M77_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M35 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M35) */ {
 public:
  inline Message7_M6_M12_M30_M35() : Message7_M6_M12_M30_M35(nullptr) {}
  ~Message7_M6_M12_M30_M35() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M35(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M35(const Message7_M6_M12_M30_M35& from) : Message7_M6_M12_M30_M35(nullptr, from) {}
  inline Message7_M6_M12_M30_M35(Message7_M6_M12_M30_M35&& from) noexcept
      : Message7_M6_M12_M30_M35(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M35& operator=(const Message7_M6_M12_M30_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M35& operator=(Message7_M6_M12_M30_M35&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M35& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M35* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M35*>(
        &_Message7_M6_M12_M30_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(Message7_M6_M12_M30_M35& a, Message7_M6_M12_M30_M35& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M35* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M35* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M35* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M35>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M35& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M35& from) { Message7_M6_M12_M30_M35::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M35* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M35"; }

 protected:
  explicit Message7_M6_M12_M30_M35(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M35(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M35& from);
  Message7_M6_M12_M30_M35(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M35&& from) noexcept
      : Message7_M6_M12_M30_M35(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M61 = Message7_M6_M12_M30_M35_M61;
  using E28 = Message7_M6_M12_M30_M35_E28;
  static constexpr E28 E28_UNSPECIFIED = Message7_M6_M12_M30_M35_E28_E28_UNSPECIFIED;
  static constexpr E28 E28_CONST_1 = Message7_M6_M12_M30_M35_E28_E28_CONST_1;
  static constexpr E28 E28_CONST_2 = Message7_M6_M12_M30_M35_E28_E28_CONST_2;
  static constexpr E28 E28_CONST_3 = Message7_M6_M12_M30_M35_E28_E28_CONST_3;
  static constexpr E28 E28_CONST_4 = Message7_M6_M12_M30_M35_E28_E28_CONST_4;
  static constexpr E28 E28_CONST_5 = Message7_M6_M12_M30_M35_E28_E28_CONST_5;
  static inline bool E28_IsValid(int value) {
    return Message7_M6_M12_M30_M35_E28_IsValid(value);
  }
  static constexpr E28 E28_MIN = Message7_M6_M12_M30_M35_E28_E28_MIN;
  static constexpr E28 E28_MAX = Message7_M6_M12_M30_M35_E28_E28_MAX;
  static constexpr int E28_ARRAYSIZE = Message7_M6_M12_M30_M35_E28_E28_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E28_descriptor() {
    return Message7_M6_M12_M30_M35_E28_descriptor();
  }
  template <typename T>
  static inline const std::string& E28_Name(T value) {
    return Message7_M6_M12_M30_M35_E28_Name(value);
  }
  static inline bool E28_Parse(absl::string_view name, E28* value) {
    return Message7_M6_M12_M30_M35_E28_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M6.M12.M30.M35.M61 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30_M35_M61& f_2(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>& f_2() const;
  // optional .fleetbench.proto.Message7.M6.M12.M30.M35.E28 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M35_E28 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_E28 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M35_E28 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_E28 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M35)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M35_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30_M35_M61 > f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M24 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M24) */ {
 public:
  inline Message7_M6_M12_M24() : Message7_M6_M12_M24(nullptr) {}
  ~Message7_M6_M12_M24() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M24(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M24(const Message7_M6_M12_M24& from) : Message7_M6_M12_M24(nullptr, from) {}
  inline Message7_M6_M12_M24(Message7_M6_M12_M24&& from) noexcept
      : Message7_M6_M12_M24(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M24& operator=(const Message7_M6_M12_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M24& operator=(Message7_M6_M12_M24&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M24& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M24* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M24*>(
        &_Message7_M6_M12_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(Message7_M6_M12_M24& a, Message7_M6_M12_M24& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M24* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M24* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M24* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M24>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M24& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M24& from) { Message7_M6_M12_M24::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M24* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M24"; }

 protected:
  explicit Message7_M6_M12_M24(::google::protobuf::Arena* arena);
  Message7_M6_M12_M24(::google::protobuf::Arena* arena, const Message7_M6_M12_M24& from);
  Message7_M6_M12_M24(::google::protobuf::Arena* arena, Message7_M6_M12_M24&& from) noexcept
      : Message7_M6_M12_M24(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M36 = Message7_M6_M12_M24_M36;
  using M51 = Message7_M6_M12_M24_M51;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message7.M6.M12.M24.M36 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M6_M12_M24_M36& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M24_M36* release_f_2();
  ::fleetbench::proto::Message7_M6_M12_M24_M36* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M6_M12_M24_M36* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M12_M24_M36* value);
  ::fleetbench::proto::Message7_M6_M12_M24_M36* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M24_M36& _internal_f_2() const;
  ::fleetbench::proto::Message7_M6_M12_M24_M36* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M24.M51 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M6_M12_M24_M51& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M24_M51* release_f_3();
  ::fleetbench::proto::Message7_M6_M12_M24_M51* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M6_M12_M24_M51* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M6_M12_M24_M51* value);
  ::fleetbench::proto::Message7_M6_M12_M24_M51* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M24_M51& _internal_f_3() const;
  ::fleetbench::proto::Message7_M6_M12_M24_M51* _internal_mutable_f_3();

  public:
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M24)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M24_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M6_M12_M24_M36* f_2_;
    ::fleetbench::proto::Message7_M6_M12_M24_M51* f_3_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M10_M32 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M10.M32) */ {
 public:
  inline Message7_M6_M10_M32() : Message7_M6_M10_M32(nullptr) {}
  ~Message7_M6_M10_M32() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M10_M32(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M10_M32(const Message7_M6_M10_M32& from) : Message7_M6_M10_M32(nullptr, from) {}
  inline Message7_M6_M10_M32(Message7_M6_M10_M32&& from) noexcept
      : Message7_M6_M10_M32(nullptr, std::move(from)) {}
  inline Message7_M6_M10_M32& operator=(const Message7_M6_M10_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M10_M32& operator=(Message7_M6_M10_M32&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M10_M32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M10_M32* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M10_M32*>(
        &_Message7_M6_M10_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(Message7_M6_M10_M32& a, Message7_M6_M10_M32& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M10_M32* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M10_M32* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M10_M32* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M10_M32>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M10_M32& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M10_M32& from) { Message7_M6_M10_M32::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M10_M32* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M10.M32"; }

 protected:
  explicit Message7_M6_M10_M32(::google::protobuf::Arena* arena);
  Message7_M6_M10_M32(::google::protobuf::Arena* arena, const Message7_M6_M10_M32& from);
  Message7_M6_M10_M32(::google::protobuf::Arena* arena, Message7_M6_M10_M32&& from) noexcept
      : Message7_M6_M10_M32(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M43 = Message7_M6_M10_M32_M43;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message7.M6.M10.M32.M43 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M6_M10_M32_M43* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M6_M10_M32_M43& f_4(int index) const;
  ::fleetbench::proto::Message7_M6_M10_M32_M43* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>& f_4() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional float f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M10.M32)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M10_M32_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M10_M32_M43 > f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int32_t f_1_;
    float f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M10_M27 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M10.M27) */ {
 public:
  inline Message7_M6_M10_M27() : Message7_M6_M10_M27(nullptr) {}
  ~Message7_M6_M10_M27() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M10_M27(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M10_M27(const Message7_M6_M10_M27& from) : Message7_M6_M10_M27(nullptr, from) {}
  inline Message7_M6_M10_M27(Message7_M6_M10_M27&& from) noexcept
      : Message7_M6_M10_M27(nullptr, std::move(from)) {}
  inline Message7_M6_M10_M27& operator=(const Message7_M6_M10_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M10_M27& operator=(Message7_M6_M10_M27&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M10_M27& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M10_M27* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M10_M27*>(
        &_Message7_M6_M10_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(Message7_M6_M10_M27& a, Message7_M6_M10_M27& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M10_M27* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M10_M27* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M10_M27* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M10_M27>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M10_M27& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M10_M27& from) { Message7_M6_M10_M27::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M10_M27* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M10.M27"; }

 protected:
  explicit Message7_M6_M10_M27(::google::protobuf::Arena* arena);
  Message7_M6_M10_M27(::google::protobuf::Arena* arena, const Message7_M6_M10_M27& from);
  Message7_M6_M10_M27(::google::protobuf::Arena* arena, Message7_M6_M10_M27&& from) noexcept
      : Message7_M6_M10_M27(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M50 = Message7_M6_M10_M27_M50;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M6.M10.M27.M50 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M6_M10_M27_M50& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M10_M27_M50* release_f_2();
  ::fleetbench::proto::Message7_M6_M10_M27_M50* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27_M50* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27_M50* value);
  ::fleetbench::proto::Message7_M6_M10_M27_M50* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M6_M10_M27_M50& _internal_f_2() const;
  ::fleetbench::proto::Message7_M6_M10_M27_M50* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M10.M27)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M10_M27_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M6_M10_M27_M50* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M5_M13_M31 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M5.M13.M31) */ {
 public:
  inline Message7_M5_M13_M31() : Message7_M5_M13_M31(nullptr) {}
  ~Message7_M5_M13_M31() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M5_M13_M31(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M5_M13_M31(const Message7_M5_M13_M31& from) : Message7_M5_M13_M31(nullptr, from) {}
  inline Message7_M5_M13_M31(Message7_M5_M13_M31&& from) noexcept
      : Message7_M5_M13_M31(nullptr, std::move(from)) {}
  inline Message7_M5_M13_M31& operator=(const Message7_M5_M13_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M5_M13_M31& operator=(Message7_M5_M13_M31&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M5_M13_M31& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M5_M13_M31* internal_default_instance() {
    return reinterpret_cast<const Message7_M5_M13_M31*>(
        &_Message7_M5_M13_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Message7_M5_M13_M31& a, Message7_M5_M13_M31& b) { a.Swap(&b); }
  inline void Swap(Message7_M5_M13_M31* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M5_M13_M31* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M5_M13_M31* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M5_M13_M31>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M5_M13_M31& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M5_M13_M31& from) { Message7_M5_M13_M31::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M5_M13_M31* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M5.M13.M31"; }

 protected:
  explicit Message7_M5_M13_M31(::google::protobuf::Arena* arena);
  Message7_M5_M13_M31(::google::protobuf::Arena* arena, const Message7_M5_M13_M31& from);
  Message7_M5_M13_M31(::google::protobuf::Arena* arena, Message7_M5_M13_M31&& from) noexcept
      : Message7_M5_M13_M31(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M39 = Message7_M5_M13_M31_M39;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M5.M13.M31.M39 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M5_M13_M31_M39& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M5_M13_M31_M39* release_f_1();
  ::fleetbench::proto::Message7_M5_M13_M31_M39* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M5_M13_M31_M39* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M5_M13_M31_M39* value);
  ::fleetbench::proto::Message7_M5_M13_M31_M39* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M5_M13_M31_M39& _internal_f_1() const;
  ::fleetbench::proto::Message7_M5_M13_M31_M39* _internal_mutable_f_1();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M5.M13.M31)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M5_M13_M31_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M5_M13_M31_M39* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M3) */ {
 public:
  inline Message7_M3() : Message7_M3(nullptr) {}
  ~Message7_M3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M3(const Message7_M3& from) : Message7_M3(nullptr, from) {}
  inline Message7_M3(Message7_M3&& from) noexcept
      : Message7_M3(nullptr, std::move(from)) {}
  inline Message7_M3& operator=(const Message7_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M3& operator=(Message7_M3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M3* internal_default_instance() {
    return reinterpret_cast<const Message7_M3*>(
        &_Message7_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Message7_M3& a, Message7_M3& b) { a.Swap(&b); }
  inline void Swap(Message7_M3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M3& from) { Message7_M3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M3"; }

 protected:
  explicit Message7_M3(::google::protobuf::Arena* arena);
  Message7_M3(::google::protobuf::Arena* arena, const Message7_M3& from);
  Message7_M3(::google::protobuf::Arena* arena, Message7_M3&& from) noexcept
      : Message7_M3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M11 = Message7_M3_M11;
  using M17 = Message7_M3_M17;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M3.M17 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M3_M17* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M3_M17& f_2(int index) const;
  ::fleetbench::proto::Message7_M3_M17* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>& f_2() const;
  // optional .fleetbench.proto.Message7.M3.M11 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M3_M11& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M3_M11* release_f_1();
  ::fleetbench::proto::Message7_M3_M11* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M3_M11* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M3_M11* value);
  ::fleetbench::proto::Message7_M3_M11* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M3_M11& _internal_f_1() const;
  ::fleetbench::proto::Message7_M3_M11* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M3_M17 > f_2_;
    ::fleetbench::proto::Message7_M3_M11* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92() : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& from) : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& operator=(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& a, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& from) { Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& from);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M93 = Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* _internal_mutable_f_1();

  public:
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M67 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M67() : Message7_M2_M19_M29_M38_M60_M64_M67(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M67() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M67(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M67(const Message7_M2_M19_M29_M38_M60_M64_M67& from) : Message7_M2_M19_M29_M38_M60_M64_M67(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67(Message7_M2_M19_M29_M38_M60_M64_M67&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M67& operator=(const Message7_M2_M19_M29_M38_M60_M64_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M67& operator=(Message7_M2_M19_M29_M38_M60_M64_M67&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M67& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M67* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M67*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M67& a, Message7_M2_M19_M29_M38_M60_M64_M67& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M67* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M67* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M67* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M67>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M67& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M67& from) { Message7_M2_M19_M29_M38_M60_M64_M67::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M67* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M67(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M67(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M67& from);
  Message7_M2_M19_M29_M38_M60_M64_M67(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M67&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M67(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M76 = Message7_M2_M19_M29_M38_M60_M64_M67_M76;
  using M79 = Message7_M2_M19_M29_M38_M60_M64_M67_M79;
  using E42 = Message7_M2_M19_M29_M38_M60_M64_M67_E42;
  static constexpr E42 E42_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_UNSPECIFIED;
  static constexpr E42 E42_CONST_1 = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_1;
  static constexpr E42 E42_CONST_2 = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_2;
  static constexpr E42 E42_CONST_3 = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_3;
  static constexpr E42 E42_CONST_4 = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_4;
  static constexpr E42 E42_CONST_5 = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_CONST_5;
  static inline bool E42_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M64_M67_E42_IsValid(value);
  }
  static constexpr E42 E42_MIN = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_MIN;
  static constexpr E42 E42_MAX = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_MAX;
  static constexpr int E42_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M64_M67_E42_E42_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E42_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M64_M67_E42_descriptor();
  }
  template <typename T>
  static inline const std::string& E42_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M64_M67_E42_Name(value);
  }
  static inline bool E42_Parse(absl::string_view name, E42* value) {
    return Message7_M2_M19_M29_M38_M60_M64_M67_E42_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_1().size());
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF5FieldNumber = 7,
    kF1FieldNumber = 3,
    kF7FieldNumber = 9,
    kF0FieldNumber = 1,
    kF2FieldNumber = 5,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76 f_5 = 7;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76* mutable_f_5(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>* _internal_mutable_f_5();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76& f_5(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76* add_f_5();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>& f_5() const;
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79 f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* release_f_7();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79& _internal_f_7() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* _internal_mutable_f_7();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.E42 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 f_2() const;
  void set_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      64, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M67_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76 > f_5_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* f_7_;
    ::uint64_t f_0_;
    int f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90() : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& a, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M94 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94;
  using E47 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47;
  static constexpr E47 E47_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_UNSPECIFIED;
  static constexpr E47 E47_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_1;
  static constexpr E47 E47_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_2;
  static constexpr E47 E47_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_3;
  static constexpr E47 E47_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_4;
  static constexpr E47 E47_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_CONST_5;
  static inline bool E47_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_IsValid(value);
  }
  static constexpr E47 E47_MIN = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_MIN;
  static constexpr E47 E47_MAX = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_MAX;
  static constexpr int E47_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_E47_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E47_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_descriptor();
  }
  template <typename T>
  static inline const std::string& E47_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_Name(value);
  }
  static inline bool E47_Parse(absl::string_view name, E47* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>& f_2() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.E47 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94 > f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M80 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80() : Message7_M2_M19_M29_M38_M60_M62_M69_M80(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M80() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M80(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80(const Message7_M2_M19_M29_M38_M60_M62_M69_M80& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M80(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80(Message7_M2_M19_M29_M38_M60_M62_M69_M80&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M80(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M80& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M80& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M80&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M80& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M80* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M80*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M80_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M80& a, Message7_M2_M19_M29_M38_M60_M62_M69_M80& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M80* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M80* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M80* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M80>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M80& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M80& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M80::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M80* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M80(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M80(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M80& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M80(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M80&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M80(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M84 = Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>& f_2() const;
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M80_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84 > f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M102 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& f_1(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>& f_1() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      106, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M21 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M21) */ {
 public:
  inline Message7_M2_M19_M21() : Message7_M2_M19_M21(nullptr) {}
  ~Message7_M2_M19_M21() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M21(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M21(const Message7_M2_M19_M21& from) : Message7_M2_M19_M21(nullptr, from) {}
  inline Message7_M2_M19_M21(Message7_M2_M19_M21&& from) noexcept
      : Message7_M2_M19_M21(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M21& operator=(const Message7_M2_M19_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M21& operator=(Message7_M2_M19_M21&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M21& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M21* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M21*>(
        &_Message7_M2_M19_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Message7_M2_M19_M21& a, Message7_M2_M19_M21& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M21* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M21* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M21* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M21>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M21& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M21& from) { Message7_M2_M19_M21::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M21* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M21"; }

 protected:
  explicit Message7_M2_M19_M21(::google::protobuf::Arena* arena);
  Message7_M2_M19_M21(::google::protobuf::Arena* arena, const Message7_M2_M19_M21& from);
  Message7_M2_M19_M21(::google::protobuf::Arena* arena, Message7_M2_M19_M21&& from) noexcept
      : Message7_M2_M19_M21(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M44 = Message7_M2_M19_M21_M44;
  using M53 = Message7_M2_M19_M21_M53;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M21.M44 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M21_M44* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M21_M44& f_1(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M21_M44* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>& f_1() const;
  // optional .fleetbench.proto.Message7.M2.M19.M21.M53 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M2_M19_M21_M53& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M21_M53* release_f_2();
  ::fleetbench::proto::Message7_M2_M19_M21_M53* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M21_M53* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M21_M53* value);
  ::fleetbench::proto::Message7_M2_M19_M21_M53* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M21_M53& _internal_f_2() const;
  ::fleetbench::proto::Message7_M2_M19_M21_M53* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M21)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M21_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M21_M44 > f_1_;
    ::fleetbench::proto::Message7_M2_M19_M21_M53* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M1_M14_M34 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M1.M14.M34) */ {
 public:
  inline Message7_M1_M14_M34() : Message7_M1_M14_M34(nullptr) {}
  ~Message7_M1_M14_M34() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M1_M14_M34(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M1_M14_M34(const Message7_M1_M14_M34& from) : Message7_M1_M14_M34(nullptr, from) {}
  inline Message7_M1_M14_M34(Message7_M1_M14_M34&& from) noexcept
      : Message7_M1_M14_M34(nullptr, std::move(from)) {}
  inline Message7_M1_M14_M34& operator=(const Message7_M1_M14_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M1_M14_M34& operator=(Message7_M1_M14_M34&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M1_M14_M34& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M1_M14_M34* internal_default_instance() {
    return reinterpret_cast<const Message7_M1_M14_M34*>(
        &_Message7_M1_M14_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message7_M1_M14_M34& a, Message7_M1_M14_M34& b) { a.Swap(&b); }
  inline void Swap(Message7_M1_M14_M34* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M1_M14_M34* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M1_M14_M34* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M1_M14_M34>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M1_M14_M34& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M1_M14_M34& from) { Message7_M1_M14_M34::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M1_M14_M34* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M1.M14.M34"; }

 protected:
  explicit Message7_M1_M14_M34(::google::protobuf::Arena* arena);
  Message7_M1_M14_M34(::google::protobuf::Arena* arena, const Message7_M1_M14_M34& from);
  Message7_M1_M14_M34(::google::protobuf::Arena* arena, Message7_M1_M14_M34&& from) noexcept
      : Message7_M1_M14_M34(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M48 = Message7_M1_M14_M34_M48;
  using E26 = Message7_M1_M14_M34_E26;
  static constexpr E26 E26_UNSPECIFIED = Message7_M1_M14_M34_E26_E26_UNSPECIFIED;
  static constexpr E26 E26_CONST_1 = Message7_M1_M14_M34_E26_E26_CONST_1;
  static constexpr E26 E26_CONST_2 = Message7_M1_M14_M34_E26_E26_CONST_2;
  static constexpr E26 E26_CONST_3 = Message7_M1_M14_M34_E26_E26_CONST_3;
  static constexpr E26 E26_CONST_4 = Message7_M1_M14_M34_E26_E26_CONST_4;
  static constexpr E26 E26_CONST_5 = Message7_M1_M14_M34_E26_E26_CONST_5;
  static inline bool E26_IsValid(int value) {
    return Message7_M1_M14_M34_E26_IsValid(value);
  }
  static constexpr E26 E26_MIN = Message7_M1_M14_M34_E26_E26_MIN;
  static constexpr E26 E26_MAX = Message7_M1_M14_M34_E26_E26_MAX;
  static constexpr int E26_ARRAYSIZE = Message7_M1_M14_M34_E26_E26_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E26_descriptor() {
    return Message7_M1_M14_M34_E26_descriptor();
  }
  template <typename T>
  static inline const std::string& E26_Name(T value) {
    return Message7_M1_M14_M34_E26_Name(value);
  }
  static inline bool E26_Parse(absl::string_view name, E26* value) {
    return Message7_M1_M14_M34_E26_Parse(name, value);
  }
  using E27 = Message7_M1_M14_M34_E27;
  static constexpr E27 E27_UNSPECIFIED = Message7_M1_M14_M34_E27_E27_UNSPECIFIED;
  static constexpr E27 E27_CONST_1 = Message7_M1_M14_M34_E27_E27_CONST_1;
  static constexpr E27 E27_CONST_2 = Message7_M1_M14_M34_E27_E27_CONST_2;
  static constexpr E27 E27_CONST_3 = Message7_M1_M14_M34_E27_E27_CONST_3;
  static constexpr E27 E27_CONST_4 = Message7_M1_M14_M34_E27_E27_CONST_4;
  static constexpr E27 E27_CONST_5 = Message7_M1_M14_M34_E27_E27_CONST_5;
  static inline bool E27_IsValid(int value) {
    return Message7_M1_M14_M34_E27_IsValid(value);
  }
  static constexpr E27 E27_MIN = Message7_M1_M14_M34_E27_E27_MIN;
  static constexpr E27 E27_MAX = Message7_M1_M14_M34_E27_E27_MAX;
  static constexpr int E27_ARRAYSIZE = Message7_M1_M14_M34_E27_E27_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E27_descriptor() {
    return Message7_M1_M14_M34_E27_descriptor();
  }
  template <typename T>
  static inline const std::string& E27_Name(T value) {
    return Message7_M1_M14_M34_E27_Name(value);
  }
  static inline bool E27_Parse(absl::string_view name, E27* value) {
    return Message7_M1_M14_M34_E27_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_20_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_20())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_4().data())), f_4().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_9().data())), f_9().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())), f_13().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())), f_17().size()));
      mutable_f_31()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_20_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_20()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_4().data())));
      sizes_list.push_back(f_4().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_9().data())));
      sizes_list.push_back(f_9().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      sizes_list.push_back(f_13().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      sizes_list.push_back(f_17().size());
      mutable_f_31()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_20_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_4().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_9().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      mutable_f_31()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_20_);
      sizes.push_back(end_addr - start_addr + sizeof(f_20()));
      sizes.push_back(f_4().size() * sizeof(::int32_t));
      sizes.push_back(f_9().size() * sizeof(::int32_t));
      sizes.push_back(f_8().size());
      sizes.push_back(f_11().size());
      sizes.push_back(f_13().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_17().size());
      mutable_f_31()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_20_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_4()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_4().data())));
      mutable_f_9()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_9().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      }
      idx = mutable_f_31()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_4()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_9()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
      }
      idx = mutable_f_31()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 8,
    kF9FieldNumber = 15,
    kF8FieldNumber = 14,
    kF11FieldNumber = 19,
    kF13FieldNumber = 23,
    kF16FieldNumber = 26,
    kF17FieldNumber = 27,
    kF31FieldNumber = 32,
    kF0FieldNumber = 1,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF1FieldNumber = 3,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF7FieldNumber = 12,
    kF10FieldNumber = 17,
    kF12FieldNumber = 22,
    kF15FieldNumber = 25,
    kF14FieldNumber = 24,
    kF18FieldNumber = 28,
    kF19FieldNumber = 29,
    kF20FieldNumber = 31,
  };
  // repeated int32 f_4 = 8 [packed = true];
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::int32_t f_4(int index) const;
  void set_f_4(int index, ::int32_t value);
  void add_f_4(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_4() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_4() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_4();

  public:
  // repeated int32 f_9 = 15 [packed = true];
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::int32_t f_9(int index) const;
  void set_f_9(int index, ::int32_t value);
  void add_f_9(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_9() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_9() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_9();

  public:
  // optional bytes f_8 = 14;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional string f_11 = 19;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional string f_13 = 23;
  bool has_f_13() const;
  void clear_f_13() ;
  const std::string& f_13() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_13(Arg_&& arg, Args_... args);
  std::string* mutable_f_13();
  PROTOBUF_NODISCARD std::string* release_f_13();
  void set_allocated_f_13(std::string* value);

  private:
  const std::string& _internal_f_13() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_13(
      const std::string& value);
  std::string* _internal_mutable_f_13();

  public:
  // optional string f_16 = 26;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_17 = 27;
  bool has_f_17() const;
  void clear_f_17() ;
  const std::string& f_17() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_17(Arg_&& arg, Args_... args);
  std::string* mutable_f_17();
  PROTOBUF_NODISCARD std::string* release_f_17();
  void set_allocated_f_17(std::string* value);

  private:
  const std::string& _internal_f_17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_17(
      const std::string& value);
  std::string* _internal_mutable_f_17();

  public:
  // optional .fleetbench.proto.Message7.M1.M14.M34.M48 f_31 = 32;
  bool has_f_31() const;
  void clear_f_31() ;
  const ::fleetbench::proto::Message7_M1_M14_M34_M48& f_31() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M1_M14_M34_M48* release_f_31();
  ::fleetbench::proto::Message7_M1_M14_M34_M48* mutable_f_31();
  void set_allocated_f_31(::fleetbench::proto::Message7_M1_M14_M34_M48* value);
  void unsafe_arena_set_allocated_f_31(::fleetbench::proto::Message7_M1_M14_M34_M48* value);
  ::fleetbench::proto::Message7_M1_M14_M34_M48* unsafe_arena_release_f_31();

  private:
  const ::fleetbench::proto::Message7_M1_M14_M34_M48& _internal_f_31() const;
  ::fleetbench::proto::Message7_M1_M14_M34_M48* _internal_mutable_f_31();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int64 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int64 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M1.M14.M34.E26 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M1_M14_M34_E26 f_1() const;
  void set_f_1(::fleetbench::proto::Message7_M1_M14_M34_E26 value);

  private:
  ::fleetbench::proto::Message7_M1_M14_M34_E26 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message7_M1_M14_M34_E26 value);

  public:
  // optional bool f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  bool f_5() const;
  void set_f_5(bool value);

  private:
  bool _internal_f_5() const;
  void _internal_set_f_5(bool value);

  public:
  // optional uint32 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::uint32_t f_6() const;
  void set_f_6(::uint32_t value);

  private:
  ::uint32_t _internal_f_6() const;
  void _internal_set_f_6(::uint32_t value);

  public:
  // optional int32 f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int32_t f_7() const;
  void set_f_7(::int32_t value);

  private:
  ::int32_t _internal_f_7() const;
  void _internal_set_f_7(::int32_t value);

  public:
  // optional int64 f_10 = 17;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int64_t f_10() const;
  void set_f_10(::int64_t value);

  private:
  ::int64_t _internal_f_10() const;
  void _internal_set_f_10(::int64_t value);

  public:
  // optional int32 f_12 = 22;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int32_t f_12() const;
  void set_f_12(::int32_t value);

  private:
  ::int32_t _internal_f_12() const;
  void _internal_set_f_12(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M1.M14.M34.E27 f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  ::fleetbench::proto::Message7_M1_M14_M34_E27 f_15() const;
  void set_f_15(::fleetbench::proto::Message7_M1_M14_M34_E27 value);

  private:
  ::fleetbench::proto::Message7_M1_M14_M34_E27 _internal_f_15() const;
  void _internal_set_f_15(::fleetbench::proto::Message7_M1_M14_M34_E27 value);

  public:
  // optional int64 f_14 = 24;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // optional float f_18 = 28;
  bool has_f_18() const;
  void clear_f_18() ;
  float f_18() const;
  void set_f_18(float value);

  private:
  float _internal_f_18() const;
  void _internal_set_f_18(float value);

  public:
  // optional int32 f_19 = 29;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int32_t f_19() const;
  void set_f_19(::int32_t value);

  private:
  ::int32_t _internal_f_19() const;
  void _internal_set_f_19(::int32_t value);

  public:
  // optional int64 f_20 = 31;
  bool has_f_20() const;
  void clear_f_20() ;
  ::int64_t f_20() const;
  void set_f_20(::int64_t value);

  private:
  ::int64_t _internal_f_20() const;
  void _internal_set_f_20(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M1.M14.M34)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 22, 3,
      77, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M1_M14_M34_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_4_;
    mutable ::google::protobuf::internal::CachedSize _f_4_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_9_;
    mutable ::google::protobuf::internal::CachedSize _f_9_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_13_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_17_;
    ::fleetbench::proto::Message7_M1_M14_M34_M48* f_31_;
    ::uint64_t f_0_;
    ::int64_t f_2_;
    ::int64_t f_3_;
    int f_1_;
    bool f_5_;
    ::uint32_t f_6_;
    ::int32_t f_7_;
    ::int64_t f_10_;
    ::int32_t f_12_;
    int f_15_;
    ::int64_t f_14_;
    float f_18_;
    ::int32_t f_19_;
    ::int64_t f_20_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M9_M15 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9.M15) */ {
 public:
  inline Message7_M9_M15() : Message7_M9_M15(nullptr) {}
  ~Message7_M9_M15() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9_M15(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9_M15(const Message7_M9_M15& from) : Message7_M9_M15(nullptr, from) {}
  inline Message7_M9_M15(Message7_M9_M15&& from) noexcept
      : Message7_M9_M15(nullptr, std::move(from)) {}
  inline Message7_M9_M15& operator=(const Message7_M9_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9_M15& operator=(Message7_M9_M15&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9_M15& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9_M15* internal_default_instance() {
    return reinterpret_cast<const Message7_M9_M15*>(
        &_Message7_M9_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 100;
  friend void swap(Message7_M9_M15& a, Message7_M9_M15& b) { a.Swap(&b); }
  inline void Swap(Message7_M9_M15* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9_M15* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9_M15* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9_M15>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9_M15& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9_M15& from) { Message7_M9_M15::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9_M15* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9.M15"; }

 protected:
  explicit Message7_M9_M15(::google::protobuf::Arena* arena);
  Message7_M9_M15(::google::protobuf::Arena* arena, const Message7_M9_M15& from);
  Message7_M9_M15(::google::protobuf::Arena* arena, Message7_M9_M15&& from) noexcept
      : Message7_M9_M15(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M23 = Message7_M9_M15_M23;
  using M33 = Message7_M9_M15_M33;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M9.M15.M23 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M9_M15_M23* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M9_M15_M23& f_2(int index) const;
  ::fleetbench::proto::Message7_M9_M15_M23* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>& f_2() const;
  // optional .fleetbench.proto.Message7.M9.M15.M33 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M9_M15_M33& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M9_M15_M33* release_f_3();
  ::fleetbench::proto::Message7_M9_M15_M33* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M33* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M33* value);
  ::fleetbench::proto::Message7_M9_M15_M33* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M9_M15_M33& _internal_f_3() const;
  ::fleetbench::proto::Message7_M9_M15_M33* _internal_mutable_f_3();

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9.M15)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_M15_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M9_M15_M23 > f_2_;
    ::fleetbench::proto::Message7_M9_M15_M33* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18_M22 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18.M22) */ {
 public:
  inline Message7_M8_M18_M22() : Message7_M8_M18_M22(nullptr) {}
  ~Message7_M8_M18_M22() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18_M22(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18_M22(const Message7_M8_M18_M22& from) : Message7_M8_M18_M22(nullptr, from) {}
  inline Message7_M8_M18_M22(Message7_M8_M18_M22&& from) noexcept
      : Message7_M8_M18_M22(nullptr, std::move(from)) {}
  inline Message7_M8_M18_M22& operator=(const Message7_M8_M18_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18_M22& operator=(Message7_M8_M18_M22&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18_M22& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18_M22* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18_M22*>(
        &_Message7_M8_M18_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 90;
  friend void swap(Message7_M8_M18_M22& a, Message7_M8_M18_M22& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18_M22* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18_M22* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18_M22* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18_M22>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18_M22& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18_M22& from) { Message7_M8_M18_M22::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18_M22* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18.M22"; }

 protected:
  explicit Message7_M8_M18_M22(::google::protobuf::Arena* arena);
  Message7_M8_M18_M22(::google::protobuf::Arena* arena, const Message7_M8_M18_M22& from);
  Message7_M8_M18_M22(::google::protobuf::Arena* arena, Message7_M8_M18_M22&& from) noexcept
      : Message7_M8_M18_M22(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M45 = Message7_M8_M18_M22_M45;
  using M46 = Message7_M8_M18_M22_M46;
  using M47 = Message7_M8_M18_M22_M47;
  using M52 = Message7_M8_M18_M22_M52;
  using M55 = Message7_M8_M18_M22_M55;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
      mutable_f_9()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_9()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_9()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_10_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_10_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF10FieldNumber = 11,
    kF1FieldNumber = 5,
    kF5FieldNumber = 8,
    kF8FieldNumber = 9,
    kF9FieldNumber = 10,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M8.M18.M22.M55 f_10 = 11;
  int f_10_size() const;
  private:
  int _internal_f_10_size() const;

  public:
  void clear_f_10() ;
  ::fleetbench::proto::Message7_M8_M18_M22_M55* mutable_f_10(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>* mutable_f_10();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>& _internal_f_10() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>* _internal_mutable_f_10();
  public:
  const ::fleetbench::proto::Message7_M8_M18_M22_M55& f_10(int index) const;
  ::fleetbench::proto::Message7_M8_M18_M22_M55* add_f_10();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>& f_10() const;
  // optional .fleetbench.proto.Message7.M8.M18.M22.M45 f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M8_M18_M22_M45& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22_M45* release_f_1();
  ::fleetbench::proto::Message7_M8_M18_M22_M45* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M8_M18_M22_M45* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M18_M22_M45* value);
  ::fleetbench::proto::Message7_M8_M18_M22_M45* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22_M45& _internal_f_1() const;
  ::fleetbench::proto::Message7_M8_M18_M22_M45* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M22.M46 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message7_M8_M18_M22_M46& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22_M46* release_f_5();
  ::fleetbench::proto::Message7_M8_M18_M22_M46* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message7_M8_M18_M22_M46* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M8_M18_M22_M46* value);
  ::fleetbench::proto::Message7_M8_M18_M22_M46* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22_M46& _internal_f_5() const;
  ::fleetbench::proto::Message7_M8_M18_M22_M46* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M22.M47 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message7_M8_M18_M22_M47& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22_M47* release_f_8();
  ::fleetbench::proto::Message7_M8_M18_M22_M47* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22_M47* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22_M47* value);
  ::fleetbench::proto::Message7_M8_M18_M22_M47* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22_M47& _internal_f_8() const;
  ::fleetbench::proto::Message7_M8_M18_M22_M47* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M22.M52 f_9 = 10;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message7_M8_M18_M22_M52& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22_M52* release_f_9();
  ::fleetbench::proto::Message7_M8_M18_M22_M52* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message7_M8_M18_M22_M52* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message7_M8_M18_M22_M52* value);
  ::fleetbench::proto::Message7_M8_M18_M22_M52* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22_M52& _internal_f_9() const;
  ::fleetbench::proto::Message7_M8_M18_M22_M52* _internal_mutable_f_9();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18.M22)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_M22_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M8_M18_M22_M55 > f_10_;
    ::fleetbench::proto::Message7_M8_M18_M22_M45* f_1_;
    ::fleetbench::proto::Message7_M8_M18_M22_M46* f_5_;
    ::fleetbench::proto::Message7_M8_M18_M22_M47* f_8_;
    ::fleetbench::proto::Message7_M8_M18_M22_M52* f_9_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M16_M28 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M16.M28) */ {
 public:
  inline Message7_M8_M16_M28() : Message7_M8_M16_M28(nullptr) {}
  ~Message7_M8_M16_M28() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M16_M28(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M16_M28(const Message7_M8_M16_M28& from) : Message7_M8_M16_M28(nullptr, from) {}
  inline Message7_M8_M16_M28(Message7_M8_M16_M28&& from) noexcept
      : Message7_M8_M16_M28(nullptr, std::move(from)) {}
  inline Message7_M8_M16_M28& operator=(const Message7_M8_M16_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M16_M28& operator=(Message7_M8_M16_M28&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M16_M28& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M16_M28* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M16_M28*>(
        &_Message7_M8_M16_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 81;
  friend void swap(Message7_M8_M16_M28& a, Message7_M8_M16_M28& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M16_M28* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M16_M28* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M16_M28* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M16_M28>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M16_M28& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M16_M28& from) { Message7_M8_M16_M28::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M16_M28* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M16.M28"; }

 protected:
  explicit Message7_M8_M16_M28(::google::protobuf::Arena* arena);
  Message7_M8_M16_M28(::google::protobuf::Arena* arena, const Message7_M8_M16_M28& from);
  Message7_M8_M16_M28(::google::protobuf::Arena* arena, Message7_M8_M16_M28&& from) noexcept
      : Message7_M8_M16_M28(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M40 = Message7_M8_M16_M28_M40;
  using E25 = Message7_M8_M16_M28_E25;
  static constexpr E25 E25_UNSPECIFIED = Message7_M8_M16_M28_E25_E25_UNSPECIFIED;
  static constexpr E25 E25_CONST_1 = Message7_M8_M16_M28_E25_E25_CONST_1;
  static constexpr E25 E25_CONST_2 = Message7_M8_M16_M28_E25_E25_CONST_2;
  static constexpr E25 E25_CONST_3 = Message7_M8_M16_M28_E25_E25_CONST_3;
  static constexpr E25 E25_CONST_4 = Message7_M8_M16_M28_E25_E25_CONST_4;
  static constexpr E25 E25_CONST_5 = Message7_M8_M16_M28_E25_E25_CONST_5;
  static inline bool E25_IsValid(int value) {
    return Message7_M8_M16_M28_E25_IsValid(value);
  }
  static constexpr E25 E25_MIN = Message7_M8_M16_M28_E25_E25_MIN;
  static constexpr E25 E25_MAX = Message7_M8_M16_M28_E25_E25_MAX;
  static constexpr int E25_ARRAYSIZE = Message7_M8_M16_M28_E25_E25_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E25_descriptor() {
    return Message7_M8_M16_M28_E25_descriptor();
  }
  template <typename T>
  static inline const std::string& E25_Name(T value) {
    return Message7_M8_M16_M28_E25_Name(value);
  }
  static inline bool E25_Parse(absl::string_view name, E25* value) {
    return Message7_M8_M16_M28_E25_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M8.M16.M28.M40 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M8_M16_M28_M40* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M8_M16_M28_M40& f_1(int index) const;
  ::fleetbench::proto::Message7_M8_M16_M28_M40* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>& f_1() const;
  // optional .fleetbench.proto.Message7.M8.M16.M28.E25 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M8_M16_M28_E25 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M8_M16_M28_E25 value);

  private:
  ::fleetbench::proto::Message7_M8_M16_M28_E25 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M8_M16_M28_E25 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M16.M28)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M16_M28_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M8_M16_M28_M40 > f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63_M68 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63_M68() : Message7_M6_M12_M30_M49_M59_M63_M68(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63_M68() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63_M68(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63_M68(const Message7_M6_M12_M30_M49_M59_M63_M68& from) : Message7_M6_M12_M30_M49_M59_M63_M68(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68(Message7_M6_M12_M30_M49_M59_M63_M68&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63_M68& operator=(const Message7_M6_M12_M30_M49_M59_M63_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63_M68& operator=(Message7_M6_M12_M30_M49_M59_M63_M68&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63_M68& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63_M68* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63_M68*>(
        &_Message7_M6_M12_M30_M49_M59_M63_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 69;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63_M68& a, Message7_M6_M12_M30_M49_M59_M63_M68& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63_M68* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63_M68* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63_M68* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63_M68>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63_M68& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63_M68& from) { Message7_M6_M12_M30_M49_M59_M63_M68::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63_M68* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63_M68(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63_M68(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63_M68& from);
  Message7_M6_M12_M30_M49_M59_M63_M68(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63_M68&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63_M68(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M77 = Message7_M6_M12_M30_M49_M59_M63_M68_M77;
  using M81 = Message7_M6_M12_M30_M49_M59_M63_M68_M81;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81 f_3 = 5;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81& f_3(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>& f_3() const;
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* release_f_1();
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77& _internal_f_1() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_M68_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81 > f_3_;
    ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M10 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M10) */ {
 public:
  inline Message7_M6_M10() : Message7_M6_M10(nullptr) {}
  ~Message7_M6_M10() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M10(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M10(const Message7_M6_M10& from) : Message7_M6_M10(nullptr, from) {}
  inline Message7_M6_M10(Message7_M6_M10&& from) noexcept
      : Message7_M6_M10(nullptr, std::move(from)) {}
  inline Message7_M6_M10& operator=(const Message7_M6_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M10& operator=(Message7_M6_M10&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M10& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M10* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M10*>(
        &_Message7_M6_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(Message7_M6_M10& a, Message7_M6_M10& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M10* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M10* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M10* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M10>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M10& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M10& from) { Message7_M6_M10::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M10* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M10"; }

 protected:
  explicit Message7_M6_M10(::google::protobuf::Arena* arena);
  Message7_M6_M10(::google::protobuf::Arena* arena, const Message7_M6_M10& from);
  Message7_M6_M10(::google::protobuf::Arena* arena, Message7_M6_M10&& from) noexcept
      : Message7_M6_M10(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M27 = Message7_M6_M10_M27;
  using M32 = Message7_M6_M10_M32;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_0_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).data())), f_0(i).size()));
      }
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
        sizes_list.push_back(f_0(i).size());
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        sizes.push_back(f_0(i).size());
      }
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_0_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_0_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
      }
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF4FieldNumber = 6,
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
  };
  // repeated string f_0 = 1;
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  const std::string& f_0(int index) const;
  std::string* mutable_f_0(int index);
  void set_f_0(int index, const std::string& value);
  void set_f_0(int index, std::string&& value);
  void set_f_0(int index, const char* value);
  void set_f_0(int index, const char* value, std::size_t size);
  void set_f_0(int index, absl::string_view value);
  std::string* add_f_0();
  void add_f_0(const std::string& value);
  void add_f_0(std::string&& value);
  void add_f_0(const char* value);
  void add_f_0(const char* value, std::size_t size);
  void add_f_0(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message7.M6.M10.M32 f_4 = 6;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M6_M10_M32* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M6_M10_M32& f_4(int index) const;
  ::fleetbench::proto::Message7_M6_M10_M32* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>& f_4() const;
  // optional .fleetbench.proto.Message7.M6.M10.M27 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M6_M10_M27& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M10_M27* release_f_2();
  ::fleetbench::proto::Message7_M6_M10_M27* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27* value);
  ::fleetbench::proto::Message7_M6_M10_M27* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M6_M10_M27& _internal_f_2() const;
  ::fleetbench::proto::Message7_M6_M10_M27* _internal_mutable_f_2();

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M10)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M10_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_0_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M10_M32 > f_4_;
    ::fleetbench::proto::Message7_M6_M10_M27* f_2_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M5_M13 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M5.M13) */ {
 public:
  inline Message7_M5_M13() : Message7_M5_M13(nullptr) {}
  ~Message7_M5_M13() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M5_M13(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M5_M13(const Message7_M5_M13& from) : Message7_M5_M13(nullptr, from) {}
  inline Message7_M5_M13(Message7_M5_M13&& from) noexcept
      : Message7_M5_M13(nullptr, std::move(from)) {}
  inline Message7_M5_M13& operator=(const Message7_M5_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M5_M13& operator=(Message7_M5_M13&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M5_M13& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M5_M13* internal_default_instance() {
    return reinterpret_cast<const Message7_M5_M13*>(
        &_Message7_M5_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(Message7_M5_M13& a, Message7_M5_M13& b) { a.Swap(&b); }
  inline void Swap(Message7_M5_M13* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M5_M13* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M5_M13* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M5_M13>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M5_M13& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M5_M13& from) { Message7_M5_M13::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M5_M13* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M5.M13"; }

 protected:
  explicit Message7_M5_M13(::google::protobuf::Arena* arena);
  Message7_M5_M13(::google::protobuf::Arena* arena, const Message7_M5_M13& from);
  Message7_M5_M13(::google::protobuf::Arena* arena, Message7_M5_M13&& from) noexcept
      : Message7_M5_M13(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M31 = Message7_M5_M13_M31;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message7.M5.M13.M31 f_3 = 5;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message7_M5_M13_M31* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message7_M5_M13_M31& f_3(int index) const;
  ::fleetbench::proto::Message7_M5_M13_M31* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>& f_3() const;
  // optional bool f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M5.M13)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M5_M13_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M5_M13_M31 > f_3_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87() : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& from) : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& operator=(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& a, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& from) { Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& from);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M92 = Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>& f_2() const;
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92 > f_2_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88() : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& a, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M90 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90;
  using M91 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91;
  using E46 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46;
  static constexpr E46 E46_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_UNSPECIFIED;
  static constexpr E46 E46_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_1;
  static constexpr E46 E46_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_2;
  static constexpr E46 E46_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_3;
  static constexpr E46 E46_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_4;
  static constexpr E46 E46_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_CONST_5;
  static inline bool E46_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_IsValid(value);
  }
  static constexpr E46 E46_MIN = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_MIN;
  static constexpr E46 E46_MAX = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_MAX;
  static constexpr int E46_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_E46_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E46_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_descriptor();
  }
  template <typename T>
  static inline const std::string& E46_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_Name(value);
  }
  static inline bool E46_Parse(absl::string_view name, E46* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size() * sizeof(int));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF1FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.E46 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 value);
  void add_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& f_4(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>& f_4() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* release_f_5();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& _internal_f_5() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* _internal_mutable_f_5();

  public:
  // optional int64 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90 > f_4_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* f_5_;
    ::int64_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M101 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* release_f_3();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& _internal_f_3() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      101, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M1_M14 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M1.M14) */ {
 public:
  inline Message7_M1_M14() : Message7_M1_M14(nullptr) {}
  ~Message7_M1_M14() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M1_M14(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M1_M14(const Message7_M1_M14& from) : Message7_M1_M14(nullptr, from) {}
  inline Message7_M1_M14(Message7_M1_M14&& from) noexcept
      : Message7_M1_M14(nullptr, std::move(from)) {}
  inline Message7_M1_M14& operator=(const Message7_M1_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M1_M14& operator=(Message7_M1_M14&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M1_M14& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M1_M14* internal_default_instance() {
    return reinterpret_cast<const Message7_M1_M14*>(
        &_Message7_M1_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message7_M1_M14& a, Message7_M1_M14& b) { a.Swap(&b); }
  inline void Swap(Message7_M1_M14* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M1_M14* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M1_M14* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M1_M14>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M1_M14& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M1_M14& from) { Message7_M1_M14::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M1_M14* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M1.M14"; }

 protected:
  explicit Message7_M1_M14(::google::protobuf::Arena* arena);
  Message7_M1_M14(::google::protobuf::Arena* arena, const Message7_M1_M14& from);
  Message7_M1_M14(::google::protobuf::Arena* arena, Message7_M1_M14&& from) noexcept
      : Message7_M1_M14(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M34 = Message7_M1_M14_M34;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 6,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M1.M14.M34 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M1_M14_M34& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M1_M14_M34* release_f_2();
  ::fleetbench::proto::Message7_M1_M14_M34* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M1_M14_M34* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M1_M14_M34* value);
  ::fleetbench::proto::Message7_M1_M14_M34* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M1_M14_M34& _internal_f_2() const;
  ::fleetbench::proto::Message7_M1_M14_M34* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M1.M14)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M1_M14_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M1_M14_M34* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M9 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M9) */ {
 public:
  inline Message7_M9() : Message7_M9(nullptr) {}
  ~Message7_M9() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M9(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M9(const Message7_M9& from) : Message7_M9(nullptr, from) {}
  inline Message7_M9(Message7_M9&& from) noexcept
      : Message7_M9(nullptr, std::move(from)) {}
  inline Message7_M9& operator=(const Message7_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M9& operator=(Message7_M9&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M9& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M9* internal_default_instance() {
    return reinterpret_cast<const Message7_M9*>(
        &_Message7_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 101;
  friend void swap(Message7_M9& a, Message7_M9& b) { a.Swap(&b); }
  inline void Swap(Message7_M9* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M9* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M9* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M9>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M9& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M9& from) { Message7_M9::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M9* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M9"; }

 protected:
  explicit Message7_M9(::google::protobuf::Arena* arena);
  Message7_M9(::google::protobuf::Arena* arena, const Message7_M9& from);
  Message7_M9(::google::protobuf::Arena* arena, Message7_M9&& from) noexcept
      : Message7_M9(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M15 = Message7_M9_M15;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 7,
    kF0FieldNumber = 4,
    kF1FieldNumber = 5,
    kF2FieldNumber = 6,
  };
  // optional .fleetbench.proto.Message7.M9.M15 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message7_M9_M15& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M9_M15* release_f_6();
  ::fleetbench::proto::Message7_M9_M15* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message7_M9_M15* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message7_M9_M15* value);
  ::fleetbench::proto::Message7_M9_M15* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message7_M9_M15& _internal_f_6() const;
  ::fleetbench::proto::Message7_M9_M15* _internal_mutable_f_6();

  public:
  // optional int64 f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int64 f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional fixed64 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint64_t f_2() const;
  void set_f_2(::uint64_t value);

  private:
  ::uint64_t _internal_f_2() const;
  void _internal_set_f_2(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M9)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M9_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M9_M15* f_6_;
    ::int64_t f_0_;
    ::int64_t f_1_;
    ::uint64_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M18 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M18) */ {
 public:
  inline Message7_M8_M18() : Message7_M8_M18(nullptr) {}
  ~Message7_M8_M18() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M18(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M18(const Message7_M8_M18& from) : Message7_M8_M18(nullptr, from) {}
  inline Message7_M8_M18(Message7_M8_M18&& from) noexcept
      : Message7_M8_M18(nullptr, std::move(from)) {}
  inline Message7_M8_M18& operator=(const Message7_M8_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M18& operator=(Message7_M8_M18&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M18& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M18* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M18*>(
        &_Message7_M8_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 94;
  friend void swap(Message7_M8_M18& a, Message7_M8_M18& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M18* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M18* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M18* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M18>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M18& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M18& from) { Message7_M8_M18::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M18* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M18"; }

 protected:
  explicit Message7_M8_M18(::google::protobuf::Arena* arena);
  Message7_M8_M18(::google::protobuf::Arena* arena, const Message7_M8_M18& from);
  Message7_M8_M18(::google::protobuf::Arena* arena, Message7_M8_M18&& from) noexcept
      : Message7_M8_M18(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M20 = Message7_M8_M18_M20;
  using M22 = Message7_M8_M18_M22;
  using M25 = Message7_M8_M18_M25;
  using M26 = Message7_M8_M18_M26;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_7()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
      mutable_f_10()->generate_schema(schema);
      mutable_f_12()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_10()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_12()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_7()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_10()->generate_scatter_ptrs(ptrs);
      mutable_f_12()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_2().size());
      mutable_f_7()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_10()->generate_scatter_sizes(sizes);
      mutable_f_12()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_10()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_12()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_10()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_12()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 7,
    kF7FieldNumber = 8,
    kF8FieldNumber = 10,
    kF10FieldNumber = 12,
    kF12FieldNumber = 15,
    kF0FieldNumber = 4,
    kF1FieldNumber = 6,
  };
  // optional string f_2 = 7;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M20 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message7_M8_M18_M20& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M20* release_f_7();
  ::fleetbench::proto::Message7_M8_M18_M20* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message7_M8_M18_M20* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M8_M18_M20* value);
  ::fleetbench::proto::Message7_M8_M18_M20* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M20& _internal_f_7() const;
  ::fleetbench::proto::Message7_M8_M18_M20* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M22 f_8 = 10;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message7_M8_M18_M22& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M22* release_f_8();
  ::fleetbench::proto::Message7_M8_M18_M22* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22* value);
  ::fleetbench::proto::Message7_M8_M18_M22* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M22& _internal_f_8() const;
  ::fleetbench::proto::Message7_M8_M18_M22* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M25 f_10 = 12;
  bool has_f_10() const;
  void clear_f_10() ;
  const ::fleetbench::proto::Message7_M8_M18_M25& f_10() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M25* release_f_10();
  ::fleetbench::proto::Message7_M8_M18_M25* mutable_f_10();
  void set_allocated_f_10(::fleetbench::proto::Message7_M8_M18_M25* value);
  void unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message7_M8_M18_M25* value);
  ::fleetbench::proto::Message7_M8_M18_M25* unsafe_arena_release_f_10();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M25& _internal_f_10() const;
  ::fleetbench::proto::Message7_M8_M18_M25* _internal_mutable_f_10();

  public:
  // optional .fleetbench.proto.Message7.M8.M18.M26 f_12 = 15;
  bool has_f_12() const;
  void clear_f_12() ;
  const ::fleetbench::proto::Message7_M8_M18_M26& f_12() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18_M26* release_f_12();
  ::fleetbench::proto::Message7_M8_M18_M26* mutable_f_12();
  void set_allocated_f_12(::fleetbench::proto::Message7_M8_M18_M26* value);
  void unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message7_M8_M18_M26* value);
  ::fleetbench::proto::Message7_M8_M18_M26* unsafe_arena_release_f_12();

  private:
  const ::fleetbench::proto::Message7_M8_M18_M26& _internal_f_12() const;
  ::fleetbench::proto::Message7_M8_M18_M26* _internal_mutable_f_12();

  public:
  // optional int32 f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional uint32 f_1 = 6;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M18)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M18_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message7_M8_M18_M20* f_7_;
    ::fleetbench::proto::Message7_M8_M18_M22* f_8_;
    ::fleetbench::proto::Message7_M8_M18_M25* f_10_;
    ::fleetbench::proto::Message7_M8_M18_M26* f_12_;
    ::int32_t f_0_;
    ::uint32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8_M16 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8.M16) */ {
 public:
  inline Message7_M8_M16() : Message7_M8_M16(nullptr) {}
  ~Message7_M8_M16() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8_M16(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8_M16(const Message7_M8_M16& from) : Message7_M8_M16(nullptr, from) {}
  inline Message7_M8_M16(Message7_M8_M16&& from) noexcept
      : Message7_M8_M16(nullptr, std::move(from)) {}
  inline Message7_M8_M16& operator=(const Message7_M8_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8_M16& operator=(Message7_M8_M16&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8_M16& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8_M16* internal_default_instance() {
    return reinterpret_cast<const Message7_M8_M16*>(
        &_Message7_M8_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 82;
  friend void swap(Message7_M8_M16& a, Message7_M8_M16& b) { a.Swap(&b); }
  inline void Swap(Message7_M8_M16* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8_M16* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8_M16* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8_M16>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8_M16& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8_M16& from) { Message7_M8_M16::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8_M16* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8.M16"; }

 protected:
  explicit Message7_M8_M16(::google::protobuf::Arena* arena);
  Message7_M8_M16(::google::protobuf::Arena* arena, const Message7_M8_M16& from);
  Message7_M8_M16(::google::protobuf::Arena* arena, Message7_M8_M16&& from) noexcept
      : Message7_M8_M16(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M28 = Message7_M8_M16_M28;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message7.M8.M16.M28 f_4 = 6;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M8_M16_M28* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M8_M16_M28& f_4(int index) const;
  ::fleetbench::proto::Message7_M8_M16_M28* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>& f_4() const;
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8.M16)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 1,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_M16_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M8_M16_M28 > f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int32_t f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59_M63 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59_M63() : Message7_M6_M12_M30_M49_M59_M63(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59_M63() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59_M63(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59_M63(const Message7_M6_M12_M30_M49_M59_M63& from) : Message7_M6_M12_M30_M49_M59_M63(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59_M63(Message7_M6_M12_M30_M49_M59_M63&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59_M63& operator=(const Message7_M6_M12_M30_M49_M59_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59_M63& operator=(Message7_M6_M12_M30_M49_M59_M63&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59_M63& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59_M63* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59_M63*>(
        &_Message7_M6_M12_M30_M49_M59_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 71;
  friend void swap(Message7_M6_M12_M30_M49_M59_M63& a, Message7_M6_M12_M30_M49_M59_M63& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59_M63* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59_M63* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59_M63* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59_M63>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59_M63& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59_M63& from) { Message7_M6_M12_M30_M49_M59_M63::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59_M63* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59_M63(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59_M63(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59_M63& from);
  Message7_M6_M12_M30_M49_M59_M63(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59_M63&& from) noexcept
      : Message7_M6_M12_M30_M49_M59_M63(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M68 = Message7_M6_M12_M30_M49_M59_M63_M68;
  using M71 = Message7_M6_M12_M30_M49_M59_M63_M71;
  using E39 = Message7_M6_M12_M30_M49_M59_M63_E39;
  static constexpr E39 E39_UNSPECIFIED = Message7_M6_M12_M30_M49_M59_M63_E39_E39_UNSPECIFIED;
  static constexpr E39 E39_CONST_1 = Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_1;
  static constexpr E39 E39_CONST_2 = Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_2;
  static constexpr E39 E39_CONST_3 = Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_3;
  static constexpr E39 E39_CONST_4 = Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_4;
  static constexpr E39 E39_CONST_5 = Message7_M6_M12_M30_M49_M59_M63_E39_E39_CONST_5;
  static inline bool E39_IsValid(int value) {
    return Message7_M6_M12_M30_M49_M59_M63_E39_IsValid(value);
  }
  static constexpr E39 E39_MIN = Message7_M6_M12_M30_M49_M59_M63_E39_E39_MIN;
  static constexpr E39 E39_MAX = Message7_M6_M12_M30_M49_M59_M63_E39_E39_MAX;
  static constexpr int E39_ARRAYSIZE = Message7_M6_M12_M30_M49_M59_M63_E39_E39_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E39_descriptor() {
    return Message7_M6_M12_M30_M49_M59_M63_E39_descriptor();
  }
  template <typename T>
  static inline const std::string& E39_Name(T value) {
    return Message7_M6_M12_M30_M49_M59_M63_E39_Name(value);
  }
  static inline bool E39_Parse(absl::string_view name, E39* value) {
    return Message7_M6_M12_M30_M49_M59_M63_E39_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* release_f_1();
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68& _internal_f_1() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* release_f_4();
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71& _internal_f_4() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.E39 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_M63_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* f_1_;
    ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* f_4_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M5) */ {
 public:
  inline Message7_M5() : Message7_M5(nullptr) {}
  ~Message7_M5() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M5(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M5(const Message7_M5& from) : Message7_M5(nullptr, from) {}
  inline Message7_M5(Message7_M5&& from) noexcept
      : Message7_M5(nullptr, std::move(from)) {}
  inline Message7_M5& operator=(const Message7_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M5& operator=(Message7_M5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M5* internal_default_instance() {
    return reinterpret_cast<const Message7_M5*>(
        &_Message7_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(Message7_M5& a, Message7_M5& b) { a.Swap(&b); }
  inline void Swap(Message7_M5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M5* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M5& from) { Message7_M5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M5"; }

 protected:
  explicit Message7_M5(::google::protobuf::Arena* arena);
  Message7_M5(::google::protobuf::Arena* arena, const Message7_M5& from);
  Message7_M5(::google::protobuf::Arena* arena, Message7_M5&& from) noexcept
      : Message7_M5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M13 = Message7_M5_M13;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M5.M13 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M5_M13& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M5_M13* release_f_1();
  ::fleetbench::proto::Message7_M5_M13* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M5_M13* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M5_M13* value);
  ::fleetbench::proto::Message7_M5_M13* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M5_M13& _internal_f_1() const;
  ::fleetbench::proto::Message7_M5_M13* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M5_M13* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73_M74 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74() : Message7_M2_M19_M29_M38_M60_M64_M73_M74(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73_M74() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73_M74(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74(const Message7_M2_M19_M29_M38_M60_M64_M73_M74& from) : Message7_M2_M19_M29_M38_M60_M64_M73_M74(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74(Message7_M2_M19_M29_M38_M60_M64_M73_M74&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73_M74& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73_M74& operator=(Message7_M2_M19_M29_M38_M60_M64_M73_M74&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73_M74& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73_M74* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73_M74*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74& a, Message7_M2_M19_M29_M38_M60_M64_M73_M74& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73_M74* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73_M74* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73_M74>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73_M74& from) { Message7_M2_M19_M29_M38_M60_M64_M73_M74::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73_M74* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73_M74(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73_M74& from);
  Message7_M2_M19_M29_M38_M60_M64_M73_M74(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73_M74&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73_M74(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M87 = Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      68, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_M74_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72_M75 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75() : Message7_M2_M19_M29_M38_M60_M62_M72_M75(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72_M75() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72_M75(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75(const Message7_M2_M19_M29_M38_M60_M62_M72_M75& from) : Message7_M2_M19_M29_M38_M60_M62_M72_M75(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75(Message7_M2_M19_M29_M38_M60_M62_M72_M75&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72_M75& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72_M75& operator=(Message7_M2_M19_M29_M38_M60_M62_M72_M75&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72_M75& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72_M75* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72_M75*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75& a, Message7_M2_M19_M29_M38_M60_M62_M72_M75& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72_M75* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72_M75* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72_M75>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72_M75& from) { Message7_M2_M19_M29_M38_M60_M62_M72_M75::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72_M75* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72_M75(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72_M75& from);
  Message7_M2_M19_M29_M38_M60_M62_M72_M75(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72_M75&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72_M75(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M88 = Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_M75_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M100 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100;
  using E49 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49;
  static constexpr E49 E49_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_UNSPECIFIED;
  static constexpr E49 E49_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_1;
  static constexpr E49 E49_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_2;
  static constexpr E49 E49_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_3;
  static constexpr E49 E49_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_4;
  static constexpr E49 E49_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_CONST_5;
  static inline bool E49_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_IsValid(value);
  }
  static constexpr E49 E49_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_MIN;
  static constexpr E49 E49_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_MAX;
  static constexpr int E49_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_E49_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E49_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_descriptor();
  }
  template <typename T>
  static inline const std::string& E49_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_Name(value);
  }
  static inline bool E49_Parse(absl::string_view name, E49* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.E49 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M1) */ {
 public:
  inline Message7_M1() : Message7_M1(nullptr) {}
  ~Message7_M1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M1(const Message7_M1& from) : Message7_M1(nullptr, from) {}
  inline Message7_M1(Message7_M1&& from) noexcept
      : Message7_M1(nullptr, std::move(from)) {}
  inline Message7_M1& operator=(const Message7_M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M1& operator=(Message7_M1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M1* internal_default_instance() {
    return reinterpret_cast<const Message7_M1*>(
        &_Message7_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Message7_M1& a, Message7_M1& b) { a.Swap(&b); }
  inline void Swap(Message7_M1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M1& from) { Message7_M1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M1"; }

 protected:
  explicit Message7_M1(::google::protobuf::Arena* arena);
  Message7_M1(::google::protobuf::Arena* arena, const Message7_M1& from);
  Message7_M1(::google::protobuf::Arena* arena, Message7_M1&& from) noexcept
      : Message7_M1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M14 = Message7_M1_M14;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M1.M14 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M1_M14& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M1_M14* release_f_1();
  ::fleetbench::proto::Message7_M1_M14* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M1_M14* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M1_M14* value);
  ::fleetbench::proto::Message7_M1_M14* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M1_M14& _internal_f_1() const;
  ::fleetbench::proto::Message7_M1_M14* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M1_M14* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M8) */ {
 public:
  inline Message7_M8() : Message7_M8(nullptr) {}
  ~Message7_M8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M8(const Message7_M8& from) : Message7_M8(nullptr, from) {}
  inline Message7_M8(Message7_M8&& from) noexcept
      : Message7_M8(nullptr, std::move(from)) {}
  inline Message7_M8& operator=(const Message7_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M8& operator=(Message7_M8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M8* internal_default_instance() {
    return reinterpret_cast<const Message7_M8*>(
        &_Message7_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 95;
  friend void swap(Message7_M8& a, Message7_M8& b) { a.Swap(&b); }
  inline void Swap(Message7_M8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M8& from) { Message7_M8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M8"; }

 protected:
  explicit Message7_M8(::google::protobuf::Arena* arena);
  Message7_M8(::google::protobuf::Arena* arena, const Message7_M8& from);
  Message7_M8(::google::protobuf::Arena* arena, Message7_M8&& from) noexcept
      : Message7_M8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M16 = Message7_M8_M16;
  using M18 = Message7_M8_M18;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M8.M16 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M8_M16& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M16* release_f_1();
  ::fleetbench::proto::Message7_M8_M16* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M8_M16* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M16* value);
  ::fleetbench::proto::Message7_M8_M16* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M8_M16& _internal_f_1() const;
  ::fleetbench::proto::Message7_M8_M16* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M8.M18 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M8_M18& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8_M18* release_f_2();
  ::fleetbench::proto::Message7_M8_M18* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M8_M18* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M8_M18* value);
  ::fleetbench::proto::Message7_M8_M18* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M8_M18& _internal_f_2() const;
  ::fleetbench::proto::Message7_M8_M18* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M8_M16* f_1_;
    ::fleetbench::proto::Message7_M8_M18* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49_M59 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49.M59) */ {
 public:
  inline Message7_M6_M12_M30_M49_M59() : Message7_M6_M12_M30_M49_M59(nullptr) {}
  ~Message7_M6_M12_M30_M49_M59() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49_M59(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49_M59(const Message7_M6_M12_M30_M49_M59& from) : Message7_M6_M12_M30_M49_M59(nullptr, from) {}
  inline Message7_M6_M12_M30_M49_M59(Message7_M6_M12_M30_M49_M59&& from) noexcept
      : Message7_M6_M12_M30_M49_M59(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49_M59& operator=(const Message7_M6_M12_M30_M49_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49_M59& operator=(Message7_M6_M12_M30_M49_M59&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49_M59& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49_M59* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49_M59*>(
        &_Message7_M6_M12_M30_M49_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 72;
  friend void swap(Message7_M6_M12_M30_M49_M59& a, Message7_M6_M12_M30_M49_M59& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49_M59* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49_M59* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49_M59* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49_M59>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49_M59& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49_M59& from) { Message7_M6_M12_M30_M49_M59::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49_M59* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49.M59"; }

 protected:
  explicit Message7_M6_M12_M30_M49_M59(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49_M59(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49_M59& from);
  Message7_M6_M12_M30_M49_M59(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49_M59&& from) noexcept
      : Message7_M6_M12_M30_M49_M59(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M63 = Message7_M6_M12_M30_M49_M59_M63;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int32_t));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated int32 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63& f_1(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>& f_1() const;
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49.M59)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_M59_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63 > f_1_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64_M73 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64_M73() : Message7_M2_M19_M29_M38_M60_M64_M73(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64_M73() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64_M73(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64_M73(const Message7_M2_M19_M29_M38_M60_M64_M73& from) : Message7_M2_M19_M29_M38_M60_M64_M73(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73(Message7_M2_M19_M29_M38_M60_M64_M73&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64_M73& operator=(const Message7_M2_M19_M29_M38_M60_M64_M73& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64_M73& operator=(Message7_M2_M19_M29_M38_M60_M64_M73&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64_M73& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64_M73* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64_M73*>(
        &_Message7_M2_M19_M29_M38_M60_M64_M73_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64_M73& a, Message7_M2_M19_M29_M38_M60_M64_M73& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64_M73* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64_M73* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64_M73* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64_M73>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64_M73& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64_M73& from) { Message7_M2_M19_M29_M38_M60_M64_M73::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64_M73* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64_M73(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64_M73(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64_M73& from);
  Message7_M2_M19_M29_M38_M60_M64_M73(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64_M73&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64_M73(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M74 = Message7_M2_M19_M29_M38_M60_M64_M73_M74;
  using M82 = Message7_M2_M19_M29_M38_M60_M64_M73_M82;
  using E43 = Message7_M2_M19_M29_M38_M60_M64_M73_E43;
  static constexpr E43 E43_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_UNSPECIFIED;
  static constexpr E43 E43_CONST_1 = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_1;
  static constexpr E43 E43_CONST_2 = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_2;
  static constexpr E43 E43_CONST_3 = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_3;
  static constexpr E43 E43_CONST_4 = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_4;
  static constexpr E43 E43_CONST_5 = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_CONST_5;
  static inline bool E43_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E43_IsValid(value);
  }
  static constexpr E43 E43_MIN = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_MIN;
  static constexpr E43 E43_MAX = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_MAX;
  static constexpr int E43_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M64_M73_E43_E43_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E43_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E43_descriptor();
  }
  template <typename T>
  static inline const std::string& E43_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E43_Name(value);
  }
  static inline bool E43_Parse(absl::string_view name, E43* value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E43_Parse(name, value);
  }
  using E44 = Message7_M2_M19_M29_M38_M60_M64_M73_E44;
  static constexpr E44 E44_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_UNSPECIFIED;
  static constexpr E44 E44_CONST_1 = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_1;
  static constexpr E44 E44_CONST_2 = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_2;
  static constexpr E44 E44_CONST_3 = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_3;
  static constexpr E44 E44_CONST_4 = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_4;
  static constexpr E44 E44_CONST_5 = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_CONST_5;
  static inline bool E44_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E44_IsValid(value);
  }
  static constexpr E44 E44_MIN = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_MIN;
  static constexpr E44 E44_MAX = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_MAX;
  static constexpr int E44_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M64_M73_E44_E44_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E44_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E44_descriptor();
  }
  template <typename T>
  static inline const std::string& E44_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E44_Name(value);
  }
  static inline bool E44_Parse(absl::string_view name, E44* value) {
    return Message7_M2_M19_M29_M38_M60_M64_M73_E44_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_14())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      mutable_f_22()->generate_schema(schema);
      mutable_f_23()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_14()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_13().data())));
      sizes_list.push_back(f_13().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      mutable_f_22()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_23()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_13().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      mutable_f_22()->generate_scatter_ptrs(ptrs);
      mutable_f_23()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      sizes.push_back(end_addr - start_addr + sizeof(f_14()));
      sizes.push_back(f_13().size() * sizeof(int));
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_6().size());
      sizes.push_back(f_8().size());
      sizes.push_back(f_10().size());
      sizes.push_back(f_16().size());
      mutable_f_22()->generate_scatter_sizes(sizes);
      mutable_f_23()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_14_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_13()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_13().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      idx = mutable_f_22()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_23()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_13()->Resize(sizes[idx++] / sizeof(int), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      idx = mutable_f_22()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_23()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF13FieldNumber = 19,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF4FieldNumber = 8,
    kF6FieldNumber = 10,
    kF8FieldNumber = 12,
    kF10FieldNumber = 15,
    kF16FieldNumber = 22,
    kF22FieldNumber = 23,
    kF23FieldNumber = 24,
    kF3FieldNumber = 5,
    kF5FieldNumber = 9,
    kF7FieldNumber = 11,
    kF2FieldNumber = 3,
    kF11FieldNumber = 16,
    kF15FieldNumber = 21,
    kF9FieldNumber = 14,
    kF12FieldNumber = 17,
    kF14FieldNumber = 20,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.E43 f_13 = 19 [packed = true];
  int f_13_size() const;
  private:
  int _internal_f_13_size() const;

  public:
  void clear_f_13() ;
  public:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 f_13(int index) const;
  void set_f_13(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 value);
  void add_f_13(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 value);
  const ::google::protobuf::RepeatedField<int>& f_13() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_13();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_13() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_13();

  public:
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional string f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional bytes f_10 = 15;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional string f_16 = 22;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74 f_22 = 23;
  bool has_f_22() const;
  void clear_f_22() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74& f_22() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* release_f_22();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* mutable_f_22();
  void set_allocated_f_22(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* value);
  void unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* unsafe_arena_release_f_22();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74& _internal_f_22() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* _internal_mutable_f_22();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82 f_23 = 24;
  bool has_f_23() const;
  void clear_f_23() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82& f_23() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* release_f_23();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* mutable_f_23();
  void set_allocated_f_23(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* value);
  void unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* unsafe_arena_release_f_23();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82& _internal_f_23() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* _internal_mutable_f_23();

  public:
  // optional fixed32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional float f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  float f_5() const;
  void set_f_5(float value);

  private:
  float _internal_f_5() const;
  void _internal_set_f_5(float value);

  public:
  // optional int64 f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // optional bool f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional bool f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  bool f_11() const;
  void set_f_11(bool value);

  private:
  bool _internal_f_11() const;
  void _internal_set_f_11(bool value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.E44 f_15 = 21;
  bool has_f_15() const;
  void clear_f_15() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 f_15() const;
  void set_f_15(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 _internal_f_15() const;
  void _internal_set_f_15(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 value);

  public:
  // optional fixed64 f_9 = 14;
  bool has_f_9() const;
  void clear_f_9() ;
  ::uint64_t f_9() const;
  void set_f_9(::uint64_t value);

  private:
  ::uint64_t _internal_f_9() const;
  void _internal_set_f_9(::uint64_t value);

  public:
  // optional int64 f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int64_t f_12() const;
  void set_f_12(::int64_t value);

  private:
  ::int64_t _internal_f_12() const;
  void _internal_set_f_12(::int64_t value);

  public:
  // optional double f_14 = 20;
  bool has_f_14() const;
  void clear_f_14() ;
  double f_14() const;
  void set_f_14(double value);

  private:
  double _internal_f_14() const;
  void _internal_set_f_14(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 4,
      96, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_M73_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_13_;
    mutable ::google::protobuf::internal::CachedSize _f_13_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* f_22_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* f_23_;
    ::uint32_t f_3_;
    float f_5_;
    ::int64_t f_7_;
    bool f_2_;
    bool f_11_;
    int f_15_;
    ::uint64_t f_9_;
    ::int64_t f_12_;
    double f_14_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M72 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M72() : Message7_M2_M19_M29_M38_M60_M62_M72(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M72() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M72(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M72(const Message7_M2_M19_M29_M38_M60_M62_M72& from) : Message7_M2_M19_M29_M38_M60_M62_M72(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72(Message7_M2_M19_M29_M38_M60_M62_M72&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M72& operator=(const Message7_M2_M19_M29_M38_M60_M62_M72& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M72& operator=(Message7_M2_M19_M29_M38_M60_M62_M72&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M72& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M72* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M72*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M72_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M72& a, Message7_M2_M19_M29_M38_M60_M62_M72& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M72* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M72* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M72* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M72>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M72& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M72& from) { Message7_M2_M19_M29_M38_M60_M62_M72::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M72* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M72(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M72(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M72& from);
  Message7_M2_M19_M29_M38_M60_M62_M72(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M72&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M72(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M75 = Message7_M2_M19_M29_M38_M60_M62_M72_M75;
  using M83 = Message7_M2_M19_M29_M38_M60_M62_M72_M83;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75& f_1(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>& f_1() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* release_f_2();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83& _internal_f_2() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* _internal_mutable_f_2();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M72_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75 > f_1_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* f_2_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M99 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* release_f_2();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& _internal_f_2() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      92, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30_M49 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30.M49) */ {
 public:
  inline Message7_M6_M12_M30_M49() : Message7_M6_M12_M30_M49(nullptr) {}
  ~Message7_M6_M12_M30_M49() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30_M49(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30_M49(const Message7_M6_M12_M30_M49& from) : Message7_M6_M12_M30_M49(nullptr, from) {}
  inline Message7_M6_M12_M30_M49(Message7_M6_M12_M30_M49&& from) noexcept
      : Message7_M6_M12_M30_M49(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30_M49& operator=(const Message7_M6_M12_M30_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30_M49& operator=(Message7_M6_M12_M30_M49&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30_M49& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30_M49* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30_M49*>(
        &_Message7_M6_M12_M30_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 73;
  friend void swap(Message7_M6_M12_M30_M49& a, Message7_M6_M12_M30_M49& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30_M49* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30_M49* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30_M49* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30_M49>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30_M49& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30_M49& from) { Message7_M6_M12_M30_M49::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30_M49* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30.M49"; }

 protected:
  explicit Message7_M6_M12_M30_M49(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30_M49(::google::protobuf::Arena* arena, const Message7_M6_M12_M30_M49& from);
  Message7_M6_M12_M30_M49(::google::protobuf::Arena* arena, Message7_M6_M12_M30_M49&& from) noexcept
      : Message7_M6_M12_M30_M49(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M59 = Message7_M6_M12_M30_M49_M59;
  using E33 = Message7_M6_M12_M30_M49_E33;
  static constexpr E33 E33_UNSPECIFIED = Message7_M6_M12_M30_M49_E33_E33_UNSPECIFIED;
  static constexpr E33 E33_CONST_1 = Message7_M6_M12_M30_M49_E33_E33_CONST_1;
  static constexpr E33 E33_CONST_2 = Message7_M6_M12_M30_M49_E33_E33_CONST_2;
  static constexpr E33 E33_CONST_3 = Message7_M6_M12_M30_M49_E33_E33_CONST_3;
  static constexpr E33 E33_CONST_4 = Message7_M6_M12_M30_M49_E33_E33_CONST_4;
  static constexpr E33 E33_CONST_5 = Message7_M6_M12_M30_M49_E33_E33_CONST_5;
  static inline bool E33_IsValid(int value) {
    return Message7_M6_M12_M30_M49_E33_IsValid(value);
  }
  static constexpr E33 E33_MIN = Message7_M6_M12_M30_M49_E33_E33_MIN;
  static constexpr E33 E33_MAX = Message7_M6_M12_M30_M49_E33_E33_MAX;
  static constexpr int E33_ARRAYSIZE = Message7_M6_M12_M30_M49_E33_E33_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E33_descriptor() {
    return Message7_M6_M12_M30_M49_E33_descriptor();
  }
  template <typename T>
  static inline const std::string& E33_Name(T value) {
    return Message7_M6_M12_M30_M49_E33_Name(value);
  }
  static inline bool E33_Parse(absl::string_view name, E33* value) {
    return Message7_M6_M12_M30_M49_E33_Parse(name, value);
  }
  using E34 = Message7_M6_M12_M30_M49_E34;
  static constexpr E34 E34_UNSPECIFIED = Message7_M6_M12_M30_M49_E34_E34_UNSPECIFIED;
  static constexpr E34 E34_CONST_1 = Message7_M6_M12_M30_M49_E34_E34_CONST_1;
  static constexpr E34 E34_CONST_2 = Message7_M6_M12_M30_M49_E34_E34_CONST_2;
  static constexpr E34 E34_CONST_3 = Message7_M6_M12_M30_M49_E34_E34_CONST_3;
  static constexpr E34 E34_CONST_4 = Message7_M6_M12_M30_M49_E34_E34_CONST_4;
  static constexpr E34 E34_CONST_5 = Message7_M6_M12_M30_M49_E34_E34_CONST_5;
  static inline bool E34_IsValid(int value) {
    return Message7_M6_M12_M30_M49_E34_IsValid(value);
  }
  static constexpr E34 E34_MIN = Message7_M6_M12_M30_M49_E34_E34_MIN;
  static constexpr E34 E34_MAX = Message7_M6_M12_M30_M49_E34_E34_MAX;
  static constexpr int E34_ARRAYSIZE = Message7_M6_M12_M30_M49_E34_E34_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E34_descriptor() {
    return Message7_M6_M12_M30_M49_E34_descriptor();
  }
  template <typename T>
  static inline const std::string& E34_Name(T value) {
    return Message7_M6_M12_M30_M49_E34_Name(value);
  }
  static inline bool E34_Parse(absl::string_view name, E34* value) {
    return Message7_M6_M12_M30_M49_E34_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_7())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
      mutable_f_11()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_7()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      mutable_f_11()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      sizes.push_back(end_addr - start_addr + sizeof(f_7()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_8().size());
      mutable_f_11()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF8FieldNumber = 11,
    kF11FieldNumber = 12,
    kF0FieldNumber = 2,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
  };
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59 f_11 = 12;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* release_f_11();
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message7_M6_M12_M30_M49_M59* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message7_M6_M12_M30_M49_M59* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59& _internal_f_11() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* _internal_mutable_f_11();

  public:
  // optional double f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.E33 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_E33 f_3() const;
  void set_f_3(::fleetbench::proto::Message7_M6_M12_M30_M49_E33 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M49_E33 _internal_f_3() const;
  void _internal_set_f_3(::fleetbench::proto::Message7_M6_M12_M30_M49_E33 value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional bool f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  bool f_5() const;
  void set_f_5(bool value);

  private:
  bool _internal_f_5() const;
  void _internal_set_f_5(bool value);

  public:
  // optional float f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  float f_6() const;
  void set_f_6(float value);

  private:
  float _internal_f_6() const;
  void _internal_set_f_6(float value);

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M49.E34 f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_E34 f_7() const;
  void set_f_7(::fleetbench::proto::Message7_M6_M12_M30_M49_E34 value);

  private:
  ::fleetbench::proto::Message7_M6_M12_M30_M49_E34 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message7_M6_M12_M30_M49_E34 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30.M49)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_M49_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* f_11_;
    double f_0_;
    ::int32_t f_2_;
    int f_3_;
    ::int64_t f_4_;
    bool f_5_;
    float f_6_;
    int f_7_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M64 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M64() : Message7_M2_M19_M29_M38_M60_M64(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M64() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M64(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M64(const Message7_M2_M19_M29_M38_M60_M64& from) : Message7_M2_M19_M29_M38_M60_M64(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M64(Message7_M2_M19_M29_M38_M60_M64&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M64& operator=(const Message7_M2_M19_M29_M38_M60_M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M64& operator=(Message7_M2_M19_M29_M38_M60_M64&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M64* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M64*>(
        &_Message7_M2_M19_M29_M38_M60_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(Message7_M2_M19_M29_M38_M60_M64& a, Message7_M2_M19_M29_M38_M60_M64& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M64* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M64* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M64* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M64>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M64& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M64& from) { Message7_M2_M19_M29_M38_M60_M64::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M64* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M64(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M64(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M64& from);
  Message7_M2_M19_M29_M38_M60_M64(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M64&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M64(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M67 = Message7_M2_M19_M29_M38_M60_M64_M67;
  using M73 = Message7_M2_M19_M29_M38_M60_M64_M73;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>& f_2() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* release_f_3();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73& _internal_f_3() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M64_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67 > f_2_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M98 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>& f_2() const;
  // optional double f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98 > f_2_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12_M30 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12.M30) */ {
 public:
  inline Message7_M6_M12_M30() : Message7_M6_M12_M30(nullptr) {}
  ~Message7_M6_M12_M30() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12_M30(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12_M30(const Message7_M6_M12_M30& from) : Message7_M6_M12_M30(nullptr, from) {}
  inline Message7_M6_M12_M30(Message7_M6_M12_M30&& from) noexcept
      : Message7_M6_M12_M30(nullptr, std::move(from)) {}
  inline Message7_M6_M12_M30& operator=(const Message7_M6_M12_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12_M30& operator=(Message7_M6_M12_M30&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12_M30& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12_M30* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12_M30*>(
        &_Message7_M6_M12_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 75;
  friend void swap(Message7_M6_M12_M30& a, Message7_M6_M12_M30& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12_M30* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12_M30* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12_M30* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12_M30>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12_M30& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12_M30& from) { Message7_M6_M12_M30::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12_M30* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12.M30"; }

 protected:
  explicit Message7_M6_M12_M30(::google::protobuf::Arena* arena);
  Message7_M6_M12_M30(::google::protobuf::Arena* arena, const Message7_M6_M12_M30& from);
  Message7_M6_M12_M30(::google::protobuf::Arena* arena, Message7_M6_M12_M30&& from) noexcept
      : Message7_M6_M12_M30(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M35 = Message7_M6_M12_M30_M35;
  using M37 = Message7_M6_M12_M30_M37;
  using M49 = Message7_M6_M12_M30_M49;
  using M56 = Message7_M6_M12_M30_M56;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF1FieldNumber = 2,
    kF5FieldNumber = 9,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M6.M12.M30.M37 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M37* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30_M37& f_2(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30_M37* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>& f_2() const;
  // repeated .fleetbench.proto.Message7.M6.M12.M30.M49 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M6_M12_M30_M49* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30_M49& f_4(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30_M49* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>& f_4() const;
  // optional .fleetbench.proto.Message7.M6.M12.M30.M35 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M35& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M35* release_f_1();
  ::fleetbench::proto::Message7_M6_M12_M30_M35* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M35* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M35* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M35* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M35& _internal_f_1() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M35* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M6.M12.M30.M56 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message7_M6_M12_M30_M56& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12_M30_M56* release_f_5();
  ::fleetbench::proto::Message7_M6_M12_M30_M56* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message7_M6_M12_M30_M56* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M6_M12_M30_M56* value);
  ::fleetbench::proto::Message7_M6_M12_M30_M56* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message7_M6_M12_M30_M56& _internal_f_5() const;
  ::fleetbench::proto::Message7_M6_M12_M30_M56* _internal_mutable_f_5();

  public:
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12.M30)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_M30_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30_M37 > f_2_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30_M49 > f_4_;
    ::fleetbench::proto::Message7_M6_M12_M30_M35* f_1_;
    ::fleetbench::proto::Message7_M6_M12_M30_M56* f_5_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M97 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97;
  using E48 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48;
  static constexpr E48 E48_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_UNSPECIFIED;
  static constexpr E48 E48_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_1;
  static constexpr E48 E48_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_2;
  static constexpr E48 E48_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_3;
  static constexpr E48 E48_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_4;
  static constexpr E48 E48_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_CONST_5;
  static inline bool E48_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_IsValid(value);
  }
  static constexpr E48 E48_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_MIN;
  static constexpr E48 E48_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_MAX;
  static constexpr int E48_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_E48_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E48_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_descriptor();
  }
  template <typename T>
  static inline const std::string& E48_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_Name(value);
  }
  static inline bool E48_Parse(absl::string_view name, E48* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_9_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_9_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF9FieldNumber = 11,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF6FieldNumber = 9,
    kF5FieldNumber = 8,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97 f_9 = 11;
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* mutable_f_9(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>& _internal_f_9() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>* _internal_mutable_f_9();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& f_9(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* add_f_9();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>& f_9() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional bool f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional bool f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional int64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.E48 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 f_5() const;
  void set_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 2,
      92, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97 > f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::int32_t f_2_;
    bool f_1_;
    bool f_3_;
    ::int64_t f_4_;
    ::int64_t f_6_;
    int f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6_M12 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6.M12) */ {
 public:
  inline Message7_M6_M12() : Message7_M6_M12(nullptr) {}
  ~Message7_M6_M12() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6_M12(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6_M12(const Message7_M6_M12& from) : Message7_M6_M12(nullptr, from) {}
  inline Message7_M6_M12(Message7_M6_M12&& from) noexcept
      : Message7_M6_M12(nullptr, std::move(from)) {}
  inline Message7_M6_M12& operator=(const Message7_M6_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6_M12& operator=(Message7_M6_M12&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6_M12& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6_M12* internal_default_instance() {
    return reinterpret_cast<const Message7_M6_M12*>(
        &_Message7_M6_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 76;
  friend void swap(Message7_M6_M12& a, Message7_M6_M12& b) { a.Swap(&b); }
  inline void Swap(Message7_M6_M12* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6_M12* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6_M12* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6_M12>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6_M12& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6_M12& from) { Message7_M6_M12::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6_M12* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6.M12"; }

 protected:
  explicit Message7_M6_M12(::google::protobuf::Arena* arena);
  Message7_M6_M12(::google::protobuf::Arena* arena, const Message7_M6_M12& from);
  Message7_M6_M12(::google::protobuf::Arena* arena, Message7_M6_M12&& from) noexcept
      : Message7_M6_M12(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M24 = Message7_M6_M12_M24;
  using M30 = Message7_M6_M12_M30;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M6.M12.M24 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M6_M12_M24* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M24& f_1(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M24* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>& f_1() const;
  // repeated .fleetbench.proto.Message7.M6.M12.M30 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M6_M12_M30* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M6_M12_M30& f_2(int index) const;
  ::fleetbench::proto::Message7_M6_M12_M30* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>& f_2() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6.M12)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_M12_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M24 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6_M12_M30 > f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M96 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 4,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M6) */ {
 public:
  inline Message7_M6() : Message7_M6(nullptr) {}
  ~Message7_M6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M6(const Message7_M6& from) : Message7_M6(nullptr, from) {}
  inline Message7_M6(Message7_M6&& from) noexcept
      : Message7_M6(nullptr, std::move(from)) {}
  inline Message7_M6& operator=(const Message7_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M6& operator=(Message7_M6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M6* internal_default_instance() {
    return reinterpret_cast<const Message7_M6*>(
        &_Message7_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 77;
  friend void swap(Message7_M6& a, Message7_M6& b) { a.Swap(&b); }
  inline void Swap(Message7_M6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M6& from) { Message7_M6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M6"; }

 protected:
  explicit Message7_M6(::google::protobuf::Arena* arena);
  Message7_M6(::google::protobuf::Arena* arena, const Message7_M6& from);
  Message7_M6(::google::protobuf::Arena* arena, Message7_M6&& from) noexcept
      : Message7_M6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M10 = Message7_M6_M10;
  using M12 = Message7_M6_M12;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M6.M10 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M6_M10& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M10* release_f_2();
  ::fleetbench::proto::Message7_M6_M10* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M6_M10* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10* value);
  ::fleetbench::proto::Message7_M6_M10* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M6_M10& _internal_f_2() const;
  ::fleetbench::proto::Message7_M6_M10* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message7.M6.M12 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message7_M6_M12& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M6_M12* release_f_4();
  ::fleetbench::proto::Message7_M6_M12* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message7_M6_M12* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M6_M12* value);
  ::fleetbench::proto::Message7_M6_M12* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message7_M6_M12& _internal_f_4() const;
  ::fleetbench::proto::Message7_M6_M12* _internal_mutable_f_4();

  public:
  // optional double f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  double f_1() const;
  void set_f_1(double value);

  private:
  double _internal_f_1() const;
  void _internal_set_f_1(double value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M6_M10* f_2_;
    ::fleetbench::proto::Message7_M6_M12* f_4_;
    double f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M95 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& f_1(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>& f_1() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95 > f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85() : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M89 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89;
  using E45 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45;
  static constexpr E45 E45_UNSPECIFIED = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_UNSPECIFIED;
  static constexpr E45 E45_CONST_1 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_1;
  static constexpr E45 E45_CONST_2 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_2;
  static constexpr E45 E45_CONST_3 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_3;
  static constexpr E45 E45_CONST_4 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_4;
  static constexpr E45 E45_CONST_5 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_CONST_5;
  static inline bool E45_IsValid(int value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_IsValid(value);
  }
  static constexpr E45 E45_MIN = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_MIN;
  static constexpr E45 E45_MAX = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_MAX;
  static constexpr int E45_ARRAYSIZE = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_E45_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E45_descriptor() {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_descriptor();
  }
  template <typename T>
  static inline const std::string& E45_Name(T value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_Name(value);
  }
  static inline bool E45_Parse(absl::string_view name, E45* value) {
    return Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& f_3(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>& f_3() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.E45 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 f_0() const;
  void set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89 > f_3_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69_M78 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78() : Message7_M2_M19_M29_M38_M60_M62_M69_M78(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69_M78() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69_M78(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78(const Message7_M2_M19_M29_M38_M60_M62_M69_M78& from) : Message7_M2_M19_M29_M38_M60_M62_M69_M78(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78(Message7_M2_M19_M29_M38_M60_M62_M69_M78&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69_M78& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69_M78& operator=(Message7_M2_M19_M29_M38_M60_M62_M69_M78&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69_M78& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69_M78* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69_M78*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78& a, Message7_M2_M19_M29_M38_M60_M62_M69_M78& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69_M78* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69_M78* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69_M78>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69_M78& from) { Message7_M2_M19_M29_M38_M60_M62_M69_M78::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69_M78* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69_M78(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69_M78& from);
  Message7_M2_M19_M29_M38_M60_M62_M69_M78(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69_M78&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69_M78(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M85 = Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* _internal_mutable_f_1();

  public:
  // optional fixed32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_M78_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* f_1_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62_M69 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62_M69() : Message7_M2_M19_M29_M38_M60_M62_M69(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62_M69() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62_M69(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62_M69(const Message7_M2_M19_M29_M38_M60_M62_M69& from) : Message7_M2_M19_M29_M38_M60_M62_M69(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69(Message7_M2_M19_M29_M38_M60_M62_M69&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62_M69& operator=(const Message7_M2_M19_M29_M38_M60_M62_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62_M69& operator=(Message7_M2_M19_M29_M38_M60_M62_M69&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62_M69& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62_M69* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62_M69*>(
        &_Message7_M2_M19_M29_M38_M60_M62_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62_M69& a, Message7_M2_M19_M29_M38_M60_M62_M69& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62_M69* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62_M69* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62_M69* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62_M69>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62_M69& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62_M69& from) { Message7_M2_M19_M29_M38_M60_M62_M69::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62_M69* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62_M69(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62_M69(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62_M69& from);
  Message7_M2_M19_M29_M38_M60_M62_M69(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62_M69&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62_M69(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M78 = Message7_M2_M19_M29_M38_M60_M62_M69_M78;
  using M80 = Message7_M2_M19_M29_M38_M60_M62_M69_M80;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78& f_1(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>& f_1() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* release_f_2();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80& _internal_f_2() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_M69_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78 > f_1_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60_M62 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60_M62() : Message7_M2_M19_M29_M38_M60_M62(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60_M62() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60_M62(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60_M62(const Message7_M2_M19_M29_M38_M60_M62& from) : Message7_M2_M19_M29_M38_M60_M62(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60_M62(Message7_M2_M19_M29_M38_M60_M62&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60_M62& operator=(const Message7_M2_M19_M29_M38_M60_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60_M62& operator=(Message7_M2_M19_M29_M38_M60_M62&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60_M62& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60_M62* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60_M62*>(
        &_Message7_M2_M19_M29_M38_M60_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(Message7_M2_M19_M29_M38_M60_M62& a, Message7_M2_M19_M29_M38_M60_M62& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60_M62* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60_M62* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60_M62* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60_M62>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60_M62& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60_M62& from) { Message7_M2_M19_M29_M38_M60_M62::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60_M62* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60_M62(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60_M62(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60_M62& from);
  Message7_M2_M19_M29_M38_M60_M62(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60_M62&& from) noexcept
      : Message7_M2_M19_M29_M38_M60_M62(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M66 = Message7_M2_M19_M29_M38_M60_M62_M66;
  using M69 = Message7_M2_M19_M29_M38_M60_M62_M69;
  using M70 = Message7_M2_M19_M29_M38_M60_M62_M70;
  using M72 = Message7_M2_M19_M29_M38_M60_M62_M72;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_schema(schema);
      }
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size() * sizeof(::int32_t));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF5FieldNumber = 6,
    kF4FieldNumber = 5,
    kF1FieldNumber = 2,
  };
  // repeated int32 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66& f_2(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>& f_2() const;
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69& f_3(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>& f_3() const;
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72 f_5 = 6;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72* mutable_f_5(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>* _internal_mutable_f_5();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72& f_5(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72* add_f_5();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>& f_5() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* release_f_4();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70& _internal_f_4() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* _internal_mutable_f_4();

  public:
  // optional double f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  double f_1() const;
  void set_f_1(double value);

  private:
  double _internal_f_1() const;
  void _internal_set_f_1(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_M62_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66 > f_2_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69 > f_3_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72 > f_5_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* f_4_;
    double f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38_M60 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38.M60) */ {
 public:
  inline Message7_M2_M19_M29_M38_M60() : Message7_M2_M19_M29_M38_M60(nullptr) {}
  ~Message7_M2_M19_M29_M38_M60() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38_M60(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38_M60(const Message7_M2_M19_M29_M38_M60& from) : Message7_M2_M19_M29_M38_M60(nullptr, from) {}
  inline Message7_M2_M19_M29_M38_M60(Message7_M2_M19_M29_M38_M60&& from) noexcept
      : Message7_M2_M19_M29_M38_M60(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38_M60& operator=(const Message7_M2_M19_M29_M38_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38_M60& operator=(Message7_M2_M19_M29_M38_M60&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38_M60& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38_M60* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38_M60*>(
        &_Message7_M2_M19_M29_M38_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(Message7_M2_M19_M29_M38_M60& a, Message7_M2_M19_M29_M38_M60& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38_M60* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38_M60* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38_M60* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38_M60>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38_M60& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38_M60& from) { Message7_M2_M19_M29_M38_M60::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38_M60* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38.M60"; }

 protected:
  explicit Message7_M2_M19_M29_M38_M60(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38_M60(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38_M60& from);
  Message7_M2_M19_M29_M38_M60(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38_M60&& from) noexcept
      : Message7_M2_M19_M29_M38_M60(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M62 = Message7_M2_M19_M29_M38_M60_M62;
  using M64 = Message7_M2_M19_M29_M38_M60_M64;
  using M65 = Message7_M2_M19_M29_M38_M60_M65;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 7,
    kF3FieldNumber = 4,
    kF7FieldNumber = 8,
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64 f_4 = 7;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64& f_4(int index) const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>& f_4() const;
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* release_f_3();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62& _internal_f_3() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* release_f_7();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65& _internal_f_7() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* _internal_mutable_f_7();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38.M60)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_M60_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64 > f_4_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* f_3_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* f_7_;
    ::int64_t f_0_;
    float f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29_M38 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29.M38) */ {
 public:
  inline Message7_M2_M19_M29_M38() : Message7_M2_M19_M29_M38(nullptr) {}
  ~Message7_M2_M19_M29_M38() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29_M38(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29_M38(const Message7_M2_M19_M29_M38& from) : Message7_M2_M19_M29_M38(nullptr, from) {}
  inline Message7_M2_M19_M29_M38(Message7_M2_M19_M29_M38&& from) noexcept
      : Message7_M2_M19_M29_M38(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29_M38& operator=(const Message7_M2_M19_M29_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29_M38& operator=(Message7_M2_M19_M29_M38&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29_M38& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29_M38* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29_M38*>(
        &_Message7_M2_M19_M29_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(Message7_M2_M19_M29_M38& a, Message7_M2_M19_M29_M38& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29_M38* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29_M38* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29_M38* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29_M38>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29_M38& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29_M38& from) { Message7_M2_M19_M29_M38::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29_M38* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29.M38"; }

 protected:
  explicit Message7_M2_M19_M29_M38(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29_M38(::google::protobuf::Arena* arena, const Message7_M2_M19_M29_M38& from);
  Message7_M2_M19_M29_M38(::google::protobuf::Arena* arena, Message7_M2_M19_M29_M38&& from) noexcept
      : Message7_M2_M19_M29_M38(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M60 = Message7_M2_M19_M29_M38_M60;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29.M38)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_M38_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19_M29 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19.M29) */ {
 public:
  inline Message7_M2_M19_M29() : Message7_M2_M19_M29(nullptr) {}
  ~Message7_M2_M19_M29() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19_M29(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19_M29(const Message7_M2_M19_M29& from) : Message7_M2_M19_M29(nullptr, from) {}
  inline Message7_M2_M19_M29(Message7_M2_M19_M29&& from) noexcept
      : Message7_M2_M19_M29(nullptr, std::move(from)) {}
  inline Message7_M2_M19_M29& operator=(const Message7_M2_M19_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19_M29& operator=(Message7_M2_M19_M29&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19_M29& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19_M29* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19_M29*>(
        &_Message7_M2_M19_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Message7_M2_M19_M29& a, Message7_M2_M19_M29& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19_M29* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19_M29* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19_M29* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19_M29>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19_M29& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19_M29& from) { Message7_M2_M19_M29::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19_M29* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19.M29"; }

 protected:
  explicit Message7_M2_M19_M29(::google::protobuf::Arena* arena);
  Message7_M2_M19_M29(::google::protobuf::Arena* arena, const Message7_M2_M19_M29& from);
  Message7_M2_M19_M29(::google::protobuf::Arena* arena, Message7_M2_M19_M29&& from) noexcept
      : Message7_M2_M19_M29(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M38 = Message7_M2_M19_M29_M38;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29.M38 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message7_M2_M19_M29_M38& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29_M38* release_f_1();
  ::fleetbench::proto::Message7_M2_M19_M29_M38* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38* value);
  ::fleetbench::proto::Message7_M2_M19_M29_M38* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29_M38& _internal_f_1() const;
  ::fleetbench::proto::Message7_M2_M19_M29_M38* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19.M29)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_M29_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M2_M19_M29_M38* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2_M19 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2.M19) */ {
 public:
  inline Message7_M2_M19() : Message7_M2_M19(nullptr) {}
  ~Message7_M2_M19() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2_M19(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2_M19(const Message7_M2_M19& from) : Message7_M2_M19(nullptr, from) {}
  inline Message7_M2_M19(Message7_M2_M19&& from) noexcept
      : Message7_M2_M19(nullptr, std::move(from)) {}
  inline Message7_M2_M19& operator=(const Message7_M2_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2_M19& operator=(Message7_M2_M19&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2_M19& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2_M19* internal_default_instance() {
    return reinterpret_cast<const Message7_M2_M19*>(
        &_Message7_M2_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Message7_M2_M19& a, Message7_M2_M19& b) { a.Swap(&b); }
  inline void Swap(Message7_M2_M19* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2_M19* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2_M19* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2_M19>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2_M19& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2_M19& from) { Message7_M2_M19::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2_M19* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2.M19"; }

 protected:
  explicit Message7_M2_M19(::google::protobuf::Arena* arena);
  Message7_M2_M19(::google::protobuf::Arena* arena, const Message7_M2_M19& from);
  Message7_M2_M19(::google::protobuf::Arena* arena, Message7_M2_M19&& from) noexcept
      : Message7_M2_M19(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M21 = Message7_M2_M19_M21;
  using M29 = Message7_M2_M19_M29;
  using E4 = Message7_M2_M19_E4;
  static constexpr E4 E4_UNSPECIFIED = Message7_M2_M19_E4_E4_UNSPECIFIED;
  static constexpr E4 E4_CONST_1 = Message7_M2_M19_E4_E4_CONST_1;
  static constexpr E4 E4_CONST_2 = Message7_M2_M19_E4_E4_CONST_2;
  static constexpr E4 E4_CONST_3 = Message7_M2_M19_E4_E4_CONST_3;
  static constexpr E4 E4_CONST_4 = Message7_M2_M19_E4_E4_CONST_4;
  static constexpr E4 E4_CONST_5 = Message7_M2_M19_E4_E4_CONST_5;
  static inline bool E4_IsValid(int value) {
    return Message7_M2_M19_E4_IsValid(value);
  }
  static constexpr E4 E4_MIN = Message7_M2_M19_E4_E4_MIN;
  static constexpr E4 E4_MAX = Message7_M2_M19_E4_E4_MAX;
  static constexpr int E4_ARRAYSIZE = Message7_M2_M19_E4_E4_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E4_descriptor() {
    return Message7_M2_M19_E4_descriptor();
  }
  template <typename T>
  static inline const std::string& E4_Name(T value) {
    return Message7_M2_M19_E4_Name(value);
  }
  static inline bool E4_Parse(absl::string_view name, E4* value) {
    return Message7_M2_M19_E4_Parse(name, value);
  }
  using E5 = Message7_M2_M19_E5;
  static constexpr E5 E5_UNSPECIFIED = Message7_M2_M19_E5_E5_UNSPECIFIED;
  static constexpr E5 E5_CONST_1 = Message7_M2_M19_E5_E5_CONST_1;
  static constexpr E5 E5_CONST_2 = Message7_M2_M19_E5_E5_CONST_2;
  static constexpr E5 E5_CONST_3 = Message7_M2_M19_E5_E5_CONST_3;
  static constexpr E5 E5_CONST_4 = Message7_M2_M19_E5_E5_CONST_4;
  static constexpr E5 E5_CONST_5 = Message7_M2_M19_E5_E5_CONST_5;
  static inline bool E5_IsValid(int value) {
    return Message7_M2_M19_E5_IsValid(value);
  }
  static constexpr E5 E5_MIN = Message7_M2_M19_E5_E5_MIN;
  static constexpr E5 E5_MAX = Message7_M2_M19_E5_E5_MAX;
  static constexpr int E5_ARRAYSIZE = Message7_M2_M19_E5_E5_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E5_descriptor() {
    return Message7_M2_M19_E5_descriptor();
  }
  template <typename T>
  static inline const std::string& E5_Name(T value) {
    return Message7_M2_M19_E5_Name(value);
  }
  static inline bool E5_Parse(absl::string_view name, E5* value) {
    return Message7_M2_M19_E5_Parse(name, value);
  }
  using E6 = Message7_M2_M19_E6;
  static constexpr E6 E6_UNSPECIFIED = Message7_M2_M19_E6_E6_UNSPECIFIED;
  static constexpr E6 E6_CONST_1 = Message7_M2_M19_E6_E6_CONST_1;
  static constexpr E6 E6_CONST_2 = Message7_M2_M19_E6_E6_CONST_2;
  static constexpr E6 E6_CONST_3 = Message7_M2_M19_E6_E6_CONST_3;
  static constexpr E6 E6_CONST_4 = Message7_M2_M19_E6_E6_CONST_4;
  static constexpr E6 E6_CONST_5 = Message7_M2_M19_E6_E6_CONST_5;
  static inline bool E6_IsValid(int value) {
    return Message7_M2_M19_E6_IsValid(value);
  }
  static constexpr E6 E6_MIN = Message7_M2_M19_E6_E6_MIN;
  static constexpr E6 E6_MAX = Message7_M2_M19_E6_E6_MAX;
  static constexpr int E6_ARRAYSIZE = Message7_M2_M19_E6_E6_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E6_descriptor() {
    return Message7_M2_M19_E6_descriptor();
  }
  template <typename T>
  static inline const std::string& E6_Name(T value) {
    return Message7_M2_M19_E6_Name(value);
  }
  static inline bool E6_Parse(absl::string_view name, E6* value) {
    return Message7_M2_M19_E6_Parse(name, value);
  }
  using E7 = Message7_M2_M19_E7;
  static constexpr E7 E7_UNSPECIFIED = Message7_M2_M19_E7_E7_UNSPECIFIED;
  static constexpr E7 E7_CONST_1 = Message7_M2_M19_E7_E7_CONST_1;
  static constexpr E7 E7_CONST_2 = Message7_M2_M19_E7_E7_CONST_2;
  static constexpr E7 E7_CONST_3 = Message7_M2_M19_E7_E7_CONST_3;
  static constexpr E7 E7_CONST_4 = Message7_M2_M19_E7_E7_CONST_4;
  static constexpr E7 E7_CONST_5 = Message7_M2_M19_E7_E7_CONST_5;
  static inline bool E7_IsValid(int value) {
    return Message7_M2_M19_E7_IsValid(value);
  }
  static constexpr E7 E7_MIN = Message7_M2_M19_E7_E7_MIN;
  static constexpr E7 E7_MAX = Message7_M2_M19_E7_E7_MAX;
  static constexpr int E7_ARRAYSIZE = Message7_M2_M19_E7_E7_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E7_descriptor() {
    return Message7_M2_M19_E7_descriptor();
  }
  template <typename T>
  static inline const std::string& E7_Name(T value) {
    return Message7_M2_M19_E7_Name(value);
  }
  static inline bool E7_Parse(absl::string_view name, E7* value) {
    return Message7_M2_M19_E7_Parse(name, value);
  }
  using E8 = Message7_M2_M19_E8;
  static constexpr E8 E8_UNSPECIFIED = Message7_M2_M19_E8_E8_UNSPECIFIED;
  static constexpr E8 E8_CONST_1 = Message7_M2_M19_E8_E8_CONST_1;
  static constexpr E8 E8_CONST_2 = Message7_M2_M19_E8_E8_CONST_2;
  static constexpr E8 E8_CONST_3 = Message7_M2_M19_E8_E8_CONST_3;
  static constexpr E8 E8_CONST_4 = Message7_M2_M19_E8_E8_CONST_4;
  static constexpr E8 E8_CONST_5 = Message7_M2_M19_E8_E8_CONST_5;
  static inline bool E8_IsValid(int value) {
    return Message7_M2_M19_E8_IsValid(value);
  }
  static constexpr E8 E8_MIN = Message7_M2_M19_E8_E8_MIN;
  static constexpr E8 E8_MAX = Message7_M2_M19_E8_E8_MAX;
  static constexpr int E8_ARRAYSIZE = Message7_M2_M19_E8_E8_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E8_descriptor() {
    return Message7_M2_M19_E8_descriptor();
  }
  template <typename T>
  static inline const std::string& E8_Name(T value) {
    return Message7_M2_M19_E8_Name(value);
  }
  static inline bool E8_Parse(absl::string_view name, E8* value) {
    return Message7_M2_M19_E8_Parse(name, value);
  }
  using E9 = Message7_M2_M19_E9;
  static constexpr E9 E9_UNSPECIFIED = Message7_M2_M19_E9_E9_UNSPECIFIED;
  static constexpr E9 E9_CONST_1 = Message7_M2_M19_E9_E9_CONST_1;
  static constexpr E9 E9_CONST_2 = Message7_M2_M19_E9_E9_CONST_2;
  static constexpr E9 E9_CONST_3 = Message7_M2_M19_E9_E9_CONST_3;
  static constexpr E9 E9_CONST_4 = Message7_M2_M19_E9_E9_CONST_4;
  static constexpr E9 E9_CONST_5 = Message7_M2_M19_E9_E9_CONST_5;
  static inline bool E9_IsValid(int value) {
    return Message7_M2_M19_E9_IsValid(value);
  }
  static constexpr E9 E9_MIN = Message7_M2_M19_E9_E9_MIN;
  static constexpr E9 E9_MAX = Message7_M2_M19_E9_E9_MAX;
  static constexpr int E9_ARRAYSIZE = Message7_M2_M19_E9_E9_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E9_descriptor() {
    return Message7_M2_M19_E9_descriptor();
  }
  template <typename T>
  static inline const std::string& E9_Name(T value) {
    return Message7_M2_M19_E9_Name(value);
  }
  static inline bool E9_Parse(absl::string_view name, E9* value) {
    return Message7_M2_M19_E9_Parse(name, value);
  }
  using E10 = Message7_M2_M19_E10;
  static constexpr E10 E10_UNSPECIFIED = Message7_M2_M19_E10_E10_UNSPECIFIED;
  static constexpr E10 E10_CONST_1 = Message7_M2_M19_E10_E10_CONST_1;
  static constexpr E10 E10_CONST_2 = Message7_M2_M19_E10_E10_CONST_2;
  static constexpr E10 E10_CONST_3 = Message7_M2_M19_E10_E10_CONST_3;
  static constexpr E10 E10_CONST_4 = Message7_M2_M19_E10_E10_CONST_4;
  static constexpr E10 E10_CONST_5 = Message7_M2_M19_E10_E10_CONST_5;
  static inline bool E10_IsValid(int value) {
    return Message7_M2_M19_E10_IsValid(value);
  }
  static constexpr E10 E10_MIN = Message7_M2_M19_E10_E10_MIN;
  static constexpr E10 E10_MAX = Message7_M2_M19_E10_E10_MAX;
  static constexpr int E10_ARRAYSIZE = Message7_M2_M19_E10_E10_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E10_descriptor() {
    return Message7_M2_M19_E10_descriptor();
  }
  template <typename T>
  static inline const std::string& E10_Name(T value) {
    return Message7_M2_M19_E10_Name(value);
  }
  static inline bool E10_Parse(absl::string_view name, E10* value) {
    return Message7_M2_M19_E10_Parse(name, value);
  }
  using E11 = Message7_M2_M19_E11;
  static constexpr E11 E11_UNSPECIFIED = Message7_M2_M19_E11_E11_UNSPECIFIED;
  static constexpr E11 E11_CONST_1 = Message7_M2_M19_E11_E11_CONST_1;
  static constexpr E11 E11_CONST_2 = Message7_M2_M19_E11_E11_CONST_2;
  static constexpr E11 E11_CONST_3 = Message7_M2_M19_E11_E11_CONST_3;
  static constexpr E11 E11_CONST_4 = Message7_M2_M19_E11_E11_CONST_4;
  static constexpr E11 E11_CONST_5 = Message7_M2_M19_E11_E11_CONST_5;
  static inline bool E11_IsValid(int value) {
    return Message7_M2_M19_E11_IsValid(value);
  }
  static constexpr E11 E11_MIN = Message7_M2_M19_E11_E11_MIN;
  static constexpr E11 E11_MAX = Message7_M2_M19_E11_E11_MAX;
  static constexpr int E11_ARRAYSIZE = Message7_M2_M19_E11_E11_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E11_descriptor() {
    return Message7_M2_M19_E11_descriptor();
  }
  template <typename T>
  static inline const std::string& E11_Name(T value) {
    return Message7_M2_M19_E11_Name(value);
  }
  static inline bool E11_Parse(absl::string_view name, E11* value) {
    return Message7_M2_M19_E11_Parse(name, value);
  }
  using E12 = Message7_M2_M19_E12;
  static constexpr E12 E12_UNSPECIFIED = Message7_M2_M19_E12_E12_UNSPECIFIED;
  static constexpr E12 E12_CONST_1 = Message7_M2_M19_E12_E12_CONST_1;
  static constexpr E12 E12_CONST_2 = Message7_M2_M19_E12_E12_CONST_2;
  static constexpr E12 E12_CONST_3 = Message7_M2_M19_E12_E12_CONST_3;
  static constexpr E12 E12_CONST_4 = Message7_M2_M19_E12_E12_CONST_4;
  static constexpr E12 E12_CONST_5 = Message7_M2_M19_E12_E12_CONST_5;
  static inline bool E12_IsValid(int value) {
    return Message7_M2_M19_E12_IsValid(value);
  }
  static constexpr E12 E12_MIN = Message7_M2_M19_E12_E12_MIN;
  static constexpr E12 E12_MAX = Message7_M2_M19_E12_E12_MAX;
  static constexpr int E12_ARRAYSIZE = Message7_M2_M19_E12_E12_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E12_descriptor() {
    return Message7_M2_M19_E12_descriptor();
  }
  template <typename T>
  static inline const std::string& E12_Name(T value) {
    return Message7_M2_M19_E12_Name(value);
  }
  static inline bool E12_Parse(absl::string_view name, E12* value) {
    return Message7_M2_M19_E12_Parse(name, value);
  }
  using E13 = Message7_M2_M19_E13;
  static constexpr E13 E13_UNSPECIFIED = Message7_M2_M19_E13_E13_UNSPECIFIED;
  static constexpr E13 E13_CONST_1 = Message7_M2_M19_E13_E13_CONST_1;
  static constexpr E13 E13_CONST_2 = Message7_M2_M19_E13_E13_CONST_2;
  static constexpr E13 E13_CONST_3 = Message7_M2_M19_E13_E13_CONST_3;
  static constexpr E13 E13_CONST_4 = Message7_M2_M19_E13_E13_CONST_4;
  static constexpr E13 E13_CONST_5 = Message7_M2_M19_E13_E13_CONST_5;
  static inline bool E13_IsValid(int value) {
    return Message7_M2_M19_E13_IsValid(value);
  }
  static constexpr E13 E13_MIN = Message7_M2_M19_E13_E13_MIN;
  static constexpr E13 E13_MAX = Message7_M2_M19_E13_E13_MAX;
  static constexpr int E13_ARRAYSIZE = Message7_M2_M19_E13_E13_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E13_descriptor() {
    return Message7_M2_M19_E13_descriptor();
  }
  template <typename T>
  static inline const std::string& E13_Name(T value) {
    return Message7_M2_M19_E13_Name(value);
  }
  static inline bool E13_Parse(absl::string_view name, E13* value) {
    return Message7_M2_M19_E13_Parse(name, value);
  }
  using E14 = Message7_M2_M19_E14;
  static constexpr E14 E14_UNSPECIFIED = Message7_M2_M19_E14_E14_UNSPECIFIED;
  static constexpr E14 E14_CONST_1 = Message7_M2_M19_E14_E14_CONST_1;
  static constexpr E14 E14_CONST_2 = Message7_M2_M19_E14_E14_CONST_2;
  static constexpr E14 E14_CONST_3 = Message7_M2_M19_E14_E14_CONST_3;
  static constexpr E14 E14_CONST_4 = Message7_M2_M19_E14_E14_CONST_4;
  static constexpr E14 E14_CONST_5 = Message7_M2_M19_E14_E14_CONST_5;
  static inline bool E14_IsValid(int value) {
    return Message7_M2_M19_E14_IsValid(value);
  }
  static constexpr E14 E14_MIN = Message7_M2_M19_E14_E14_MIN;
  static constexpr E14 E14_MAX = Message7_M2_M19_E14_E14_MAX;
  static constexpr int E14_ARRAYSIZE = Message7_M2_M19_E14_E14_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E14_descriptor() {
    return Message7_M2_M19_E14_descriptor();
  }
  template <typename T>
  static inline const std::string& E14_Name(T value) {
    return Message7_M2_M19_E14_Name(value);
  }
  static inline bool E14_Parse(absl::string_view name, E14* value) {
    return Message7_M2_M19_E14_Parse(name, value);
  }
  using E15 = Message7_M2_M19_E15;
  static constexpr E15 E15_UNSPECIFIED = Message7_M2_M19_E15_E15_UNSPECIFIED;
  static constexpr E15 E15_CONST_1 = Message7_M2_M19_E15_E15_CONST_1;
  static constexpr E15 E15_CONST_2 = Message7_M2_M19_E15_E15_CONST_2;
  static constexpr E15 E15_CONST_3 = Message7_M2_M19_E15_E15_CONST_3;
  static constexpr E15 E15_CONST_4 = Message7_M2_M19_E15_E15_CONST_4;
  static constexpr E15 E15_CONST_5 = Message7_M2_M19_E15_E15_CONST_5;
  static inline bool E15_IsValid(int value) {
    return Message7_M2_M19_E15_IsValid(value);
  }
  static constexpr E15 E15_MIN = Message7_M2_M19_E15_E15_MIN;
  static constexpr E15 E15_MAX = Message7_M2_M19_E15_E15_MAX;
  static constexpr int E15_ARRAYSIZE = Message7_M2_M19_E15_E15_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E15_descriptor() {
    return Message7_M2_M19_E15_descriptor();
  }
  template <typename T>
  static inline const std::string& E15_Name(T value) {
    return Message7_M2_M19_E15_Name(value);
  }
  static inline bool E15_Parse(absl::string_view name, E15* value) {
    return Message7_M2_M19_E15_Parse(name, value);
  }
  using E16 = Message7_M2_M19_E16;
  static constexpr E16 E16_UNSPECIFIED = Message7_M2_M19_E16_E16_UNSPECIFIED;
  static constexpr E16 E16_CONST_1 = Message7_M2_M19_E16_E16_CONST_1;
  static constexpr E16 E16_CONST_2 = Message7_M2_M19_E16_E16_CONST_2;
  static constexpr E16 E16_CONST_3 = Message7_M2_M19_E16_E16_CONST_3;
  static constexpr E16 E16_CONST_4 = Message7_M2_M19_E16_E16_CONST_4;
  static constexpr E16 E16_CONST_5 = Message7_M2_M19_E16_E16_CONST_5;
  static inline bool E16_IsValid(int value) {
    return Message7_M2_M19_E16_IsValid(value);
  }
  static constexpr E16 E16_MIN = Message7_M2_M19_E16_E16_MIN;
  static constexpr E16 E16_MAX = Message7_M2_M19_E16_E16_MAX;
  static constexpr int E16_ARRAYSIZE = Message7_M2_M19_E16_E16_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E16_descriptor() {
    return Message7_M2_M19_E16_descriptor();
  }
  template <typename T>
  static inline const std::string& E16_Name(T value) {
    return Message7_M2_M19_E16_Name(value);
  }
  static inline bool E16_Parse(absl::string_view name, E16* value) {
    return Message7_M2_M19_E16_Parse(name, value);
  }
  using E17 = Message7_M2_M19_E17;
  static constexpr E17 E17_UNSPECIFIED = Message7_M2_M19_E17_E17_UNSPECIFIED;
  static constexpr E17 E17_CONST_1 = Message7_M2_M19_E17_E17_CONST_1;
  static constexpr E17 E17_CONST_2 = Message7_M2_M19_E17_E17_CONST_2;
  static constexpr E17 E17_CONST_3 = Message7_M2_M19_E17_E17_CONST_3;
  static constexpr E17 E17_CONST_4 = Message7_M2_M19_E17_E17_CONST_4;
  static constexpr E17 E17_CONST_5 = Message7_M2_M19_E17_E17_CONST_5;
  static inline bool E17_IsValid(int value) {
    return Message7_M2_M19_E17_IsValid(value);
  }
  static constexpr E17 E17_MIN = Message7_M2_M19_E17_E17_MIN;
  static constexpr E17 E17_MAX = Message7_M2_M19_E17_E17_MAX;
  static constexpr int E17_ARRAYSIZE = Message7_M2_M19_E17_E17_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E17_descriptor() {
    return Message7_M2_M19_E17_descriptor();
  }
  template <typename T>
  static inline const std::string& E17_Name(T value) {
    return Message7_M2_M19_E17_Name(value);
  }
  static inline bool E17_Parse(absl::string_view name, E17* value) {
    return Message7_M2_M19_E17_Parse(name, value);
  }
  using E18 = Message7_M2_M19_E18;
  static constexpr E18 E18_UNSPECIFIED = Message7_M2_M19_E18_E18_UNSPECIFIED;
  static constexpr E18 E18_CONST_1 = Message7_M2_M19_E18_E18_CONST_1;
  static constexpr E18 E18_CONST_2 = Message7_M2_M19_E18_E18_CONST_2;
  static constexpr E18 E18_CONST_3 = Message7_M2_M19_E18_E18_CONST_3;
  static constexpr E18 E18_CONST_4 = Message7_M2_M19_E18_E18_CONST_4;
  static constexpr E18 E18_CONST_5 = Message7_M2_M19_E18_E18_CONST_5;
  static inline bool E18_IsValid(int value) {
    return Message7_M2_M19_E18_IsValid(value);
  }
  static constexpr E18 E18_MIN = Message7_M2_M19_E18_E18_MIN;
  static constexpr E18 E18_MAX = Message7_M2_M19_E18_E18_MAX;
  static constexpr int E18_ARRAYSIZE = Message7_M2_M19_E18_E18_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E18_descriptor() {
    return Message7_M2_M19_E18_descriptor();
  }
  template <typename T>
  static inline const std::string& E18_Name(T value) {
    return Message7_M2_M19_E18_Name(value);
  }
  static inline bool E18_Parse(absl::string_view name, E18* value) {
    return Message7_M2_M19_E18_Parse(name, value);
  }
  using E19 = Message7_M2_M19_E19;
  static constexpr E19 E19_UNSPECIFIED = Message7_M2_M19_E19_E19_UNSPECIFIED;
  static constexpr E19 E19_CONST_1 = Message7_M2_M19_E19_E19_CONST_1;
  static constexpr E19 E19_CONST_2 = Message7_M2_M19_E19_E19_CONST_2;
  static constexpr E19 E19_CONST_3 = Message7_M2_M19_E19_E19_CONST_3;
  static constexpr E19 E19_CONST_4 = Message7_M2_M19_E19_E19_CONST_4;
  static constexpr E19 E19_CONST_5 = Message7_M2_M19_E19_E19_CONST_5;
  static inline bool E19_IsValid(int value) {
    return Message7_M2_M19_E19_IsValid(value);
  }
  static constexpr E19 E19_MIN = Message7_M2_M19_E19_E19_MIN;
  static constexpr E19 E19_MAX = Message7_M2_M19_E19_E19_MAX;
  static constexpr int E19_ARRAYSIZE = Message7_M2_M19_E19_E19_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E19_descriptor() {
    return Message7_M2_M19_E19_descriptor();
  }
  template <typename T>
  static inline const std::string& E19_Name(T value) {
    return Message7_M2_M19_E19_Name(value);
  }
  static inline bool E19_Parse(absl::string_view name, E19* value) {
    return Message7_M2_M19_E19_Parse(name, value);
  }
  using E20 = Message7_M2_M19_E20;
  static constexpr E20 E20_UNSPECIFIED = Message7_M2_M19_E20_E20_UNSPECIFIED;
  static constexpr E20 E20_CONST_1 = Message7_M2_M19_E20_E20_CONST_1;
  static constexpr E20 E20_CONST_2 = Message7_M2_M19_E20_E20_CONST_2;
  static constexpr E20 E20_CONST_3 = Message7_M2_M19_E20_E20_CONST_3;
  static constexpr E20 E20_CONST_4 = Message7_M2_M19_E20_E20_CONST_4;
  static constexpr E20 E20_CONST_5 = Message7_M2_M19_E20_E20_CONST_5;
  static inline bool E20_IsValid(int value) {
    return Message7_M2_M19_E20_IsValid(value);
  }
  static constexpr E20 E20_MIN = Message7_M2_M19_E20_E20_MIN;
  static constexpr E20 E20_MAX = Message7_M2_M19_E20_E20_MAX;
  static constexpr int E20_ARRAYSIZE = Message7_M2_M19_E20_E20_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E20_descriptor() {
    return Message7_M2_M19_E20_descriptor();
  }
  template <typename T>
  static inline const std::string& E20_Name(T value) {
    return Message7_M2_M19_E20_Name(value);
  }
  static inline bool E20_Parse(absl::string_view name, E20* value) {
    return Message7_M2_M19_E20_Parse(name, value);
  }
  using E21 = Message7_M2_M19_E21;
  static constexpr E21 E21_UNSPECIFIED = Message7_M2_M19_E21_E21_UNSPECIFIED;
  static constexpr E21 E21_CONST_1 = Message7_M2_M19_E21_E21_CONST_1;
  static constexpr E21 E21_CONST_2 = Message7_M2_M19_E21_E21_CONST_2;
  static constexpr E21 E21_CONST_3 = Message7_M2_M19_E21_E21_CONST_3;
  static constexpr E21 E21_CONST_4 = Message7_M2_M19_E21_E21_CONST_4;
  static constexpr E21 E21_CONST_5 = Message7_M2_M19_E21_E21_CONST_5;
  static inline bool E21_IsValid(int value) {
    return Message7_M2_M19_E21_IsValid(value);
  }
  static constexpr E21 E21_MIN = Message7_M2_M19_E21_E21_MIN;
  static constexpr E21 E21_MAX = Message7_M2_M19_E21_E21_MAX;
  static constexpr int E21_ARRAYSIZE = Message7_M2_M19_E21_E21_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E21_descriptor() {
    return Message7_M2_M19_E21_descriptor();
  }
  template <typename T>
  static inline const std::string& E21_Name(T value) {
    return Message7_M2_M19_E21_Name(value);
  }
  static inline bool E21_Parse(absl::string_view name, E21* value) {
    return Message7_M2_M19_E21_Parse(name, value);
  }
  using E22 = Message7_M2_M19_E22;
  static constexpr E22 E22_UNSPECIFIED = Message7_M2_M19_E22_E22_UNSPECIFIED;
  static constexpr E22 E22_CONST_1 = Message7_M2_M19_E22_E22_CONST_1;
  static constexpr E22 E22_CONST_2 = Message7_M2_M19_E22_E22_CONST_2;
  static constexpr E22 E22_CONST_3 = Message7_M2_M19_E22_E22_CONST_3;
  static constexpr E22 E22_CONST_4 = Message7_M2_M19_E22_E22_CONST_4;
  static constexpr E22 E22_CONST_5 = Message7_M2_M19_E22_E22_CONST_5;
  static inline bool E22_IsValid(int value) {
    return Message7_M2_M19_E22_IsValid(value);
  }
  static constexpr E22 E22_MIN = Message7_M2_M19_E22_E22_MIN;
  static constexpr E22 E22_MAX = Message7_M2_M19_E22_E22_MAX;
  static constexpr int E22_ARRAYSIZE = Message7_M2_M19_E22_E22_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E22_descriptor() {
    return Message7_M2_M19_E22_descriptor();
  }
  template <typename T>
  static inline const std::string& E22_Name(T value) {
    return Message7_M2_M19_E22_Name(value);
  }
  static inline bool E22_Parse(absl::string_view name, E22* value) {
    return Message7_M2_M19_E22_Parse(name, value);
  }
  using E23 = Message7_M2_M19_E23;
  static constexpr E23 E23_UNSPECIFIED = Message7_M2_M19_E23_E23_UNSPECIFIED;
  static constexpr E23 E23_CONST_1 = Message7_M2_M19_E23_E23_CONST_1;
  static constexpr E23 E23_CONST_2 = Message7_M2_M19_E23_E23_CONST_2;
  static constexpr E23 E23_CONST_3 = Message7_M2_M19_E23_E23_CONST_3;
  static constexpr E23 E23_CONST_4 = Message7_M2_M19_E23_E23_CONST_4;
  static constexpr E23 E23_CONST_5 = Message7_M2_M19_E23_E23_CONST_5;
  static inline bool E23_IsValid(int value) {
    return Message7_M2_M19_E23_IsValid(value);
  }
  static constexpr E23 E23_MIN = Message7_M2_M19_E23_E23_MIN;
  static constexpr E23 E23_MAX = Message7_M2_M19_E23_E23_MAX;
  static constexpr int E23_ARRAYSIZE = Message7_M2_M19_E23_E23_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E23_descriptor() {
    return Message7_M2_M19_E23_descriptor();
  }
  template <typename T>
  static inline const std::string& E23_Name(T value) {
    return Message7_M2_M19_E23_Name(value);
  }
  static inline bool E23_Parse(absl::string_view name, E23* value) {
    return Message7_M2_M19_E23_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_133_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_133())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_22().data())), f_22().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_27().data())), f_27().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_56().data())), f_56().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_57().data())), f_57().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_80_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80(i).data())), f_80(i).size()));
      }
      for (int i = 0; i < f_119_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_119(i).data())), f_119(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())), f_14().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())), f_17().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())), f_18().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())), f_34().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())), f_42().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())), f_44().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())), f_49().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())), f_52().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())), f_53().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_65().c_str())), f_65().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_67().c_str())), f_67().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_69().c_str())), f_69().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())), f_77().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())), f_78().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_85().c_str())), f_85().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())), f_91().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_92().c_str())), f_92().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_109().c_str())), f_109().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_111().c_str())), f_111().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114().c_str())), f_114().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_118().c_str())), f_118().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_124().c_str())), f_124().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_127().c_str())), f_127().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())), f_131().size()));
      mutable_f_197()->generate_schema(schema);
      mutable_f_198()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_133_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_133()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_15().data())));
      sizes_list.push_back(f_15().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_22().data())));
      sizes_list.push_back(f_22().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_27().data())));
      sizes_list.push_back(f_27().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_56().data())));
      sizes_list.push_back(f_56().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_57().data())));
      sizes_list.push_back(f_57().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_80().size());
      for (int i = 0; i < f_80_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80(i).c_str())));
        sizes_list.push_back(f_80(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_115().data())));
      sizes_list.push_back(f_115().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_119().size());
      for (int i = 0; i < f_119_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_119(i).c_str())));
        sizes_list.push_back(f_119(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      sizes_list.push_back(f_14().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      sizes_list.push_back(f_17().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      sizes_list.push_back(f_18().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      sizes_list.push_back(f_34().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      sizes_list.push_back(f_42().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      sizes_list.push_back(f_44().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      sizes_list.push_back(f_49().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      sizes_list.push_back(f_52().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      sizes_list.push_back(f_53().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_65().c_str())));
      sizes_list.push_back(f_65().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_67().c_str())));
      sizes_list.push_back(f_67().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_69().c_str())));
      sizes_list.push_back(f_69().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      sizes_list.push_back(f_77().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      sizes_list.push_back(f_78().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_85().c_str())));
      sizes_list.push_back(f_85().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      sizes_list.push_back(f_91().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_92().c_str())));
      sizes_list.push_back(f_92().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_109().c_str())));
      sizes_list.push_back(f_109().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_111().c_str())));
      sizes_list.push_back(f_111().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114().c_str())));
      sizes_list.push_back(f_114().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_118().c_str())));
      sizes_list.push_back(f_118().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_124().c_str())));
      sizes_list.push_back(f_124().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_127().c_str())));
      sizes_list.push_back(f_127().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      sizes_list.push_back(f_131().size());
      mutable_f_197()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_198()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_133_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_15().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_22().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_27().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_56().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_57().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_80_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_115().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_119_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_119(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_65().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_67().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_69().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_85().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_92().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_109().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_111().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_118().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_124().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_127().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      mutable_f_197()->generate_scatter_ptrs(ptrs);
      mutable_f_198()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_133_);
      sizes.push_back(end_addr - start_addr + sizeof(f_133()));
      sizes.push_back(f_15().size() * sizeof(int));
      sizes.push_back(f_22().size() * sizeof(::int64_t));
      sizes.push_back(f_27().size() * sizeof(::int64_t));
      sizes.push_back(f_56().size() * sizeof(::int32_t));
      sizes.push_back(f_57().size() * sizeof(::int32_t));
      sizes.push_back(f_80().size());
      for (int i = 0; i < f_80_size(); ++i) {
        sizes.push_back(f_80(i).size());
      }
      sizes.push_back(f_115().size() * sizeof(int));
      sizes.push_back(f_119().size());
      for (int i = 0; i < f_119_size(); ++i) {
        sizes.push_back(f_119(i).size());
      }
      sizes.push_back(f_2().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_10().size());
      sizes.push_back(f_14().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_17().size());
      sizes.push_back(f_18().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_34().size());
      sizes.push_back(f_42().size());
      sizes.push_back(f_44().size());
      sizes.push_back(f_49().size());
      sizes.push_back(f_52().size());
      sizes.push_back(f_53().size());
      sizes.push_back(f_65().size());
      sizes.push_back(f_67().size());
      sizes.push_back(f_69().size());
      sizes.push_back(f_77().size());
      sizes.push_back(f_78().size());
      sizes.push_back(f_85().size());
      sizes.push_back(f_91().size());
      sizes.push_back(f_92().size());
      sizes.push_back(f_109().size());
      sizes.push_back(f_111().size());
      sizes.push_back(f_114().size());
      sizes.push_back(f_118().size());
      sizes.push_back(f_124().size());
      sizes.push_back(f_127().size());
      sizes.push_back(f_131().size());
      mutable_f_197()->generate_scatter_sizes(sizes);
      mutable_f_198()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_133_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_15()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_15().data())));
      mutable_f_22()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_22().data())));
      mutable_f_27()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_27().data())));
      mutable_f_56()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_56().data())));
      mutable_f_57()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_57().data())));
      size_t num_f_80_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_80_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_80(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80(i).c_str())));
      }
      mutable_f_115()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_115().data())));
      size_t num_f_119_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_119_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_119(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_119(i).c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_42(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_42().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_49(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_65(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_65().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_67(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_67().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_69(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_69().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_77(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_85(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_85().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_91(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_91().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_92(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_92().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_109(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_109().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_111(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_111().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_114(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_118(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_118().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_124(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_124().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_127(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_127().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_131(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      }
      idx = mutable_f_197()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_198()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_15()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_22()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_27()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_56()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_57()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_80_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_80_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_80(std::move(tmp_str));
      }
      mutable_f_115()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_119_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_119_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_119(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_42(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_49(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_65(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_67(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_69(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_77(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_85(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_91(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_92(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_109(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_111(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_114(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_118(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_124(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_127(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_131(std::move(tmp_str));
        }
      }
      idx = mutable_f_197()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_198()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF15FieldNumber = 24,
    kF22FieldNumber = 34,
    kF27FieldNumber = 40,
    kF56FieldNumber = 83,
    kF57FieldNumber = 86,
    kF80FieldNumber = 123,
    kF115FieldNumber = 172,
    kF119FieldNumber = 176,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF10FieldNumber = 18,
    kF14FieldNumber = 22,
    kF16FieldNumber = 26,
    kF17FieldNumber = 27,
    kF18FieldNumber = 29,
    kF24FieldNumber = 36,
    kF34FieldNumber = 51,
    kF42FieldNumber = 67,
    kF44FieldNumber = 69,
    kF49FieldNumber = 74,
    kF52FieldNumber = 77,
    kF53FieldNumber = 80,
    kF65FieldNumber = 98,
    kF67FieldNumber = 101,
    kF69FieldNumber = 105,
    kF77FieldNumber = 119,
    kF78FieldNumber = 121,
    kF85FieldNumber = 130,
    kF91FieldNumber = 138,
    kF92FieldNumber = 139,
    kF109FieldNumber = 165,
    kF111FieldNumber = 168,
    kF114FieldNumber = 171,
    kF118FieldNumber = 175,
    kF124FieldNumber = 183,
    kF127FieldNumber = 190,
    kF131FieldNumber = 194,
    kF197FieldNumber = 198,
    kF198FieldNumber = 200,
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
    kF1FieldNumber = 3,
    kF7FieldNumber = 12,
    kF5FieldNumber = 10,
    kF6FieldNumber = 11,
    kF9FieldNumber = 17,
    kF8FieldNumber = 16,
    kF11FieldNumber = 19,
    kF12FieldNumber = 20,
    kF13FieldNumber = 21,
    kF19FieldNumber = 30,
    kF20FieldNumber = 32,
    kF21FieldNumber = 33,
    kF23FieldNumber = 35,
    kF25FieldNumber = 37,
    kF26FieldNumber = 39,
    kF28FieldNumber = 41,
    kF31FieldNumber = 47,
    kF30FieldNumber = 45,
    kF32FieldNumber = 48,
    kF33FieldNumber = 49,
    kF35FieldNumber = 55,
    kF36FieldNumber = 56,
    kF37FieldNumber = 59,
    kF39FieldNumber = 62,
    kF40FieldNumber = 63,
    kF41FieldNumber = 65,
    kF38FieldNumber = 61,
    kF46FieldNumber = 71,
    kF45FieldNumber = 70,
    kF48FieldNumber = 73,
    kF50FieldNumber = 75,
    kF51FieldNumber = 76,
    kF54FieldNumber = 81,
    kF55FieldNumber = 82,
    kF58FieldNumber = 89,
    kF59FieldNumber = 90,
    kF60FieldNumber = 91,
    kF61FieldNumber = 92,
    kF62FieldNumber = 93,
    kF29FieldNumber = 42,
    kF43FieldNumber = 68,
    kF47FieldNumber = 72,
    kF128FieldNumber = 191,
    kF63FieldNumber = 94,
    kF64FieldNumber = 97,
    kF66FieldNumber = 99,
    kF70FieldNumber = 106,
    kF68FieldNumber = 103,
    kF72FieldNumber = 110,
    kF71FieldNumber = 108,
    kF73FieldNumber = 111,
    kF75FieldNumber = 114,
    kF74FieldNumber = 113,
    kF76FieldNumber = 117,
    kF79FieldNumber = 122,
    kF81FieldNumber = 125,
    kF83FieldNumber = 128,
    kF82FieldNumber = 127,
    kF84FieldNumber = 129,
    kF86FieldNumber = 131,
    kF87FieldNumber = 134,
    kF88FieldNumber = 135,
    kF89FieldNumber = 136,
    kF90FieldNumber = 137,
    kF93FieldNumber = 140,
    kF94FieldNumber = 142,
    kF96FieldNumber = 145,
    kF95FieldNumber = 143,
    kF98FieldNumber = 147,
    kF97FieldNumber = 146,
    kF99FieldNumber = 149,
    kF100FieldNumber = 150,
    kF102FieldNumber = 152,
    kF101FieldNumber = 151,
    kF103FieldNumber = 154,
    kF105FieldNumber = 156,
    kF104FieldNumber = 155,
    kF106FieldNumber = 158,
    kF108FieldNumber = 163,
    kF107FieldNumber = 161,
    kF110FieldNumber = 167,
    kF112FieldNumber = 169,
    kF113FieldNumber = 170,
    kF116FieldNumber = 173,
    kF120FieldNumber = 177,
    kF117FieldNumber = 174,
    kF121FieldNumber = 180,
    kF122FieldNumber = 181,
    kF123FieldNumber = 182,
    kF125FieldNumber = 184,
    kF126FieldNumber = 185,
    kF130FieldNumber = 193,
    kF129FieldNumber = 192,
    kF132FieldNumber = 196,
    kF133FieldNumber = 197,
  };
  // repeated .fleetbench.proto.Message7.M2.M19.E6 f_15 = 24 [packed = true];
  int f_15_size() const;
  private:
  int _internal_f_15_size() const;

  public:
  void clear_f_15() ;
  public:
  ::fleetbench::proto::Message7_M2_M19_E6 f_15(int index) const;
  void set_f_15(int index, ::fleetbench::proto::Message7_M2_M19_E6 value);
  void add_f_15(::fleetbench::proto::Message7_M2_M19_E6 value);
  const ::google::protobuf::RepeatedField<int>& f_15() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_15();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_15() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_15();

  public:
  // repeated int64 f_22 = 34 [packed = true];
  int f_22_size() const;
  private:
  int _internal_f_22_size() const;

  public:
  void clear_f_22() ;
  ::int64_t f_22(int index) const;
  void set_f_22(int index, ::int64_t value);
  void add_f_22(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_22() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_22();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_22() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_22();

  public:
  // repeated int64 f_27 = 40 [packed = true];
  int f_27_size() const;
  private:
  int _internal_f_27_size() const;

  public:
  void clear_f_27() ;
  ::int64_t f_27(int index) const;
  void set_f_27(int index, ::int64_t value);
  void add_f_27(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_27() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_27();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_27() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_27();

  public:
  // repeated int32 f_56 = 83 [packed = true];
  int f_56_size() const;
  private:
  int _internal_f_56_size() const;

  public:
  void clear_f_56() ;
  ::int32_t f_56(int index) const;
  void set_f_56(int index, ::int32_t value);
  void add_f_56(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_56() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_56();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_56() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_56();

  public:
  // repeated int32 f_57 = 86 [packed = true];
  int f_57_size() const;
  private:
  int _internal_f_57_size() const;

  public:
  void clear_f_57() ;
  ::int32_t f_57(int index) const;
  void set_f_57(int index, ::int32_t value);
  void add_f_57(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_57() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_57();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_57() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_57();

  public:
  // repeated bytes f_80 = 123;
  int f_80_size() const;
  private:
  int _internal_f_80_size() const;

  public:
  void clear_f_80() ;
  const std::string& f_80(int index) const;
  std::string* mutable_f_80(int index);
  void set_f_80(int index, const std::string& value);
  void set_f_80(int index, std::string&& value);
  void set_f_80(int index, const char* value);
  void set_f_80(int index, const void* value, std::size_t size);
  void set_f_80(int index, absl::string_view value);
  std::string* add_f_80();
  void add_f_80(const std::string& value);
  void add_f_80(std::string&& value);
  void add_f_80(const char* value);
  void add_f_80(const void* value, std::size_t size);
  void add_f_80(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_80() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_80();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_80() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_80();

  public:
  // repeated .fleetbench.proto.Message7.M2.M19.E21 f_115 = 172 [packed = true];
  int f_115_size() const;
  private:
  int _internal_f_115_size() const;

  public:
  void clear_f_115() ;
  public:
  ::fleetbench::proto::Message7_M2_M19_E21 f_115(int index) const;
  void set_f_115(int index, ::fleetbench::proto::Message7_M2_M19_E21 value);
  void add_f_115(::fleetbench::proto::Message7_M2_M19_E21 value);
  const ::google::protobuf::RepeatedField<int>& f_115() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_115();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_115() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_115();

  public:
  // repeated string f_119 = 176;
  int f_119_size() const;
  private:
  int _internal_f_119_size() const;

  public:
  void clear_f_119() ;
  const std::string& f_119(int index) const;
  std::string* mutable_f_119(int index);
  void set_f_119(int index, const std::string& value);
  void set_f_119(int index, std::string&& value);
  void set_f_119(int index, const char* value);
  void set_f_119(int index, const char* value, std::size_t size);
  void set_f_119(int index, absl::string_view value);
  std::string* add_f_119();
  void add_f_119(const std::string& value);
  void add_f_119(std::string&& value);
  void add_f_119(const char* value);
  void add_f_119(const char* value, std::size_t size);
  void add_f_119(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_119() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_119();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_119() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_119();

  public:
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_10 = 18;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional bytes f_14 = 22;
  bool has_f_14() const;
  void clear_f_14() ;
  const std::string& f_14() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_14(Arg_&& arg, Args_... args);
  std::string* mutable_f_14();
  PROTOBUF_NODISCARD std::string* release_f_14();
  void set_allocated_f_14(std::string* value);

  private:
  const std::string& _internal_f_14() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_14(
      const std::string& value);
  std::string* _internal_mutable_f_14();

  public:
  // optional string f_16 = 26;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_17 = 27;
  bool has_f_17() const;
  void clear_f_17() ;
  const std::string& f_17() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_17(Arg_&& arg, Args_... args);
  std::string* mutable_f_17();
  PROTOBUF_NODISCARD std::string* release_f_17();
  void set_allocated_f_17(std::string* value);

  private:
  const std::string& _internal_f_17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_17(
      const std::string& value);
  std::string* _internal_mutable_f_17();

  public:
  // optional string f_18 = 29;
  bool has_f_18() const;
  void clear_f_18() ;
  const std::string& f_18() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_18(Arg_&& arg, Args_... args);
  std::string* mutable_f_18();
  PROTOBUF_NODISCARD std::string* release_f_18();
  void set_allocated_f_18(std::string* value);

  private:
  const std::string& _internal_f_18() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_18(
      const std::string& value);
  std::string* _internal_mutable_f_18();

  public:
  // optional string f_24 = 36;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional string f_34 = 51;
  bool has_f_34() const;
  void clear_f_34() ;
  const std::string& f_34() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_34(Arg_&& arg, Args_... args);
  std::string* mutable_f_34();
  PROTOBUF_NODISCARD std::string* release_f_34();
  void set_allocated_f_34(std::string* value);

  private:
  const std::string& _internal_f_34() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_34(
      const std::string& value);
  std::string* _internal_mutable_f_34();

  public:
  // optional bytes f_42 = 67;
  bool has_f_42() const;
  void clear_f_42() ;
  const std::string& f_42() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_42(Arg_&& arg, Args_... args);
  std::string* mutable_f_42();
  PROTOBUF_NODISCARD std::string* release_f_42();
  void set_allocated_f_42(std::string* value);

  private:
  const std::string& _internal_f_42() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_42(
      const std::string& value);
  std::string* _internal_mutable_f_42();

  public:
  // optional string f_44 = 69;
  bool has_f_44() const;
  void clear_f_44() ;
  const std::string& f_44() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_44(Arg_&& arg, Args_... args);
  std::string* mutable_f_44();
  PROTOBUF_NODISCARD std::string* release_f_44();
  void set_allocated_f_44(std::string* value);

  private:
  const std::string& _internal_f_44() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_44(
      const std::string& value);
  std::string* _internal_mutable_f_44();

  public:
  // optional string f_49 = 74;
  bool has_f_49() const;
  void clear_f_49() ;
  const std::string& f_49() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_49(Arg_&& arg, Args_... args);
  std::string* mutable_f_49();
  PROTOBUF_NODISCARD std::string* release_f_49();
  void set_allocated_f_49(std::string* value);

  private:
  const std::string& _internal_f_49() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_49(
      const std::string& value);
  std::string* _internal_mutable_f_49();

  public:
  // optional string f_52 = 77;
  bool has_f_52() const;
  void clear_f_52() ;
  const std::string& f_52() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_52(Arg_&& arg, Args_... args);
  std::string* mutable_f_52();
  PROTOBUF_NODISCARD std::string* release_f_52();
  void set_allocated_f_52(std::string* value);

  private:
  const std::string& _internal_f_52() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_52(
      const std::string& value);
  std::string* _internal_mutable_f_52();

  public:
  // optional string f_53 = 80;
  bool has_f_53() const;
  void clear_f_53() ;
  const std::string& f_53() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_53(Arg_&& arg, Args_... args);
  std::string* mutable_f_53();
  PROTOBUF_NODISCARD std::string* release_f_53();
  void set_allocated_f_53(std::string* value);

  private:
  const std::string& _internal_f_53() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_53(
      const std::string& value);
  std::string* _internal_mutable_f_53();

  public:
  // optional string f_65 = 98;
  bool has_f_65() const;
  void clear_f_65() ;
  const std::string& f_65() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_65(Arg_&& arg, Args_... args);
  std::string* mutable_f_65();
  PROTOBUF_NODISCARD std::string* release_f_65();
  void set_allocated_f_65(std::string* value);

  private:
  const std::string& _internal_f_65() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_65(
      const std::string& value);
  std::string* _internal_mutable_f_65();

  public:
  // optional string f_67 = 101;
  bool has_f_67() const;
  void clear_f_67() ;
  const std::string& f_67() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_67(Arg_&& arg, Args_... args);
  std::string* mutable_f_67();
  PROTOBUF_NODISCARD std::string* release_f_67();
  void set_allocated_f_67(std::string* value);

  private:
  const std::string& _internal_f_67() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_67(
      const std::string& value);
  std::string* _internal_mutable_f_67();

  public:
  // optional bytes f_69 = 105;
  bool has_f_69() const;
  void clear_f_69() ;
  const std::string& f_69() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_69(Arg_&& arg, Args_... args);
  std::string* mutable_f_69();
  PROTOBUF_NODISCARD std::string* release_f_69();
  void set_allocated_f_69(std::string* value);

  private:
  const std::string& _internal_f_69() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_69(
      const std::string& value);
  std::string* _internal_mutable_f_69();

  public:
  // optional string f_77 = 119;
  bool has_f_77() const;
  void clear_f_77() ;
  const std::string& f_77() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_77(Arg_&& arg, Args_... args);
  std::string* mutable_f_77();
  PROTOBUF_NODISCARD std::string* release_f_77();
  void set_allocated_f_77(std::string* value);

  private:
  const std::string& _internal_f_77() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_77(
      const std::string& value);
  std::string* _internal_mutable_f_77();

  public:
  // optional string f_78 = 121;
  bool has_f_78() const;
  void clear_f_78() ;
  const std::string& f_78() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_78(Arg_&& arg, Args_... args);
  std::string* mutable_f_78();
  PROTOBUF_NODISCARD std::string* release_f_78();
  void set_allocated_f_78(std::string* value);

  private:
  const std::string& _internal_f_78() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_78(
      const std::string& value);
  std::string* _internal_mutable_f_78();

  public:
  // optional bytes f_85 = 130;
  bool has_f_85() const;
  void clear_f_85() ;
  const std::string& f_85() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_85(Arg_&& arg, Args_... args);
  std::string* mutable_f_85();
  PROTOBUF_NODISCARD std::string* release_f_85();
  void set_allocated_f_85(std::string* value);

  private:
  const std::string& _internal_f_85() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_85(
      const std::string& value);
  std::string* _internal_mutable_f_85();

  public:
  // optional bytes f_91 = 138;
  bool has_f_91() const;
  void clear_f_91() ;
  const std::string& f_91() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_91(Arg_&& arg, Args_... args);
  std::string* mutable_f_91();
  PROTOBUF_NODISCARD std::string* release_f_91();
  void set_allocated_f_91(std::string* value);

  private:
  const std::string& _internal_f_91() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_91(
      const std::string& value);
  std::string* _internal_mutable_f_91();

  public:
  // optional bytes f_92 = 139;
  bool has_f_92() const;
  void clear_f_92() ;
  const std::string& f_92() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_92(Arg_&& arg, Args_... args);
  std::string* mutable_f_92();
  PROTOBUF_NODISCARD std::string* release_f_92();
  void set_allocated_f_92(std::string* value);

  private:
  const std::string& _internal_f_92() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_92(
      const std::string& value);
  std::string* _internal_mutable_f_92();

  public:
  // optional string f_109 = 165;
  bool has_f_109() const;
  void clear_f_109() ;
  const std::string& f_109() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_109(Arg_&& arg, Args_... args);
  std::string* mutable_f_109();
  PROTOBUF_NODISCARD std::string* release_f_109();
  void set_allocated_f_109(std::string* value);

  private:
  const std::string& _internal_f_109() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_109(
      const std::string& value);
  std::string* _internal_mutable_f_109();

  public:
  // optional bytes f_111 = 168;
  bool has_f_111() const;
  void clear_f_111() ;
  const std::string& f_111() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_111(Arg_&& arg, Args_... args);
  std::string* mutable_f_111();
  PROTOBUF_NODISCARD std::string* release_f_111();
  void set_allocated_f_111(std::string* value);

  private:
  const std::string& _internal_f_111() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_111(
      const std::string& value);
  std::string* _internal_mutable_f_111();

  public:
  // optional bytes f_114 = 171;
  bool has_f_114() const;
  void clear_f_114() ;
  const std::string& f_114() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_114(Arg_&& arg, Args_... args);
  std::string* mutable_f_114();
  PROTOBUF_NODISCARD std::string* release_f_114();
  void set_allocated_f_114(std::string* value);

  private:
  const std::string& _internal_f_114() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_114(
      const std::string& value);
  std::string* _internal_mutable_f_114();

  public:
  // optional string f_118 = 175;
  bool has_f_118() const;
  void clear_f_118() ;
  const std::string& f_118() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_118(Arg_&& arg, Args_... args);
  std::string* mutable_f_118();
  PROTOBUF_NODISCARD std::string* release_f_118();
  void set_allocated_f_118(std::string* value);

  private:
  const std::string& _internal_f_118() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_118(
      const std::string& value);
  std::string* _internal_mutable_f_118();

  public:
  // optional string f_124 = 183;
  bool has_f_124() const;
  void clear_f_124() ;
  const std::string& f_124() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_124(Arg_&& arg, Args_... args);
  std::string* mutable_f_124();
  PROTOBUF_NODISCARD std::string* release_f_124();
  void set_allocated_f_124(std::string* value);

  private:
  const std::string& _internal_f_124() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_124(
      const std::string& value);
  std::string* _internal_mutable_f_124();

  public:
  // optional string f_127 = 190;
  bool has_f_127() const;
  void clear_f_127() ;
  const std::string& f_127() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_127(Arg_&& arg, Args_... args);
  std::string* mutable_f_127();
  PROTOBUF_NODISCARD std::string* release_f_127();
  void set_allocated_f_127(std::string* value);

  private:
  const std::string& _internal_f_127() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_127(
      const std::string& value);
  std::string* _internal_mutable_f_127();

  public:
  // optional bytes f_131 = 194;
  bool has_f_131() const;
  void clear_f_131() ;
  const std::string& f_131() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_131(Arg_&& arg, Args_... args);
  std::string* mutable_f_131();
  PROTOBUF_NODISCARD std::string* release_f_131();
  void set_allocated_f_131(std::string* value);

  private:
  const std::string& _internal_f_131() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_131(
      const std::string& value);
  std::string* _internal_mutable_f_131();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M21 f_197 = 198;
  bool has_f_197() const;
  void clear_f_197() ;
  const ::fleetbench::proto::Message7_M2_M19_M21& f_197() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M21* release_f_197();
  ::fleetbench::proto::Message7_M2_M19_M21* mutable_f_197();
  void set_allocated_f_197(::fleetbench::proto::Message7_M2_M19_M21* value);
  void unsafe_arena_set_allocated_f_197(::fleetbench::proto::Message7_M2_M19_M21* value);
  ::fleetbench::proto::Message7_M2_M19_M21* unsafe_arena_release_f_197();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M21& _internal_f_197() const;
  ::fleetbench::proto::Message7_M2_M19_M21* _internal_mutable_f_197();

  public:
  // optional .fleetbench.proto.Message7.M2.M19.M29 f_198 = 200;
  bool has_f_198() const;
  void clear_f_198() ;
  const ::fleetbench::proto::Message7_M2_M19_M29& f_198() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19_M29* release_f_198();
  ::fleetbench::proto::Message7_M2_M19_M29* mutable_f_198();
  void set_allocated_f_198(::fleetbench::proto::Message7_M2_M19_M29* value);
  void unsafe_arena_set_allocated_f_198(::fleetbench::proto::Message7_M2_M19_M29* value);
  ::fleetbench::proto::Message7_M2_M19_M29* unsafe_arena_release_f_198();

  private:
  const ::fleetbench::proto::Message7_M2_M19_M29& _internal_f_198() const;
  ::fleetbench::proto::Message7_M2_M19_M29* _internal_mutable_f_198();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional fixed64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E4 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message7_M2_M19_E4 f_1() const;
  void set_f_1(::fleetbench::proto::Message7_M2_M19_E4 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E4 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message7_M2_M19_E4 value);

  public:
  // optional fixed32 f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  ::uint32_t f_7() const;
  void set_f_7(::uint32_t value);

  private:
  ::uint32_t _internal_f_7() const;
  void _internal_set_f_7(::uint32_t value);

  public:
  // optional int64 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int64 f_6 = 11;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional int64 f_9 = 17;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int64_t f_9() const;
  void set_f_9(::int64_t value);

  private:
  ::int64_t _internal_f_9() const;
  void _internal_set_f_9(::int64_t value);

  public:
  // optional float f_8 = 16;
  bool has_f_8() const;
  void clear_f_8() ;
  float f_8() const;
  void set_f_8(float value);

  private:
  float _internal_f_8() const;
  void _internal_set_f_8(float value);

  public:
  // optional int32 f_11 = 19;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int32_t f_11() const;
  void set_f_11(::int32_t value);

  private:
  ::int32_t _internal_f_11() const;
  void _internal_set_f_11(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E5 f_12 = 20;
  bool has_f_12() const;
  void clear_f_12() ;
  ::fleetbench::proto::Message7_M2_M19_E5 f_12() const;
  void set_f_12(::fleetbench::proto::Message7_M2_M19_E5 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E5 _internal_f_12() const;
  void _internal_set_f_12(::fleetbench::proto::Message7_M2_M19_E5 value);

  public:
  // optional float f_13 = 21;
  bool has_f_13() const;
  void clear_f_13() ;
  float f_13() const;
  void set_f_13(float value);

  private:
  float _internal_f_13() const;
  void _internal_set_f_13(float value);

  public:
  // optional int32 f_19 = 30;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int32_t f_19() const;
  void set_f_19(::int32_t value);

  private:
  ::int32_t _internal_f_19() const;
  void _internal_set_f_19(::int32_t value);

  public:
  // optional int32 f_20 = 32;
  bool has_f_20() const;
  void clear_f_20() ;
  ::int32_t f_20() const;
  void set_f_20(::int32_t value);

  private:
  ::int32_t _internal_f_20() const;
  void _internal_set_f_20(::int32_t value);

  public:
  // optional int32 f_21 = 33;
  bool has_f_21() const;
  void clear_f_21() ;
  ::int32_t f_21() const;
  void set_f_21(::int32_t value);

  private:
  ::int32_t _internal_f_21() const;
  void _internal_set_f_21(::int32_t value);

  public:
  // optional float f_23 = 35;
  bool has_f_23() const;
  void clear_f_23() ;
  float f_23() const;
  void set_f_23(float value);

  private:
  float _internal_f_23() const;
  void _internal_set_f_23(float value);

  public:
  // optional float f_25 = 37;
  bool has_f_25() const;
  void clear_f_25() ;
  float f_25() const;
  void set_f_25(float value);

  private:
  float _internal_f_25() const;
  void _internal_set_f_25(float value);

  public:
  // optional float f_26 = 39;
  bool has_f_26() const;
  void clear_f_26() ;
  float f_26() const;
  void set_f_26(float value);

  private:
  float _internal_f_26() const;
  void _internal_set_f_26(float value);

  public:
  // optional float f_28 = 41;
  bool has_f_28() const;
  void clear_f_28() ;
  float f_28() const;
  void set_f_28(float value);

  private:
  float _internal_f_28() const;
  void _internal_set_f_28(float value);

  public:
  // optional float f_31 = 47;
  bool has_f_31() const;
  void clear_f_31() ;
  float f_31() const;
  void set_f_31(float value);

  private:
  float _internal_f_31() const;
  void _internal_set_f_31(float value);

  public:
  // optional int64 f_30 = 45;
  bool has_f_30() const;
  void clear_f_30() ;
  ::int64_t f_30() const;
  void set_f_30(::int64_t value);

  private:
  ::int64_t _internal_f_30() const;
  void _internal_set_f_30(::int64_t value);

  public:
  // optional int64 f_32 = 48;
  bool has_f_32() const;
  void clear_f_32() ;
  ::int64_t f_32() const;
  void set_f_32(::int64_t value);

  private:
  ::int64_t _internal_f_32() const;
  void _internal_set_f_32(::int64_t value);

  public:
  // optional float f_33 = 49;
  bool has_f_33() const;
  void clear_f_33() ;
  float f_33() const;
  void set_f_33(float value);

  private:
  float _internal_f_33() const;
  void _internal_set_f_33(float value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E7 f_35 = 55;
  bool has_f_35() const;
  void clear_f_35() ;
  ::fleetbench::proto::Message7_M2_M19_E7 f_35() const;
  void set_f_35(::fleetbench::proto::Message7_M2_M19_E7 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E7 _internal_f_35() const;
  void _internal_set_f_35(::fleetbench::proto::Message7_M2_M19_E7 value);

  public:
  // optional float f_36 = 56;
  bool has_f_36() const;
  void clear_f_36() ;
  float f_36() const;
  void set_f_36(float value);

  private:
  float _internal_f_36() const;
  void _internal_set_f_36(float value);

  public:
  // optional fixed32 f_37 = 59;
  bool has_f_37() const;
  void clear_f_37() ;
  ::uint32_t f_37() const;
  void set_f_37(::uint32_t value);

  private:
  ::uint32_t _internal_f_37() const;
  void _internal_set_f_37(::uint32_t value);

  public:
  // optional int64 f_39 = 62;
  bool has_f_39() const;
  void clear_f_39() ;
  ::int64_t f_39() const;
  void set_f_39(::int64_t value);

  private:
  ::int64_t _internal_f_39() const;
  void _internal_set_f_39(::int64_t value);

  public:
  // optional double f_40 = 63;
  bool has_f_40() const;
  void clear_f_40() ;
  double f_40() const;
  void set_f_40(double value);

  private:
  double _internal_f_40() const;
  void _internal_set_f_40(double value);

  public:
  // optional int64 f_41 = 65;
  bool has_f_41() const;
  void clear_f_41() ;
  ::int64_t f_41() const;
  void set_f_41(::int64_t value);

  private:
  ::int64_t _internal_f_41() const;
  void _internal_set_f_41(::int64_t value);

  public:
  // optional int32 f_38 = 61;
  bool has_f_38() const;
  void clear_f_38() ;
  ::int32_t f_38() const;
  void set_f_38(::int32_t value);

  private:
  ::int32_t _internal_f_38() const;
  void _internal_set_f_38(::int32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E8 f_46 = 71;
  bool has_f_46() const;
  void clear_f_46() ;
  ::fleetbench::proto::Message7_M2_M19_E8 f_46() const;
  void set_f_46(::fleetbench::proto::Message7_M2_M19_E8 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E8 _internal_f_46() const;
  void _internal_set_f_46(::fleetbench::proto::Message7_M2_M19_E8 value);

  public:
  // optional int64 f_45 = 70;
  bool has_f_45() const;
  void clear_f_45() ;
  ::int64_t f_45() const;
  void set_f_45(::int64_t value);

  private:
  ::int64_t _internal_f_45() const;
  void _internal_set_f_45(::int64_t value);

  public:
  // optional int64 f_48 = 73;
  bool has_f_48() const;
  void clear_f_48() ;
  ::int64_t f_48() const;
  void set_f_48(::int64_t value);

  private:
  ::int64_t _internal_f_48() const;
  void _internal_set_f_48(::int64_t value);

  public:
  // optional fixed64 f_50 = 75;
  bool has_f_50() const;
  void clear_f_50() ;
  ::uint64_t f_50() const;
  void set_f_50(::uint64_t value);

  private:
  ::uint64_t _internal_f_50() const;
  void _internal_set_f_50(::uint64_t value);

  public:
  // optional int32 f_51 = 76;
  bool has_f_51() const;
  void clear_f_51() ;
  ::int32_t f_51() const;
  void set_f_51(::int32_t value);

  private:
  ::int32_t _internal_f_51() const;
  void _internal_set_f_51(::int32_t value);

  public:
  // optional int32 f_54 = 81;
  bool has_f_54() const;
  void clear_f_54() ;
  ::int32_t f_54() const;
  void set_f_54(::int32_t value);

  private:
  ::int32_t _internal_f_54() const;
  void _internal_set_f_54(::int32_t value);

  public:
  // optional float f_55 = 82;
  bool has_f_55() const;
  void clear_f_55() ;
  float f_55() const;
  void set_f_55(float value);

  private:
  float _internal_f_55() const;
  void _internal_set_f_55(float value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E9 f_58 = 89;
  bool has_f_58() const;
  void clear_f_58() ;
  ::fleetbench::proto::Message7_M2_M19_E9 f_58() const;
  void set_f_58(::fleetbench::proto::Message7_M2_M19_E9 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E9 _internal_f_58() const;
  void _internal_set_f_58(::fleetbench::proto::Message7_M2_M19_E9 value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E10 f_59 = 90;
  bool has_f_59() const;
  void clear_f_59() ;
  ::fleetbench::proto::Message7_M2_M19_E10 f_59() const;
  void set_f_59(::fleetbench::proto::Message7_M2_M19_E10 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E10 _internal_f_59() const;
  void _internal_set_f_59(::fleetbench::proto::Message7_M2_M19_E10 value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E11 f_60 = 91;
  bool has_f_60() const;
  void clear_f_60() ;
  ::fleetbench::proto::Message7_M2_M19_E11 f_60() const;
  void set_f_60(::fleetbench::proto::Message7_M2_M19_E11 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E11 _internal_f_60() const;
  void _internal_set_f_60(::fleetbench::proto::Message7_M2_M19_E11 value);

  public:
  // optional int64 f_61 = 92;
  bool has_f_61() const;
  void clear_f_61() ;
  ::int64_t f_61() const;
  void set_f_61(::int64_t value);

  private:
  ::int64_t _internal_f_61() const;
  void _internal_set_f_61(::int64_t value);

  public:
  // optional fixed64 f_62 = 93;
  bool has_f_62() const;
  void clear_f_62() ;
  ::uint64_t f_62() const;
  void set_f_62(::uint64_t value);

  private:
  ::uint64_t _internal_f_62() const;
  void _internal_set_f_62(::uint64_t value);

  public:
  // optional bool f_29 = 42;
  bool has_f_29() const;
  void clear_f_29() ;
  bool f_29() const;
  void set_f_29(bool value);

  private:
  bool _internal_f_29() const;
  void _internal_set_f_29(bool value);

  public:
  // optional bool f_43 = 68;
  bool has_f_43() const;
  void clear_f_43() ;
  bool f_43() const;
  void set_f_43(bool value);

  private:
  bool _internal_f_43() const;
  void _internal_set_f_43(bool value);

  public:
  // optional bool f_47 = 72;
  bool has_f_47() const;
  void clear_f_47() ;
  bool f_47() const;
  void set_f_47(bool value);

  private:
  bool _internal_f_47() const;
  void _internal_set_f_47(bool value);

  public:
  // optional bool f_128 = 191;
  bool has_f_128() const;
  void clear_f_128() ;
  bool f_128() const;
  void set_f_128(bool value);

  private:
  bool _internal_f_128() const;
  void _internal_set_f_128(bool value);

  public:
  // optional fixed32 f_63 = 94;
  bool has_f_63() const;
  void clear_f_63() ;
  ::uint32_t f_63() const;
  void set_f_63(::uint32_t value);

  private:
  ::uint32_t _internal_f_63() const;
  void _internal_set_f_63(::uint32_t value);

  public:
  // optional float f_64 = 97;
  bool has_f_64() const;
  void clear_f_64() ;
  float f_64() const;
  void set_f_64(float value);

  private:
  float _internal_f_64() const;
  void _internal_set_f_64(float value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E12 f_66 = 99;
  bool has_f_66() const;
  void clear_f_66() ;
  ::fleetbench::proto::Message7_M2_M19_E12 f_66() const;
  void set_f_66(::fleetbench::proto::Message7_M2_M19_E12 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E12 _internal_f_66() const;
  void _internal_set_f_66(::fleetbench::proto::Message7_M2_M19_E12 value);

  public:
  // optional int64 f_70 = 106;
  bool has_f_70() const;
  void clear_f_70() ;
  ::int64_t f_70() const;
  void set_f_70(::int64_t value);

  private:
  ::int64_t _internal_f_70() const;
  void _internal_set_f_70(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E13 f_68 = 103;
  bool has_f_68() const;
  void clear_f_68() ;
  ::fleetbench::proto::Message7_M2_M19_E13 f_68() const;
  void set_f_68(::fleetbench::proto::Message7_M2_M19_E13 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E13 _internal_f_68() const;
  void _internal_set_f_68(::fleetbench::proto::Message7_M2_M19_E13 value);

  public:
  // optional int32 f_72 = 110;
  bool has_f_72() const;
  void clear_f_72() ;
  ::int32_t f_72() const;
  void set_f_72(::int32_t value);

  private:
  ::int32_t _internal_f_72() const;
  void _internal_set_f_72(::int32_t value);

  public:
  // optional int64 f_71 = 108;
  bool has_f_71() const;
  void clear_f_71() ;
  ::int64_t f_71() const;
  void set_f_71(::int64_t value);

  private:
  ::int64_t _internal_f_71() const;
  void _internal_set_f_71(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E14 f_73 = 111;
  bool has_f_73() const;
  void clear_f_73() ;
  ::fleetbench::proto::Message7_M2_M19_E14 f_73() const;
  void set_f_73(::fleetbench::proto::Message7_M2_M19_E14 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E14 _internal_f_73() const;
  void _internal_set_f_73(::fleetbench::proto::Message7_M2_M19_E14 value);

  public:
  // optional int32 f_75 = 114;
  bool has_f_75() const;
  void clear_f_75() ;
  ::int32_t f_75() const;
  void set_f_75(::int32_t value);

  private:
  ::int32_t _internal_f_75() const;
  void _internal_set_f_75(::int32_t value);

  public:
  // optional int64 f_74 = 113;
  bool has_f_74() const;
  void clear_f_74() ;
  ::int64_t f_74() const;
  void set_f_74(::int64_t value);

  private:
  ::int64_t _internal_f_74() const;
  void _internal_set_f_74(::int64_t value);

  public:
  // optional int64 f_76 = 117;
  bool has_f_76() const;
  void clear_f_76() ;
  ::int64_t f_76() const;
  void set_f_76(::int64_t value);

  private:
  ::int64_t _internal_f_76() const;
  void _internal_set_f_76(::int64_t value);

  public:
  // optional uint64 f_79 = 122;
  bool has_f_79() const;
  void clear_f_79() ;
  ::uint64_t f_79() const;
  void set_f_79(::uint64_t value);

  private:
  ::uint64_t _internal_f_79() const;
  void _internal_set_f_79(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E15 f_81 = 125;
  bool has_f_81() const;
  void clear_f_81() ;
  ::fleetbench::proto::Message7_M2_M19_E15 f_81() const;
  void set_f_81(::fleetbench::proto::Message7_M2_M19_E15 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E15 _internal_f_81() const;
  void _internal_set_f_81(::fleetbench::proto::Message7_M2_M19_E15 value);

  public:
  // optional int32 f_83 = 128;
  bool has_f_83() const;
  void clear_f_83() ;
  ::int32_t f_83() const;
  void set_f_83(::int32_t value);

  private:
  ::int32_t _internal_f_83() const;
  void _internal_set_f_83(::int32_t value);

  public:
  // optional int64 f_82 = 127;
  bool has_f_82() const;
  void clear_f_82() ;
  ::int64_t f_82() const;
  void set_f_82(::int64_t value);

  private:
  ::int64_t _internal_f_82() const;
  void _internal_set_f_82(::int64_t value);

  public:
  // optional int32 f_84 = 129;
  bool has_f_84() const;
  void clear_f_84() ;
  ::int32_t f_84() const;
  void set_f_84(::int32_t value);

  private:
  ::int32_t _internal_f_84() const;
  void _internal_set_f_84(::int32_t value);

  public:
  // optional float f_86 = 131;
  bool has_f_86() const;
  void clear_f_86() ;
  float f_86() const;
  void set_f_86(float value);

  private:
  float _internal_f_86() const;
  void _internal_set_f_86(float value);

  public:
  // optional fixed32 f_87 = 134;
  bool has_f_87() const;
  void clear_f_87() ;
  ::uint32_t f_87() const;
  void set_f_87(::uint32_t value);

  private:
  ::uint32_t _internal_f_87() const;
  void _internal_set_f_87(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E16 f_88 = 135;
  bool has_f_88() const;
  void clear_f_88() ;
  ::fleetbench::proto::Message7_M2_M19_E16 f_88() const;
  void set_f_88(::fleetbench::proto::Message7_M2_M19_E16 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E16 _internal_f_88() const;
  void _internal_set_f_88(::fleetbench::proto::Message7_M2_M19_E16 value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E17 f_89 = 136;
  bool has_f_89() const;
  void clear_f_89() ;
  ::fleetbench::proto::Message7_M2_M19_E17 f_89() const;
  void set_f_89(::fleetbench::proto::Message7_M2_M19_E17 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E17 _internal_f_89() const;
  void _internal_set_f_89(::fleetbench::proto::Message7_M2_M19_E17 value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E18 f_90 = 137;
  bool has_f_90() const;
  void clear_f_90() ;
  ::fleetbench::proto::Message7_M2_M19_E18 f_90() const;
  void set_f_90(::fleetbench::proto::Message7_M2_M19_E18 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E18 _internal_f_90() const;
  void _internal_set_f_90(::fleetbench::proto::Message7_M2_M19_E18 value);

  public:
  // optional uint64 f_93 = 140;
  bool has_f_93() const;
  void clear_f_93() ;
  ::uint64_t f_93() const;
  void set_f_93(::uint64_t value);

  private:
  ::uint64_t _internal_f_93() const;
  void _internal_set_f_93(::uint64_t value);

  public:
  // optional int64 f_94 = 142;
  bool has_f_94() const;
  void clear_f_94() ;
  ::int64_t f_94() const;
  void set_f_94(::int64_t value);

  private:
  ::int64_t _internal_f_94() const;
  void _internal_set_f_94(::int64_t value);

  public:
  // optional int64 f_96 = 145;
  bool has_f_96() const;
  void clear_f_96() ;
  ::int64_t f_96() const;
  void set_f_96(::int64_t value);

  private:
  ::int64_t _internal_f_96() const;
  void _internal_set_f_96(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E19 f_95 = 143;
  bool has_f_95() const;
  void clear_f_95() ;
  ::fleetbench::proto::Message7_M2_M19_E19 f_95() const;
  void set_f_95(::fleetbench::proto::Message7_M2_M19_E19 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E19 _internal_f_95() const;
  void _internal_set_f_95(::fleetbench::proto::Message7_M2_M19_E19 value);

  public:
  // optional int32 f_98 = 147;
  bool has_f_98() const;
  void clear_f_98() ;
  ::int32_t f_98() const;
  void set_f_98(::int32_t value);

  private:
  ::int32_t _internal_f_98() const;
  void _internal_set_f_98(::int32_t value);

  public:
  // optional int64 f_97 = 146;
  bool has_f_97() const;
  void clear_f_97() ;
  ::int64_t f_97() const;
  void set_f_97(::int64_t value);

  private:
  ::int64_t _internal_f_97() const;
  void _internal_set_f_97(::int64_t value);

  public:
  // optional int64 f_99 = 149;
  bool has_f_99() const;
  void clear_f_99() ;
  ::int64_t f_99() const;
  void set_f_99(::int64_t value);

  private:
  ::int64_t _internal_f_99() const;
  void _internal_set_f_99(::int64_t value);

  public:
  // optional int64 f_100 = 150;
  bool has_f_100() const;
  void clear_f_100() ;
  ::int64_t f_100() const;
  void set_f_100(::int64_t value);

  private:
  ::int64_t _internal_f_100() const;
  void _internal_set_f_100(::int64_t value);

  public:
  // optional int64 f_102 = 152;
  bool has_f_102() const;
  void clear_f_102() ;
  ::int64_t f_102() const;
  void set_f_102(::int64_t value);

  private:
  ::int64_t _internal_f_102() const;
  void _internal_set_f_102(::int64_t value);

  public:
  // optional float f_101 = 151;
  bool has_f_101() const;
  void clear_f_101() ;
  float f_101() const;
  void set_f_101(float value);

  private:
  float _internal_f_101() const;
  void _internal_set_f_101(float value);

  public:
  // optional float f_103 = 154;
  bool has_f_103() const;
  void clear_f_103() ;
  float f_103() const;
  void set_f_103(float value);

  private:
  float _internal_f_103() const;
  void _internal_set_f_103(float value);

  public:
  // optional int64 f_105 = 156;
  bool has_f_105() const;
  void clear_f_105() ;
  ::int64_t f_105() const;
  void set_f_105(::int64_t value);

  private:
  ::int64_t _internal_f_105() const;
  void _internal_set_f_105(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E20 f_104 = 155;
  bool has_f_104() const;
  void clear_f_104() ;
  ::fleetbench::proto::Message7_M2_M19_E20 f_104() const;
  void set_f_104(::fleetbench::proto::Message7_M2_M19_E20 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E20 _internal_f_104() const;
  void _internal_set_f_104(::fleetbench::proto::Message7_M2_M19_E20 value);

  public:
  // optional int32 f_106 = 158;
  bool has_f_106() const;
  void clear_f_106() ;
  ::int32_t f_106() const;
  void set_f_106(::int32_t value);

  private:
  ::int32_t _internal_f_106() const;
  void _internal_set_f_106(::int32_t value);

  public:
  // optional int64 f_108 = 163;
  bool has_f_108() const;
  void clear_f_108() ;
  ::int64_t f_108() const;
  void set_f_108(::int64_t value);

  private:
  ::int64_t _internal_f_108() const;
  void _internal_set_f_108(::int64_t value);

  public:
  // optional fixed32 f_107 = 161;
  bool has_f_107() const;
  void clear_f_107() ;
  ::uint32_t f_107() const;
  void set_f_107(::uint32_t value);

  private:
  ::uint32_t _internal_f_107() const;
  void _internal_set_f_107(::uint32_t value);

  public:
  // optional int32 f_110 = 167;
  bool has_f_110() const;
  void clear_f_110() ;
  ::int32_t f_110() const;
  void set_f_110(::int32_t value);

  private:
  ::int32_t _internal_f_110() const;
  void _internal_set_f_110(::int32_t value);

  public:
  // optional int64 f_112 = 169;
  bool has_f_112() const;
  void clear_f_112() ;
  ::int64_t f_112() const;
  void set_f_112(::int64_t value);

  private:
  ::int64_t _internal_f_112() const;
  void _internal_set_f_112(::int64_t value);

  public:
  // optional fixed32 f_113 = 170;
  bool has_f_113() const;
  void clear_f_113() ;
  ::uint32_t f_113() const;
  void set_f_113(::uint32_t value);

  private:
  ::uint32_t _internal_f_113() const;
  void _internal_set_f_113(::uint32_t value);

  public:
  // optional float f_116 = 173;
  bool has_f_116() const;
  void clear_f_116() ;
  float f_116() const;
  void set_f_116(float value);

  private:
  float _internal_f_116() const;
  void _internal_set_f_116(float value);

  public:
  // optional int64 f_120 = 177;
  bool has_f_120() const;
  void clear_f_120() ;
  ::int64_t f_120() const;
  void set_f_120(::int64_t value);

  private:
  ::int64_t _internal_f_120() const;
  void _internal_set_f_120(::int64_t value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E22 f_117 = 174;
  bool has_f_117() const;
  void clear_f_117() ;
  ::fleetbench::proto::Message7_M2_M19_E22 f_117() const;
  void set_f_117(::fleetbench::proto::Message7_M2_M19_E22 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E22 _internal_f_117() const;
  void _internal_set_f_117(::fleetbench::proto::Message7_M2_M19_E22 value);

  public:
  // optional .fleetbench.proto.Message7.M2.M19.E23 f_121 = 180;
  bool has_f_121() const;
  void clear_f_121() ;
  ::fleetbench::proto::Message7_M2_M19_E23 f_121() const;
  void set_f_121(::fleetbench::proto::Message7_M2_M19_E23 value);

  private:
  ::fleetbench::proto::Message7_M2_M19_E23 _internal_f_121() const;
  void _internal_set_f_121(::fleetbench::proto::Message7_M2_M19_E23 value);

  public:
  // optional int64 f_122 = 181;
  bool has_f_122() const;
  void clear_f_122() ;
  ::int64_t f_122() const;
  void set_f_122(::int64_t value);

  private:
  ::int64_t _internal_f_122() const;
  void _internal_set_f_122(::int64_t value);

  public:
  // optional int64 f_123 = 182;
  bool has_f_123() const;
  void clear_f_123() ;
  ::int64_t f_123() const;
  void set_f_123(::int64_t value);

  private:
  ::int64_t _internal_f_123() const;
  void _internal_set_f_123(::int64_t value);

  public:
  // optional int32 f_125 = 184;
  bool has_f_125() const;
  void clear_f_125() ;
  ::int32_t f_125() const;
  void set_f_125(::int32_t value);

  private:
  ::int32_t _internal_f_125() const;
  void _internal_set_f_125(::int32_t value);

  public:
  // optional float f_126 = 185;
  bool has_f_126() const;
  void clear_f_126() ;
  float f_126() const;
  void set_f_126(float value);

  private:
  float _internal_f_126() const;
  void _internal_set_f_126(float value);

  public:
  // optional int64 f_130 = 193;
  bool has_f_130() const;
  void clear_f_130() ;
  ::int64_t f_130() const;
  void set_f_130(::int64_t value);

  private:
  ::int64_t _internal_f_130() const;
  void _internal_set_f_130(::int64_t value);

  public:
  // optional uint32 f_129 = 192;
  bool has_f_129() const;
  void clear_f_129() ;
  ::uint32_t f_129() const;
  void set_f_129(::uint32_t value);

  private:
  ::uint32_t _internal_f_129() const;
  void _internal_set_f_129(::uint32_t value);

  public:
  // optional int32 f_132 = 196;
  bool has_f_132() const;
  void clear_f_132() ;
  ::int32_t f_132() const;
  void set_f_132(::int32_t value);

  private:
  ::int32_t _internal_f_132() const;
  void _internal_set_f_132(::int32_t value);

  public:
  // optional int32 f_133 = 197;
  bool has_f_133() const;
  void clear_f_133() ;
  ::int32_t f_133() const;
  void set_f_133(::int32_t value);

  private:
  ::int32_t _internal_f_133() const;
  void _internal_set_f_133(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2.M19)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 136, 22,
      264, 27>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_M19_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<4> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_15_;
    mutable ::google::protobuf::internal::CachedSize _f_15_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_22_;
    mutable ::google::protobuf::internal::CachedSize _f_22_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_27_;
    mutable ::google::protobuf::internal::CachedSize _f_27_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_56_;
    mutable ::google::protobuf::internal::CachedSize _f_56_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_57_;
    mutable ::google::protobuf::internal::CachedSize _f_57_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_80_;
    ::google::protobuf::RepeatedField<int> f_115_;
    mutable ::google::protobuf::internal::CachedSize _f_115_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_119_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_14_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_17_;
    ::google::protobuf::internal::ArenaStringPtr f_18_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_34_;
    ::google::protobuf::internal::ArenaStringPtr f_42_;
    ::google::protobuf::internal::ArenaStringPtr f_44_;
    ::google::protobuf::internal::ArenaStringPtr f_49_;
    ::google::protobuf::internal::ArenaStringPtr f_52_;
    ::google::protobuf::internal::ArenaStringPtr f_53_;
    ::google::protobuf::internal::ArenaStringPtr f_65_;
    ::google::protobuf::internal::ArenaStringPtr f_67_;
    ::google::protobuf::internal::ArenaStringPtr f_69_;
    ::google::protobuf::internal::ArenaStringPtr f_77_;
    ::google::protobuf::internal::ArenaStringPtr f_78_;
    ::google::protobuf::internal::ArenaStringPtr f_85_;
    ::google::protobuf::internal::ArenaStringPtr f_91_;
    ::google::protobuf::internal::ArenaStringPtr f_92_;
    ::google::protobuf::internal::ArenaStringPtr f_109_;
    ::google::protobuf::internal::ArenaStringPtr f_111_;
    ::google::protobuf::internal::ArenaStringPtr f_114_;
    ::google::protobuf::internal::ArenaStringPtr f_118_;
    ::google::protobuf::internal::ArenaStringPtr f_124_;
    ::google::protobuf::internal::ArenaStringPtr f_127_;
    ::google::protobuf::internal::ArenaStringPtr f_131_;
    ::fleetbench::proto::Message7_M2_M19_M21* f_197_;
    ::fleetbench::proto::Message7_M2_M19_M29* f_198_;
    ::int64_t f_0_;
    ::uint64_t f_3_;
    int f_1_;
    ::uint32_t f_7_;
    ::int64_t f_5_;
    ::int64_t f_6_;
    ::int64_t f_9_;
    float f_8_;
    ::int32_t f_11_;
    int f_12_;
    float f_13_;
    ::int32_t f_19_;
    ::int32_t f_20_;
    ::int32_t f_21_;
    float f_23_;
    float f_25_;
    float f_26_;
    float f_28_;
    float f_31_;
    ::int64_t f_30_;
    ::int64_t f_32_;
    float f_33_;
    int f_35_;
    float f_36_;
    ::uint32_t f_37_;
    ::int64_t f_39_;
    double f_40_;
    ::int64_t f_41_;
    ::int32_t f_38_;
    int f_46_;
    ::int64_t f_45_;
    ::int64_t f_48_;
    ::uint64_t f_50_;
    ::int32_t f_51_;
    ::int32_t f_54_;
    float f_55_;
    int f_58_;
    int f_59_;
    int f_60_;
    ::int64_t f_61_;
    ::uint64_t f_62_;
    bool f_29_;
    bool f_43_;
    bool f_47_;
    bool f_128_;
    ::uint32_t f_63_;
    float f_64_;
    int f_66_;
    ::int64_t f_70_;
    int f_68_;
    ::int32_t f_72_;
    ::int64_t f_71_;
    int f_73_;
    ::int32_t f_75_;
    ::int64_t f_74_;
    ::int64_t f_76_;
    ::uint64_t f_79_;
    int f_81_;
    ::int32_t f_83_;
    ::int64_t f_82_;
    ::int32_t f_84_;
    float f_86_;
    ::uint32_t f_87_;
    int f_88_;
    int f_89_;
    int f_90_;
    ::uint64_t f_93_;
    ::int64_t f_94_;
    ::int64_t f_96_;
    int f_95_;
    ::int32_t f_98_;
    ::int64_t f_97_;
    ::int64_t f_99_;
    ::int64_t f_100_;
    ::int64_t f_102_;
    float f_101_;
    float f_103_;
    ::int64_t f_105_;
    int f_104_;
    ::int32_t f_106_;
    ::int64_t f_108_;
    ::uint32_t f_107_;
    ::int32_t f_110_;
    ::int64_t f_112_;
    ::uint32_t f_113_;
    float f_116_;
    ::int64_t f_120_;
    int f_117_;
    int f_121_;
    ::int64_t f_122_;
    ::int64_t f_123_;
    ::int32_t f_125_;
    float f_126_;
    ::int64_t f_130_;
    ::uint32_t f_129_;
    ::int32_t f_132_;
    ::int32_t f_133_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7_M2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7.M2) */ {
 public:
  inline Message7_M2() : Message7_M2(nullptr) {}
  ~Message7_M2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7_M2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7_M2(const Message7_M2& from) : Message7_M2(nullptr, from) {}
  inline Message7_M2(Message7_M2&& from) noexcept
      : Message7_M2(nullptr, std::move(from)) {}
  inline Message7_M2& operator=(const Message7_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7_M2& operator=(Message7_M2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7_M2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7_M2* internal_default_instance() {
    return reinterpret_cast<const Message7_M2*>(
        &_Message7_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Message7_M2& a, Message7_M2& b) { a.Swap(&b); }
  inline void Swap(Message7_M2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7_M2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7_M2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7_M2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7_M2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7_M2& from) { Message7_M2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7_M2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7.M2"; }

 protected:
  explicit Message7_M2(::google::protobuf::Arena* arena);
  Message7_M2(::google::protobuf::Arena* arena, const Message7_M2& from);
  Message7_M2(::google::protobuf::Arena* arena, Message7_M2&& from) noexcept
      : Message7_M2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M19 = Message7_M2_M19;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message7.M2.M19 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message7_M2_M19& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M2_M19* release_f_2();
  ::fleetbench::proto::Message7_M2_M19* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message7_M2_M19* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19* value);
  ::fleetbench::proto::Message7_M2_M19* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message7_M2_M19& _internal_f_2() const;
  ::fleetbench::proto::Message7_M2_M19* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7.M2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_M2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message7_M2_M19* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};
// -------------------------------------------------------------------

class Message7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message7) */ {
 public:
  inline Message7() : Message7(nullptr) {}
  ~Message7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message7(const Message7& from) : Message7(nullptr, from) {}
  inline Message7(Message7&& from) noexcept
      : Message7(nullptr, std::move(from)) {}
  inline Message7& operator=(const Message7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message7& operator=(Message7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message7* internal_default_instance() {
    return reinterpret_cast<const Message7*>(
        &_Message7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 102;
  friend void swap(Message7& a, Message7& b) { a.Swap(&b); }
  inline void Swap(Message7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message7& from) { Message7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message7"; }

 protected:
  explicit Message7(::google::protobuf::Arena* arena);
  Message7(::google::protobuf::Arena* arena, const Message7& from);
  Message7(::google::protobuf::Arena* arena, Message7&& from) noexcept
      : Message7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M1 = Message7_M1;
  using M2 = Message7_M2;
  using M3 = Message7_M3;
  using M4 = Message7_M4;
  using M5 = Message7_M5;
  using M6 = Message7_M6;
  using M7 = Message7_M7;
  using M8 = Message7_M8;
  using M9 = Message7_M9;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_19_size(); ++i) {
        mutable_f_19(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_11()->generate_schema(schema);
      mutable_f_13()->generate_schema(schema);
      mutable_f_14()->generate_schema(schema);
      mutable_f_16()->generate_schema(schema);
      mutable_f_20()->generate_schema(schema);
      mutable_f_21()->generate_schema(schema);
      mutable_f_22()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_19().size());
      for (int i = 0; i < f_19_size(); ++i) {
        mutable_f_19(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_13()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_14()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_16()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_20()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_21()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_22()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_19_size(); ++i) {
        mutable_f_19(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_11()->generate_scatter_ptrs(ptrs);
      mutable_f_13()->generate_scatter_ptrs(ptrs);
      mutable_f_14()->generate_scatter_ptrs(ptrs);
      mutable_f_16()->generate_scatter_ptrs(ptrs);
      mutable_f_20()->generate_scatter_ptrs(ptrs);
      mutable_f_21()->generate_scatter_ptrs(ptrs);
      mutable_f_22()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_19().size());
      for (int i = 0; i < f_19_size(); ++i) {
        mutable_f_19(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_1().size());
      mutable_f_11()->generate_scatter_sizes(sizes);
      mutable_f_13()->generate_scatter_sizes(sizes);
      mutable_f_14()->generate_scatter_sizes(sizes);
      mutable_f_16()->generate_scatter_sizes(sizes);
      mutable_f_20()->generate_scatter_sizes(sizes);
      mutable_f_21()->generate_scatter_sizes(sizes);
      mutable_f_22()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_12_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_19_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_19_entries; ++i) {
        auto* new_msg = add_f_19();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_19(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_13()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_14()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_16()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_20()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_21()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_22()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_12_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_19_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_19_entries; ++i) {
        auto* new_msg = add_f_19();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_19(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_13()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_14()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_16()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_20()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_21()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_22()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF12FieldNumber = 13,
    kF19FieldNumber = 20,
    kF1FieldNumber = 5,
    kF11FieldNumber = 12,
    kF13FieldNumber = 14,
    kF14FieldNumber = 16,
    kF16FieldNumber = 19,
    kF20FieldNumber = 21,
    kF21FieldNumber = 22,
    kF22FieldNumber = 23,
    kF0FieldNumber = 3,
    kF2FieldNumber = 6,
    kF3FieldNumber = 7,
    kF4FieldNumber = 9,
    kF5FieldNumber = 11,
  };
  // repeated .fleetbench.proto.Message7.M2 f_12 = 13;
  int f_12_size() const;
  private:
  int _internal_f_12_size() const;

  public:
  void clear_f_12() ;
  ::fleetbench::proto::Message7_M2* mutable_f_12(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>* mutable_f_12();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>& _internal_f_12() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>* _internal_mutable_f_12();
  public:
  const ::fleetbench::proto::Message7_M2& f_12(int index) const;
  ::fleetbench::proto::Message7_M2* add_f_12();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>& f_12() const;
  // repeated .fleetbench.proto.Message7.M6 f_19 = 20;
  int f_19_size() const;
  private:
  int _internal_f_19_size() const;

  public:
  void clear_f_19() ;
  ::fleetbench::proto::Message7_M6* mutable_f_19(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>* mutable_f_19();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>& _internal_f_19() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>* _internal_mutable_f_19();
  public:
  const ::fleetbench::proto::Message7_M6& f_19(int index) const;
  ::fleetbench::proto::Message7_M6* add_f_19();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>& f_19() const;
  // optional string f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message7.M1 f_11 = 12;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message7_M1& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M1* release_f_11();
  ::fleetbench::proto::Message7_M1* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message7_M1* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message7_M1* value);
  ::fleetbench::proto::Message7_M1* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message7_M1& _internal_f_11() const;
  ::fleetbench::proto::Message7_M1* _internal_mutable_f_11();

  public:
  // optional .fleetbench.proto.Message7.M3 f_13 = 14;
  bool has_f_13() const;
  void clear_f_13() ;
  const ::fleetbench::proto::Message7_M3& f_13() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M3* release_f_13();
  ::fleetbench::proto::Message7_M3* mutable_f_13();
  void set_allocated_f_13(::fleetbench::proto::Message7_M3* value);
  void unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message7_M3* value);
  ::fleetbench::proto::Message7_M3* unsafe_arena_release_f_13();

  private:
  const ::fleetbench::proto::Message7_M3& _internal_f_13() const;
  ::fleetbench::proto::Message7_M3* _internal_mutable_f_13();

  public:
  // optional .fleetbench.proto.Message7.M4 f_14 = 16;
  bool has_f_14() const;
  void clear_f_14() ;
  const ::fleetbench::proto::Message7_M4& f_14() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M4* release_f_14();
  ::fleetbench::proto::Message7_M4* mutable_f_14();
  void set_allocated_f_14(::fleetbench::proto::Message7_M4* value);
  void unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message7_M4* value);
  ::fleetbench::proto::Message7_M4* unsafe_arena_release_f_14();

  private:
  const ::fleetbench::proto::Message7_M4& _internal_f_14() const;
  ::fleetbench::proto::Message7_M4* _internal_mutable_f_14();

  public:
  // optional .fleetbench.proto.Message7.M5 f_16 = 19;
  bool has_f_16() const;
  void clear_f_16() ;
  const ::fleetbench::proto::Message7_M5& f_16() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M5* release_f_16();
  ::fleetbench::proto::Message7_M5* mutable_f_16();
  void set_allocated_f_16(::fleetbench::proto::Message7_M5* value);
  void unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message7_M5* value);
  ::fleetbench::proto::Message7_M5* unsafe_arena_release_f_16();

  private:
  const ::fleetbench::proto::Message7_M5& _internal_f_16() const;
  ::fleetbench::proto::Message7_M5* _internal_mutable_f_16();

  public:
  // optional .fleetbench.proto.Message7.M7 f_20 = 21;
  bool has_f_20() const;
  void clear_f_20() ;
  const ::fleetbench::proto::Message7_M7& f_20() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M7* release_f_20();
  ::fleetbench::proto::Message7_M7* mutable_f_20();
  void set_allocated_f_20(::fleetbench::proto::Message7_M7* value);
  void unsafe_arena_set_allocated_f_20(::fleetbench::proto::Message7_M7* value);
  ::fleetbench::proto::Message7_M7* unsafe_arena_release_f_20();

  private:
  const ::fleetbench::proto::Message7_M7& _internal_f_20() const;
  ::fleetbench::proto::Message7_M7* _internal_mutable_f_20();

  public:
  // optional .fleetbench.proto.Message7.M8 f_21 = 22;
  bool has_f_21() const;
  void clear_f_21() ;
  const ::fleetbench::proto::Message7_M8& f_21() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M8* release_f_21();
  ::fleetbench::proto::Message7_M8* mutable_f_21();
  void set_allocated_f_21(::fleetbench::proto::Message7_M8* value);
  void unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message7_M8* value);
  ::fleetbench::proto::Message7_M8* unsafe_arena_release_f_21();

  private:
  const ::fleetbench::proto::Message7_M8& _internal_f_21() const;
  ::fleetbench::proto::Message7_M8* _internal_mutable_f_21();

  public:
  // optional .fleetbench.proto.Message7.M9 f_22 = 23;
  bool has_f_22() const;
  void clear_f_22() ;
  const ::fleetbench::proto::Message7_M9& f_22() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message7_M9* release_f_22();
  ::fleetbench::proto::Message7_M9* mutable_f_22();
  void set_allocated_f_22(::fleetbench::proto::Message7_M9* value);
  void unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message7_M9* value);
  ::fleetbench::proto::Message7_M9* unsafe_arena_release_f_22();

  private:
  const ::fleetbench::proto::Message7_M9& _internal_f_22() const;
  ::fleetbench::proto::Message7_M9* _internal_mutable_f_22();

  public:
  // optional uint64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int64 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional float f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional uint32 f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint32_t f_4() const;
  void set_f_4(::uint32_t value);

  private:
  ::uint32_t _internal_f_4() const;
  void _internal_set_f_4(::uint32_t value);

  public:
  // optional float f_5 = 11;
  bool has_f_5() const;
  void clear_f_5() ;
  float f_5() const;
  void set_f_5(float value);

  private:
  float _internal_f_5() const;
  void _internal_set_f_5(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 9,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M2 > f_12_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message7_M6 > f_19_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message7_M1* f_11_;
    ::fleetbench::proto::Message7_M3* f_13_;
    ::fleetbench::proto::Message7_M4* f_14_;
    ::fleetbench::proto::Message7_M5* f_16_;
    ::fleetbench::proto::Message7_M7* f_20_;
    ::fleetbench::proto::Message7_M8* f_21_;
    ::fleetbench::proto::Message7_M9* f_22_;
    ::uint64_t f_0_;
    ::int64_t f_2_;
    float f_3_;
    ::uint32_t f_4_;
    float f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage7_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message7_M1_M14_M34_M48

// optional string f_0 = 2;
inline bool Message7_M1_M14_M34_M48::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M1_M14_M34_M48::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M1_M14_M34_M48::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.M48.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34_M48::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.M48.f_0)
}
inline std::string* Message7_M1_M14_M34_M48::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.M48.f_0)
  return _s;
}
inline const std::string& Message7_M1_M14_M34_M48::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M1_M14_M34_M48::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34_M48::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34_M48::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.M48.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34_M48::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.M48.f_0)
}

// -------------------------------------------------------------------

// Message7_M1_M14_M34

// optional fixed64 f_0 = 1;
inline bool Message7_M1_M14_M34::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Message7_M1_M14_M34::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_0)
  return _internal_f_0();
}
inline void Message7_M1_M14_M34::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_0)
}
inline ::uint64_t Message7_M1_M14_M34::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M1_M14_M34::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M1.M14.M34.E26 f_1 = 3;
inline bool Message7_M1_M14_M34::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message7_M1_M14_M34_E26 Message7_M1_M14_M34::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_1)
  return _internal_f_1();
}
inline void Message7_M1_M14_M34::set_f_1(::fleetbench::proto::Message7_M1_M14_M34_E26 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_1)
}
inline ::fleetbench::proto::Message7_M1_M14_M34_E26 Message7_M1_M14_M34::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M1_M14_M34_E26>(_impl_.f_1_);
}
inline void Message7_M1_M14_M34::_internal_set_f_1(::fleetbench::proto::Message7_M1_M14_M34_E26 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M1_M14_M34_E26_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 5;
inline bool Message7_M1_M14_M34::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message7_M1_M14_M34::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_2)
  return _internal_f_2();
}
inline void Message7_M1_M14_M34::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_2)
}
inline ::int64_t Message7_M1_M14_M34::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M1_M14_M34::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 6;
inline bool Message7_M1_M14_M34::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message7_M1_M14_M34::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_3)
  return _internal_f_3();
}
inline void Message7_M1_M14_M34::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_3)
}
inline ::int64_t Message7_M1_M14_M34::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M1_M14_M34::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// repeated int32 f_4 = 8 [packed = true];
inline int Message7_M1_M14_M34::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M1_M14_M34::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M1_M14_M34::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::int32_t Message7_M1_M14_M34::f_4(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_4)
  return _internal_f_4().Get(index);
}
inline void Message7_M1_M14_M34::set_f_4(int index, ::int32_t value) {
  _internal_mutable_f_4()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_4)
}
inline void Message7_M1_M14_M34::add_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_4()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M1.M14.M34.f_4)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M1_M14_M34::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M1.M14.M34.f_4)
  return _internal_f_4();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M1_M14_M34::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M1.M14.M34.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M1_M14_M34::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M1_M14_M34::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional bool f_5 = 9;
inline bool Message7_M1_M14_M34::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Message7_M1_M14_M34::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_5)
  return _internal_f_5();
}
inline void Message7_M1_M14_M34::set_f_5(bool value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_5)
}
inline bool Message7_M1_M14_M34::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M1_M14_M34::_internal_set_f_5(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional uint32 f_6 = 10;
inline bool Message7_M1_M14_M34::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Message7_M1_M14_M34::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_6)
  return _internal_f_6();
}
inline void Message7_M1_M14_M34::set_f_6(::uint32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_6)
}
inline ::uint32_t Message7_M1_M14_M34::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M1_M14_M34::_internal_set_f_6(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional int32 f_7 = 12;
inline bool Message7_M1_M14_M34::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Message7_M1_M14_M34::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_7)
  return _internal_f_7();
}
inline void Message7_M1_M14_M34::set_f_7(::int32_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_7)
}
inline ::int32_t Message7_M1_M14_M34::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message7_M1_M14_M34::_internal_set_f_7(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional bytes f_8 = 14;
inline bool Message7_M1_M14_M34::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M1_M14_M34::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_8)
}
inline std::string* Message7_M1_M14_M34::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_8)
  return _s;
}
inline const std::string& Message7_M1_M14_M34::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message7_M1_M14_M34::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_8)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_8)
}

// repeated int32 f_9 = 15 [packed = true];
inline int Message7_M1_M14_M34::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message7_M1_M14_M34::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message7_M1_M14_M34::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::int32_t Message7_M1_M14_M34::f_9(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_9)
  return _internal_f_9().Get(index);
}
inline void Message7_M1_M14_M34::set_f_9(int index, ::int32_t value) {
  _internal_mutable_f_9()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_9)
}
inline void Message7_M1_M14_M34::add_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_9()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M1.M14.M34.f_9)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M1_M14_M34::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M1.M14.M34.f_9)
  return _internal_f_9();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M1_M14_M34::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M1.M14.M34.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M1_M14_M34::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M1_M14_M34::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// optional int64 f_10 = 17;
inline bool Message7_M1_M14_M34::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t Message7_M1_M14_M34::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_10)
  return _internal_f_10();
}
inline void Message7_M1_M14_M34::set_f_10(::int64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_10)
}
inline ::int64_t Message7_M1_M14_M34::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message7_M1_M14_M34::_internal_set_f_10(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 19;
inline bool Message7_M1_M14_M34::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M1_M14_M34::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_11)
}
inline std::string* Message7_M1_M14_M34::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_11)
  return _s;
}
inline const std::string& Message7_M1_M14_M34::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message7_M1_M14_M34::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_11)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_11)
}

// optional int32 f_12 = 22;
inline bool Message7_M1_M14_M34::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t Message7_M1_M14_M34::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_12)
  return _internal_f_12();
}
inline void Message7_M1_M14_M34::set_f_12(::int32_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_12)
}
inline ::int32_t Message7_M1_M14_M34::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message7_M1_M14_M34::_internal_set_f_12(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional string f_13 = 23;
inline bool Message7_M1_M14_M34::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M1_M14_M34::f_13() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_13)
  return _internal_f_13();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34::set_f_13(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_13_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_13)
}
inline std::string* Message7_M1_M14_M34::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_13)
  return _s;
}
inline const std::string& Message7_M1_M14_M34::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_.Get();
}
inline void Message7_M1_M14_M34::_internal_set_f_13(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_13_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_13_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_13)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_13_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_13_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34::set_allocated_f_13(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_13_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_13_.IsDefault()) {
          _impl_.f_13_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_13)
}

// optional int64 f_14 = 24;
inline bool Message7_M1_M14_M34::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message7_M1_M14_M34::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_14)
  return _internal_f_14();
}
inline void Message7_M1_M14_M34::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_14)
}
inline ::int64_t Message7_M1_M14_M34::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message7_M1_M14_M34::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional .fleetbench.proto.Message7.M1.M14.M34.E27 f_15 = 25;
inline bool Message7_M1_M14_M34::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::fleetbench::proto::Message7_M1_M14_M34_E27 Message7_M1_M14_M34::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_15)
  return _internal_f_15();
}
inline void Message7_M1_M14_M34::set_f_15(::fleetbench::proto::Message7_M1_M14_M34_E27 value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_15)
}
inline ::fleetbench::proto::Message7_M1_M14_M34_E27 Message7_M1_M14_M34::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M1_M14_M34_E27>(_impl_.f_15_);
}
inline void Message7_M1_M14_M34::_internal_set_f_15(::fleetbench::proto::Message7_M1_M14_M34_E27 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M1_M14_M34_E27_IsValid(value));
  _impl_.f_15_ = value;
}

// optional string f_16 = 26;
inline bool Message7_M1_M14_M34::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M1_M14_M34::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_16)
}
inline std::string* Message7_M1_M14_M34::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_16)
  return _s;
}
inline const std::string& Message7_M1_M14_M34::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message7_M1_M14_M34::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_16)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_16)
}

// optional string f_17 = 27;
inline bool Message7_M1_M14_M34::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M1_M14_M34::f_17() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_17)
  return _internal_f_17();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14_M34::set_f_17(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_17_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_17)
}
inline std::string* Message7_M1_M14_M34::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_17)
  return _s;
}
inline const std::string& Message7_M1_M14_M34::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_.Get();
}
inline void Message7_M1_M14_M34::_internal_set_f_17(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_17_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14_M34::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_17_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14_M34::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_17)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_17_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_17_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14_M34::set_allocated_f_17(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_17_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_17_.IsDefault()) {
          _impl_.f_17_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_17)
}

// optional float f_18 = 28;
inline bool Message7_M1_M14_M34::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float Message7_M1_M14_M34::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_18)
  return _internal_f_18();
}
inline void Message7_M1_M14_M34::set_f_18(float value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_18)
}
inline float Message7_M1_M14_M34::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message7_M1_M14_M34::_internal_set_f_18(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional int32 f_19 = 29;
inline bool Message7_M1_M14_M34::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message7_M1_M14_M34::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_19)
  return _internal_f_19();
}
inline void Message7_M1_M14_M34::set_f_19(::int32_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_19)
}
inline ::int32_t Message7_M1_M14_M34::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message7_M1_M14_M34::_internal_set_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional int64 f_20 = 31;
inline bool Message7_M1_M14_M34::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M1_M14_M34::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t Message7_M1_M14_M34::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_20)
  return _internal_f_20();
}
inline void Message7_M1_M14_M34::set_f_20(::int64_t value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.M34.f_20)
}
inline ::int64_t Message7_M1_M14_M34::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message7_M1_M14_M34::_internal_set_f_20(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional .fleetbench.proto.Message7.M1.M14.M34.M48 f_31 = 32;
inline bool Message7_M1_M14_M34::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_31_ != nullptr);
  return value;
}
inline void Message7_M1_M14_M34::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_31_ != nullptr) _impl_.f_31_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message7_M1_M14_M34_M48& Message7_M1_M14_M34::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M1_M14_M34_M48* p = _impl_.f_31_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M1_M14_M34_M48&>(::fleetbench::proto::_Message7_M1_M14_M34_M48_default_instance_);
}
inline const ::fleetbench::proto::Message7_M1_M14_M34_M48& Message7_M1_M14_M34::f_31() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.M34.f_31)
  return _internal_f_31();
}
inline void Message7_M1_M14_M34::unsafe_arena_set_allocated_f_31(::fleetbench::proto::Message7_M1_M14_M34_M48* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_31_);
  }
  _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34_M48*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_31)
}
inline ::fleetbench::proto::Message7_M1_M14_M34_M48* Message7_M1_M14_M34::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message7_M1_M14_M34_M48* released = _impl_.f_31_;
  _impl_.f_31_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M1_M14_M34_M48* Message7_M1_M14_M34::unsafe_arena_release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.M34.f_31)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message7_M1_M14_M34_M48* temp = _impl_.f_31_;
  _impl_.f_31_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M1_M14_M34_M48* Message7_M1_M14_M34::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_31_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M1_M14_M34_M48>(GetArena());
    _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34_M48*>(p);
  }
  return _impl_.f_31_;
}
inline ::fleetbench::proto::Message7_M1_M14_M34_M48* Message7_M1_M14_M34::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message7_M1_M14_M34_M48* _msg = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.M34.f_31)
  return _msg;
}
inline void Message7_M1_M14_M34::set_allocated_f_31(::fleetbench::proto::Message7_M1_M14_M34_M48* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_31_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34_M48*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.M34.f_31)
}

// -------------------------------------------------------------------

// Message7_M1_M14

// optional string f_0 = 2;
inline bool Message7_M1_M14::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M1_M14::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M1_M14::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M1_M14::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.M14.f_0)
}
inline std::string* Message7_M1_M14::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.f_0)
  return _s;
}
inline const std::string& Message7_M1_M14::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M1_M14::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M1_M14::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M1_M14::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M1_M14::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.f_0)
}

// optional .fleetbench.proto.Message7.M1.M14.M34 f_2 = 6;
inline bool Message7_M1_M14::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M1_M14::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M1_M14_M34& Message7_M1_M14::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M1_M14_M34* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M1_M14_M34&>(::fleetbench::proto::_Message7_M1_M14_M34_default_instance_);
}
inline const ::fleetbench::proto::Message7_M1_M14_M34& Message7_M1_M14::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.M14.f_2)
  return _internal_f_2();
}
inline void Message7_M1_M14::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M1_M14_M34* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M1.M14.f_2)
}
inline ::fleetbench::proto::Message7_M1_M14_M34* Message7_M1_M14::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M1_M14_M34* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M1_M14_M34* Message7_M1_M14::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.M14.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M1_M14_M34* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M1_M14_M34* Message7_M1_M14::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M1_M14_M34>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M1_M14_M34* Message7_M1_M14::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M1_M14_M34* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.M14.f_2)
  return _msg;
}
inline void Message7_M1_M14::set_allocated_f_2(::fleetbench::proto::Message7_M1_M14_M34* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14_M34*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.M14.f_2)
}

// -------------------------------------------------------------------

// Message7_M1

// optional int64 f_0 = 1;
inline bool Message7_M1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M1::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.f_0)
  return _internal_f_0();
}
inline void Message7_M1::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M1.f_0)
}
inline ::int64_t Message7_M1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M1::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M1.M14 f_1 = 2;
inline bool Message7_M1::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M1_M14& Message7_M1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M1_M14* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M1_M14&>(::fleetbench::proto::_Message7_M1_M14_default_instance_);
}
inline const ::fleetbench::proto::Message7_M1_M14& Message7_M1::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M1.f_1)
  return _internal_f_1();
}
inline void Message7_M1::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M1_M14* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M1.f_1)
}
inline ::fleetbench::proto::Message7_M1_M14* Message7_M1::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M1_M14* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M1_M14* Message7_M1::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M1.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M1_M14* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M1_M14* Message7_M1::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M1_M14>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M1_M14* Message7_M1::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M1_M14* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M1.f_1)
  return _msg;
}
inline void Message7_M1::set_allocated_f_1(::fleetbench::proto::Message7_M1_M14* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M1_M14*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M1.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M21_M44

// optional int32 f_0 = 1;
inline bool Message7_M2_M19_M21_M44::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M21_M44::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message7_M2_M19_M21_M44::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M21.M44.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M21_M44::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M21.M44.f_0)
}
inline ::int32_t Message7_M2_M19_M21_M44::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M21_M44::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M21_M53

// optional bytes f_0 = 2;
inline bool Message7_M2_M19_M21_M53::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M21_M53::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M21_M53::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M21.M53.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M21_M53::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M21.M53.f_0)
}
inline std::string* Message7_M2_M19_M21_M53::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M21.M53.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M21_M53::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M21_M53::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M21_M53::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M21_M53::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M21.M53.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M21_M53::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M21.M53.f_0)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M21

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M21::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M21::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M2_M19_M21::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M21.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M21::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M21.f_0)
}
inline ::int64_t Message7_M2_M19_M21::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M21::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M21.M44 f_1 = 2;
inline int Message7_M2_M19_M21::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M21::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M21::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M44* Message7_M2_M19_M21::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M21.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>* Message7_M2_M19_M21::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M21.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M2_M19_M21_M44& Message7_M2_M19_M21::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M21.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M44* Message7_M2_M19_M21::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M21_M44* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M21.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>& Message7_M2_M19_M21::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M21.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>&
Message7_M2_M19_M21::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M21_M44>*
Message7_M2_M19_M21::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message7.M2.M19.M21.M53 f_2 = 3;
inline bool Message7_M2_M19_M21::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M21::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M21_M53& Message7_M2_M19_M21::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M21_M53* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M21_M53&>(::fleetbench::proto::_Message7_M2_M19_M21_M53_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M21_M53& Message7_M2_M19_M21::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M21.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M21::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M21_M53* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21_M53*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M21.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M53* Message7_M2_M19_M21::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M21_M53* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M53* Message7_M2_M19_M21::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M21.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M21_M53* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M53* Message7_M2_M19_M21::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M21_M53>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21_M53*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M2_M19_M21_M53* Message7_M2_M19_M21::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M21_M53* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M21.f_2)
  return _msg;
}
inline void Message7_M2_M19_M21::set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M21_M53* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21_M53*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M21.f_2)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M66

// optional float f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M66::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M66::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message7_M2_M19_M29_M38_M60_M62_M66::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M66::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66.f_0)
}
inline float Message7_M2_M19_M29_M38_M60_M62_M66::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M66::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102

// optional bytes f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E50 f_1 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>(_impl_.f_1_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_IsValid(value));
  _impl_.f_1_ = value;
}

// optional bool f_2 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_2)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional fixed64 f_3 = 6;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_3)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 8;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_4)
  return _internal_f_4();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_4)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional float f_5 = 10;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_5)
  return _internal_f_5();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_5(float value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_5)
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_5(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 12;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_6)
  return _internal_f_6();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_6)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E51 f_7 = 13;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_7)
  return _internal_f_7();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_7)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>(_impl_.f_7_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_IsValid(value));
  _impl_.f_7_ = value;
}

// optional bool f_8 = 14;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_8)
  return _internal_f_8();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_8(bool value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_8)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_8(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional float f_9 = 15;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_9)
  return _internal_f_9();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_9(float value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_9)
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_9(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional int64 f_10 = 18;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_10)
  return _internal_f_10();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_10(::int64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_10)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_10(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 19;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_11)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_11)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_11)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_11)
}

// optional string f_12 = 20;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_12_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_12)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_12)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_12)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_12)
}

// optional fixed32 f_13 = 21;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_13)
  return _internal_f_13();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_13(::uint32_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_13)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_13(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E52 f_14 = 24;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_14)
  return _internal_f_14();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_14(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_14)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>(_impl_.f_14_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_14(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_IsValid(value));
  _impl_.f_14_ = value;
}

// optional bool f_15 = 25;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_15)
  return _internal_f_15();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_15(bool value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_15)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_15(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional string f_16 = 26;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_16)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_16)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_16)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_16)
}

// optional string f_17 = 27;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_17() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_17)
  return _internal_f_17();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_17(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_17_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_17)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_17)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_17(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_17_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_17_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_17)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_17_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_17_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_17(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_17_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_17_.IsDefault()) {
          _impl_.f_17_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_17)
}

// optional int32 f_18 = 28;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_18)
  return _internal_f_18();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_18(::int32_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_18)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_18(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional int32 f_19 = 29;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_19)
  return _internal_f_19();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_19(::int32_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_19)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional fixed32 f_20 = 30;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_20)
  return _internal_f_20();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_20(::uint32_t value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_20)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_20(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E53 f_21 = 31;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_21)
  return _internal_f_21();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_21(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_21)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>(_impl_.f_21_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_21(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_IsValid(value));
  _impl_.f_21_ = value;
}

// optional uint32 f_22 = 33;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_22)
  return _internal_f_22();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_22(::uint32_t value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_22)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_22(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional int64 f_23 = 34;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_23)
  return _internal_f_23();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_23(::int64_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_23)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_23(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional string f_24 = 36;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_24)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_24)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_24)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_24)
}

// optional fixed32 f_25 = 38;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_25)
  return _internal_f_25();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_25(::uint32_t value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_25)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_25(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional fixed32 f_26 = 39;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_26)
  return _internal_f_26();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_26(::uint32_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_26)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_26(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E54 f_27 = 41;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_27)
  return _internal_f_27();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_27)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>(_impl_.f_27_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_IsValid(value));
  _impl_.f_27_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E55 f_28 = 44 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_28_size() const {
  return _internal_f_28().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_28_size() const {
  return _internal_f_28_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_28(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_28)
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>(_internal_f_28().Get(index));
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_28(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_IsValid(value));
  _internal_mutable_f_28()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_28)
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::add_f_28(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_28()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_28)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_28() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_28)
  return _internal_f_28();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_28()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_28)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_28();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_28()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_28() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_28_;
}

// optional string f_29 = 45;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_29() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_29() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_29)
  return _internal_f_29();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_29(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_29_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_29)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_29() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_29();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_29)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_29(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_29_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_29_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_29)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_29_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_29_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_29(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_29_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_29_.IsDefault()) {
          _impl_.f_29_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_29)
}

// optional int64 f_30 = 48;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_30)
  return _internal_f_30();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_30(::int64_t value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_30)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_30(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional bytes f_31 = 49;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_31() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_31)
  return _internal_f_31();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_31(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_31_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_31)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_31)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_31(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_31_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_31_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_31)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_31_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_31_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_31(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_31_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_31_.IsDefault()) {
          _impl_.f_31_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_31)
}

// optional int64 f_32 = 50;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_32)
  return _internal_f_32();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_32(::int64_t value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_32)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_32(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional float f_33 = 51;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_33() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_33)
  return _internal_f_33();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_33(float value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_33)
}
inline float Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_33(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional fixed64 f_34 = 53;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_34)
  return _internal_f_34();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_34(::uint64_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_34)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_34(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E56 f_35 = 55;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_35)
  return _internal_f_35();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_35(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_35)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>(_impl_.f_35_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_35(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_IsValid(value));
  _impl_.f_35_ = value;
}

// optional uint32 f_36 = 56;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_36)
  return _internal_f_36();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_36(::uint32_t value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_36)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_36(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E57 f_37 = 58;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_37)
  return _internal_f_37();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_37(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_37)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>(_impl_.f_37_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_37(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_IsValid(value));
  _impl_.f_37_ = value;
}

// optional string f_38 = 59;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_38() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_38() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_38)
  return _internal_f_38();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_38(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_38_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_38)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_38() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_38();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_38)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_38(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_38_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_38_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_38)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_38_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_38_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_38(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_38_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_38_.IsDefault()) {
          _impl_.f_38_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_38)
}

// optional int32 f_39 = 60;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_39)
  return _internal_f_39();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_39(::int32_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_39)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_39(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.E58 f_40 = 61;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_40)
  return _internal_f_40();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_40(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_40)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>(_impl_.f_40_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_40(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_IsValid(value));
  _impl_.f_40_ = value;
}

// optional string f_41 = 63;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_41() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_41() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_41)
  return _internal_f_41();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_41(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_41_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_41)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_41() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_41();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_41)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_41(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_41_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_41_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_41)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_41_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_41_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_41(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_41_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_41_.IsDefault()) {
          _impl_.f_41_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_41)
}

// optional double f_42 = 65;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline double Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_42)
  return _internal_f_42();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_42(double value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_42)
}
inline double Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_42(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// repeated sint64 f_43 = 67 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_43_size() const {
  return _internal_f_43().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_43_size() const {
  return _internal_f_43_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_.Clear();
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_43(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_43)
  return _internal_f_43().Get(index);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_43(int index, ::int64_t value) {
  _internal_mutable_f_43()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_43)
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::add_f_43(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_43()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_43)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_43() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_43)
  return _internal_f_43();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_43()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_43)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_43();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_43() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_43_;
}

// optional bytes f_44 = 68;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_44() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_44() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_44)
  return _internal_f_44();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_44(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_44_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_44)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_44() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_44();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_44)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_44(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_44_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_44_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_44)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_44_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_44_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_44(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_44_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_44_.IsDefault()) {
          _impl_.f_44_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_44)
}

// optional bytes f_45 = 71;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::has_f_45() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::f_45() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_45)
  return _internal_f_45();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_f_45(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_45_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_45)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::mutable_f_45() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_45();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_45)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_set_f_45(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_45_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::_internal_mutable_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_45_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::release_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_45)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_45_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_45_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102::set_allocated_f_45(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_45_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_45_.IsDefault()) {
          _impl_.f_45_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102.f_45)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101

// optional string f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_0)
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.M102 f_1 = 3;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102>*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100

// optional bytes f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_0)
}

// optional string f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_1)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_1)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_1)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.M101 f_3 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_3)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_3)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_3)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100::set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100.f_3)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.E49 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_0)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>(_impl_.f_0_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::_internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.M100 f_1 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98

// optional string f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.M99 f_2 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_2)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98::set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98.f_2)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97

// optional double f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_0)
}
inline double Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.M98 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98>*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96

// optional string f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_0)
}

// optional bool f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_1)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_2)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional bool f_3 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_3)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 6;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_4)
  return _internal_f_4();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_4)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.E48 f_5 = 8;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_5)
  return _internal_f_5();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_5)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>(_impl_.f_5_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_IsValid(value));
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 9;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_6)
  return _internal_f_6();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_6)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.M97 f_9 = 11;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::mutable_f_9(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_9)
  return _internal_mutable_f_9()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_9(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_9)
  return _internal_f_9().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::add_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97* _add = _internal_mutable_f_9()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_9)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96.f_9)
  return _internal_f_9();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97>*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95

// optional bytes f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.M96 f_1 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89

// optional int32 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_0)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.M95 f_1 = 2;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95>*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.E45 f_0 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_0)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>(_impl_.f_0_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::_internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.M89 f_3 = 4;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>& Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>&
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89>*
Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M78

// optional fixed32 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_0)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M62_M69_M78::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.M85 f_1 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M78::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& Message7_M2_M19_M29_M38_M60_M62_M69_M78::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85& Message7_M2_M19_M29_M38_M60_M62_M69_M78::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* Message7_M2_M19_M29_M38_M60_M62_M69_M78::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* Message7_M2_M19_M29_M38_M60_M62_M69_M78::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* Message7_M2_M19_M29_M38_M60_M62_M69_M78::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* Message7_M2_M19_M29_M38_M60_M62_M69_M78::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M78::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69_M80

// optional int64 f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69_M80::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M80::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M69_M80::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.M84 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M80::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69_M80::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69_M80::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* Message7_M2_M19_M29_M38_M60_M62_M69_M80::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>* Message7_M2_M19_M29_M38_M60_M62_M69_M80::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84& Message7_M2_M19_M29_M38_M60_M62_M69_M80::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* Message7_M2_M19_M29_M38_M60_M62_M69_M80::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>& Message7_M2_M19_M29_M38_M60_M62_M69_M80::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>&
Message7_M2_M19_M29_M38_M60_M62_M69_M80::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80_M84>*
Message7_M2_M19_M29_M38_M60_M62_M69_M80::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M69

// optional int32 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_0)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62_M69::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M78 f_1 = 2;
inline int Message7_M2_M19_M29_M38_M60_M62_M69::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M69::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78* Message7_M2_M19_M29_M38_M60_M62_M69::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>* Message7_M2_M19_M29_M38_M60_M62_M69::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78& Message7_M2_M19_M29_M38_M60_M62_M69::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78* Message7_M2_M19_M29_M38_M60_M62_M69::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>& Message7_M2_M19_M29_M38_M60_M62_M69::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>&
Message7_M2_M19_M29_M38_M60_M62_M69::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78>*
Message7_M2_M19_M29_M38_M60_M62_M69::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.M80 f_2 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M69::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80& Message7_M2_M19_M29_M38_M60_M62_M69::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M69_M80_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80& Message7_M2_M19_M29_M38_M60_M62_M69::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* Message7_M2_M19_M29_M38_M60_M62_M69::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* Message7_M2_M19_M29_M38_M60_M62_M69::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* Message7_M2_M19_M29_M38_M60_M62_M69::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* Message7_M2_M19_M29_M38_M60_M62_M69::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_2)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M69::set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M80*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69.f_2)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M70

// optional bool f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M70::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M70::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M70::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M70::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70.f_0)
}
inline bool Message7_M2_M19_M29_M38_M60_M62_M70::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M70::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94

// optional string f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94.f_0)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.E47 f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_0)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>(_impl_.f_0_);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::_internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.M94 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>&
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_M94>*
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91

// optional int64 f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.E46 f_0 = 2 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_0)
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>(_internal_f_0().Get(index));
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::set_f_0(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_0)
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::add_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional int64 f_1 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_1)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M90 f_4 = 5;
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>&
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90>*
Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.M91 f_5 = 7;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91& Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_5)
  return _internal_f_5();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_5)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_5)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_5)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88::set_allocated_f_5(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M91*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88.f_5)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M75

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M75::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.M88 f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M75::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& Message7_M2_M19_M29_M38_M60_M62_M72_M75::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88& Message7_M2_M19_M29_M38_M60_M62_M72_M75::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* Message7_M2_M19_M29_M38_M60_M62_M72_M75::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* Message7_M2_M19_M29_M38_M60_M62_M72_M75::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* Message7_M2_M19_M29_M38_M60_M62_M72_M75::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* Message7_M2_M19_M29_M38_M60_M62_M72_M75::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M75::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72_M83

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M83::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M83::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated float f_1 = 3 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M72_M83::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline float Message7_M2_M19_M29_M38_M60_M62_M72_M83::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_1)
  return _internal_f_1().Get(index);
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::set_f_1(int index, float value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_1)
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::add_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_1)
}
inline const ::google::protobuf::RepeatedField<float>& Message7_M2_M19_M29_M38_M60_M62_M72_M83::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<float>* Message7_M2_M19_M29_M38_M60_M62_M72_M83::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<float>&
Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<float>* Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional string f_2 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72_M83::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M83::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M62_M72_M83::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_2)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M83::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_2)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M83::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M62_M72_M83::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72_M83::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83.f_2)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62_M72

// optional float f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message7_M2_M19_M29_M38_M60_M62_M72::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_0)
}
inline float Message7_M2_M19_M29_M38_M60_M62_M72::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M75 f_1 = 2;
inline int Message7_M2_M19_M29_M38_M60_M62_M72::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62_M72::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75* Message7_M2_M19_M29_M38_M60_M62_M72::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>* Message7_M2_M19_M29_M38_M60_M62_M72::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75& Message7_M2_M19_M29_M38_M60_M62_M72::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75* Message7_M2_M19_M29_M38_M60_M62_M72::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>& Message7_M2_M19_M29_M38_M60_M62_M72::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>&
Message7_M2_M19_M29_M38_M60_M62_M72::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75>*
Message7_M2_M19_M29_M38_M60_M62_M72::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.M83 f_2 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M62_M72::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83& Message7_M2_M19_M29_M38_M60_M62_M72::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M72_M83_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83& Message7_M2_M19_M29_M38_M60_M62_M72::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* Message7_M2_M19_M29_M38_M60_M62_M72::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* Message7_M2_M19_M29_M38_M60_M62_M72::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* Message7_M2_M19_M29_M38_M60_M62_M72::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* Message7_M2_M19_M29_M38_M60_M62_M72::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_2)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62_M72::set_allocated_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M83*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72.f_2)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M62

// repeated int32 f_0 = 1 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M62::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M62::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_0)
  return _internal_f_0().Get(index);
}
inline void Message7_M2_M19_M29_M38_M60_M62::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_0)
}
inline void Message7_M2_M19_M29_M38_M60_M62::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M2_M19_M29_M38_M60_M62::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19_M29_M38_M60_M62::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M2_M19_M29_M38_M60_M62::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19_M29_M38_M60_M62::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional double f_1 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M62::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Message7_M2_M19_M29_M38_M60_M62::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M62::set_f_1(double value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_1)
}
inline double Message7_M2_M19_M29_M38_M60_M62::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M2_M19_M29_M38_M60_M62::_internal_set_f_1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M66 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M62::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66* Message7_M2_M19_M29_M38_M60_M62::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>* Message7_M2_M19_M29_M38_M60_M62::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66& Message7_M2_M19_M29_M38_M60_M62::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66* Message7_M2_M19_M29_M38_M60_M62::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>& Message7_M2_M19_M29_M38_M60_M62::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>&
Message7_M2_M19_M29_M38_M60_M62::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M66>*
Message7_M2_M19_M29_M38_M60_M62::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M69 f_3 = 4;
inline int Message7_M2_M19_M29_M38_M60_M62::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69* Message7_M2_M19_M29_M38_M60_M62::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>* Message7_M2_M19_M29_M38_M60_M62::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69& Message7_M2_M19_M29_M38_M60_M62::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69* Message7_M2_M19_M29_M38_M60_M62::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>& Message7_M2_M19_M29_M38_M60_M62::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>&
Message7_M2_M19_M29_M38_M60_M62::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69>*
Message7_M2_M19_M29_M38_M60_M62::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M70 f_4 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M62::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70& Message7_M2_M19_M29_M38_M60_M62::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_M70_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70& Message7_M2_M19_M29_M38_M60_M62::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_4)
  return _internal_f_4();
}
inline void Message7_M2_M19_M29_M38_M60_M62::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_4)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* Message7_M2_M19_M29_M38_M60_M62::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* Message7_M2_M19_M29_M38_M60_M62::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* Message7_M2_M19_M29_M38_M60_M62::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* Message7_M2_M19_M29_M38_M60_M62::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_4)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M62::set_allocated_f_4(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M70*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_4)
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.M72 f_5 = 6;
inline int Message7_M2_M19_M29_M38_M60_M62::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message7_M2_M19_M29_M38_M60_M62::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message7_M2_M19_M29_M38_M60_M62::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72* Message7_M2_M19_M29_M38_M60_M62::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>* Message7_M2_M19_M29_M38_M60_M62::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72& Message7_M2_M19_M29_M38_M60_M62::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_5)
  return _internal_f_5().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72* Message7_M2_M19_M29_M38_M60_M62::add_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72* _add = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_5)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>& Message7_M2_M19_M29_M38_M60_M62::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62.f_5)
  return _internal_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>&
Message7_M2_M19_M29_M38_M60_M62::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72>*
Message7_M2_M19_M29_M38_M60_M62::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M67_M76

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67_M76::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M76::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M67_M76::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M76::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M67_M76::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M76::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M67_M79

// optional uint64 f_0 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67_M79::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M79::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M67_M79::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M79::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79.f_0)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M67_M79::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67_M79::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M67

// optional fixed64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M67::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_0)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M67::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M67::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_1)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M67::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_1)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M67::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M67::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_1)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.E42 f_2 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 Message7_M2_M19_M29_M38_M60_M64_M67::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::set_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42>(_impl_.f_2_);
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::_internal_set_f_2(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42_IsValid(value));
  _impl_.f_2_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M76 f_5 = 7;
inline int Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message7_M2_M19_M29_M38_M60_M64_M67::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76* Message7_M2_M19_M29_M38_M60_M64_M67::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>* Message7_M2_M19_M29_M38_M60_M64_M67::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76& Message7_M2_M19_M29_M38_M60_M64_M67::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_5)
  return _internal_f_5().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76* Message7_M2_M19_M29_M38_M60_M64_M67::add_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76* _add = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_5)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>& Message7_M2_M19_M29_M38_M60_M64_M67::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_5)
  return _internal_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>&
Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M76>*
Message7_M2_M19_M29_M38_M60_M64_M67::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.M79 f_7 = 9;
inline bool Message7_M2_M19_M29_M38_M60_M64_M67::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79& Message7_M2_M19_M29_M38_M60_M64_M67::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M67_M79_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79& Message7_M2_M19_M29_M38_M60_M64_M67::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_7)
  return _internal_f_7();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_7)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* Message7_M2_M19_M29_M38_M60_M64_M67::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* Message7_M2_M19_M29_M38_M60_M64_M67::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_7)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* Message7_M2_M19_M29_M38_M60_M64_M67::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* Message7_M2_M19_M29_M38_M60_M64_M67::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_7)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M67::set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_M79*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67.f_7)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93

// optional float f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93.f_0)
}
inline float Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92

// optional uint64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_0)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.M93 f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93& Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92_M93*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87

// optional uint32 f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_0)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.M92 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92& Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>& Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>&
Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_M92>*
Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73_M74

// optional string f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73_M74::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73_M74::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73_M74::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73_M74::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73_M74::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73_M74::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.M87 f_1 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M74::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& Message7_M2_M19_M29_M38_M60_M64_M73_M74::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87& Message7_M2_M19_M29_M38_M60_M64_M73_M74::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* Message7_M2_M19_M29_M38_M60_M64_M73_M74::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* Message7_M2_M19_M29_M38_M60_M64_M73_M74::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* Message7_M2_M19_M29_M38_M60_M64_M73_M74::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* Message7_M2_M19_M29_M38_M60_M64_M73_M74::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M74::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74_M87*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73_M82

// optional int32 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73_M82::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M82::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M64_M73_M82::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M82::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82.f_0)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M64_M73_M82::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73_M82::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64_M73

// optional string f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_0)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_0)
}

// optional string f_1 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_1)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_1)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_1)
}

// optional bool f_2 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_2)
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional fixed32 f_3 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M64_M73::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_3)
}
inline ::uint32_t Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 8;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_4)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_4)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_4)
}

// optional float f_5 = 9;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Message7_M2_M19_M29_M38_M60_M64_M73::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_5)
  return _internal_f_5();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_5(float value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_5)
}
inline float Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_5(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional string f_6 = 10;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_6_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_6)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_6)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_6)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_6)
}

// optional int64 f_7 = 11;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M73::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_7)
  return _internal_f_7();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_7)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional string f_8 = 12;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_8_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_8)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_8)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_8)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_8)
}

// optional fixed64 f_9 = 14;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M73::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_9)
  return _internal_f_9();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_9(::uint64_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_9)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_9(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional bytes f_10 = 15;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_10_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_10)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_10)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_10)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_10)
}

// optional bool f_11 = 16;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_11)
  return _internal_f_11();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_11(bool value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_11)
}
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_11(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional int64 f_12 = 17;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M73::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_12)
  return _internal_f_12();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_12(::int64_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_12)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_12(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.E43 f_13 = 19 [packed = true];
inline int Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_13_size() const {
  return _internal_f_13().size();
}
inline int Message7_M2_M19_M29_M38_M60_M64_M73::f_13_size() const {
  return _internal_f_13_size();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 Message7_M2_M19_M29_M38_M60_M64_M73::f_13(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_13)
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43>(_internal_f_13().Get(index));
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_13(int index, ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43_IsValid(value));
  _internal_mutable_f_13()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_13)
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::add_f_13(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43 value) {
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_13()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_13)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M64_M73::f_13() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_13)
  return _internal_f_13();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_13()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_13)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_13();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_13()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_13_;
}

// optional double f_14 = 20;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double Message7_M2_M19_M29_M38_M60_M64_M73::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_14)
  return _internal_f_14();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_14(double value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_14)
}
inline double Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_14(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.E44 f_15 = 21;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 Message7_M2_M19_M29_M38_M60_M64_M73::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_15)
  return _internal_f_15();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_15(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_15)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44>(_impl_.f_15_);
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_15(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44_IsValid(value));
  _impl_.f_15_ = value;
}

// optional string f_16 = 22;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M64_M73::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_16)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_16)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_16)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_16)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M74 f_22 = 23;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_22_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ != nullptr) _impl_.f_22_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* p = _impl_.f_22_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M73_M74_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74& Message7_M2_M19_M29_M38_M60_M64_M73::f_22() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_22)
  return _internal_f_22();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_22_);
  }
  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_22)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* released = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* Message7_M2_M19_M29_M38_M60_M64_M73::unsafe_arena_release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_22)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* temp = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74>(GetArena());
    _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74*>(p);
  }
  return _impl_.f_22_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* _msg = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_22)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_22(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_22_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M74*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_22)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.M82 f_23 = 24;
inline bool Message7_M2_M19_M29_M38_M60_M64_M73::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_23_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ != nullptr) _impl_.f_23_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82& Message7_M2_M19_M29_M38_M60_M64_M73::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* p = _impl_.f_23_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M73_M82_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82& Message7_M2_M19_M29_M38_M60_M64_M73::f_23() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_23)
  return _internal_f_23();
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_23_);
  }
  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_23)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* Message7_M2_M19_M29_M38_M60_M64_M73::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* released = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* Message7_M2_M19_M29_M38_M60_M64_M73::unsafe_arena_release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_23)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* temp = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* Message7_M2_M19_M29_M38_M60_M64_M73::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82>(GetArena());
    _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82*>(p);
  }
  return _impl_.f_23_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* Message7_M2_M19_M29_M38_M60_M64_M73::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* _msg = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_23)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64_M73::set_allocated_f_23(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_23_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_M82*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73.f_23)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M64

// optional int64 f_0 = 2;
inline bool Message7_M2_M19_M29_M38_M60_M64::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M64::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M64::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60_M64::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M67 f_2 = 3;
inline int Message7_M2_M19_M29_M38_M60_M64::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M2_M19_M29_M38_M60_M64::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M2_M19_M29_M38_M60_M64::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67* Message7_M2_M19_M29_M38_M60_M64::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>* Message7_M2_M19_M29_M38_M60_M64::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67& Message7_M2_M19_M29_M38_M60_M64::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67* Message7_M2_M19_M29_M38_M60_M64::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>& Message7_M2_M19_M29_M38_M60_M64::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>&
Message7_M2_M19_M29_M38_M60_M64::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67>*
Message7_M2_M19_M29_M38_M60_M64::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.M73 f_3 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M64::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M64::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73& Message7_M2_M19_M29_M38_M60_M64::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M64_M73_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73& Message7_M2_M19_M29_M38_M60_M64::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M64::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_3)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* Message7_M2_M19_M29_M38_M60_M64::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* Message7_M2_M19_M29_M38_M60_M64::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* Message7_M2_M19_M29_M38_M60_M64::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* Message7_M2_M19_M29_M38_M60_M64::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_3)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60_M64::set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64.f_3)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60_M65

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.E40 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 Message7_M2_M19_M29_M38_M60_M65::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_0)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 Message7_M2_M19_M29_M38_M60_M65::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40>(_impl_.f_0_);
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_0(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_1)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional float f_2 = 4;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Message7_M2_M19_M29_M38_M60_M65::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_2)
  return _internal_f_2();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_2(float value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_2)
}
inline float Message7_M2_M19_M29_M38_M60_M65::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional bool f_3 = 5;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Message7_M2_M19_M29_M38_M60_M65::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_3)
}
inline bool Message7_M2_M19_M29_M38_M60_M65::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional bool f_4 = 7;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Message7_M2_M19_M29_M38_M60_M65::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_4)
  return _internal_f_4();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_4(bool value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_4)
}
inline bool Message7_M2_M19_M29_M38_M60_M65::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_4(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional string f_5 = 8;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_5)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_5)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_5)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_5)
}

// optional float f_6 = 9;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Message7_M2_M19_M29_M38_M60_M65::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_6)
  return _internal_f_6();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_6(float value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_6)
}
inline float Message7_M2_M19_M29_M38_M60_M65::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_6(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// repeated bytes f_7 = 11;
inline int Message7_M2_M19_M29_M38_M60_M65::_internal_f_7_size() const {
  return _internal_f_7().size();
}
inline int Message7_M2_M19_M29_M38_M60_M65::f_7_size() const {
  return _internal_f_7_size();
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.Clear();
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::add_f_7()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_7()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_7(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
  return _internal_f_7().Get(index);
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_7(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
  return _internal_mutable_f_7()->Mutable(index);
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_7(int index, const std::string& value) {
  _internal_mutable_f_7()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_7(int index, std::string&& value) {
  _internal_mutable_f_7()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_7(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_7()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_7(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_7()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_7(int index, absl::string_view value) {
  _internal_mutable_f_7()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::add_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_7()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::add_f_7(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_7()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::add_f_7(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_7()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::add_f_7(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_7()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline void Message7_M2_M19_M29_M38_M60_M65::add_f_7(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_7()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19_M29_M38_M60_M65::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
  return _internal_f_7();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19_M29_M38_M60_M65::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_7)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_7();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19_M29_M38_M60_M65::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_7_;
}

// optional bytes f_8 = 12;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_8_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_8)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_8)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_8)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_8)
}

// optional float f_9 = 13;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Message7_M2_M19_M29_M38_M60_M65::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_9)
  return _internal_f_9();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_9(float value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_9)
}
inline float Message7_M2_M19_M29_M38_M60_M65::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_9(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional int32 f_10 = 14;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M65::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_10)
  return _internal_f_10();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_10(::int32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_10)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional bool f_11 = 15;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M65::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_11)
  return _internal_f_11();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_11(bool value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_11)
}
inline bool Message7_M2_M19_M29_M38_M60_M65::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_11(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 17;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float Message7_M2_M19_M29_M38_M60_M65::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_12)
  return _internal_f_12();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_12)
}
inline float Message7_M2_M19_M29_M38_M60_M65::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional fixed64 f_13 = 18;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M65::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_13)
  return _internal_f_13();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_13(::uint64_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_13)
}
inline ::uint64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_13(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional bool f_14 = 20;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M65::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_14)
  return _internal_f_14();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_14(bool value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_14)
}
inline bool Message7_M2_M19_M29_M38_M60_M65::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_14(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional string f_15 = 21;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_15)
  return _internal_f_15();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_15(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_15_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_15)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_15)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_15(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_15_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_15_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_15)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_15_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_15_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_15(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_15_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_15_.IsDefault()) {
          _impl_.f_15_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_15)
}

// optional int64 f_16 = 23;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_16)
  return _internal_f_16();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_16(::int64_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_16)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_16(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional int64 f_17 = 25;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_17)
  return _internal_f_17();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_17(::int64_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_17)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_17(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional int32 f_18 = 27;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M65::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_18)
  return _internal_f_18();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_18(::int32_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_18)
}
inline ::int32_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_18(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional double f_19 = 28;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double Message7_M2_M19_M29_M38_M60_M65::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_19)
  return _internal_f_19();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_19(double value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_19)
}
inline double Message7_M2_M19_M29_M38_M60_M65::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_19(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional string f_20 = 30;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_20() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_20)
  return _internal_f_20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_20(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_20_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_20)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_20)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_20(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_20_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_20_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_20)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_20_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_20_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_20(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_20_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_20_.IsDefault()) {
          _impl_.f_20_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_20)
}

// optional bool f_21 = 31;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool Message7_M2_M19_M29_M38_M60_M65::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_21)
  return _internal_f_21();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_21(bool value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_21)
}
inline bool Message7_M2_M19_M29_M38_M60_M65::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_21(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional int64 f_22 = 33;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_22)
  return _internal_f_22();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_22(::int64_t value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_22)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_22(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional string f_23 = 35;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_23)
  return _internal_f_23();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_23(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_23_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_23)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_23)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_23(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_23_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_23_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_23)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_23_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_23_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_23(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_23_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_23_.IsDefault()) {
          _impl_.f_23_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_23)
}

// optional float f_24 = 38;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float Message7_M2_M19_M29_M38_M60_M65::f_24() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_24)
  return _internal_f_24();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_24(float value) {
  _internal_set_f_24(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_24)
}
inline float Message7_M2_M19_M29_M38_M60_M65::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_24(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = value;
}

// optional string f_25 = 39;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::f_25() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_25)
  return _internal_f_25();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29_M38_M60_M65::set_f_25(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_25_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_25)
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::mutable_f_25() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_25();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_25)
  return _s;
}
inline const std::string& Message7_M2_M19_M29_M38_M60_M65::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_.Get();
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_25(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_25_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::_internal_mutable_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_25_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29_M38_M60_M65::release_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_25)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_25_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_25_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_allocated_f_25(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_25_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_25_.IsDefault()) {
          _impl_.f_25_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_25)
}

// optional int64 f_26 = 40;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_26)
  return _internal_f_26();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_26(::int64_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_26)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60_M65::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_26(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.E41 f_27 = 41;
inline bool Message7_M2_M19_M29_M38_M60_M65::has_f_27() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60_M65::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 Message7_M2_M19_M29_M38_M60_M65::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_27)
  return _internal_f_27();
}
inline void Message7_M2_M19_M29_M38_M60_M65::set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65.f_27)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 Message7_M2_M19_M29_M38_M60_M65::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41>(_impl_.f_27_);
}
inline void Message7_M2_M19_M29_M38_M60_M65::_internal_set_f_27(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41_IsValid(value));
  _impl_.f_27_ = value;
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38_M60

// optional int64 f_0 = 1;
inline bool Message7_M2_M19_M29_M38_M60::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message7_M2_M19_M29_M38_M60::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38_M60::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_0)
}
inline ::int64_t Message7_M2_M19_M29_M38_M60::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38_M60::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 3;
inline bool Message7_M2_M19_M29_M38_M60::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38_M60::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message7_M2_M19_M29_M38_M60::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38_M60::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_1)
}
inline float Message7_M2_M19_M29_M38_M60::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M2_M19_M29_M38_M60::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M62 f_3 = 4;
inline bool Message7_M2_M19_M29_M38_M60::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62& Message7_M2_M19_M29_M38_M60::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M62_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62& Message7_M2_M19_M29_M38_M60::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19_M29_M38_M60::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_3)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* Message7_M2_M19_M29_M38_M60::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* Message7_M2_M19_M29_M38_M60::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* Message7_M2_M19_M29_M38_M60::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* Message7_M2_M19_M29_M38_M60::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_3)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60::set_allocated_f_3(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_3)
}

// repeated .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M64 f_4 = 7;
inline int Message7_M2_M19_M29_M38_M60::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M2_M19_M29_M38_M60::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M2_M19_M29_M38_M60::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64* Message7_M2_M19_M29_M38_M60::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>* Message7_M2_M19_M29_M38_M60::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64& Message7_M2_M19_M29_M38_M60::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64* Message7_M2_M19_M29_M38_M60::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>& Message7_M2_M19_M29_M38_M60::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>&
Message7_M2_M19_M29_M38_M60::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64>*
Message7_M2_M19_M29_M38_M60::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60.M65 f_7 = 8;
inline bool Message7_M2_M19_M29_M38_M60::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38_M60::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65& Message7_M2_M19_M29_M38_M60::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_M65_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65& Message7_M2_M19_M29_M38_M60::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_7)
  return _internal_f_7();
}
inline void Message7_M2_M19_M29_M38_M60::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_7)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* Message7_M2_M19_M29_M38_M60::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* Message7_M2_M19_M29_M38_M60::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_7)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* Message7_M2_M19_M29_M38_M60::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* Message7_M2_M19_M29_M38_M60::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_7)
  return _msg;
}
inline void Message7_M2_M19_M29_M38_M60::set_allocated_f_7(::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.M60.f_7)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29_M38

// optional int32 f_0 = 1;
inline bool Message7_M2_M19_M29_M38::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19_M29_M38::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M2_M19_M29_M38::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19_M29_M38::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.M38.f_0)
}
inline ::int32_t Message7_M2_M19_M29_M38::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19_M29_M38::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38.M60 f_1 = 3;
inline bool Message7_M2_M19_M29_M38::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29_M38::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60& Message7_M2_M19_M29_M38::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_M60_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38_M60& Message7_M2_M19_M29_M38::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.M38.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29_M38::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* Message7_M2_M19_M29_M38::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* Message7_M2_M19_M29_M38::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.M38.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* Message7_M2_M19_M29_M38::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38_M60>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* Message7_M2_M19_M29_M38::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38_M60* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.M38.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29_M38::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38_M60* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38_M60*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.M38.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19_M29

// optional bytes f_0 = 1;
inline bool Message7_M2_M19_M29::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19_M29::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19_M29::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19_M29::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.M29.f_0)
}
inline std::string* Message7_M2_M19_M29::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.f_0)
  return _s;
}
inline const std::string& Message7_M2_M19_M29::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2_M19_M29::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19_M29::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19_M29::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19_M29::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19.M29.M38 f_1 = 2;
inline bool Message7_M2_M19_M29::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M2_M19_M29::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38& Message7_M2_M19_M29::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29_M38* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29_M38&>(::fleetbench::proto::_Message7_M2_M19_M29_M38_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29_M38& Message7_M2_M19_M29::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.M29.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19_M29::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.M29.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38* Message7_M2_M19_M29::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38* Message7_M2_M19_M29::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.M29.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38* Message7_M2_M19_M29::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29_M38>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29_M38* Message7_M2_M19_M29::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19_M29_M38* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.M29.f_1)
  return _msg;
}
inline void Message7_M2_M19_M29::set_allocated_f_1(::fleetbench::proto::Message7_M2_M19_M29_M38* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29_M38*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.M29.f_1)
}

// -------------------------------------------------------------------

// Message7_M2_M19

// optional int64 f_0 = 1;
inline bool Message7_M2_M19::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int64_t Message7_M2_M19::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_0)
  return _internal_f_0();
}
inline void Message7_M2_M19::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_0)
}
inline ::int64_t Message7_M2_M19::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M2_M19::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E4 f_1 = 3;
inline bool Message7_M2_M19::has_f_1() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message7_M2_M19_E4 Message7_M2_M19::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_1)
  return _internal_f_1();
}
inline void Message7_M2_M19::set_f_1(::fleetbench::proto::Message7_M2_M19_E4 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_1)
}
inline ::fleetbench::proto::Message7_M2_M19_E4 Message7_M2_M19::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E4>(_impl_.f_1_);
}
inline void Message7_M2_M19::_internal_set_f_1(::fleetbench::proto::Message7_M2_M19_E4 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E4_IsValid(value));
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message7_M2_M19::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2_M19::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_2)
}
inline std::string* Message7_M2_M19::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_2)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M2_M19::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_2)
}

// optional fixed64 f_3 = 5;
inline bool Message7_M2_M19::has_f_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::uint64_t Message7_M2_M19::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_3)
  return _internal_f_3();
}
inline void Message7_M2_M19::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_3)
}
inline ::uint64_t Message7_M2_M19::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M2_M19::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 7;
inline bool Message7_M2_M19::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M2_M19::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_4)
}
inline std::string* Message7_M2_M19::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_4)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message7_M2_M19::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_4)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_4)
}

// optional int64 f_5 = 10;
inline bool Message7_M2_M19::has_f_5() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::int64_t Message7_M2_M19::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_5)
  return _internal_f_5();
}
inline void Message7_M2_M19::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_5)
}
inline ::int64_t Message7_M2_M19::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M2_M19::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 11;
inline bool Message7_M2_M19::has_f_6() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::int64_t Message7_M2_M19::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_6)
  return _internal_f_6();
}
inline void Message7_M2_M19::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_6)
}
inline ::int64_t Message7_M2_M19::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M2_M19::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional fixed32 f_7 = 12;
inline bool Message7_M2_M19::has_f_7() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::uint32_t Message7_M2_M19::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_7)
  return _internal_f_7();
}
inline void Message7_M2_M19::set_f_7(::uint32_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_7)
}
inline ::uint32_t Message7_M2_M19::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message7_M2_M19::_internal_set_f_7(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional float f_8 = 16;
inline bool Message7_M2_M19::has_f_8() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline float Message7_M2_M19::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_8)
  return _internal_f_8();
}
inline void Message7_M2_M19::set_f_8(float value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_8)
}
inline float Message7_M2_M19::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message7_M2_M19::_internal_set_f_8(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional int64 f_9 = 17;
inline bool Message7_M2_M19::has_f_9() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::int64_t Message7_M2_M19::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_9)
  return _internal_f_9();
}
inline void Message7_M2_M19::set_f_9(::int64_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_9)
}
inline ::int64_t Message7_M2_M19::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message7_M2_M19::_internal_set_f_9(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional string f_10 = 18;
inline bool Message7_M2_M19::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M2_M19::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_10)
}
inline std::string* Message7_M2_M19::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_10)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message7_M2_M19::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_10)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_10)
}

// optional int32 f_11 = 19;
inline bool Message7_M2_M19::has_f_11() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int32_t Message7_M2_M19::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_11)
  return _internal_f_11();
}
inline void Message7_M2_M19::set_f_11(::int32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_11)
}
inline ::int32_t Message7_M2_M19::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message7_M2_M19::_internal_set_f_11(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E5 f_12 = 20;
inline bool Message7_M2_M19::has_f_12() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message7_M2_M19_E5 Message7_M2_M19::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_12)
  return _internal_f_12();
}
inline void Message7_M2_M19::set_f_12(::fleetbench::proto::Message7_M2_M19_E5 value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_12)
}
inline ::fleetbench::proto::Message7_M2_M19_E5 Message7_M2_M19::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E5>(_impl_.f_12_);
}
inline void Message7_M2_M19::_internal_set_f_12(::fleetbench::proto::Message7_M2_M19_E5 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E5_IsValid(value));
  _impl_.f_12_ = value;
}

// optional float f_13 = 21;
inline bool Message7_M2_M19::has_f_13() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline float Message7_M2_M19::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_13)
  return _internal_f_13();
}
inline void Message7_M2_M19::set_f_13(float value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_13)
}
inline float Message7_M2_M19::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message7_M2_M19::_internal_set_f_13(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional bytes f_14 = 22;
inline bool Message7_M2_M19::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M2_M19::f_14() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_14)
  return _internal_f_14();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_14(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_14_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_14)
}
inline std::string* Message7_M2_M19::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_14)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_.Get();
}
inline void Message7_M2_M19::_internal_set_f_14(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_14_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_14_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_14)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_14_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_14_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_14(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_14_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_14_.IsDefault()) {
          _impl_.f_14_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_14)
}

// repeated .fleetbench.proto.Message7.M2.M19.E6 f_15 = 24 [packed = true];
inline int Message7_M2_M19::_internal_f_15_size() const {
  return _internal_f_15().size();
}
inline int Message7_M2_M19::f_15_size() const {
  return _internal_f_15_size();
}
inline void Message7_M2_M19::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_E6 Message7_M2_M19::f_15(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_15)
  return static_cast<::fleetbench::proto::Message7_M2_M19_E6>(_internal_f_15().Get(index));
}
inline void Message7_M2_M19::set_f_15(int index, ::fleetbench::proto::Message7_M2_M19_E6 value) {
  assert(::fleetbench::proto::Message7_M2_M19_E6_IsValid(value));
  _internal_mutable_f_15()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_15)
}
inline void Message7_M2_M19::add_f_15(::fleetbench::proto::Message7_M2_M19_E6 value) {
  assert(::fleetbench::proto::Message7_M2_M19_E6_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_15()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_15)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_15)
  return _internal_f_15();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19::mutable_f_15()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_15)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_15();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19::_internal_f_15()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_15_;
}

// optional string f_16 = 26;
inline bool Message7_M2_M19::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M2_M19::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_16)
}
inline std::string* Message7_M2_M19::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_16)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message7_M2_M19::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_16)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_16)
}

// optional string f_17 = 27;
inline bool Message7_M2_M19::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message7_M2_M19::f_17() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_17)
  return _internal_f_17();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_17(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_17_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_17)
}
inline std::string* Message7_M2_M19::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_17)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_.Get();
}
inline void Message7_M2_M19::_internal_set_f_17(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_17_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_17_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_17)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_17_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_17_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_17(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_17_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_17_.IsDefault()) {
          _impl_.f_17_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_17)
}

// optional string f_18 = 29;
inline bool Message7_M2_M19::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message7_M2_M19::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_18)
  return _internal_f_18();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_18(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_18_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_18)
}
inline std::string* Message7_M2_M19::mutable_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_18();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_18)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_.Get();
}
inline void Message7_M2_M19::_internal_set_f_18(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_18_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_18_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_18)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_18_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_18_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_18(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_18_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_18_.IsDefault()) {
          _impl_.f_18_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_18)
}

// optional int32 f_19 = 30;
inline bool Message7_M2_M19::has_f_19() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::int32_t Message7_M2_M19::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_19)
  return _internal_f_19();
}
inline void Message7_M2_M19::set_f_19(::int32_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_19)
}
inline ::int32_t Message7_M2_M19::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message7_M2_M19::_internal_set_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional int32 f_20 = 32;
inline bool Message7_M2_M19::has_f_20() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int32_t Message7_M2_M19::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_20)
  return _internal_f_20();
}
inline void Message7_M2_M19::set_f_20(::int32_t value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_20)
}
inline ::int32_t Message7_M2_M19::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message7_M2_M19::_internal_set_f_20(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional int32 f_21 = 33;
inline bool Message7_M2_M19::has_f_21() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::int32_t Message7_M2_M19::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_21)
  return _internal_f_21();
}
inline void Message7_M2_M19::set_f_21(::int32_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_21)
}
inline ::int32_t Message7_M2_M19::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message7_M2_M19::_internal_set_f_21(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// repeated int64 f_22 = 34 [packed = true];
inline int Message7_M2_M19::_internal_f_22_size() const {
  return _internal_f_22().size();
}
inline int Message7_M2_M19::f_22_size() const {
  return _internal_f_22_size();
}
inline void Message7_M2_M19::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.Clear();
}
inline ::int64_t Message7_M2_M19::f_22(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_22)
  return _internal_f_22().Get(index);
}
inline void Message7_M2_M19::set_f_22(int index, ::int64_t value) {
  _internal_mutable_f_22()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_22)
}
inline void Message7_M2_M19::add_f_22(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_22()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_22)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message7_M2_M19::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_22)
  return _internal_f_22();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19::mutable_f_22()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_22)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_22();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message7_M2_M19::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_22_;
}

// optional float f_23 = 35;
inline bool Message7_M2_M19::has_f_23() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline float Message7_M2_M19::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_23)
  return _internal_f_23();
}
inline void Message7_M2_M19::set_f_23(float value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_23)
}
inline float Message7_M2_M19::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message7_M2_M19::_internal_set_f_23(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional string f_24 = 36;
inline bool Message7_M2_M19::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message7_M2_M19::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_24)
}
inline std::string* Message7_M2_M19::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_24)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message7_M2_M19::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_24)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_24)
}

// optional float f_25 = 37;
inline bool Message7_M2_M19::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline float Message7_M2_M19::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_25)
  return _internal_f_25();
}
inline void Message7_M2_M19::set_f_25(float value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_25)
}
inline float Message7_M2_M19::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message7_M2_M19::_internal_set_f_25(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional float f_26 = 39;
inline bool Message7_M2_M19::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline float Message7_M2_M19::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_26)
  return _internal_f_26();
}
inline void Message7_M2_M19::set_f_26(float value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_26)
}
inline float Message7_M2_M19::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message7_M2_M19::_internal_set_f_26(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// repeated int64 f_27 = 40 [packed = true];
inline int Message7_M2_M19::_internal_f_27_size() const {
  return _internal_f_27().size();
}
inline int Message7_M2_M19::f_27_size() const {
  return _internal_f_27_size();
}
inline void Message7_M2_M19::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_.Clear();
}
inline ::int64_t Message7_M2_M19::f_27(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_27)
  return _internal_f_27().Get(index);
}
inline void Message7_M2_M19::set_f_27(int index, ::int64_t value) {
  _internal_mutable_f_27()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_27)
}
inline void Message7_M2_M19::add_f_27(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_27()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_27)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message7_M2_M19::f_27() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_27)
  return _internal_f_27();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19::mutable_f_27()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_27)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_27();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message7_M2_M19::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message7_M2_M19::_internal_mutable_f_27() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_27_;
}

// optional float f_28 = 41;
inline bool Message7_M2_M19::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline float Message7_M2_M19::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_28)
  return _internal_f_28();
}
inline void Message7_M2_M19::set_f_28(float value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_28)
}
inline float Message7_M2_M19::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message7_M2_M19::_internal_set_f_28(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional bool f_29 = 42;
inline bool Message7_M2_M19::has_f_29() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = false;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline bool Message7_M2_M19::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_29)
  return _internal_f_29();
}
inline void Message7_M2_M19::set_f_29(bool value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_29)
}
inline bool Message7_M2_M19::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_;
}
inline void Message7_M2_M19::_internal_set_f_29(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = value;
}

// optional int64 f_30 = 45;
inline bool Message7_M2_M19::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int64_t Message7_M2_M19::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_30)
  return _internal_f_30();
}
inline void Message7_M2_M19::set_f_30(::int64_t value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_30)
}
inline ::int64_t Message7_M2_M19::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message7_M2_M19::_internal_set_f_30(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional float f_31 = 47;
inline bool Message7_M2_M19::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline float Message7_M2_M19::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_31)
  return _internal_f_31();
}
inline void Message7_M2_M19::set_f_31(float value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_31)
}
inline float Message7_M2_M19::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message7_M2_M19::_internal_set_f_31(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional int64 f_32 = 48;
inline bool Message7_M2_M19::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::int64_t Message7_M2_M19::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_32)
  return _internal_f_32();
}
inline void Message7_M2_M19::set_f_32(::int64_t value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_32)
}
inline ::int64_t Message7_M2_M19::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message7_M2_M19::_internal_set_f_32(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional float f_33 = 49;
inline bool Message7_M2_M19::has_f_33() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline float Message7_M2_M19::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_33)
  return _internal_f_33();
}
inline void Message7_M2_M19::set_f_33(float value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_33)
}
inline float Message7_M2_M19::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message7_M2_M19::_internal_set_f_33(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional string f_34 = 51;
inline bool Message7_M2_M19::has_f_34() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message7_M2_M19::f_34() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_34)
  return _internal_f_34();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_34(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_34_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_34)
}
inline std::string* Message7_M2_M19::mutable_f_34() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_34();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_34)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_.Get();
}
inline void Message7_M2_M19::_internal_set_f_34(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_34_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_34_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_34)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_34_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_34_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_34(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_34_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_34_.IsDefault()) {
          _impl_.f_34_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_34)
}

// optional .fleetbench.proto.Message7.M2.M19.E7 f_35 = 55;
inline bool Message7_M2_M19::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E7 Message7_M2_M19::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_35)
  return _internal_f_35();
}
inline void Message7_M2_M19::set_f_35(::fleetbench::proto::Message7_M2_M19_E7 value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_35)
}
inline ::fleetbench::proto::Message7_M2_M19_E7 Message7_M2_M19::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E7>(_impl_.f_35_);
}
inline void Message7_M2_M19::_internal_set_f_35(::fleetbench::proto::Message7_M2_M19_E7 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E7_IsValid(value));
  _impl_.f_35_ = value;
}

// optional float f_36 = 56;
inline bool Message7_M2_M19::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline float Message7_M2_M19::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_36)
  return _internal_f_36();
}
inline void Message7_M2_M19::set_f_36(float value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_36)
}
inline float Message7_M2_M19::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message7_M2_M19::_internal_set_f_36(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional fixed32 f_37 = 59;
inline bool Message7_M2_M19::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0u;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::uint32_t Message7_M2_M19::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_37)
  return _internal_f_37();
}
inline void Message7_M2_M19::set_f_37(::uint32_t value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_37)
}
inline ::uint32_t Message7_M2_M19::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message7_M2_M19::_internal_set_f_37(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional int32 f_38 = 61;
inline bool Message7_M2_M19::has_f_38() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline ::int32_t Message7_M2_M19::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_38)
  return _internal_f_38();
}
inline void Message7_M2_M19::set_f_38(::int32_t value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_38)
}
inline ::int32_t Message7_M2_M19::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_;
}
inline void Message7_M2_M19::_internal_set_f_38(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = value;
}

// optional int64 f_39 = 62;
inline bool Message7_M2_M19::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::int64_t Message7_M2_M19::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_39)
  return _internal_f_39();
}
inline void Message7_M2_M19::set_f_39(::int64_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_39)
}
inline ::int64_t Message7_M2_M19::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message7_M2_M19::_internal_set_f_39(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional double f_40 = 63;
inline bool Message7_M2_M19::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline double Message7_M2_M19::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_40)
  return _internal_f_40();
}
inline void Message7_M2_M19::set_f_40(double value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_40)
}
inline double Message7_M2_M19::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_;
}
inline void Message7_M2_M19::_internal_set_f_40(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = value;
}

// optional int64 f_41 = 65;
inline bool Message7_M2_M19::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::int64_t Message7_M2_M19::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_41)
  return _internal_f_41();
}
inline void Message7_M2_M19::set_f_41(::int64_t value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_41)
}
inline ::int64_t Message7_M2_M19::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message7_M2_M19::_internal_set_f_41(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional bytes f_42 = 67;
inline bool Message7_M2_M19::has_f_42() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message7_M2_M19::f_42() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_42)
  return _internal_f_42();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_42(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_42_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_42)
}
inline std::string* Message7_M2_M19::mutable_f_42() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_42();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_42)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_.Get();
}
inline void Message7_M2_M19::_internal_set_f_42(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_42_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_42_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_42)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_42_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_42_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_42(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_42_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_42_.IsDefault()) {
          _impl_.f_42_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_42)
}

// optional bool f_43 = 68;
inline bool Message7_M2_M19::has_f_43() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = false;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline bool Message7_M2_M19::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_43)
  return _internal_f_43();
}
inline void Message7_M2_M19::set_f_43(bool value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_43)
}
inline bool Message7_M2_M19::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_;
}
inline void Message7_M2_M19::_internal_set_f_43(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = value;
}

// optional string f_44 = 69;
inline bool Message7_M2_M19::has_f_44() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message7_M2_M19::f_44() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_44)
  return _internal_f_44();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_44(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_44_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_44)
}
inline std::string* Message7_M2_M19::mutable_f_44() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_44();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_44)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_.Get();
}
inline void Message7_M2_M19::_internal_set_f_44(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_44_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_44_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_44)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_44_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_44_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_44(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_44_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_44_.IsDefault()) {
          _impl_.f_44_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_44)
}

// optional int64 f_45 = 70;
inline bool Message7_M2_M19::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::int64_t Message7_M2_M19::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_45)
  return _internal_f_45();
}
inline void Message7_M2_M19::set_f_45(::int64_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_45)
}
inline ::int64_t Message7_M2_M19::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message7_M2_M19::_internal_set_f_45(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E8 f_46 = 71;
inline bool Message7_M2_M19::has_f_46() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E8 Message7_M2_M19::f_46() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_46)
  return _internal_f_46();
}
inline void Message7_M2_M19::set_f_46(::fleetbench::proto::Message7_M2_M19_E8 value) {
  _internal_set_f_46(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_46)
}
inline ::fleetbench::proto::Message7_M2_M19_E8 Message7_M2_M19::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E8>(_impl_.f_46_);
}
inline void Message7_M2_M19::_internal_set_f_46(::fleetbench::proto::Message7_M2_M19_E8 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E8_IsValid(value));
  _impl_.f_46_ = value;
}

// optional bool f_47 = 72;
inline bool Message7_M2_M19::has_f_47() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = false;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline bool Message7_M2_M19::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_47)
  return _internal_f_47();
}
inline void Message7_M2_M19::set_f_47(bool value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_47)
}
inline bool Message7_M2_M19::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_;
}
inline void Message7_M2_M19::_internal_set_f_47(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = value;
}

// optional int64 f_48 = 73;
inline bool Message7_M2_M19::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::int64_t Message7_M2_M19::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_48)
  return _internal_f_48();
}
inline void Message7_M2_M19::set_f_48(::int64_t value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_48)
}
inline ::int64_t Message7_M2_M19::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message7_M2_M19::_internal_set_f_48(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// optional string f_49 = 74;
inline bool Message7_M2_M19::has_f_49() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message7_M2_M19::f_49() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_49)
  return _internal_f_49();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_49(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_49_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_49)
}
inline std::string* Message7_M2_M19::mutable_f_49() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_49();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_49)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_.Get();
}
inline void Message7_M2_M19::_internal_set_f_49(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_49_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_49_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_49)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_49_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_49_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_49(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_49_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_49_.IsDefault()) {
          _impl_.f_49_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_49)
}

// optional fixed64 f_50 = 75;
inline bool Message7_M2_M19::has_f_50() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline ::uint64_t Message7_M2_M19::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_50)
  return _internal_f_50();
}
inline void Message7_M2_M19::set_f_50(::uint64_t value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_50)
}
inline ::uint64_t Message7_M2_M19::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_;
}
inline void Message7_M2_M19::_internal_set_f_50(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = value;
}

// optional int32 f_51 = 76;
inline bool Message7_M2_M19::has_f_51() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = 0;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline ::int32_t Message7_M2_M19::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_51)
  return _internal_f_51();
}
inline void Message7_M2_M19::set_f_51(::int32_t value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_51)
}
inline ::int32_t Message7_M2_M19::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline void Message7_M2_M19::_internal_set_f_51(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = value;
}

// optional string f_52 = 77;
inline bool Message7_M2_M19::has_f_52() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message7_M2_M19::f_52() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_52)
  return _internal_f_52();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_52(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_52_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_52)
}
inline std::string* Message7_M2_M19::mutable_f_52() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_52();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_52)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_.Get();
}
inline void Message7_M2_M19::_internal_set_f_52(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_52_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_52_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_52)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_52_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_52_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_52(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_52_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_52_.IsDefault()) {
          _impl_.f_52_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_52)
}

// optional string f_53 = 80;
inline bool Message7_M2_M19::has_f_53() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message7_M2_M19::f_53() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_53)
  return _internal_f_53();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_53(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_53_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_53)
}
inline std::string* Message7_M2_M19::mutable_f_53() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_53();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_53)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_.Get();
}
inline void Message7_M2_M19::_internal_set_f_53(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_53_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_53_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_53)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_53_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_53_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_53(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_53_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_53_.IsDefault()) {
          _impl_.f_53_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_53)
}

// optional int32 f_54 = 81;
inline bool Message7_M2_M19::has_f_54() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline ::int32_t Message7_M2_M19::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_54)
  return _internal_f_54();
}
inline void Message7_M2_M19::set_f_54(::int32_t value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_54)
}
inline ::int32_t Message7_M2_M19::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_;
}
inline void Message7_M2_M19::_internal_set_f_54(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = value;
}

// optional float f_55 = 82;
inline bool Message7_M2_M19::has_f_55() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline float Message7_M2_M19::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_55)
  return _internal_f_55();
}
inline void Message7_M2_M19::set_f_55(float value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_55)
}
inline float Message7_M2_M19::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message7_M2_M19::_internal_set_f_55(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// repeated int32 f_56 = 83 [packed = true];
inline int Message7_M2_M19::_internal_f_56_size() const {
  return _internal_f_56().size();
}
inline int Message7_M2_M19::f_56_size() const {
  return _internal_f_56_size();
}
inline void Message7_M2_M19::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_.Clear();
}
inline ::int32_t Message7_M2_M19::f_56(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_56)
  return _internal_f_56().Get(index);
}
inline void Message7_M2_M19::set_f_56(int index, ::int32_t value) {
  _internal_mutable_f_56()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_56)
}
inline void Message7_M2_M19::add_f_56(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_56()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_56)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M2_M19::f_56() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_56)
  return _internal_f_56();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19::mutable_f_56()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_56)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_56();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M2_M19::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19::_internal_mutable_f_56() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_56_;
}

// repeated int32 f_57 = 86 [packed = true];
inline int Message7_M2_M19::_internal_f_57_size() const {
  return _internal_f_57().size();
}
inline int Message7_M2_M19::f_57_size() const {
  return _internal_f_57_size();
}
inline void Message7_M2_M19::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_.Clear();
}
inline ::int32_t Message7_M2_M19::f_57(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_57)
  return _internal_f_57().Get(index);
}
inline void Message7_M2_M19::set_f_57(int index, ::int32_t value) {
  _internal_mutable_f_57()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_57)
}
inline void Message7_M2_M19::add_f_57(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_57()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_57)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M2_M19::f_57() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_57)
  return _internal_f_57();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19::mutable_f_57()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_57)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_57();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M2_M19::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M2_M19::_internal_mutable_f_57() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_57_;
}

// optional .fleetbench.proto.Message7.M2.M19.E9 f_58 = 89;
inline bool Message7_M2_M19::has_f_58() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message7_M2_M19_E9 Message7_M2_M19::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_58)
  return _internal_f_58();
}
inline void Message7_M2_M19::set_f_58(::fleetbench::proto::Message7_M2_M19_E9 value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_58)
}
inline ::fleetbench::proto::Message7_M2_M19_E9 Message7_M2_M19::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E9>(_impl_.f_58_);
}
inline void Message7_M2_M19::_internal_set_f_58(::fleetbench::proto::Message7_M2_M19_E9 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E9_IsValid(value));
  _impl_.f_58_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E10 f_59 = 90;
inline bool Message7_M2_M19::has_f_59() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = 0;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message7_M2_M19_E10 Message7_M2_M19::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_59)
  return _internal_f_59();
}
inline void Message7_M2_M19::set_f_59(::fleetbench::proto::Message7_M2_M19_E10 value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_59)
}
inline ::fleetbench::proto::Message7_M2_M19_E10 Message7_M2_M19::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E10>(_impl_.f_59_);
}
inline void Message7_M2_M19::_internal_set_f_59(::fleetbench::proto::Message7_M2_M19_E10 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E10_IsValid(value));
  _impl_.f_59_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E11 f_60 = 91;
inline bool Message7_M2_M19::has_f_60() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = 0;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message7_M2_M19_E11 Message7_M2_M19::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_60)
  return _internal_f_60();
}
inline void Message7_M2_M19::set_f_60(::fleetbench::proto::Message7_M2_M19_E11 value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_60)
}
inline ::fleetbench::proto::Message7_M2_M19_E11 Message7_M2_M19::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E11>(_impl_.f_60_);
}
inline void Message7_M2_M19::_internal_set_f_60(::fleetbench::proto::Message7_M2_M19_E11 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E11_IsValid(value));
  _impl_.f_60_ = value;
}

// optional int64 f_61 = 92;
inline bool Message7_M2_M19::has_f_61() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::int64_t Message7_M2_M19::f_61() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_61)
  return _internal_f_61();
}
inline void Message7_M2_M19::set_f_61(::int64_t value) {
  _internal_set_f_61(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_61)
}
inline ::int64_t Message7_M2_M19::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_;
}
inline void Message7_M2_M19::_internal_set_f_61(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = value;
}

// optional fixed64 f_62 = 93;
inline bool Message7_M2_M19::has_f_62() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::uint64_t Message7_M2_M19::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_62)
  return _internal_f_62();
}
inline void Message7_M2_M19::set_f_62(::uint64_t value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_62)
}
inline ::uint64_t Message7_M2_M19::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_;
}
inline void Message7_M2_M19::_internal_set_f_62(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = value;
}

// optional fixed32 f_63 = 94;
inline bool Message7_M2_M19::has_f_63() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = 0u;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline ::uint32_t Message7_M2_M19::f_63() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_63)
  return _internal_f_63();
}
inline void Message7_M2_M19::set_f_63(::uint32_t value) {
  _internal_set_f_63(value);
  _impl_._has_bits_[2] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_63)
}
inline ::uint32_t Message7_M2_M19::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_;
}
inline void Message7_M2_M19::_internal_set_f_63(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = value;
}

// optional float f_64 = 97;
inline bool Message7_M2_M19::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = 0;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline float Message7_M2_M19::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_64)
  return _internal_f_64();
}
inline void Message7_M2_M19::set_f_64(float value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_64)
}
inline float Message7_M2_M19::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_64_;
}
inline void Message7_M2_M19::_internal_set_f_64(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = value;
}

// optional string f_65 = 98;
inline bool Message7_M2_M19::has_f_65() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message7_M2_M19::f_65() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_65)
  return _internal_f_65();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_65(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_65_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_65)
}
inline std::string* Message7_M2_M19::mutable_f_65() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_65();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_65)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_65_.Get();
}
inline void Message7_M2_M19::_internal_set_f_65(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_65_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_65_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_65)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_65_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_65_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_65(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_65_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_65_.IsDefault()) {
          _impl_.f_65_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_65)
}

// optional .fleetbench.proto.Message7.M2.M19.E12 f_66 = 99;
inline bool Message7_M2_M19::has_f_66() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = 0;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E12 Message7_M2_M19::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_66)
  return _internal_f_66();
}
inline void Message7_M2_M19::set_f_66(::fleetbench::proto::Message7_M2_M19_E12 value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[2] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_66)
}
inline ::fleetbench::proto::Message7_M2_M19_E12 Message7_M2_M19::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E12>(_impl_.f_66_);
}
inline void Message7_M2_M19::_internal_set_f_66(::fleetbench::proto::Message7_M2_M19_E12 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E12_IsValid(value));
  _impl_.f_66_ = value;
}

// optional string f_67 = 101;
inline bool Message7_M2_M19::has_f_67() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Message7_M2_M19::f_67() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_67)
  return _internal_f_67();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_67(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_67_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_67)
}
inline std::string* Message7_M2_M19::mutable_f_67() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_67();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_67)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_.Get();
}
inline void Message7_M2_M19::_internal_set_f_67(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_67_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.f_67_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_67)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.f_67_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_67_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_67(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.f_67_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_67_.IsDefault()) {
          _impl_.f_67_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_67)
}

// optional .fleetbench.proto.Message7.M2.M19.E13 f_68 = 103;
inline bool Message7_M2_M19::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = 0;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E13 Message7_M2_M19::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_68)
  return _internal_f_68();
}
inline void Message7_M2_M19::set_f_68(::fleetbench::proto::Message7_M2_M19_E13 value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_68)
}
inline ::fleetbench::proto::Message7_M2_M19_E13 Message7_M2_M19::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E13>(_impl_.f_68_);
}
inline void Message7_M2_M19::_internal_set_f_68(::fleetbench::proto::Message7_M2_M19_E13 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E13_IsValid(value));
  _impl_.f_68_ = value;
}

// optional bytes f_69 = 105;
inline bool Message7_M2_M19::has_f_69() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Message7_M2_M19::f_69() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_69)
  return _internal_f_69();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_69(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_69_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_69)
}
inline std::string* Message7_M2_M19::mutable_f_69() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_69();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_69)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_.Get();
}
inline void Message7_M2_M19::_internal_set_f_69(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_69_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.f_69_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_69)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.f_69_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_69_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_69(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.f_69_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_69_.IsDefault()) {
          _impl_.f_69_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_69)
}

// optional int64 f_70 = 106;
inline bool Message7_M2_M19::has_f_70() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline ::int64_t Message7_M2_M19::f_70() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_70)
  return _internal_f_70();
}
inline void Message7_M2_M19::set_f_70(::int64_t value) {
  _internal_set_f_70(value);
  _impl_._has_bits_[2] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_70)
}
inline ::int64_t Message7_M2_M19::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_;
}
inline void Message7_M2_M19::_internal_set_f_70(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = value;
}

// optional int64 f_71 = 108;
inline bool Message7_M2_M19::has_f_71() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline ::int64_t Message7_M2_M19::f_71() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_71)
  return _internal_f_71();
}
inline void Message7_M2_M19::set_f_71(::int64_t value) {
  _internal_set_f_71(value);
  _impl_._has_bits_[2] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_71)
}
inline ::int64_t Message7_M2_M19::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_;
}
inline void Message7_M2_M19::_internal_set_f_71(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = value;
}

// optional int32 f_72 = 110;
inline bool Message7_M2_M19::has_f_72() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = 0;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline ::int32_t Message7_M2_M19::f_72() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_72)
  return _internal_f_72();
}
inline void Message7_M2_M19::set_f_72(::int32_t value) {
  _internal_set_f_72(value);
  _impl_._has_bits_[2] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_72)
}
inline ::int32_t Message7_M2_M19::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_;
}
inline void Message7_M2_M19::_internal_set_f_72(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E14 f_73 = 111;
inline bool Message7_M2_M19::has_f_73() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_ = 0;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E14 Message7_M2_M19::f_73() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_73)
  return _internal_f_73();
}
inline void Message7_M2_M19::set_f_73(::fleetbench::proto::Message7_M2_M19_E14 value) {
  _internal_set_f_73(value);
  _impl_._has_bits_[2] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_73)
}
inline ::fleetbench::proto::Message7_M2_M19_E14 Message7_M2_M19::_internal_f_73() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E14>(_impl_.f_73_);
}
inline void Message7_M2_M19::_internal_set_f_73(::fleetbench::proto::Message7_M2_M19_E14 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E14_IsValid(value));
  _impl_.f_73_ = value;
}

// optional int64 f_74 = 113;
inline bool Message7_M2_M19::has_f_74() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline ::int64_t Message7_M2_M19::f_74() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_74)
  return _internal_f_74();
}
inline void Message7_M2_M19::set_f_74(::int64_t value) {
  _internal_set_f_74(value);
  _impl_._has_bits_[2] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_74)
}
inline ::int64_t Message7_M2_M19::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_74_;
}
inline void Message7_M2_M19::_internal_set_f_74(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = value;
}

// optional int32 f_75 = 114;
inline bool Message7_M2_M19::has_f_75() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = 0;
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline ::int32_t Message7_M2_M19::f_75() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_75)
  return _internal_f_75();
}
inline void Message7_M2_M19::set_f_75(::int32_t value) {
  _internal_set_f_75(value);
  _impl_._has_bits_[2] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_75)
}
inline ::int32_t Message7_M2_M19::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_;
}
inline void Message7_M2_M19::_internal_set_f_75(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = value;
}

// optional int64 f_76 = 117;
inline bool Message7_M2_M19::has_f_76() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline ::int64_t Message7_M2_M19::f_76() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_76)
  return _internal_f_76();
}
inline void Message7_M2_M19::set_f_76(::int64_t value) {
  _internal_set_f_76(value);
  _impl_._has_bits_[2] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_76)
}
inline ::int64_t Message7_M2_M19::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_;
}
inline void Message7_M2_M19::_internal_set_f_76(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = value;
}

// optional string f_77 = 119;
inline bool Message7_M2_M19::has_f_77() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Message7_M2_M19::f_77() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_77)
  return _internal_f_77();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_77(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_77_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_77)
}
inline std::string* Message7_M2_M19::mutable_f_77() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_77();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_77)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_.Get();
}
inline void Message7_M2_M19::_internal_set_f_77(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_77_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.f_77_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_77)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.f_77_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_77_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_77(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.f_77_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_77_.IsDefault()) {
          _impl_.f_77_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_77)
}

// optional string f_78 = 121;
inline bool Message7_M2_M19::has_f_78() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Message7_M2_M19::f_78() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_78)
  return _internal_f_78();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_78(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_78_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_78)
}
inline std::string* Message7_M2_M19::mutable_f_78() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_78();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_78)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_78_.Get();
}
inline void Message7_M2_M19::_internal_set_f_78(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_78_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.f_78_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_78)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.f_78_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_78_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_78(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.f_78_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_78_.IsDefault()) {
          _impl_.f_78_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_78)
}

// optional uint64 f_79 = 122;
inline bool Message7_M2_M19::has_f_79() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_79() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline ::uint64_t Message7_M2_M19::f_79() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_79)
  return _internal_f_79();
}
inline void Message7_M2_M19::set_f_79(::uint64_t value) {
  _internal_set_f_79(value);
  _impl_._has_bits_[2] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_79)
}
inline ::uint64_t Message7_M2_M19::_internal_f_79() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_79_;
}
inline void Message7_M2_M19::_internal_set_f_79(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = value;
}

// repeated bytes f_80 = 123;
inline int Message7_M2_M19::_internal_f_80_size() const {
  return _internal_f_80().size();
}
inline int Message7_M2_M19::f_80_size() const {
  return _internal_f_80_size();
}
inline void Message7_M2_M19::clear_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_.Clear();
}
inline std::string* Message7_M2_M19::add_f_80()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_80()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M2.M19.f_80)
  return _s;
}
inline const std::string& Message7_M2_M19::f_80(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_80)
  return _internal_f_80().Get(index);
}
inline std::string* Message7_M2_M19::mutable_f_80(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_80)
  return _internal_mutable_f_80()->Mutable(index);
}
inline void Message7_M2_M19::set_f_80(int index, const std::string& value) {
  _internal_mutable_f_80()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::set_f_80(int index, std::string&& value) {
  _internal_mutable_f_80()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::set_f_80(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_80()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::set_f_80(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_80()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::set_f_80(int index, absl::string_view value) {
  _internal_mutable_f_80()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::add_f_80(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_80()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::add_f_80(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_80()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::add_f_80(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_80()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::add_f_80(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_80()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M2.M19.f_80)
}
inline void Message7_M2_M19::add_f_80(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_80()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M2.M19.f_80)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19::f_80() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_80)
  return _internal_f_80();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19::mutable_f_80() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_80)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_80();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19::_internal_f_80() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_80_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19::_internal_mutable_f_80() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_80_;
}

// optional .fleetbench.proto.Message7.M2.M19.E15 f_81 = 125;
inline bool Message7_M2_M19::has_f_81() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_81() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E15 Message7_M2_M19::f_81() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_81)
  return _internal_f_81();
}
inline void Message7_M2_M19::set_f_81(::fleetbench::proto::Message7_M2_M19_E15 value) {
  _internal_set_f_81(value);
  _impl_._has_bits_[2] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_81)
}
inline ::fleetbench::proto::Message7_M2_M19_E15 Message7_M2_M19::_internal_f_81() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E15>(_impl_.f_81_);
}
inline void Message7_M2_M19::_internal_set_f_81(::fleetbench::proto::Message7_M2_M19_E15 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E15_IsValid(value));
  _impl_.f_81_ = value;
}

// optional int64 f_82 = 127;
inline bool Message7_M2_M19::has_f_82() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_82() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline ::int64_t Message7_M2_M19::f_82() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_82)
  return _internal_f_82();
}
inline void Message7_M2_M19::set_f_82(::int64_t value) {
  _internal_set_f_82(value);
  _impl_._has_bits_[2] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_82)
}
inline ::int64_t Message7_M2_M19::_internal_f_82() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_82_;
}
inline void Message7_M2_M19::_internal_set_f_82(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = value;
}

// optional int32 f_83 = 128;
inline bool Message7_M2_M19::has_f_83() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline ::int32_t Message7_M2_M19::f_83() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_83)
  return _internal_f_83();
}
inline void Message7_M2_M19::set_f_83(::int32_t value) {
  _internal_set_f_83(value);
  _impl_._has_bits_[2] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_83)
}
inline ::int32_t Message7_M2_M19::_internal_f_83() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_83_;
}
inline void Message7_M2_M19::_internal_set_f_83(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = value;
}

// optional int32 f_84 = 129;
inline bool Message7_M2_M19::has_f_84() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = 0;
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline ::int32_t Message7_M2_M19::f_84() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_84)
  return _internal_f_84();
}
inline void Message7_M2_M19::set_f_84(::int32_t value) {
  _internal_set_f_84(value);
  _impl_._has_bits_[2] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_84)
}
inline ::int32_t Message7_M2_M19::_internal_f_84() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_84_;
}
inline void Message7_M2_M19::_internal_set_f_84(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = value;
}

// optional bytes f_85 = 130;
inline bool Message7_M2_M19::has_f_85() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Message7_M2_M19::f_85() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_85)
  return _internal_f_85();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_85(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_85_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_85)
}
inline std::string* Message7_M2_M19::mutable_f_85() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_85();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_85)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_85() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_85_.Get();
}
inline void Message7_M2_M19::_internal_set_f_85(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_85_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.f_85_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_85)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.f_85_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_85_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_85(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.f_85_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_85_.IsDefault()) {
          _impl_.f_85_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_85)
}

// optional float f_86 = 131;
inline bool Message7_M2_M19::has_f_86() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_ = 0;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline float Message7_M2_M19::f_86() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_86)
  return _internal_f_86();
}
inline void Message7_M2_M19::set_f_86(float value) {
  _internal_set_f_86(value);
  _impl_._has_bits_[2] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_86)
}
inline float Message7_M2_M19::_internal_f_86() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_86_;
}
inline void Message7_M2_M19::_internal_set_f_86(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_ = value;
}

// optional fixed32 f_87 = 134;
inline bool Message7_M2_M19::has_f_87() const {
  bool value = (_impl_._has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = 0u;
  _impl_._has_bits_[2] &= ~0x20000000u;
}
inline ::uint32_t Message7_M2_M19::f_87() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_87)
  return _internal_f_87();
}
inline void Message7_M2_M19::set_f_87(::uint32_t value) {
  _internal_set_f_87(value);
  _impl_._has_bits_[2] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_87)
}
inline ::uint32_t Message7_M2_M19::_internal_f_87() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_87_;
}
inline void Message7_M2_M19::_internal_set_f_87(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E16 f_88 = 135;
inline bool Message7_M2_M19::has_f_88() const {
  bool value = (_impl_._has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_88() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = 0;
  _impl_._has_bits_[2] &= ~0x40000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E16 Message7_M2_M19::f_88() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_88)
  return _internal_f_88();
}
inline void Message7_M2_M19::set_f_88(::fleetbench::proto::Message7_M2_M19_E16 value) {
  _internal_set_f_88(value);
  _impl_._has_bits_[2] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_88)
}
inline ::fleetbench::proto::Message7_M2_M19_E16 Message7_M2_M19::_internal_f_88() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E16>(_impl_.f_88_);
}
inline void Message7_M2_M19::_internal_set_f_88(::fleetbench::proto::Message7_M2_M19_E16 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E16_IsValid(value));
  _impl_.f_88_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E17 f_89 = 136;
inline bool Message7_M2_M19::has_f_89() const {
  bool value = (_impl_._has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = 0;
  _impl_._has_bits_[2] &= ~0x80000000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E17 Message7_M2_M19::f_89() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_89)
  return _internal_f_89();
}
inline void Message7_M2_M19::set_f_89(::fleetbench::proto::Message7_M2_M19_E17 value) {
  _internal_set_f_89(value);
  _impl_._has_bits_[2] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_89)
}
inline ::fleetbench::proto::Message7_M2_M19_E17 Message7_M2_M19::_internal_f_89() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E17>(_impl_.f_89_);
}
inline void Message7_M2_M19::_internal_set_f_89(::fleetbench::proto::Message7_M2_M19_E17 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E17_IsValid(value));
  _impl_.f_89_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E18 f_90 = 137;
inline bool Message7_M2_M19::has_f_90() const {
  bool value = (_impl_._has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = 0;
  _impl_._has_bits_[3] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M2_M19_E18 Message7_M2_M19::f_90() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_90)
  return _internal_f_90();
}
inline void Message7_M2_M19::set_f_90(::fleetbench::proto::Message7_M2_M19_E18 value) {
  _internal_set_f_90(value);
  _impl_._has_bits_[3] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_90)
}
inline ::fleetbench::proto::Message7_M2_M19_E18 Message7_M2_M19::_internal_f_90() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E18>(_impl_.f_90_);
}
inline void Message7_M2_M19::_internal_set_f_90(::fleetbench::proto::Message7_M2_M19_E18 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E18_IsValid(value));
  _impl_.f_90_ = value;
}

// optional bytes f_91 = 138;
inline bool Message7_M2_M19::has_f_91() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const std::string& Message7_M2_M19::f_91() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_91)
  return _internal_f_91();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_91(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_91_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_91)
}
inline std::string* Message7_M2_M19::mutable_f_91() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_91();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_91)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_91() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_91_.Get();
}
inline void Message7_M2_M19::_internal_set_f_91(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_91_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.f_91_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_91)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.f_91_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_91_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_91(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.f_91_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_91_.IsDefault()) {
          _impl_.f_91_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_91)
}

// optional bytes f_92 = 139;
inline bool Message7_M2_M19::has_f_92() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const std::string& Message7_M2_M19::f_92() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_92)
  return _internal_f_92();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_92(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_92_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_92)
}
inline std::string* Message7_M2_M19::mutable_f_92() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_92();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_92)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_92() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_92_.Get();
}
inline void Message7_M2_M19::_internal_set_f_92(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_92_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.f_92_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_92)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.f_92_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_92_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_92(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.f_92_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_92_.IsDefault()) {
          _impl_.f_92_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_92)
}

// optional uint64 f_93 = 140;
inline bool Message7_M2_M19::has_f_93() const {
  bool value = (_impl_._has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = ::uint64_t{0u};
  _impl_._has_bits_[3] &= ~0x00000002u;
}
inline ::uint64_t Message7_M2_M19::f_93() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_93)
  return _internal_f_93();
}
inline void Message7_M2_M19::set_f_93(::uint64_t value) {
  _internal_set_f_93(value);
  _impl_._has_bits_[3] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_93)
}
inline ::uint64_t Message7_M2_M19::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_93_;
}
inline void Message7_M2_M19::_internal_set_f_93(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = value;
}

// optional int64 f_94 = 142;
inline bool Message7_M2_M19::has_f_94() const {
  bool value = (_impl_._has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000004u;
}
inline ::int64_t Message7_M2_M19::f_94() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_94)
  return _internal_f_94();
}
inline void Message7_M2_M19::set_f_94(::int64_t value) {
  _internal_set_f_94(value);
  _impl_._has_bits_[3] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_94)
}
inline ::int64_t Message7_M2_M19::_internal_f_94() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_94_;
}
inline void Message7_M2_M19::_internal_set_f_94(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E19 f_95 = 143;
inline bool Message7_M2_M19::has_f_95() const {
  bool value = (_impl_._has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_ = 0;
  _impl_._has_bits_[3] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message7_M2_M19_E19 Message7_M2_M19::f_95() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_95)
  return _internal_f_95();
}
inline void Message7_M2_M19::set_f_95(::fleetbench::proto::Message7_M2_M19_E19 value) {
  _internal_set_f_95(value);
  _impl_._has_bits_[3] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_95)
}
inline ::fleetbench::proto::Message7_M2_M19_E19 Message7_M2_M19::_internal_f_95() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E19>(_impl_.f_95_);
}
inline void Message7_M2_M19::_internal_set_f_95(::fleetbench::proto::Message7_M2_M19_E19 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E19_IsValid(value));
  _impl_.f_95_ = value;
}

// optional int64 f_96 = 145;
inline bool Message7_M2_M19::has_f_96() const {
  bool value = (_impl_._has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000008u;
}
inline ::int64_t Message7_M2_M19::f_96() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_96)
  return _internal_f_96();
}
inline void Message7_M2_M19::set_f_96(::int64_t value) {
  _internal_set_f_96(value);
  _impl_._has_bits_[3] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_96)
}
inline ::int64_t Message7_M2_M19::_internal_f_96() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_96_;
}
inline void Message7_M2_M19::_internal_set_f_96(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = value;
}

// optional int64 f_97 = 146;
inline bool Message7_M2_M19::has_f_97() const {
  bool value = (_impl_._has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000040u;
}
inline ::int64_t Message7_M2_M19::f_97() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_97)
  return _internal_f_97();
}
inline void Message7_M2_M19::set_f_97(::int64_t value) {
  _internal_set_f_97(value);
  _impl_._has_bits_[3] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_97)
}
inline ::int64_t Message7_M2_M19::_internal_f_97() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_97_;
}
inline void Message7_M2_M19::_internal_set_f_97(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = value;
}

// optional int32 f_98 = 147;
inline bool Message7_M2_M19::has_f_98() const {
  bool value = (_impl_._has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_98() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = 0;
  _impl_._has_bits_[3] &= ~0x00000020u;
}
inline ::int32_t Message7_M2_M19::f_98() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_98)
  return _internal_f_98();
}
inline void Message7_M2_M19::set_f_98(::int32_t value) {
  _internal_set_f_98(value);
  _impl_._has_bits_[3] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_98)
}
inline ::int32_t Message7_M2_M19::_internal_f_98() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_98_;
}
inline void Message7_M2_M19::_internal_set_f_98(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = value;
}

// optional int64 f_99 = 149;
inline bool Message7_M2_M19::has_f_99() const {
  bool value = (_impl_._has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_99() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000080u;
}
inline ::int64_t Message7_M2_M19::f_99() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_99)
  return _internal_f_99();
}
inline void Message7_M2_M19::set_f_99(::int64_t value) {
  _internal_set_f_99(value);
  _impl_._has_bits_[3] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_99)
}
inline ::int64_t Message7_M2_M19::_internal_f_99() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_99_;
}
inline void Message7_M2_M19::_internal_set_f_99(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = value;
}

// optional int64 f_100 = 150;
inline bool Message7_M2_M19::has_f_100() const {
  bool value = (_impl_._has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_100() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000100u;
}
inline ::int64_t Message7_M2_M19::f_100() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_100)
  return _internal_f_100();
}
inline void Message7_M2_M19::set_f_100(::int64_t value) {
  _internal_set_f_100(value);
  _impl_._has_bits_[3] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_100)
}
inline ::int64_t Message7_M2_M19::_internal_f_100() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_100_;
}
inline void Message7_M2_M19::_internal_set_f_100(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = value;
}

// optional float f_101 = 151;
inline bool Message7_M2_M19::has_f_101() const {
  bool value = (_impl_._has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_101_ = 0;
  _impl_._has_bits_[3] &= ~0x00000400u;
}
inline float Message7_M2_M19::f_101() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_101)
  return _internal_f_101();
}
inline void Message7_M2_M19::set_f_101(float value) {
  _internal_set_f_101(value);
  _impl_._has_bits_[3] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_101)
}
inline float Message7_M2_M19::_internal_f_101() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_101_;
}
inline void Message7_M2_M19::_internal_set_f_101(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_101_ = value;
}

// optional int64 f_102 = 152;
inline bool Message7_M2_M19::has_f_102() const {
  bool value = (_impl_._has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_102() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000200u;
}
inline ::int64_t Message7_M2_M19::f_102() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_102)
  return _internal_f_102();
}
inline void Message7_M2_M19::set_f_102(::int64_t value) {
  _internal_set_f_102(value);
  _impl_._has_bits_[3] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_102)
}
inline ::int64_t Message7_M2_M19::_internal_f_102() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_102_;
}
inline void Message7_M2_M19::_internal_set_f_102(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = value;
}

// optional float f_103 = 154;
inline bool Message7_M2_M19::has_f_103() const {
  bool value = (_impl_._has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = 0;
  _impl_._has_bits_[3] &= ~0x00000800u;
}
inline float Message7_M2_M19::f_103() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_103)
  return _internal_f_103();
}
inline void Message7_M2_M19::set_f_103(float value) {
  _internal_set_f_103(value);
  _impl_._has_bits_[3] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_103)
}
inline float Message7_M2_M19::_internal_f_103() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_103_;
}
inline void Message7_M2_M19::_internal_set_f_103(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E20 f_104 = 155;
inline bool Message7_M2_M19::has_f_104() const {
  bool value = (_impl_._has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_104_ = 0;
  _impl_._has_bits_[3] &= ~0x00002000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E20 Message7_M2_M19::f_104() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_104)
  return _internal_f_104();
}
inline void Message7_M2_M19::set_f_104(::fleetbench::proto::Message7_M2_M19_E20 value) {
  _internal_set_f_104(value);
  _impl_._has_bits_[3] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_104)
}
inline ::fleetbench::proto::Message7_M2_M19_E20 Message7_M2_M19::_internal_f_104() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E20>(_impl_.f_104_);
}
inline void Message7_M2_M19::_internal_set_f_104(::fleetbench::proto::Message7_M2_M19_E20 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E20_IsValid(value));
  _impl_.f_104_ = value;
}

// optional int64 f_105 = 156;
inline bool Message7_M2_M19::has_f_105() const {
  bool value = (_impl_._has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_105() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00001000u;
}
inline ::int64_t Message7_M2_M19::f_105() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_105)
  return _internal_f_105();
}
inline void Message7_M2_M19::set_f_105(::int64_t value) {
  _internal_set_f_105(value);
  _impl_._has_bits_[3] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_105)
}
inline ::int64_t Message7_M2_M19::_internal_f_105() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_105_;
}
inline void Message7_M2_M19::_internal_set_f_105(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = value;
}

// optional int32 f_106 = 158;
inline bool Message7_M2_M19::has_f_106() const {
  bool value = (_impl_._has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_ = 0;
  _impl_._has_bits_[3] &= ~0x00004000u;
}
inline ::int32_t Message7_M2_M19::f_106() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_106)
  return _internal_f_106();
}
inline void Message7_M2_M19::set_f_106(::int32_t value) {
  _internal_set_f_106(value);
  _impl_._has_bits_[3] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_106)
}
inline ::int32_t Message7_M2_M19::_internal_f_106() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_106_;
}
inline void Message7_M2_M19::_internal_set_f_106(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_ = value;
}

// optional fixed32 f_107 = 161;
inline bool Message7_M2_M19::has_f_107() const {
  bool value = (_impl_._has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_107() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = 0u;
  _impl_._has_bits_[3] &= ~0x00010000u;
}
inline ::uint32_t Message7_M2_M19::f_107() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_107)
  return _internal_f_107();
}
inline void Message7_M2_M19::set_f_107(::uint32_t value) {
  _internal_set_f_107(value);
  _impl_._has_bits_[3] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_107)
}
inline ::uint32_t Message7_M2_M19::_internal_f_107() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_107_;
}
inline void Message7_M2_M19::_internal_set_f_107(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = value;
}

// optional int64 f_108 = 163;
inline bool Message7_M2_M19::has_f_108() const {
  bool value = (_impl_._has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00008000u;
}
inline ::int64_t Message7_M2_M19::f_108() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_108)
  return _internal_f_108();
}
inline void Message7_M2_M19::set_f_108(::int64_t value) {
  _internal_set_f_108(value);
  _impl_._has_bits_[3] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_108)
}
inline ::int64_t Message7_M2_M19::_internal_f_108() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_108_;
}
inline void Message7_M2_M19::_internal_set_f_108(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_ = value;
}

// optional string f_109 = 165;
inline bool Message7_M2_M19::has_f_109() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_109_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const std::string& Message7_M2_M19::f_109() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_109)
  return _internal_f_109();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_109(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_109_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_109)
}
inline std::string* Message7_M2_M19::mutable_f_109() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_109();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_109)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_109() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_109_.Get();
}
inline void Message7_M2_M19::_internal_set_f_109(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_109_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.f_109_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_109)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.f_109_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_109_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_109(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.f_109_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_109_.IsDefault()) {
          _impl_.f_109_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_109)
}

// optional int32 f_110 = 167;
inline bool Message7_M2_M19::has_f_110() const {
  bool value = (_impl_._has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_110() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = 0;
  _impl_._has_bits_[3] &= ~0x00020000u;
}
inline ::int32_t Message7_M2_M19::f_110() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_110)
  return _internal_f_110();
}
inline void Message7_M2_M19::set_f_110(::int32_t value) {
  _internal_set_f_110(value);
  _impl_._has_bits_[3] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_110)
}
inline ::int32_t Message7_M2_M19::_internal_f_110() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_110_;
}
inline void Message7_M2_M19::_internal_set_f_110(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = value;
}

// optional bytes f_111 = 168;
inline bool Message7_M2_M19::has_f_111() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const std::string& Message7_M2_M19::f_111() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_111)
  return _internal_f_111();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_111(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_111_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_111)
}
inline std::string* Message7_M2_M19::mutable_f_111() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_111();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_111)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_111() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_111_.Get();
}
inline void Message7_M2_M19::_internal_set_f_111(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_111_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  return _impl_.f_111_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_111)
  if ((_impl_._has_bits_[0] & 0x00800000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00800000u;
  auto* released = _impl_.f_111_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_111_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_111(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.f_111_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_111_.IsDefault()) {
          _impl_.f_111_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_111)
}

// optional int64 f_112 = 169;
inline bool Message7_M2_M19::has_f_112() const {
  bool value = (_impl_._has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_112() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00040000u;
}
inline ::int64_t Message7_M2_M19::f_112() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_112)
  return _internal_f_112();
}
inline void Message7_M2_M19::set_f_112(::int64_t value) {
  _internal_set_f_112(value);
  _impl_._has_bits_[3] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_112)
}
inline ::int64_t Message7_M2_M19::_internal_f_112() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_112_;
}
inline void Message7_M2_M19::_internal_set_f_112(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = value;
}

// optional fixed32 f_113 = 170;
inline bool Message7_M2_M19::has_f_113() const {
  bool value = (_impl_._has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_113_ = 0u;
  _impl_._has_bits_[3] &= ~0x00080000u;
}
inline ::uint32_t Message7_M2_M19::f_113() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_113)
  return _internal_f_113();
}
inline void Message7_M2_M19::set_f_113(::uint32_t value) {
  _internal_set_f_113(value);
  _impl_._has_bits_[3] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_113)
}
inline ::uint32_t Message7_M2_M19::_internal_f_113() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_113_;
}
inline void Message7_M2_M19::_internal_set_f_113(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_113_ = value;
}

// optional bytes f_114 = 171;
inline bool Message7_M2_M19::has_f_114() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_114() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_114_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const std::string& Message7_M2_M19::f_114() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_114)
  return _internal_f_114();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_114(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_114_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_114)
}
inline std::string* Message7_M2_M19::mutable_f_114() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_114();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_114)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_114() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_114_.Get();
}
inline void Message7_M2_M19::_internal_set_f_114(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_114_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_114() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  return _impl_.f_114_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_114() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_114)
  if ((_impl_._has_bits_[0] & 0x01000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x01000000u;
  auto* released = _impl_.f_114_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_114_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_114(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.f_114_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_114_.IsDefault()) {
          _impl_.f_114_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_114)
}

// repeated .fleetbench.proto.Message7.M2.M19.E21 f_115 = 172 [packed = true];
inline int Message7_M2_M19::_internal_f_115_size() const {
  return _internal_f_115().size();
}
inline int Message7_M2_M19::f_115_size() const {
  return _internal_f_115_size();
}
inline void Message7_M2_M19::clear_f_115() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_115_.Clear();
}
inline ::fleetbench::proto::Message7_M2_M19_E21 Message7_M2_M19::f_115(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_115)
  return static_cast<::fleetbench::proto::Message7_M2_M19_E21>(_internal_f_115().Get(index));
}
inline void Message7_M2_M19::set_f_115(int index, ::fleetbench::proto::Message7_M2_M19_E21 value) {
  assert(::fleetbench::proto::Message7_M2_M19_E21_IsValid(value));
  _internal_mutable_f_115()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_115)
}
inline void Message7_M2_M19::add_f_115(::fleetbench::proto::Message7_M2_M19_E21 value) {
  assert(::fleetbench::proto::Message7_M2_M19_E21_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_115()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_115)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19::f_115() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_115)
  return _internal_f_115();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19::mutable_f_115()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_115)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_115();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M2_M19::_internal_f_115()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_115_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M2_M19::_internal_mutable_f_115() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_115_;
}

// optional float f_116 = 173;
inline bool Message7_M2_M19::has_f_116() const {
  bool value = (_impl_._has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_116() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_116_ = 0;
  _impl_._has_bits_[3] &= ~0x00100000u;
}
inline float Message7_M2_M19::f_116() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_116)
  return _internal_f_116();
}
inline void Message7_M2_M19::set_f_116(float value) {
  _internal_set_f_116(value);
  _impl_._has_bits_[3] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_116)
}
inline float Message7_M2_M19::_internal_f_116() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_116_;
}
inline void Message7_M2_M19::_internal_set_f_116(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_116_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E22 f_117 = 174;
inline bool Message7_M2_M19::has_f_117() const {
  bool value = (_impl_._has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_117_ = 0;
  _impl_._has_bits_[3] &= ~0x00400000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E22 Message7_M2_M19::f_117() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_117)
  return _internal_f_117();
}
inline void Message7_M2_M19::set_f_117(::fleetbench::proto::Message7_M2_M19_E22 value) {
  _internal_set_f_117(value);
  _impl_._has_bits_[3] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_117)
}
inline ::fleetbench::proto::Message7_M2_M19_E22 Message7_M2_M19::_internal_f_117() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E22>(_impl_.f_117_);
}
inline void Message7_M2_M19::_internal_set_f_117(::fleetbench::proto::Message7_M2_M19_E22 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E22_IsValid(value));
  _impl_.f_117_ = value;
}

// optional string f_118 = 175;
inline bool Message7_M2_M19::has_f_118() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_118() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_118_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const std::string& Message7_M2_M19::f_118() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_118)
  return _internal_f_118();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_118(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_118_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_118)
}
inline std::string* Message7_M2_M19::mutable_f_118() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_118();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_118)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_118() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_118_.Get();
}
inline void Message7_M2_M19::_internal_set_f_118(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_118_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_118() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  return _impl_.f_118_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_118() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_118)
  if ((_impl_._has_bits_[0] & 0x02000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x02000000u;
  auto* released = _impl_.f_118_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_118_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_118(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.f_118_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_118_.IsDefault()) {
          _impl_.f_118_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_118)
}

// repeated string f_119 = 176;
inline int Message7_M2_M19::_internal_f_119_size() const {
  return _internal_f_119().size();
}
inline int Message7_M2_M19::f_119_size() const {
  return _internal_f_119_size();
}
inline void Message7_M2_M19::clear_f_119() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_119_.Clear();
}
inline std::string* Message7_M2_M19::add_f_119()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_119()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M2.M19.f_119)
  return _s;
}
inline const std::string& Message7_M2_M19::f_119(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_119)
  return _internal_f_119().Get(index);
}
inline std::string* Message7_M2_M19::mutable_f_119(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_119)
  return _internal_mutable_f_119()->Mutable(index);
}
inline void Message7_M2_M19::set_f_119(int index, const std::string& value) {
  _internal_mutable_f_119()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::set_f_119(int index, std::string&& value) {
  _internal_mutable_f_119()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::set_f_119(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_119()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::set_f_119(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_119()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::set_f_119(int index, absl::string_view value) {
  _internal_mutable_f_119()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::add_f_119(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_119()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::add_f_119(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_119()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::add_f_119(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_119()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::add_f_119(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_119()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M2.M19.f_119)
}
inline void Message7_M2_M19::add_f_119(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_119()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M2.M19.f_119)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19::f_119() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M2.M19.f_119)
  return _internal_f_119();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19::mutable_f_119() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M2.M19.f_119)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_119();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M2_M19::_internal_f_119() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_119_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M2_M19::_internal_mutable_f_119() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_119_;
}

// optional int64 f_120 = 177;
inline bool Message7_M2_M19::has_f_120() const {
  bool value = (_impl_._has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_120() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_120_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00200000u;
}
inline ::int64_t Message7_M2_M19::f_120() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_120)
  return _internal_f_120();
}
inline void Message7_M2_M19::set_f_120(::int64_t value) {
  _internal_set_f_120(value);
  _impl_._has_bits_[3] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_120)
}
inline ::int64_t Message7_M2_M19::_internal_f_120() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_120_;
}
inline void Message7_M2_M19::_internal_set_f_120(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_120_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.E23 f_121 = 180;
inline bool Message7_M2_M19::has_f_121() const {
  bool value = (_impl_._has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_121() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_121_ = 0;
  _impl_._has_bits_[3] &= ~0x00800000u;
}
inline ::fleetbench::proto::Message7_M2_M19_E23 Message7_M2_M19::f_121() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_121)
  return _internal_f_121();
}
inline void Message7_M2_M19::set_f_121(::fleetbench::proto::Message7_M2_M19_E23 value) {
  _internal_set_f_121(value);
  _impl_._has_bits_[3] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_121)
}
inline ::fleetbench::proto::Message7_M2_M19_E23 Message7_M2_M19::_internal_f_121() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M2_M19_E23>(_impl_.f_121_);
}
inline void Message7_M2_M19::_internal_set_f_121(::fleetbench::proto::Message7_M2_M19_E23 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M2_M19_E23_IsValid(value));
  _impl_.f_121_ = value;
}

// optional int64 f_122 = 181;
inline bool Message7_M2_M19::has_f_122() const {
  bool value = (_impl_._has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_122() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_122_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x01000000u;
}
inline ::int64_t Message7_M2_M19::f_122() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_122)
  return _internal_f_122();
}
inline void Message7_M2_M19::set_f_122(::int64_t value) {
  _internal_set_f_122(value);
  _impl_._has_bits_[3] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_122)
}
inline ::int64_t Message7_M2_M19::_internal_f_122() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_122_;
}
inline void Message7_M2_M19::_internal_set_f_122(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_122_ = value;
}

// optional int64 f_123 = 182;
inline bool Message7_M2_M19::has_f_123() const {
  bool value = (_impl_._has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_123() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_123_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x02000000u;
}
inline ::int64_t Message7_M2_M19::f_123() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_123)
  return _internal_f_123();
}
inline void Message7_M2_M19::set_f_123(::int64_t value) {
  _internal_set_f_123(value);
  _impl_._has_bits_[3] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_123)
}
inline ::int64_t Message7_M2_M19::_internal_f_123() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_123_;
}
inline void Message7_M2_M19::_internal_set_f_123(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_123_ = value;
}

// optional string f_124 = 183;
inline bool Message7_M2_M19::has_f_124() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_124() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_124_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const std::string& Message7_M2_M19::f_124() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_124)
  return _internal_f_124();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_124(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_124_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_124)
}
inline std::string* Message7_M2_M19::mutable_f_124() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_124();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_124)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_124() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_124_.Get();
}
inline void Message7_M2_M19::_internal_set_f_124(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_124_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_124() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  return _impl_.f_124_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_124() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_124)
  if ((_impl_._has_bits_[0] & 0x04000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x04000000u;
  auto* released = _impl_.f_124_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_124_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_124(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.f_124_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_124_.IsDefault()) {
          _impl_.f_124_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_124)
}

// optional int32 f_125 = 184;
inline bool Message7_M2_M19::has_f_125() const {
  bool value = (_impl_._has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_125() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_125_ = 0;
  _impl_._has_bits_[3] &= ~0x04000000u;
}
inline ::int32_t Message7_M2_M19::f_125() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_125)
  return _internal_f_125();
}
inline void Message7_M2_M19::set_f_125(::int32_t value) {
  _internal_set_f_125(value);
  _impl_._has_bits_[3] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_125)
}
inline ::int32_t Message7_M2_M19::_internal_f_125() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_125_;
}
inline void Message7_M2_M19::_internal_set_f_125(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_125_ = value;
}

// optional float f_126 = 185;
inline bool Message7_M2_M19::has_f_126() const {
  bool value = (_impl_._has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_126() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = 0;
  _impl_._has_bits_[3] &= ~0x08000000u;
}
inline float Message7_M2_M19::f_126() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_126)
  return _internal_f_126();
}
inline void Message7_M2_M19::set_f_126(float value) {
  _internal_set_f_126(value);
  _impl_._has_bits_[3] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_126)
}
inline float Message7_M2_M19::_internal_f_126() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_126_;
}
inline void Message7_M2_M19::_internal_set_f_126(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = value;
}

// optional string f_127 = 190;
inline bool Message7_M2_M19::has_f_127() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_127() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_127_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const std::string& Message7_M2_M19::f_127() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_127)
  return _internal_f_127();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_127(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_127_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_127)
}
inline std::string* Message7_M2_M19::mutable_f_127() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_127();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_127)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_127() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_127_.Get();
}
inline void Message7_M2_M19::_internal_set_f_127(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_127_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_127() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  return _impl_.f_127_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_127() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_127)
  if ((_impl_._has_bits_[0] & 0x08000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x08000000u;
  auto* released = _impl_.f_127_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_127_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_127(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.f_127_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_127_.IsDefault()) {
          _impl_.f_127_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_127)
}

// optional bool f_128 = 191;
inline bool Message7_M2_M19::has_f_128() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_128() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_128_ = false;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline bool Message7_M2_M19::f_128() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_128)
  return _internal_f_128();
}
inline void Message7_M2_M19::set_f_128(bool value) {
  _internal_set_f_128(value);
  _impl_._has_bits_[2] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_128)
}
inline bool Message7_M2_M19::_internal_f_128() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_128_;
}
inline void Message7_M2_M19::_internal_set_f_128(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_128_ = value;
}

// optional uint32 f_129 = 192;
inline bool Message7_M2_M19::has_f_129() const {
  bool value = (_impl_._has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_129() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_129_ = 0u;
  _impl_._has_bits_[3] &= ~0x20000000u;
}
inline ::uint32_t Message7_M2_M19::f_129() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_129)
  return _internal_f_129();
}
inline void Message7_M2_M19::set_f_129(::uint32_t value) {
  _internal_set_f_129(value);
  _impl_._has_bits_[3] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_129)
}
inline ::uint32_t Message7_M2_M19::_internal_f_129() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_129_;
}
inline void Message7_M2_M19::_internal_set_f_129(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_129_ = value;
}

// optional int64 f_130 = 193;
inline bool Message7_M2_M19::has_f_130() const {
  bool value = (_impl_._has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_130() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x10000000u;
}
inline ::int64_t Message7_M2_M19::f_130() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_130)
  return _internal_f_130();
}
inline void Message7_M2_M19::set_f_130(::int64_t value) {
  _internal_set_f_130(value);
  _impl_._has_bits_[3] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_130)
}
inline ::int64_t Message7_M2_M19::_internal_f_130() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_130_;
}
inline void Message7_M2_M19::_internal_set_f_130(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = value;
}

// optional bytes f_131 = 194;
inline bool Message7_M2_M19::has_f_131() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_131_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const std::string& Message7_M2_M19::f_131() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_131)
  return _internal_f_131();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2_M19::set_f_131(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_131_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_131)
}
inline std::string* Message7_M2_M19::mutable_f_131() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_131();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_131)
  return _s;
}
inline const std::string& Message7_M2_M19::_internal_f_131() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_131_.Get();
}
inline void Message7_M2_M19::_internal_set_f_131(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_131_.Set(value, GetArena());
}
inline std::string* Message7_M2_M19::_internal_mutable_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  return _impl_.f_131_.Mutable( GetArena());
}
inline std::string* Message7_M2_M19::release_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_131)
  if ((_impl_._has_bits_[0] & 0x10000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x10000000u;
  auto* released = _impl_.f_131_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_131_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2_M19::set_allocated_f_131(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.f_131_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_131_.IsDefault()) {
          _impl_.f_131_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_131)
}

// optional int32 f_132 = 196;
inline bool Message7_M2_M19::has_f_132() const {
  bool value = (_impl_._has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_132() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = 0;
  _impl_._has_bits_[3] &= ~0x40000000u;
}
inline ::int32_t Message7_M2_M19::f_132() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_132)
  return _internal_f_132();
}
inline void Message7_M2_M19::set_f_132(::int32_t value) {
  _internal_set_f_132(value);
  _impl_._has_bits_[3] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_132)
}
inline ::int32_t Message7_M2_M19::_internal_f_132() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_132_;
}
inline void Message7_M2_M19::_internal_set_f_132(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = value;
}

// optional int32 f_133 = 197;
inline bool Message7_M2_M19::has_f_133() const {
  bool value = (_impl_._has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline void Message7_M2_M19::clear_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = 0;
  _impl_._has_bits_[3] &= ~0x80000000u;
}
inline ::int32_t Message7_M2_M19::f_133() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_133)
  return _internal_f_133();
}
inline void Message7_M2_M19::set_f_133(::int32_t value) {
  _internal_set_f_133(value);
  _impl_._has_bits_[3] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.M19.f_133)
}
inline ::int32_t Message7_M2_M19::_internal_f_133() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_133_;
}
inline void Message7_M2_M19::_internal_set_f_133(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = value;
}

// optional .fleetbench.proto.Message7.M2.M19.M21 f_197 = 198;
inline bool Message7_M2_M19::has_f_197() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_197_ != nullptr);
  return value;
}
inline void Message7_M2_M19::clear_f_197() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_197_ != nullptr) _impl_.f_197_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M21& Message7_M2_M19::_internal_f_197() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M21* p = _impl_.f_197_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M21&>(::fleetbench::proto::_Message7_M2_M19_M21_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M21& Message7_M2_M19::f_197() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_197)
  return _internal_f_197();
}
inline void Message7_M2_M19::unsafe_arena_set_allocated_f_197(::fleetbench::proto::Message7_M2_M19_M21* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_197_);
  }
  _impl_.f_197_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.f_197)
}
inline ::fleetbench::proto::Message7_M2_M19_M21* Message7_M2_M19::release_f_197() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::fleetbench::proto::Message7_M2_M19_M21* released = _impl_.f_197_;
  _impl_.f_197_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M21* Message7_M2_M19::unsafe_arena_release_f_197() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_197)

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::fleetbench::proto::Message7_M2_M19_M21* temp = _impl_.f_197_;
  _impl_.f_197_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M21* Message7_M2_M19::_internal_mutable_f_197() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_197_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M21>(GetArena());
    _impl_.f_197_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21*>(p);
  }
  return _impl_.f_197_;
}
inline ::fleetbench::proto::Message7_M2_M19_M21* Message7_M2_M19::mutable_f_197() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x20000000u;
  ::fleetbench::proto::Message7_M2_M19_M21* _msg = _internal_mutable_f_197();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_197)
  return _msg;
}
inline void Message7_M2_M19::set_allocated_f_197(::fleetbench::proto::Message7_M2_M19_M21* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_197_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }

  _impl_.f_197_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M21*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_197)
}

// optional .fleetbench.proto.Message7.M2.M19.M29 f_198 = 200;
inline bool Message7_M2_M19::has_f_198() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_198_ != nullptr);
  return value;
}
inline void Message7_M2_M19::clear_f_198() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_198_ != nullptr) _impl_.f_198_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::fleetbench::proto::Message7_M2_M19_M29& Message7_M2_M19::_internal_f_198() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19_M29* p = _impl_.f_198_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19_M29&>(::fleetbench::proto::_Message7_M2_M19_M29_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19_M29& Message7_M2_M19::f_198() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.M19.f_198)
  return _internal_f_198();
}
inline void Message7_M2_M19::unsafe_arena_set_allocated_f_198(::fleetbench::proto::Message7_M2_M19_M29* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_198_);
  }
  _impl_.f_198_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.M19.f_198)
}
inline ::fleetbench::proto::Message7_M2_M19_M29* Message7_M2_M19::release_f_198() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::fleetbench::proto::Message7_M2_M19_M29* released = _impl_.f_198_;
  _impl_.f_198_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19_M29* Message7_M2_M19::unsafe_arena_release_f_198() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.M19.f_198)

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::fleetbench::proto::Message7_M2_M19_M29* temp = _impl_.f_198_;
  _impl_.f_198_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19_M29* Message7_M2_M19::_internal_mutable_f_198() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_198_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19_M29>(GetArena());
    _impl_.f_198_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29*>(p);
  }
  return _impl_.f_198_;
}
inline ::fleetbench::proto::Message7_M2_M19_M29* Message7_M2_M19::mutable_f_198() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x40000000u;
  ::fleetbench::proto::Message7_M2_M19_M29* _msg = _internal_mutable_f_198();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.M19.f_198)
  return _msg;
}
inline void Message7_M2_M19::set_allocated_f_198(::fleetbench::proto::Message7_M2_M19_M29* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_198_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }

  _impl_.f_198_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19_M29*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.M19.f_198)
}

// -------------------------------------------------------------------

// Message7_M2

// optional string f_0 = 2;
inline bool Message7_M2::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M2::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M2::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M2::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M2.f_0)
}
inline std::string* Message7_M2::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.f_0)
  return _s;
}
inline const std::string& Message7_M2::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M2::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M2::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M2::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M2::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.f_0)
}

// optional .fleetbench.proto.Message7.M2.M19 f_2 = 3;
inline bool Message7_M2::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M2::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M2_M19& Message7_M2::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M2_M19* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M2_M19&>(::fleetbench::proto::_Message7_M2_M19_default_instance_);
}
inline const ::fleetbench::proto::Message7_M2_M19& Message7_M2::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M2.f_2)
  return _internal_f_2();
}
inline void Message7_M2::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M2_M19* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M2.f_2)
}
inline ::fleetbench::proto::Message7_M2_M19* Message7_M2::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M2_M19* Message7_M2::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M2.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M2_M19* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M2_M19* Message7_M2::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M2_M19>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M2_M19* Message7_M2::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M2_M19* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M2.f_2)
  return _msg;
}
inline void Message7_M2::set_allocated_f_2(::fleetbench::proto::Message7_M2_M19* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M2_M19*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M2.f_2)
}

// -------------------------------------------------------------------

// Message7_M3_M11

// optional bytes f_0 = 1;
inline bool Message7_M3_M11::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M3_M11::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M3_M11::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M3.M11.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M3_M11::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M3.M11.f_0)
}
inline std::string* Message7_M3_M11::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M3.M11.f_0)
  return _s;
}
inline const std::string& Message7_M3_M11::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M3_M11::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M3_M11::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M3_M11::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M3.M11.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M3_M11::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M3.M11.f_0)
}

// -------------------------------------------------------------------

// Message7_M3_M17

// optional string f_0 = 1;
inline bool Message7_M3_M17::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M3_M17::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M3_M17::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M3.M17.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M3_M17::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M3.M17.f_0)
}
inline std::string* Message7_M3_M17::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M3.M17.f_0)
  return _s;
}
inline const std::string& Message7_M3_M17::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M3_M17::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M3_M17::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M3_M17::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M3.M17.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M3_M17::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M3.M17.f_0)
}

// -------------------------------------------------------------------

// Message7_M3

// optional int64 f_0 = 1;
inline bool Message7_M3::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M3::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M3::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M3.f_0)
  return _internal_f_0();
}
inline void Message7_M3::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M3.f_0)
}
inline ::int64_t Message7_M3::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M3::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M3.M11 f_1 = 2;
inline bool Message7_M3::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M3::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M3_M11& Message7_M3::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M3_M11* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M3_M11&>(::fleetbench::proto::_Message7_M3_M11_default_instance_);
}
inline const ::fleetbench::proto::Message7_M3_M11& Message7_M3::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M3.f_1)
  return _internal_f_1();
}
inline void Message7_M3::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M3_M11* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M3_M11*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M3.f_1)
}
inline ::fleetbench::proto::Message7_M3_M11* Message7_M3::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M3_M11* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M3_M11* Message7_M3::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M3.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M3_M11* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M3_M11* Message7_M3::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M3_M11>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M3_M11*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M3_M11* Message7_M3::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M3_M11* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M3.f_1)
  return _msg;
}
inline void Message7_M3::set_allocated_f_1(::fleetbench::proto::Message7_M3_M11* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M3_M11*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M3.f_1)
}

// repeated .fleetbench.proto.Message7.M3.M17 f_2 = 4;
inline int Message7_M3::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M3::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M3::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M3_M17* Message7_M3::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M3.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>* Message7_M3::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M3.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M3_M17& Message7_M3::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M3.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M3_M17* Message7_M3::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M3_M17* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M3.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>& Message7_M3::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M3.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>&
Message7_M3::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M3_M17>*
Message7_M3::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M4

// repeated int32 f_0 = 2 [packed = true];
inline int Message7_M4::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M4::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message7_M4::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M4.f_0)
  return _internal_f_0().Get(index);
}
inline void Message7_M4::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M4.f_0)
}
inline void Message7_M4::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M4.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M4::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M4.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M4::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M4.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M4::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message7_M5_M13_M31_M39

// optional .fleetbench.proto.Message7.M5.M13.M31.M39.E31 f_0 = 1;
inline bool Message7_M5_M13_M31_M39::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M5_M13_M31_M39::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39_E31 Message7_M5_M13_M31_M39::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.M13.M31.M39.f_0)
  return _internal_f_0();
}
inline void Message7_M5_M13_M31_M39::set_f_0(::fleetbench::proto::Message7_M5_M13_M31_M39_E31 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M5.M13.M31.M39.f_0)
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39_E31 Message7_M5_M13_M31_M39::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M5_M13_M31_M39_E31>(_impl_.f_0_);
}
inline void Message7_M5_M13_M31_M39::_internal_set_f_0(::fleetbench::proto::Message7_M5_M13_M31_M39_E31 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M5_M13_M31_M39_E31_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M5_M13_M31

// optional fixed64 f_0 = 1;
inline bool Message7_M5_M13_M31::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M5_M13_M31::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message7_M5_M13_M31::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.M13.M31.f_0)
  return _internal_f_0();
}
inline void Message7_M5_M13_M31::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M5.M13.M31.f_0)
}
inline ::uint64_t Message7_M5_M13_M31::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M5_M13_M31::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M5.M13.M31.M39 f_1 = 3;
inline bool Message7_M5_M13_M31::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M5_M13_M31::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M5_M13_M31_M39& Message7_M5_M13_M31::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M5_M13_M31_M39* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M5_M13_M31_M39&>(::fleetbench::proto::_Message7_M5_M13_M31_M39_default_instance_);
}
inline const ::fleetbench::proto::Message7_M5_M13_M31_M39& Message7_M5_M13_M31::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.M13.M31.f_1)
  return _internal_f_1();
}
inline void Message7_M5_M13_M31::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M5_M13_M31_M39* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13_M31_M39*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M5.M13.M31.f_1)
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39* Message7_M5_M13_M31::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M5_M13_M31_M39* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39* Message7_M5_M13_M31::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M5.M13.M31.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M5_M13_M31_M39* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39* Message7_M5_M13_M31::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M5_M13_M31_M39>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13_M31_M39*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M5_M13_M31_M39* Message7_M5_M13_M31::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M5_M13_M31_M39* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M5.M13.M31.f_1)
  return _msg;
}
inline void Message7_M5_M13_M31::set_allocated_f_1(::fleetbench::proto::Message7_M5_M13_M31_M39* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13_M31_M39*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M5.M13.M31.f_1)
}

// -------------------------------------------------------------------

// Message7_M5_M13

// optional bool f_0 = 3;
inline bool Message7_M5_M13::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M5_M13::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message7_M5_M13::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.M13.f_0)
  return _internal_f_0();
}
inline void Message7_M5_M13::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M5.M13.f_0)
}
inline bool Message7_M5_M13::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M5_M13::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M5.M13.M31 f_3 = 5;
inline int Message7_M5_M13::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message7_M5_M13::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message7_M5_M13::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message7_M5_M13_M31* Message7_M5_M13::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M5.M13.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>* Message7_M5_M13::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M5.M13.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message7_M5_M13_M31& Message7_M5_M13::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.M13.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message7_M5_M13_M31* Message7_M5_M13::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M5_M13_M31* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M5.M13.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>& Message7_M5_M13::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M5.M13.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>&
Message7_M5_M13::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M5_M13_M31>*
Message7_M5_M13::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message7_M5

// optional int32 f_0 = 1;
inline bool Message7_M5::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M5::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M5::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.f_0)
  return _internal_f_0();
}
inline void Message7_M5::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M5.f_0)
}
inline ::int32_t Message7_M5::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M5::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M5.M13 f_1 = 2;
inline bool Message7_M5::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M5::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M5_M13& Message7_M5::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M5_M13* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M5_M13&>(::fleetbench::proto::_Message7_M5_M13_default_instance_);
}
inline const ::fleetbench::proto::Message7_M5_M13& Message7_M5::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M5.f_1)
  return _internal_f_1();
}
inline void Message7_M5::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M5_M13* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M5.f_1)
}
inline ::fleetbench::proto::Message7_M5_M13* Message7_M5::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M5_M13* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M5_M13* Message7_M5::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M5.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M5_M13* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M5_M13* Message7_M5::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M5_M13>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M5_M13* Message7_M5::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M5_M13* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M5.f_1)
  return _msg;
}
inline void Message7_M5::set_allocated_f_1(::fleetbench::proto::Message7_M5_M13* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M5_M13*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M5.f_1)
}

// -------------------------------------------------------------------

// Message7_M6_M10_M27_M50

// optional .fleetbench.proto.Message7.M6.M10.M27.M50.E35 f_0 = 1;
inline bool Message7_M6_M10_M27_M50::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M10_M27_M50::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50_E35 Message7_M6_M10_M27_M50::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M27.M50.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M10_M27_M50::set_f_0(::fleetbench::proto::Message7_M6_M10_M27_M50_E35 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M27.M50.f_0)
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50_E35 Message7_M6_M10_M27_M50::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M10_M27_M50_E35>(_impl_.f_0_);
}
inline void Message7_M6_M10_M27_M50::_internal_set_f_0(::fleetbench::proto::Message7_M6_M10_M27_M50_E35 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M10_M27_M50_E35_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M10_M27

// optional bytes f_0 = 2;
inline bool Message7_M6_M10_M27::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M10_M27::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M6_M10_M27::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M27.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M10_M27::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M27.f_0)
}
inline std::string* Message7_M6_M10_M27::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.M27.f_0)
  return _s;
}
inline const std::string& Message7_M6_M10_M27::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M6_M10_M27::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M6_M10_M27::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M6_M10_M27::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M10.M27.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M10_M27::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M10.M27.f_0)
}

// optional .fleetbench.proto.Message7.M6.M10.M27.M50 f_2 = 4;
inline bool Message7_M6_M10_M27::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M6_M10_M27::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M6_M10_M27_M50& Message7_M6_M10_M27::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M10_M27_M50* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M10_M27_M50&>(::fleetbench::proto::_Message7_M6_M10_M27_M50_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M10_M27_M50& Message7_M6_M10_M27::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M27.f_2)
  return _internal_f_2();
}
inline void Message7_M6_M10_M27::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27_M50* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27_M50*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M10.M27.f_2)
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50* Message7_M6_M10_M27::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M10_M27_M50* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50* Message7_M6_M10_M27::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M10.M27.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M10_M27_M50* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50* Message7_M6_M10_M27::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M10_M27_M50>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27_M50*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M6_M10_M27_M50* Message7_M6_M10_M27::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M6_M10_M27_M50* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.M27.f_2)
  return _msg;
}
inline void Message7_M6_M10_M27::set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27_M50* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27_M50*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M10.M27.f_2)
}

// -------------------------------------------------------------------

// Message7_M6_M10_M32_M43

// optional bool f_0 = 1;
inline bool Message7_M6_M10_M32_M43::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M10_M32_M43::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message7_M6_M10_M32_M43::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.M43.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M10_M32_M43::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M32.M43.f_0)
}
inline bool Message7_M6_M10_M32_M43::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M10_M32_M43::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M10_M32

// optional string f_0 = 1;
inline bool Message7_M6_M10_M32::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M10_M32::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M6_M10_M32::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M10_M32::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M32.f_0)
}
inline std::string* Message7_M6_M10_M32::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.M32.f_0)
  return _s;
}
inline const std::string& Message7_M6_M10_M32::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M6_M10_M32::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M6_M10_M32::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M6_M10_M32::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M10.M32.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M10_M32::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M10.M32.f_0)
}

// optional int32 f_1 = 2;
inline bool Message7_M6_M10_M32::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6_M10_M32::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message7_M6_M10_M32::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M10_M32::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M32.f_1)
}
inline ::int32_t Message7_M6_M10_M32::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M6_M10_M32::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 3;
inline bool Message7_M6_M10_M32::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M10_M32::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M6_M10_M32::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M10_M32::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M32.f_2)
}
inline std::string* Message7_M6_M10_M32::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.M32.f_2)
  return _s;
}
inline const std::string& Message7_M6_M10_M32::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M6_M10_M32::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M6_M10_M32::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M6_M10_M32::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M10.M32.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M10_M32::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M10.M32.f_2)
}

// optional float f_3 = 4;
inline bool Message7_M6_M10_M32::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M6_M10_M32::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message7_M6_M10_M32::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.f_3)
  return _internal_f_3();
}
inline void Message7_M6_M10_M32::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.M32.f_3)
}
inline float Message7_M6_M10_M32::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M6_M10_M32::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// repeated .fleetbench.proto.Message7.M6.M10.M32.M43 f_4 = 5;
inline int Message7_M6_M10_M32::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M6_M10_M32::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M6_M10_M32::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M10_M32_M43* Message7_M6_M10_M32::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.M32.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>* Message7_M6_M10_M32::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M10.M32.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M6_M10_M32_M43& Message7_M6_M10_M32::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.M32.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M10_M32_M43* Message7_M6_M10_M32::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M10_M32_M43* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M10.M32.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>& Message7_M6_M10_M32::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M10.M32.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>&
Message7_M6_M10_M32::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32_M43>*
Message7_M6_M10_M32::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message7_M6_M10

// repeated string f_0 = 1;
inline int Message7_M6_M10::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M6_M10::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M6_M10::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline std::string* Message7_M6_M10::add_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_0()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M6.M10.f_0)
  return _s;
}
inline const std::string& Message7_M6_M10::f_0(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.f_0)
  return _internal_f_0().Get(index);
}
inline std::string* Message7_M6_M10::mutable_f_0(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.f_0)
  return _internal_mutable_f_0()->Mutable(index);
}
inline void Message7_M6_M10::set_f_0(int index, const std::string& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::set_f_0(int index, std::string&& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::set_f_0(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::set_f_0(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::set_f_0(int index, absl::string_view value) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::add_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::add_f_0(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::add_f_0(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::add_f_0(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M6.M10.f_0)
}
inline void Message7_M6_M10::add_f_0(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M6.M10.f_0)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M6_M10::f_0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M10.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M6_M10::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M10.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M6_M10::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M6_M10::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional int32 f_1 = 2;
inline bool Message7_M6_M10::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M10::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M6_M10::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M10::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M10.f_1)
}
inline ::int32_t Message7_M6_M10::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M6_M10::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message7.M6.M10.M27 f_2 = 4;
inline bool Message7_M6_M10::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M6_M10::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M10_M27& Message7_M6_M10::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M10_M27* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M10_M27&>(::fleetbench::proto::_Message7_M6_M10_M27_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M10_M27& Message7_M6_M10::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.f_2)
  return _internal_f_2();
}
inline void Message7_M6_M10::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M10.f_2)
}
inline ::fleetbench::proto::Message7_M6_M10_M27* Message7_M6_M10::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M10_M27* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M10_M27* Message7_M6_M10::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M10.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M10_M27* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M10_M27* Message7_M6_M10::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M10_M27>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M6_M10_M27* Message7_M6_M10::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M10_M27* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.f_2)
  return _msg;
}
inline void Message7_M6_M10::set_allocated_f_2(::fleetbench::proto::Message7_M6_M10_M27* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10_M27*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M10.f_2)
}

// repeated .fleetbench.proto.Message7.M6.M10.M32 f_4 = 6;
inline int Message7_M6_M10::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M6_M10::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M6_M10::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M10_M32* Message7_M6_M10::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M10.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>* Message7_M6_M10::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M10.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M6_M10_M32& Message7_M6_M10::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M10.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M10_M32* Message7_M6_M10::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M10_M32* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M10.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>& Message7_M6_M10::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M10.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>&
Message7_M6_M10::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M10_M32>*
Message7_M6_M10::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M24_M36

// optional .fleetbench.proto.Message7.M6.M12.M24.M36.E29 f_0 = 1;
inline bool Message7_M6_M12_M24_M36::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M24_M36::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36_E29 Message7_M6_M12_M24_M36::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M24.M36.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M24_M36::set_f_0(::fleetbench::proto::Message7_M6_M12_M24_M36_E29 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M24.M36.f_0)
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36_E29 Message7_M6_M12_M24_M36::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M24_M36_E29>(_impl_.f_0_);
}
inline void Message7_M6_M12_M24_M36::_internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M24_M36_E29 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M24_M36_E29_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M24_M51

// optional int64 f_0 = 2;
inline bool Message7_M6_M12_M24_M51::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M24_M51::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M6_M12_M24_M51::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M24.M51.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M24_M51::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M24.M51.f_0)
}
inline ::int64_t Message7_M6_M12_M24_M51::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M24_M51::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M24

// optional uint32 f_0 = 2;
inline bool Message7_M6_M12_M24::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6_M12_M24::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Message7_M6_M12_M24::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M24.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M24::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M24.f_0)
}
inline ::uint32_t Message7_M6_M12_M24::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M24::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M24.M36 f_2 = 3;
inline bool Message7_M6_M12_M24::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M24::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M24_M36& Message7_M6_M12_M24::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M24_M36* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M24_M36&>(::fleetbench::proto::_Message7_M6_M12_M24_M36_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M24_M36& Message7_M6_M12_M24::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M24.f_2)
  return _internal_f_2();
}
inline void Message7_M6_M12_M24::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M12_M24_M36* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M36*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M24.f_2)
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36* Message7_M6_M12_M24::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M24_M36* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36* Message7_M6_M12_M24::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M24.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M24_M36* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36* Message7_M6_M12_M24::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M24_M36>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M36*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M36* Message7_M6_M12_M24::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M24_M36* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M24.f_2)
  return _msg;
}
inline void Message7_M6_M12_M24::set_allocated_f_2(::fleetbench::proto::Message7_M6_M12_M24_M36* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M36*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M24.f_2)
}

// optional .fleetbench.proto.Message7.M6.M12.M24.M51 f_3 = 4;
inline bool Message7_M6_M12_M24::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M24::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M24_M51& Message7_M6_M12_M24::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M24_M51* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M24_M51&>(::fleetbench::proto::_Message7_M6_M12_M24_M51_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M24_M51& Message7_M6_M12_M24::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M24.f_3)
  return _internal_f_3();
}
inline void Message7_M6_M12_M24::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M6_M12_M24_M51* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M51*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M24.f_3)
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M51* Message7_M6_M12_M24::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M24_M51* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M51* Message7_M6_M12_M24::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M24.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M24_M51* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M51* Message7_M6_M12_M24::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M24_M51>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M51*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M6_M12_M24_M51* Message7_M6_M12_M24::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M24_M51* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M24.f_3)
  return _msg;
}
inline void Message7_M6_M12_M24::set_allocated_f_3(::fleetbench::proto::Message7_M6_M12_M24_M51* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M24_M51*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M24.f_3)
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M35_M61

// optional .fleetbench.proto.Message7.M6.M12.M30.M35.M61.E37 f_0 = 1;
inline bool Message7_M6_M12_M30_M35_M61::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 Message7_M6_M12_M30_M35_M61::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_0)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 Message7_M6_M12_M30_M35_M61::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37>(_impl_.f_0_);
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37_IsValid(value));
  _impl_.f_0_ = value;
}

// optional double f_1 = 2;
inline bool Message7_M6_M12_M30_M35_M61::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Message7_M6_M12_M30_M35_M61::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_1(double value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_1)
}
inline double Message7_M6_M12_M30_M35_M61::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 4;
inline bool Message7_M6_M12_M30_M35_M61::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Message7_M6_M12_M30_M35_M61::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_2)
  return _internal_f_2();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_2)
}
inline bool Message7_M6_M12_M30_M35_M61::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional sfixed32 f_3 = 5;
inline bool Message7_M6_M12_M30_M35_M61::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_3)
  return _internal_f_3();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_3)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 6;
inline bool Message7_M6_M12_M30_M35_M61::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M35_M61::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_4)
}
inline std::string* Message7_M6_M12_M30_M35_M61::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_4)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M35_M61::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_4)
}

// optional int32 f_5 = 8;
inline bool Message7_M6_M12_M30_M35_M61::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_5)
  return _internal_f_5();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_5)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M35.M61.E38 f_6 = 10;
inline bool Message7_M6_M12_M30_M35_M61::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 Message7_M6_M12_M30_M35_M61::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_6)
  return _internal_f_6();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_6(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_6)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 Message7_M6_M12_M30_M35_M61::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38>(_impl_.f_6_);
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_6(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38_IsValid(value));
  _impl_.f_6_ = value;
}

// optional float f_7 = 11;
inline bool Message7_M6_M12_M30_M35_M61::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Message7_M6_M12_M30_M35_M61::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_7)
  return _internal_f_7();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_7(float value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_7)
}
inline float Message7_M6_M12_M30_M35_M61::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_7(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional int32 f_8 = 12;
inline bool Message7_M6_M12_M30_M35_M61::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_8)
  return _internal_f_8();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_8)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional fixed32 f_9 = 15;
inline bool Message7_M6_M12_M30_M35_M61::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t Message7_M6_M12_M30_M35_M61::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_9)
  return _internal_f_9();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_9(::uint32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_9)
}
inline ::uint32_t Message7_M6_M12_M30_M35_M61::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_9(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional string f_10 = 17;
inline bool Message7_M6_M12_M30_M35_M61::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M35_M61::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_10)
}
inline std::string* Message7_M6_M12_M30_M35_M61::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_10)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_10)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M35_M61::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_10)
}

// optional float f_11 = 18;
inline bool Message7_M6_M12_M30_M35_M61::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Message7_M6_M12_M30_M35_M61::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_11)
  return _internal_f_11();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_11(float value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_11)
}
inline float Message7_M6_M12_M30_M35_M61::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_11(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 20;
inline bool Message7_M6_M12_M30_M35_M61::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float Message7_M6_M12_M30_M35_M61::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_12)
  return _internal_f_12();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_12)
}
inline float Message7_M6_M12_M30_M35_M61::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional int32 f_13 = 22;
inline bool Message7_M6_M12_M30_M35_M61::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_13)
  return _internal_f_13();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_13(::int32_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_13)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_13(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int64 f_14 = 23;
inline bool Message7_M6_M12_M30_M35_M61::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_14)
  return _internal_f_14();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_14)
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional uint64 f_15 = 25;
inline bool Message7_M6_M12_M30_M35_M61::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint64_t Message7_M6_M12_M30_M35_M61::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_15)
  return _internal_f_15();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_15(::uint64_t value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_15)
}
inline ::uint64_t Message7_M6_M12_M30_M35_M61::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_15(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional int64 f_16 = 27;
inline bool Message7_M6_M12_M30_M35_M61::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_16)
  return _internal_f_16();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_16(::int64_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_16)
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_16(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional int32 f_17 = 28;
inline bool Message7_M6_M12_M30_M35_M61::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_17)
  return _internal_f_17();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_17(::int32_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_17)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_17(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional uint64 f_18 = 29;
inline bool Message7_M6_M12_M30_M35_M61::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint64_t Message7_M6_M12_M30_M35_M61::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_18)
  return _internal_f_18();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_18(::uint64_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_18)
}
inline ::uint64_t Message7_M6_M12_M30_M35_M61::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_18(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional int64 f_19 = 30;
inline bool Message7_M6_M12_M30_M35_M61::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_19)
  return _internal_f_19();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_19(::int64_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_19)
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_19(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional float f_20 = 32;
inline bool Message7_M6_M12_M30_M35_M61::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float Message7_M6_M12_M30_M35_M61::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_20)
  return _internal_f_20();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_20(float value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_20)
}
inline float Message7_M6_M12_M30_M35_M61::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_20(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional string f_21 = 35;
inline bool Message7_M6_M12_M30_M35_M61::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::f_21() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_21)
  return _internal_f_21();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M35_M61::set_f_21(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_21_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_21)
}
inline std::string* Message7_M6_M12_M30_M35_M61::mutable_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_21();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_21)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_.Get();
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_21(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_21_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_21_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_21)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_21_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_21_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M35_M61::set_allocated_f_21(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_21_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_21_.IsDefault()) {
          _impl_.f_21_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_21)
}

// optional string f_22 = 36;
inline bool Message7_M6_M12_M30_M35_M61::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_22)
  return _internal_f_22();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M35_M61::set_f_22(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_22_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_22)
}
inline std::string* Message7_M6_M12_M30_M35_M61::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_22)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_.Get();
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_22(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_22_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_22_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_22)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_22_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_22_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M35_M61::set_allocated_f_22(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_22_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_22_.IsDefault()) {
          _impl_.f_22_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_22)
}

// optional int64 f_23 = 37;
inline bool Message7_M6_M12_M30_M35_M61::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_23)
  return _internal_f_23();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_23(::int64_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_23)
}
inline ::int64_t Message7_M6_M12_M30_M35_M61::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_23(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional string f_24 = 38;
inline bool Message7_M6_M12_M30_M35_M61::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M35_M61::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_24)
}
inline std::string* Message7_M6_M12_M30_M35_M61::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_24)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M35_M61::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M35_M61::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_24)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M35_M61::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_24)
}

// optional fixed32 f_25 = 41;
inline bool Message7_M6_M12_M30_M35_M61::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t Message7_M6_M12_M30_M35_M61::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_25)
  return _internal_f_25();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_25(::uint32_t value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_25)
}
inline ::uint32_t Message7_M6_M12_M30_M35_M61::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_25(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional int32 f_26 = 43;
inline bool Message7_M6_M12_M30_M35_M61::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_26)
  return _internal_f_26();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_26(::int32_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_26)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_26(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional int32 f_27 = 46;
inline bool Message7_M6_M12_M30_M35_M61::has_f_27() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35_M61::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_27)
  return _internal_f_27();
}
inline void Message7_M6_M12_M30_M35_M61::set_f_27(::int32_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.M61.f_27)
}
inline ::int32_t Message7_M6_M12_M30_M35_M61::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message7_M6_M12_M30_M35_M61::_internal_set_f_27(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M35

// optional .fleetbench.proto.Message7.M6.M12.M30.M35.E28 f_0 = 2;
inline bool Message7_M6_M12_M30_M35::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M35::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_E28 Message7_M6_M12_M30_M35::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M35::set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_E28 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M35.f_0)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_E28 Message7_M6_M12_M30_M35::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M35_E28>(_impl_.f_0_);
}
inline void Message7_M6_M12_M30_M35::_internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M35_E28 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M35_E28_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M6.M12.M30.M35.M61 f_2 = 3;
inline int Message7_M6_M12_M30_M35::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M6_M12_M30_M35::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M6_M12_M30_M35::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61* Message7_M6_M12_M30_M35::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M35.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>* Message7_M6_M12_M30_M35::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.M35.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M35_M61& Message7_M6_M12_M30_M35::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M35.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35_M61* Message7_M6_M12_M30_M35::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30_M35_M61* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.M35.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>& Message7_M6_M12_M30_M35::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.M35.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>&
Message7_M6_M12_M30_M35::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M35_M61>*
Message7_M6_M12_M30_M35::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M37

// optional .fleetbench.proto.Message7.M6.M12.M30.M37.E30 f_0 = 1;
inline bool Message7_M6_M12_M30_M37::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M37::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M37_E30 Message7_M6_M12_M30_M37::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M37.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M37::set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M37_E30 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M37.f_0)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M37_E30 Message7_M6_M12_M30_M37::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M37_E30>(_impl_.f_0_);
}
inline void Message7_M6_M12_M30_M37::_internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M37_E30 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M37_E30_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86

// optional double f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86.f_0)
}
inline double Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63_M68_M77

// optional int64 f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68_M77::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M6_M12_M30_M49_M59_M63_M68_M77::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_0)
}
inline ::int64_t Message7_M6_M12_M30_M49_M59_M63_M68_M77::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.M86 f_1 = 2;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68_M77::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& Message7_M6_M12_M30_M49_M59_M63_M68_M77::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86&>(::fleetbench::proto::_Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86& Message7_M6_M12_M30_M49_M59_M63_M68_M77::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_1)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* Message7_M6_M12_M30_M49_M59_M63_M68_M77::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* Message7_M6_M12_M30_M49_M59_M63_M68_M77::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* Message7_M6_M12_M30_M49_M59_M63_M68_M77::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* Message7_M6_M12_M30_M49_M59_M63_M68_M77::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_1)
  return _msg;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M77::set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77_M86*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77.f_1)
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63_M68_M81

// optional int64 f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68_M81::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M81::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M6_M12_M30_M49_M59_M63_M68_M81::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M81::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81.f_0)
}
inline ::int64_t Message7_M6_M12_M30_M49_M59_M63_M68_M81::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68_M81::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63_M68

// optional bool f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message7_M6_M12_M30_M49_M59_M63_M68::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_0)
}
inline bool Message7_M6_M12_M30_M49_M59_M63_M68::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M77 f_1 = 3;
inline bool Message7_M6_M12_M30_M49_M59_M63_M68::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77& Message7_M6_M12_M30_M49_M59_M63_M68::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77&>(::fleetbench::proto::_Message7_M6_M12_M30_M49_M59_M63_M68_M77_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77& Message7_M6_M12_M30_M49_M59_M63_M68::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_1)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* Message7_M6_M12_M30_M49_M59_M63_M68::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* Message7_M6_M12_M30_M49_M59_M63_M68::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* Message7_M6_M12_M30_M49_M59_M63_M68::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* Message7_M6_M12_M30_M49_M59_M63_M68::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_1)
  return _msg;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M77*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_1)
}

// repeated .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.M81 f_3 = 5;
inline int Message7_M6_M12_M30_M49_M59_M63_M68::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message7_M6_M12_M30_M49_M59_M63_M68::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M68::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81* Message7_M6_M12_M30_M49_M59_M63_M68::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>* Message7_M6_M12_M30_M49_M59_M63_M68::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81& Message7_M6_M12_M30_M49_M59_M63_M68::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81* Message7_M6_M12_M30_M49_M59_M63_M68::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>& Message7_M6_M12_M30_M49_M59_M63_M68::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>&
Message7_M6_M12_M30_M49_M59_M63_M68::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68_M81>*
Message7_M6_M12_M30_M49_M59_M63_M68::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63_M71

// optional double f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63_M71::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M71::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message7_M6_M12_M30_M49_M59_M63_M71::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63_M71::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71.f_0)
}
inline double Message7_M6_M12_M30_M49_M59_M63_M71::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49_M59_M63_M71::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59_M63

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.E39 f_0 = 1;
inline bool Message7_M6_M12_M30_M49_M59_M63::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 Message7_M6_M12_M30_M49_M59_M63::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49_M59_M63::set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_0)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 Message7_M6_M12_M30_M49_M59_M63::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39>(_impl_.f_0_);
}
inline void Message7_M6_M12_M30_M49_M59_M63::_internal_set_f_0(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M68 f_1 = 4;
inline bool Message7_M6_M12_M30_M49_M59_M63::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68& Message7_M6_M12_M30_M49_M59_M63::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68&>(::fleetbench::proto::_Message7_M6_M12_M30_M49_M59_M63_M68_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68& Message7_M6_M12_M30_M49_M59_M63::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M12_M30_M49_M59_M63::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_1)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* Message7_M6_M12_M30_M49_M59_M63::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* Message7_M6_M12_M30_M49_M59_M63::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* Message7_M6_M12_M30_M49_M59_M63::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* Message7_M6_M12_M30_M49_M59_M63::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_1)
  return _msg;
}
inline void Message7_M6_M12_M30_M49_M59_M63::set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M68*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_1)
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.M71 f_4 = 5;
inline bool Message7_M6_M12_M30_M49_M59_M63::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30_M49_M59_M63::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71& Message7_M6_M12_M30_M49_M59_M63::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71&>(::fleetbench::proto::_Message7_M6_M12_M30_M49_M59_M63_M71_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71& Message7_M6_M12_M30_M49_M59_M63::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_4)
  return _internal_f_4();
}
inline void Message7_M6_M12_M30_M49_M59_M63::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_4)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* Message7_M6_M12_M30_M49_M59_M63::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* Message7_M6_M12_M30_M49_M59_M63::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* Message7_M6_M12_M30_M49_M59_M63::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* Message7_M6_M12_M30_M49_M59_M63::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_4)
  return _msg;
}
inline void Message7_M6_M12_M30_M49_M59_M63::set_allocated_f_4(::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_M71*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63.f_4)
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49_M59

// repeated int32 f_0 = 1 [packed = true];
inline int Message7_M6_M12_M30_M49_M59::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M6_M12_M30_M49_M59::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M6_M12_M30_M49_M59::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message7_M6_M12_M30_M49_M59::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_0)
  return _internal_f_0().Get(index);
}
inline void Message7_M6_M12_M30_M49_M59::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_0)
}
inline void Message7_M6_M12_M30_M49_M59::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message7_M6_M12_M30_M49_M59::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M6_M12_M30_M49_M59::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message7_M6_M12_M30_M49_M59::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message7_M6_M12_M30_M49_M59::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// repeated .fleetbench.proto.Message7.M6.M12.M30.M49.M59.M63 f_1 = 2;
inline int Message7_M6_M12_M30_M49_M59::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M6_M12_M30_M49_M59::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M6_M12_M30_M49_M59::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63* Message7_M6_M12_M30_M49_M59::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>* Message7_M6_M12_M30_M49_M59::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63& Message7_M6_M12_M30_M49_M59::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63* Message7_M6_M12_M30_M49_M59::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>& Message7_M6_M12_M30_M49_M59::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.M49.M59.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>&
Message7_M6_M12_M30_M49_M59::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63>*
Message7_M6_M12_M30_M49_M59::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M49

// optional double f_0 = 2;
inline bool Message7_M6_M12_M30_M49::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Message7_M6_M12_M30_M49::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M49::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_0)
}
inline double Message7_M6_M12_M30_M49::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 3;
inline bool Message7_M6_M12_M30_M49::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M6_M12_M30_M49::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M49::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_1)
}
inline std::string* Message7_M6_M12_M30_M49::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.f_1)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M49::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M49::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M49::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M49::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.f_1)
}

// optional int32 f_2 = 4;
inline bool Message7_M6_M12_M30_M49::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message7_M6_M12_M30_M49::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_2)
  return _internal_f_2();
}
inline void Message7_M6_M12_M30_M49::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_2)
}
inline ::int32_t Message7_M6_M12_M30_M49::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.E33 f_3 = 5;
inline bool Message7_M6_M12_M30_M49::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_E33 Message7_M6_M12_M30_M49::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_3)
  return _internal_f_3();
}
inline void Message7_M6_M12_M30_M49::set_f_3(::fleetbench::proto::Message7_M6_M12_M30_M49_E33 value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_3)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_E33 Message7_M6_M12_M30_M49::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_E33>(_impl_.f_3_);
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_3(::fleetbench::proto::Message7_M6_M12_M30_M49_E33 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M49_E33_IsValid(value));
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message7_M6_M12_M30_M49::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message7_M6_M12_M30_M49::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_4)
  return _internal_f_4();
}
inline void Message7_M6_M12_M30_M49::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_4)
}
inline ::int64_t Message7_M6_M12_M30_M49::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional bool f_5 = 8;
inline bool Message7_M6_M12_M30_M49::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Message7_M6_M12_M30_M49::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_5)
  return _internal_f_5();
}
inline void Message7_M6_M12_M30_M49::set_f_5(bool value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_5)
}
inline bool Message7_M6_M12_M30_M49::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_5(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional float f_6 = 9;
inline bool Message7_M6_M12_M30_M49::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Message7_M6_M12_M30_M49::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_6)
  return _internal_f_6();
}
inline void Message7_M6_M12_M30_M49::set_f_6(float value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_6)
}
inline float Message7_M6_M12_M30_M49::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_6(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.E34 f_7 = 10;
inline bool Message7_M6_M12_M30_M49::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_E34 Message7_M6_M12_M30_M49::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_7)
  return _internal_f_7();
}
inline void Message7_M6_M12_M30_M49::set_f_7(::fleetbench::proto::Message7_M6_M12_M30_M49_E34 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_7)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_E34 Message7_M6_M12_M30_M49::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_E34>(_impl_.f_7_);
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_7(::fleetbench::proto::Message7_M6_M12_M30_M49_E34 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M6_M12_M30_M49_E34_IsValid(value));
  _impl_.f_7_ = value;
}

// optional string f_8 = 11;
inline bool Message7_M6_M12_M30_M49::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M6_M12_M30_M49::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12_M30_M49::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_8_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M49.f_8)
}
inline std::string* Message7_M6_M12_M30_M49::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.f_8)
  return _s;
}
inline const std::string& Message7_M6_M12_M30_M49::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message7_M6_M12_M30_M49::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12_M30_M49::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12_M30_M49::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.f_8)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12_M30_M49::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.f_8)
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M49.M59 f_11 = 12;
inline bool Message7_M6_M12_M30_M49::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30_M49::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59& Message7_M6_M12_M30_M49::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59&>(::fleetbench::proto::_Message7_M6_M12_M30_M49_M59_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49_M59& Message7_M6_M12_M30_M49::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M49.f_11)
  return _internal_f_11();
}
inline void Message7_M6_M12_M30_M49::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message7_M6_M12_M30_M49_M59* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.f_11)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* Message7_M6_M12_M30_M49::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* Message7_M6_M12_M30_M49::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.M49.f_11)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* Message7_M6_M12_M30_M49::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M49_M59>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* Message7_M6_M12_M30_M49::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message7_M6_M12_M30_M49_M59* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.M49.f_11)
  return _msg;
}
inline void Message7_M6_M12_M30_M49::set_allocated_f_11(::fleetbench::proto::Message7_M6_M12_M30_M49_M59* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M49_M59*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.M49.f_11)
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30_M56

// optional int64 f_0 = 1;
inline bool Message7_M6_M12_M30_M56::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12_M30_M56::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M6_M12_M30_M56::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.M56.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30_M56::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.M56.f_0)
}
inline ::int64_t Message7_M6_M12_M30_M56::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30_M56::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M6_M12_M30

// optional uint64 f_0 = 1;
inline bool Message7_M6_M12_M30::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6_M12_M30::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message7_M6_M12_M30::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.f_0)
  return _internal_f_0();
}
inline void Message7_M6_M12_M30::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.M30.f_0)
}
inline ::uint64_t Message7_M6_M12_M30::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6_M12_M30::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M35 f_1 = 2;
inline bool Message7_M6_M12_M30::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M35& Message7_M6_M12_M30::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M35* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M35&>(::fleetbench::proto::_Message7_M6_M12_M30_M35_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M35& Message7_M6_M12_M30::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.f_1)
  return _internal_f_1();
}
inline void Message7_M6_M12_M30::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M35* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M35*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.f_1)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35* Message7_M6_M12_M30::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M35* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35* Message7_M6_M12_M30::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M35* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35* Message7_M6_M12_M30::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M35>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M35*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M35* Message7_M6_M12_M30::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M12_M30_M35* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.f_1)
  return _msg;
}
inline void Message7_M6_M12_M30::set_allocated_f_1(::fleetbench::proto::Message7_M6_M12_M30_M35* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M35*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.f_1)
}

// repeated .fleetbench.proto.Message7.M6.M12.M30.M37 f_2 = 4;
inline int Message7_M6_M12_M30::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M6_M12_M30::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M6_M12_M30::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M37* Message7_M6_M12_M30::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>* Message7_M6_M12_M30::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M37& Message7_M6_M12_M30::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M37* Message7_M6_M12_M30::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30_M37* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>& Message7_M6_M12_M30::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>&
Message7_M6_M12_M30::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M37>*
Message7_M6_M12_M30::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// repeated .fleetbench.proto.Message7.M6.M12.M30.M49 f_4 = 5;
inline int Message7_M6_M12_M30::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M6_M12_M30::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M6_M12_M30::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49* Message7_M6_M12_M30::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>* Message7_M6_M12_M30::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.M30.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M49& Message7_M6_M12_M30::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M49* Message7_M6_M12_M30::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30_M49* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.M30.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>& Message7_M6_M12_M30::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.M30.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>&
Message7_M6_M12_M30::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30_M49>*
Message7_M6_M12_M30::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message7.M6.M12.M30.M56 f_5 = 9;
inline bool Message7_M6_M12_M30::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message7_M6_M12_M30::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M56& Message7_M6_M12_M30::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12_M30_M56* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12_M30_M56&>(::fleetbench::proto::_Message7_M6_M12_M30_M56_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12_M30_M56& Message7_M6_M12_M30::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.M30.f_5)
  return _internal_f_5();
}
inline void Message7_M6_M12_M30::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M6_M12_M30_M56* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M56*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.M12.M30.f_5)
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M56* Message7_M6_M12_M30::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M56* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M56* Message7_M6_M12_M30::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.M30.f_5)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M56* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M56* Message7_M6_M12_M30::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12_M30_M56>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M56*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message7_M6_M12_M30_M56* Message7_M6_M12_M30::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M6_M12_M30_M56* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.M30.f_5)
  return _msg;
}
inline void Message7_M6_M12_M30::set_allocated_f_5(::fleetbench::proto::Message7_M6_M12_M30_M56* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12_M30_M56*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.M30.f_5)
}

// -------------------------------------------------------------------

// Message7_M6_M12

// optional bytes f_0 = 1;
inline bool Message7_M6_M12::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M6_M12::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M6_M12::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M6_M12::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.M12.f_0)
}
inline std::string* Message7_M6_M12::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.f_0)
  return _s;
}
inline const std::string& Message7_M6_M12::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M6_M12::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M6_M12::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M6_M12::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.M12.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M6_M12::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.M12.f_0)
}

// repeated .fleetbench.proto.Message7.M6.M12.M24 f_1 = 2;
inline int Message7_M6_M12::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M6_M12::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M6_M12::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M24* Message7_M6_M12::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>* Message7_M6_M12::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M6_M12_M24& Message7_M6_M12::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M24* Message7_M6_M12::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M24* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>& Message7_M6_M12::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>&
Message7_M6_M12::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M24>*
Message7_M6_M12::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message7.M6.M12.M30 f_2 = 4;
inline int Message7_M6_M12::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M6_M12::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M6_M12::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M6_M12_M30* Message7_M6_M12::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.M12.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>* Message7_M6_M12::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M6.M12.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M6_M12_M30& Message7_M6_M12::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.M12.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M6_M12_M30* Message7_M6_M12::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6_M12_M30* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M6.M12.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>& Message7_M6_M12::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M6.M12.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>&
Message7_M6_M12::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6_M12_M30>*
Message7_M6_M12::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message7_M6

// optional int32 f_0 = 1;
inline bool Message7_M6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message7_M6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.f_0)
  return _internal_f_0();
}
inline void Message7_M6::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.f_0)
}
inline ::int32_t Message7_M6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M6::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional double f_1 = 2;
inline bool Message7_M6::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M6::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Message7_M6::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.f_1)
  return _internal_f_1();
}
inline void Message7_M6::set_f_1(double value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M6.f_1)
}
inline double Message7_M6::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M6::_internal_set_f_1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message7.M6.M10 f_2 = 4;
inline bool Message7_M6::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M6::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M6_M10& Message7_M6::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M10* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M10&>(::fleetbench::proto::_Message7_M6_M10_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M10& Message7_M6::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.f_2)
  return _internal_f_2();
}
inline void Message7_M6::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M6_M10* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.f_2)
}
inline ::fleetbench::proto::Message7_M6_M10* Message7_M6::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M10* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M10* Message7_M6::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M6_M10* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M10* Message7_M6::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M10>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M6_M10* Message7_M6::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M6_M10* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.f_2)
  return _msg;
}
inline void Message7_M6::set_allocated_f_2(::fleetbench::proto::Message7_M6_M10* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M10*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.f_2)
}

// optional .fleetbench.proto.Message7.M6.M12 f_4 = 5;
inline bool Message7_M6::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message7_M6::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M6_M12& Message7_M6::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M6_M12* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M6_M12&>(::fleetbench::proto::_Message7_M6_M12_default_instance_);
}
inline const ::fleetbench::proto::Message7_M6_M12& Message7_M6::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M6.f_4)
  return _internal_f_4();
}
inline void Message7_M6::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message7_M6_M12* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M6.f_4)
}
inline ::fleetbench::proto::Message7_M6_M12* Message7_M6::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M6_M12* Message7_M6::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M6.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M6_M12* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M6_M12* Message7_M6::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M6_M12>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message7_M6_M12* Message7_M6::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M6_M12* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M6.f_4)
  return _msg;
}
inline void Message7_M6::set_allocated_f_4(::fleetbench::proto::Message7_M6_M12* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message7_M6_M12*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M6.f_4)
}

// -------------------------------------------------------------------

// Message7_M7

// optional string f_0 = 1;
inline bool Message7_M7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M7::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M7::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_0)
}
inline std::string* Message7_M7::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M7.f_0)
  return _s;
}
inline const std::string& Message7_M7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M7::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M7::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M7::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M7.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M7::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M7.f_0)
}

// optional .fleetbench.proto.Message7.M7.E1 f_1 = 2;
inline bool Message7_M7::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M7::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message7_M7_E1 Message7_M7::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_1)
  return _internal_f_1();
}
inline void Message7_M7::set_f_1(::fleetbench::proto::Message7_M7_E1 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_1)
}
inline ::fleetbench::proto::Message7_M7_E1 Message7_M7::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M7_E1>(_impl_.f_1_);
}
inline void Message7_M7::_internal_set_f_1(::fleetbench::proto::Message7_M7_E1 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M7_E1_IsValid(value));
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message7.M7.E2 f_2 = 4;
inline bool Message7_M7::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M7::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message7_M7_E2 Message7_M7::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_2)
  return _internal_f_2();
}
inline void Message7_M7::set_f_2(::fleetbench::proto::Message7_M7_E2 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_2)
}
inline ::fleetbench::proto::Message7_M7_E2 Message7_M7::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M7_E2>(_impl_.f_2_);
}
inline void Message7_M7::_internal_set_f_2(::fleetbench::proto::Message7_M7_E2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M7_E2_IsValid(value));
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 5;
inline bool Message7_M7::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M7::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message7_M7::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_3)
  return _internal_f_3();
}
inline void Message7_M7::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_3)
}
inline ::int32_t Message7_M7::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7_M7::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message7.M7.E3 f_4 = 6;
inline bool Message7_M7::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M7::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message7_M7_E3 Message7_M7::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_4)
  return _internal_f_4();
}
inline void Message7_M7::set_f_4(::fleetbench::proto::Message7_M7_E3 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_4)
}
inline ::fleetbench::proto::Message7_M7_E3 Message7_M7::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M7_E3>(_impl_.f_4_);
}
inline void Message7_M7::_internal_set_f_4(::fleetbench::proto::Message7_M7_E3 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M7_E3_IsValid(value));
  _impl_.f_4_ = value;
}

// optional float f_5 = 7;
inline bool Message7_M7::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M7::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Message7_M7::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M7.f_5)
  return _internal_f_5();
}
inline void Message7_M7::set_f_5(float value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M7.f_5)
}
inline float Message7_M7::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M7::_internal_set_f_5(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// -------------------------------------------------------------------

// Message7_M8_M16_M28_M40_M58

// repeated .fleetbench.proto.Message7.M8.M16.M28.M40.M58.E36 f_0 = 2 [packed = true];
inline int Message7_M8_M16_M28_M40_M58::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M8_M16_M28_M40_M58::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M8_M16_M28_M40_M58::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 Message7_M8_M16_M28_M40_M58::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.M28.M40.M58.f_0)
  return static_cast<::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36>(_internal_f_0().Get(index));
}
inline void Message7_M8_M16_M28_M40_M58::set_f_0(int index, ::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 value) {
  assert(::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.M28.M40.M58.f_0)
}
inline void Message7_M8_M16_M28_M40_M58::add_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36 value) {
  assert(::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M16.M28.M40.M58.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M8_M16_M28_M40_M58::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M16.M28.M40.M58.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message7_M8_M16_M28_M40_M58::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M16.M28.M40.M58.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message7_M8_M16_M28_M40_M58::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message7_M8_M16_M28_M40_M58::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message7_M8_M16_M28_M40

// optional .fleetbench.proto.Message7.M8.M16.M28.M40.E32 f_0 = 1;
inline bool Message7_M8_M16_M28_M40::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M8_M16_M28_M40::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_E32 Message7_M8_M16_M28_M40::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.M28.M40.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M16_M28_M40::set_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_E32 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.M28.M40.f_0)
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_E32 Message7_M8_M16_M28_M40::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M8_M16_M28_M40_E32>(_impl_.f_0_);
}
inline void Message7_M8_M16_M28_M40::_internal_set_f_0(::fleetbench::proto::Message7_M8_M16_M28_M40_E32 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M8_M16_M28_M40_E32_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M8.M16.M28.M40.M58 f_1 = 2;
inline bool Message7_M8_M16_M28_M40::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M8_M16_M28_M40::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58& Message7_M8_M16_M28_M40::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58&>(::fleetbench::proto::_Message7_M8_M16_M28_M40_M58_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M16_M28_M40_M58& Message7_M8_M16_M28_M40::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.M28.M40.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M16_M28_M40::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M16_M28_M40_M58* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16_M28_M40_M58*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M16.M28.M40.f_1)
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* Message7_M8_M16_M28_M40::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* Message7_M8_M16_M28_M40::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M16.M28.M40.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* Message7_M8_M16_M28_M40::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M16_M28_M40_M58>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16_M28_M40_M58*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* Message7_M8_M16_M28_M40::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M8_M16_M28_M40_M58* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M16.M28.M40.f_1)
  return _msg;
}
inline void Message7_M8_M16_M28_M40::set_allocated_f_1(::fleetbench::proto::Message7_M8_M16_M28_M40_M58* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16_M28_M40_M58*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M16.M28.M40.f_1)
}

// -------------------------------------------------------------------

// Message7_M8_M16_M28

// optional .fleetbench.proto.Message7.M8.M16.M28.E25 f_0 = 1;
inline bool Message7_M8_M16_M28::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M16_M28::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message7_M8_M16_M28_E25 Message7_M8_M16_M28::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.M28.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M16_M28::set_f_0(::fleetbench::proto::Message7_M8_M16_M28_E25 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.M28.f_0)
}
inline ::fleetbench::proto::Message7_M8_M16_M28_E25 Message7_M8_M16_M28::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M8_M16_M28_E25>(_impl_.f_0_);
}
inline void Message7_M8_M16_M28::_internal_set_f_0(::fleetbench::proto::Message7_M8_M16_M28_E25 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M8_M16_M28_E25_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M8.M16.M28.M40 f_1 = 3;
inline int Message7_M8_M16_M28::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message7_M8_M16_M28::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message7_M8_M16_M28::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40* Message7_M8_M16_M28::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M16.M28.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>* Message7_M8_M16_M28::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M16.M28.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message7_M8_M16_M28_M40& Message7_M8_M16_M28::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.M28.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message7_M8_M16_M28_M40* Message7_M8_M16_M28::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M8_M16_M28_M40* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M16.M28.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>& Message7_M8_M16_M28::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M16.M28.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>&
Message7_M8_M16_M28::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28_M40>*
Message7_M8_M16_M28::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message7_M8_M16

// optional int32 f_0 = 2;
inline bool Message7_M8_M16::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M8_M16::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M8_M16::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M16::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.f_0)
}
inline ::int32_t Message7_M8_M16::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M16::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message7_M8_M16::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M8_M16::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message7_M8_M16::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M16::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.f_1)
}
inline ::int32_t Message7_M8_M16::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M8_M16::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message7_M8_M16::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M16::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M8_M16::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M16::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M16.f_2)
}
inline std::string* Message7_M8_M16::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M16.f_2)
  return _s;
}
inline const std::string& Message7_M8_M16::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M8_M16::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M8_M16::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M8_M16::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M16.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M16::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M16.f_2)
}

// repeated .fleetbench.proto.Message7.M8.M16.M28 f_4 = 6;
inline int Message7_M8_M16::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M8_M16::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M8_M16::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M8_M16_M28* Message7_M8_M16::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M16.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>* Message7_M8_M16::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M16.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M8_M16_M28& Message7_M8_M16::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M16.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M8_M16_M28* Message7_M8_M16::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M8_M16_M28* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M16.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>& Message7_M8_M16::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M16.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>&
Message7_M8_M16::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M16_M28>*
Message7_M8_M16::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M20

// optional int32 f_0 = 2;
inline bool Message7_M8_M18_M20::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message7_M8_M18_M20::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M20::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_0)
}
inline ::int32_t Message7_M8_M18_M20::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M20::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M8.M18.M20.E24 f_1 = 4;
inline bool Message7_M8_M18_M20::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message7_M8_M18_M20_E24 Message7_M8_M18_M20::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M18_M20::set_f_1(::fleetbench::proto::Message7_M8_M18_M20_E24 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_1)
}
inline ::fleetbench::proto::Message7_M8_M18_M20_E24 Message7_M8_M18_M20::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message7_M8_M18_M20_E24>(_impl_.f_1_);
}
inline void Message7_M8_M18_M20::_internal_set_f_1(::fleetbench::proto::Message7_M8_M18_M20_E24 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message7_M8_M18_M20_E24_IsValid(value));
  _impl_.f_1_ = value;
}

// optional string f_2 = 6;
inline bool Message7_M8_M18_M20::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M8_M18_M20::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M18_M20::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_2)
}
inline std::string* Message7_M8_M18_M20::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M20.f_2)
  return _s;
}
inline const std::string& Message7_M8_M18_M20::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M8_M18_M20::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M8_M18_M20::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M8_M18_M20::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M20.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M18_M20::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M20.f_2)
}

// optional string f_3 = 7;
inline bool Message7_M8_M18_M20::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message7_M8_M18_M20::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M18_M20::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_3)
}
inline std::string* Message7_M8_M18_M20::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M20.f_3)
  return _s;
}
inline const std::string& Message7_M8_M18_M20::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message7_M8_M18_M20::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message7_M8_M18_M20::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message7_M8_M18_M20::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M20.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M18_M20::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M20.f_3)
}

// optional float f_4 = 9;
inline bool Message7_M8_M18_M20::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Message7_M8_M18_M20::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_4)
  return _internal_f_4();
}
inline void Message7_M8_M18_M20::set_f_4(float value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_4)
}
inline float Message7_M8_M18_M20::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7_M8_M18_M20::_internal_set_f_4(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 10;
inline bool Message7_M8_M18_M20::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M8_M18_M20::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message7_M8_M18_M20::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M20.f_5)
  return _internal_f_5();
}
inline void Message7_M8_M18_M20::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M20.f_5)
}
inline ::int32_t Message7_M8_M18_M20::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7_M8_M18_M20::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M45

// optional bool f_0 = 2;
inline bool Message7_M8_M18_M22_M45::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M22_M45::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message7_M8_M18_M22_M45::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M45.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M22_M45::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M45.f_0)
}
inline bool Message7_M8_M18_M22_M45::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M22_M45::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M46

// repeated string f_0 = 2;
inline int Message7_M8_M18_M22_M46::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M8_M18_M22_M46::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M8_M18_M22_M46::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline std::string* Message7_M8_M18_M22_M46::add_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_0()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
  return _s;
}
inline const std::string& Message7_M8_M18_M22_M46::f_0(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
  return _internal_f_0().Get(index);
}
inline std::string* Message7_M8_M18_M22_M46::mutable_f_0(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
  return _internal_mutable_f_0()->Mutable(index);
}
inline void Message7_M8_M18_M22_M46::set_f_0(int index, const std::string& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::set_f_0(int index, std::string&& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::set_f_0(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::set_f_0(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::set_f_0(int index, absl::string_view value) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::add_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::add_f_0(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::add_f_0(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::add_f_0(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline void Message7_M8_M18_M22_M46::add_f_0(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M8_M18_M22_M46::f_0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M8_M18_M22_M46::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M18.M22.M46.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M8_M18_M22_M46::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M8_M18_M22_M46::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M47

// optional int32 f_0 = 1;
inline bool Message7_M8_M18_M22_M47::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M22_M47::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message7_M8_M18_M22_M47::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M47.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M22_M47::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M47.f_0)
}
inline ::int32_t Message7_M8_M18_M22_M47::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M22_M47::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M52

// optional string f_0 = 2;
inline bool Message7_M8_M18_M22_M52::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M22_M52::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M8_M18_M22_M52::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M52.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M18_M22_M52::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M52.f_0)
}
inline std::string* Message7_M8_M18_M22_M52::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.M52.f_0)
  return _s;
}
inline const std::string& Message7_M8_M18_M22_M52::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M8_M18_M22_M52::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M8_M18_M22_M52::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M8_M18_M22_M52::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.M52.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M18_M22_M52::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.M52.f_0)
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M55_M57

// optional bool f_0 = 1;
inline bool Message7_M8_M18_M22_M55_M57::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M22_M55_M57::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message7_M8_M18_M22_M55_M57::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M55.M57.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M22_M55_M57::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M55.M57.f_0)
}
inline bool Message7_M8_M18_M22_M55_M57::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M22_M55_M57::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22_M55

// optional int32 f_0 = 2;
inline bool Message7_M8_M18_M22_M55::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M8_M18_M22_M55::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message7_M8_M18_M22_M55::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M55.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M22_M55::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.M55.f_0)
}
inline ::int32_t Message7_M8_M18_M22_M55::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M22_M55::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M8.M18.M22.M55.M57 f_2 = 3;
inline bool Message7_M8_M18_M22_M55::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M8_M18_M22_M55::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57& Message7_M8_M18_M22_M55::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57&>(::fleetbench::proto::_Message7_M8_M18_M22_M55_M57_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M55_M57& Message7_M8_M18_M22_M55::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.M55.f_2)
  return _internal_f_2();
}
inline void Message7_M8_M18_M22_M55::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M8_M18_M22_M55_M57* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M55_M57*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.M22.M55.f_2)
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* Message7_M8_M18_M22_M55::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* Message7_M8_M18_M22_M55::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.M55.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* Message7_M8_M18_M22_M55::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22_M55_M57>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M55_M57*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* Message7_M8_M18_M22_M55::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M55_M57* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.M55.f_2)
  return _msg;
}
inline void Message7_M8_M18_M22_M55::set_allocated_f_2(::fleetbench::proto::Message7_M8_M18_M22_M55_M57* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M55_M57*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.M55.f_2)
}

// -------------------------------------------------------------------

// Message7_M8_M18_M22

// optional int64 f_0 = 1;
inline bool Message7_M8_M18_M22::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message7_M8_M18_M22::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message7_M8_M18_M22::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M22::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M22.f_0)
}
inline ::int64_t Message7_M8_M18_M22::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M22::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M8.M18.M22.M45 f_1 = 5;
inline bool Message7_M8_M18_M22::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M8_M18_M22::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M45& Message7_M8_M18_M22::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22_M45* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22_M45&>(::fleetbench::proto::_Message7_M8_M18_M22_M45_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M45& Message7_M8_M18_M22::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M18_M22::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M18_M22_M45* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M45*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_1)
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M45* Message7_M8_M18_M22::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M45* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M45* Message7_M8_M18_M22::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M45* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M45* Message7_M8_M18_M22::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22_M45>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M45*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M45* Message7_M8_M18_M22::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M8_M18_M22_M45* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.f_1)
  return _msg;
}
inline void Message7_M8_M18_M22::set_allocated_f_1(::fleetbench::proto::Message7_M8_M18_M22_M45* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M45*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_1)
}

// optional .fleetbench.proto.Message7.M8.M18.M22.M46 f_5 = 8;
inline bool Message7_M8_M18_M22::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message7_M8_M18_M22::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M46& Message7_M8_M18_M22::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22_M46* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22_M46&>(::fleetbench::proto::_Message7_M8_M18_M22_M46_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M46& Message7_M8_M18_M22::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_5)
  return _internal_f_5();
}
inline void Message7_M8_M18_M22::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message7_M8_M18_M22_M46* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M46*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_5)
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M46* Message7_M8_M18_M22::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M22_M46* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M46* Message7_M8_M18_M22::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.f_5)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M22_M46* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M46* Message7_M8_M18_M22::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22_M46>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M46*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M46* Message7_M8_M18_M22::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M22_M46* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.f_5)
  return _msg;
}
inline void Message7_M8_M18_M22::set_allocated_f_5(::fleetbench::proto::Message7_M8_M18_M22_M46* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M46*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_5)
}

// optional .fleetbench.proto.Message7.M8.M18.M22.M47 f_8 = 9;
inline bool Message7_M8_M18_M22::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message7_M8_M18_M22::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M47& Message7_M8_M18_M22::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22_M47* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22_M47&>(::fleetbench::proto::_Message7_M8_M18_M22_M47_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M47& Message7_M8_M18_M22::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_8)
  return _internal_f_8();
}
inline void Message7_M8_M18_M22::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22_M47* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M47*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_8)
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M47* Message7_M8_M18_M22::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22_M47* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M47* Message7_M8_M18_M22::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.f_8)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22_M47* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M47* Message7_M8_M18_M22::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22_M47>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M47*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M47* Message7_M8_M18_M22::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22_M47* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.f_8)
  return _msg;
}
inline void Message7_M8_M18_M22::set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22_M47* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M47*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_8)
}

// optional .fleetbench.proto.Message7.M8.M18.M22.M52 f_9 = 10;
inline bool Message7_M8_M18_M22::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message7_M8_M18_M22::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M52& Message7_M8_M18_M22::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22_M52* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22_M52&>(::fleetbench::proto::_Message7_M8_M18_M22_M52_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M52& Message7_M8_M18_M22::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_9)
  return _internal_f_9();
}
inline void Message7_M8_M18_M22::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message7_M8_M18_M22_M52* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M52*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_9)
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M52* Message7_M8_M18_M22::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M22_M52* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M52* Message7_M8_M18_M22::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M22.f_9)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M22_M52* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M52* Message7_M8_M18_M22::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22_M52>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M52*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M52* Message7_M8_M18_M22::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M22_M52* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.f_9)
  return _msg;
}
inline void Message7_M8_M18_M22::set_allocated_f_9(::fleetbench::proto::Message7_M8_M18_M22_M52* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22_M52*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M22.f_9)
}

// repeated .fleetbench.proto.Message7.M8.M18.M22.M55 f_10 = 11;
inline int Message7_M8_M18_M22::_internal_f_10_size() const {
  return _internal_f_10().size();
}
inline int Message7_M8_M18_M22::f_10_size() const {
  return _internal_f_10_size();
}
inline void Message7_M8_M18_M22::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.Clear();
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55* Message7_M8_M18_M22::mutable_f_10(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M22.f_10)
  return _internal_mutable_f_10()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>* Message7_M8_M18_M22::mutable_f_10()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M18.M22.f_10)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_10();
}
inline const ::fleetbench::proto::Message7_M8_M18_M22_M55& Message7_M8_M18_M22::f_10(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M22.f_10)
  return _internal_f_10().Get(index);
}
inline ::fleetbench::proto::Message7_M8_M18_M22_M55* Message7_M8_M18_M22::add_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M8_M18_M22_M55* _add = _internal_mutable_f_10()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M22.f_10)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>& Message7_M8_M18_M22::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M18.M22.f_10)
  return _internal_f_10();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>&
Message7_M8_M18_M22::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M22_M55>*
Message7_M8_M18_M22::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_10_;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M25_M42

// optional string f_0 = 1;
inline bool Message7_M8_M18_M25_M42::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M25_M42::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M8_M18_M25_M42::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M25.M42.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M18_M25_M42::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M25.M42.f_0)
}
inline std::string* Message7_M8_M18_M25_M42::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M25.M42.f_0)
  return _s;
}
inline const std::string& Message7_M8_M18_M25_M42::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M8_M18_M25_M42::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M8_M18_M25_M42::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M8_M18_M25_M42::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.M25.M42.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M18_M25_M42::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.M25.M42.f_0)
}

// -------------------------------------------------------------------

// Message7_M8_M18_M25

// optional uint32 f_0 = 2;
inline bool Message7_M8_M18_M25::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18_M25::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message7_M8_M18_M25::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M25.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18_M25::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M25.f_0)
}
inline ::uint32_t Message7_M8_M18_M25::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18_M25::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint32 f_1 = 4;
inline bool Message7_M8_M18_M25::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M8_M18_M25::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message7_M8_M18_M25::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M25.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M18_M25::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M25.f_1)
}
inline ::uint32_t Message7_M8_M18_M25::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M8_M18_M25::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated .fleetbench.proto.Message7.M8.M18.M25.M42 f_4 = 5;
inline int Message7_M8_M18_M25::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message7_M8_M18_M25::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message7_M8_M18_M25::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message7_M8_M18_M25_M42* Message7_M8_M18_M25::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M25.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>* Message7_M8_M18_M25::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M18.M25.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message7_M8_M18_M25_M42& Message7_M8_M18_M25::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M25.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message7_M8_M18_M25_M42* Message7_M8_M18_M25::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M8_M18_M25_M42* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M25.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>& Message7_M8_M18_M25::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M18.M25.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>&
Message7_M8_M18_M25::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M8_M18_M25_M42>*
Message7_M8_M18_M25::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message7_M8_M18_M26

// repeated bytes f_0 = 3;
inline int Message7_M8_M18_M26::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message7_M8_M18_M26::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message7_M8_M18_M26::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline std::string* Message7_M8_M18_M26::add_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_0()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message7.M8.M18.M26.f_0)
  return _s;
}
inline const std::string& Message7_M8_M18_M26::f_0(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.M26.f_0)
  return _internal_f_0().Get(index);
}
inline std::string* Message7_M8_M18_M26::mutable_f_0(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.M26.f_0)
  return _internal_mutable_f_0()->Mutable(index);
}
inline void Message7_M8_M18_M26::set_f_0(int index, const std::string& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::set_f_0(int index, std::string&& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::set_f_0(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::set_f_0(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::set_f_0(int index, absl::string_view value) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::add_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::add_f_0(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::add_f_0(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::add_f_0(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline void Message7_M8_M18_M26::add_f_0(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message7.M8.M18.M26.f_0)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M8_M18_M26::f_0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M8.M18.M26.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M8_M18_M26::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M8.M18.M26.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message7_M8_M18_M26::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message7_M8_M18_M26::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message7_M8_M18

// optional int32 f_0 = 4;
inline bool Message7_M8_M18::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message7_M8_M18::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message7_M8_M18::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_0)
  return _internal_f_0();
}
inline void Message7_M8_M18::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.f_0)
}
inline ::int32_t Message7_M8_M18::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8_M18::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint32 f_1 = 6;
inline bool Message7_M8_M18::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message7_M8_M18::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Message7_M8_M18::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_1)
  return _internal_f_1();
}
inline void Message7_M8_M18::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.f_1)
}
inline ::uint32_t Message7_M8_M18::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M8_M18::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 7;
inline bool Message7_M8_M18::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M8_M18::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M8_M18::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M8_M18::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.M18.f_2)
}
inline std::string* Message7_M8_M18::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.f_2)
  return _s;
}
inline const std::string& Message7_M8_M18::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message7_M8_M18::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message7_M8_M18::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message7_M8_M18::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M8_M18::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.f_2)
}

// optional .fleetbench.proto.Message7.M8.M18.M20 f_7 = 8;
inline bool Message7_M8_M18::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message7_M8_M18::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M20& Message7_M8_M18::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M20* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M20&>(::fleetbench::proto::_Message7_M8_M18_M20_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M20& Message7_M8_M18::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_7)
  return _internal_f_7();
}
inline void Message7_M8_M18::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message7_M8_M18_M20* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M20*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.f_7)
}
inline ::fleetbench::proto::Message7_M8_M18_M20* Message7_M8_M18::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M20* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M20* Message7_M8_M18::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.f_7)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M20* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M20* Message7_M8_M18::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M20>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M20*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message7_M8_M18_M20* Message7_M8_M18::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M8_M18_M20* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.f_7)
  return _msg;
}
inline void Message7_M8_M18::set_allocated_f_7(::fleetbench::proto::Message7_M8_M18_M20* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M20*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.f_7)
}

// optional .fleetbench.proto.Message7.M8.M18.M22 f_8 = 10;
inline bool Message7_M8_M18::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message7_M8_M18::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M22& Message7_M8_M18::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M22* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M22&>(::fleetbench::proto::_Message7_M8_M18_M22_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M22& Message7_M8_M18::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_8)
  return _internal_f_8();
}
inline void Message7_M8_M18::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.f_8)
}
inline ::fleetbench::proto::Message7_M8_M18_M22* Message7_M8_M18::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M22* Message7_M8_M18::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.f_8)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M22* Message7_M8_M18::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M22>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message7_M8_M18_M22* Message7_M8_M18::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message7_M8_M18_M22* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.f_8)
  return _msg;
}
inline void Message7_M8_M18::set_allocated_f_8(::fleetbench::proto::Message7_M8_M18_M22* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M22*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.f_8)
}

// optional .fleetbench.proto.Message7.M8.M18.M25 f_10 = 12;
inline bool Message7_M8_M18::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_10_ != nullptr);
  return value;
}
inline void Message7_M8_M18::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ != nullptr) _impl_.f_10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M25& Message7_M8_M18::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M25* p = _impl_.f_10_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M25&>(::fleetbench::proto::_Message7_M8_M18_M25_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M25& Message7_M8_M18::f_10() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_10)
  return _internal_f_10();
}
inline void Message7_M8_M18::unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message7_M8_M18_M25* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_10_);
  }
  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M25*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.f_10)
}
inline ::fleetbench::proto::Message7_M8_M18_M25* Message7_M8_M18::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M25* released = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M25* Message7_M8_M18::unsafe_arena_release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.f_10)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M25* temp = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M25* Message7_M8_M18::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M25>(GetArena());
    _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M25*>(p);
  }
  return _impl_.f_10_;
}
inline ::fleetbench::proto::Message7_M8_M18_M25* Message7_M8_M18::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message7_M8_M18_M25* _msg = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.f_10)
  return _msg;
}
inline void Message7_M8_M18::set_allocated_f_10(::fleetbench::proto::Message7_M8_M18_M25* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_10_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M25*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.f_10)
}

// optional .fleetbench.proto.Message7.M8.M18.M26 f_12 = 15;
inline bool Message7_M8_M18::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_12_ != nullptr);
  return value;
}
inline void Message7_M8_M18::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ != nullptr) _impl_.f_12_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message7_M8_M18_M26& Message7_M8_M18::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18_M26* p = _impl_.f_12_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18_M26&>(::fleetbench::proto::_Message7_M8_M18_M26_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18_M26& Message7_M8_M18::f_12() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.M18.f_12)
  return _internal_f_12();
}
inline void Message7_M8_M18::unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message7_M8_M18_M26* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_12_);
  }
  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M26*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.M18.f_12)
}
inline ::fleetbench::proto::Message7_M8_M18_M26* Message7_M8_M18::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message7_M8_M18_M26* released = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18_M26* Message7_M8_M18::unsafe_arena_release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.M18.f_12)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message7_M8_M18_M26* temp = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18_M26* Message7_M8_M18::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18_M26>(GetArena());
    _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M26*>(p);
  }
  return _impl_.f_12_;
}
inline ::fleetbench::proto::Message7_M8_M18_M26* Message7_M8_M18::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message7_M8_M18_M26* _msg = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.M18.f_12)
  return _msg;
}
inline void Message7_M8_M18::set_allocated_f_12(::fleetbench::proto::Message7_M8_M18_M26* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_12_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18_M26*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.M18.f_12)
}

// -------------------------------------------------------------------

// Message7_M8

// optional bool f_0 = 1;
inline bool Message7_M8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message7_M8::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.f_0)
  return _internal_f_0();
}
inline void Message7_M8::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M8.f_0)
}
inline bool Message7_M8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M8::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M8.M16 f_1 = 2;
inline bool Message7_M8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M8_M16& Message7_M8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M16* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M16&>(::fleetbench::proto::_Message7_M8_M16_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M16& Message7_M8::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.f_1)
  return _internal_f_1();
}
inline void Message7_M8::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M8_M16* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.f_1)
}
inline ::fleetbench::proto::Message7_M8_M16* Message7_M8::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M16* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M16* Message7_M8::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M8_M16* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M16* Message7_M8::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M16>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M8_M16* Message7_M8::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M8_M16* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.f_1)
  return _msg;
}
inline void Message7_M8::set_allocated_f_1(::fleetbench::proto::Message7_M8_M16* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M16*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.f_1)
}

// optional .fleetbench.proto.Message7.M8.M18 f_2 = 3;
inline bool Message7_M8::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message7_M8::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M8_M18& Message7_M8::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8_M18* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8_M18&>(::fleetbench::proto::_Message7_M8_M18_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8_M18& Message7_M8::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M8.f_2)
  return _internal_f_2();
}
inline void Message7_M8::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message7_M8_M18* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M8.f_2)
}
inline ::fleetbench::proto::Message7_M8_M18* Message7_M8::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8_M18* Message7_M8::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M8.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M8_M18* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8_M18* Message7_M8::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8_M18>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message7_M8_M18* Message7_M8::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M8_M18* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M8.f_2)
  return _msg;
}
inline void Message7_M8::set_allocated_f_2(::fleetbench::proto::Message7_M8_M18* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message7_M8_M18*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M8.f_2)
}

// -------------------------------------------------------------------

// Message7_M9_M15_M23_M41

// optional int64 f_0 = 1;
inline bool Message7_M9_M15_M23_M41::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M9_M15_M23_M41::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M9_M15_M23_M41::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M23.M41.f_0)
  return _internal_f_0();
}
inline void Message7_M9_M15_M23_M41::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.M15.M23.M41.f_0)
}
inline ::int64_t Message7_M9_M15_M23_M41::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M9_M15_M23_M41::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M9_M15_M23_M54

// optional int64 f_0 = 1;
inline bool Message7_M9_M15_M23_M54::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M9_M15_M23_M54::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message7_M9_M15_M23_M54::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M23.M54.f_0)
  return _internal_f_0();
}
inline void Message7_M9_M15_M23_M54::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.M15.M23.M54.f_0)
}
inline ::int64_t Message7_M9_M15_M23_M54::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M9_M15_M23_M54::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message7_M9_M15_M23

// optional int64 f_0 = 1;
inline bool Message7_M9_M15_M23::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M9_M15_M23::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message7_M9_M15_M23::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M23.f_0)
  return _internal_f_0();
}
inline void Message7_M9_M15_M23::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.M15.M23.f_0)
}
inline ::int64_t Message7_M9_M15_M23::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M9_M15_M23::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message7.M9.M15.M23.M41 f_1 = 3;
inline bool Message7_M9_M15_M23::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message7_M9_M15_M23::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M9_M15_M23_M41& Message7_M9_M15_M23::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M9_M15_M23_M41* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M9_M15_M23_M41&>(::fleetbench::proto::_Message7_M9_M15_M23_M41_default_instance_);
}
inline const ::fleetbench::proto::Message7_M9_M15_M23_M41& Message7_M9_M15_M23::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M23.f_1)
  return _internal_f_1();
}
inline void Message7_M9_M15_M23::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message7_M9_M15_M23_M41* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M41*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M9.M15.M23.f_1)
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M41* Message7_M9_M15_M23::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M23_M41* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M41* Message7_M9_M15_M23::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M9.M15.M23.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M23_M41* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M41* Message7_M9_M15_M23::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M9_M15_M23_M41>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M41*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M41* Message7_M9_M15_M23::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M23_M41* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.M15.M23.f_1)
  return _msg;
}
inline void Message7_M9_M15_M23::set_allocated_f_1(::fleetbench::proto::Message7_M9_M15_M23_M41* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M41*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M9.M15.M23.f_1)
}

// optional .fleetbench.proto.Message7.M9.M15.M23.M54 f_3 = 6;
inline bool Message7_M9_M15_M23::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M9_M15_M23::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M9_M15_M23_M54& Message7_M9_M15_M23::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M9_M15_M23_M54* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M9_M15_M23_M54&>(::fleetbench::proto::_Message7_M9_M15_M23_M54_default_instance_);
}
inline const ::fleetbench::proto::Message7_M9_M15_M23_M54& Message7_M9_M15_M23::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M23.f_3)
  return _internal_f_3();
}
inline void Message7_M9_M15_M23::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M23_M54* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M54*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M9.M15.M23.f_3)
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M54* Message7_M9_M15_M23::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M9_M15_M23_M54* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M54* Message7_M9_M15_M23::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M9.M15.M23.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M9_M15_M23_M54* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M54* Message7_M9_M15_M23::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M9_M15_M23_M54>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M54*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M9_M15_M23_M54* Message7_M9_M15_M23::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M9_M15_M23_M54* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.M15.M23.f_3)
  return _msg;
}
inline void Message7_M9_M15_M23::set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M23_M54* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M23_M54*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M9.M15.M23.f_3)
}

// -------------------------------------------------------------------

// Message7_M9_M15_M33

// optional string f_0 = 1;
inline bool Message7_M9_M15_M33::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7_M9_M15_M33::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7_M9_M15_M33::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.M33.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7_M9_M15_M33::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.M15.M33.f_0)
}
inline std::string* Message7_M9_M15_M33::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.M15.M33.f_0)
  return _s;
}
inline const std::string& Message7_M9_M15_M33::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message7_M9_M15_M33::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message7_M9_M15_M33::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message7_M9_M15_M33::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M9.M15.M33.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7_M9_M15_M33::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M9.M15.M33.f_0)
}

// -------------------------------------------------------------------

// Message7_M9_M15

// optional float f_0 = 2;
inline bool Message7_M9_M15::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M9_M15::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message7_M9_M15::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.f_0)
  return _internal_f_0();
}
inline void Message7_M9_M15::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.M15.f_0)
}
inline float Message7_M9_M15::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M9_M15::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message7.M9.M15.M23 f_2 = 3;
inline int Message7_M9_M15::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message7_M9_M15::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message7_M9_M15::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message7_M9_M15_M23* Message7_M9_M15::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.M15.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>* Message7_M9_M15::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.M9.M15.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message7_M9_M15_M23& Message7_M9_M15::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message7_M9_M15_M23* Message7_M9_M15::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M9_M15_M23* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.M9.M15.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>& Message7_M9_M15::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.M9.M15.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>&
Message7_M9_M15::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M9_M15_M23>*
Message7_M9_M15::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message7.M9.M15.M33 f_3 = 5;
inline bool Message7_M9_M15::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message7_M9_M15::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M9_M15_M33& Message7_M9_M15::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M9_M15_M33* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M9_M15_M33&>(::fleetbench::proto::_Message7_M9_M15_M33_default_instance_);
}
inline const ::fleetbench::proto::Message7_M9_M15_M33& Message7_M9_M15::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.M15.f_3)
  return _internal_f_3();
}
inline void Message7_M9_M15::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M33* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M33*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M9.M15.f_3)
}
inline ::fleetbench::proto::Message7_M9_M15_M33* Message7_M9_M15::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M33* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M9_M15_M33* Message7_M9_M15::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M9.M15.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M33* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M9_M15_M33* Message7_M9_M15::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M9_M15_M33>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M33*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message7_M9_M15_M33* Message7_M9_M15::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M9_M15_M33* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.M15.f_3)
  return _msg;
}
inline void Message7_M9_M15::set_allocated_f_3(::fleetbench::proto::Message7_M9_M15_M33* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15_M33*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M9.M15.f_3)
}

// -------------------------------------------------------------------

// Message7_M9

// optional int64 f_0 = 4;
inline bool Message7_M9::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message7_M9::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message7_M9::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.f_0)
  return _internal_f_0();
}
inline void Message7_M9::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.f_0)
}
inline ::int64_t Message7_M9::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7_M9::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 5;
inline bool Message7_M9::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message7_M9::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message7_M9::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.f_1)
  return _internal_f_1();
}
inline void Message7_M9::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.f_1)
}
inline ::int64_t Message7_M9::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message7_M9::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional fixed64 f_2 = 6;
inline bool Message7_M9::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message7_M9::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message7_M9::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.f_2)
  return _internal_f_2();
}
inline void Message7_M9::set_f_2(::uint64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.M9.f_2)
}
inline ::uint64_t Message7_M9::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7_M9::_internal_set_f_2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message7.M9.M15 f_6 = 7;
inline bool Message7_M9::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message7_M9::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message7_M9_M15& Message7_M9::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M9_M15* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M9_M15&>(::fleetbench::proto::_Message7_M9_M15_default_instance_);
}
inline const ::fleetbench::proto::Message7_M9_M15& Message7_M9::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.M9.f_6)
  return _internal_f_6();
}
inline void Message7_M9::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message7_M9_M15* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.M9.f_6)
}
inline ::fleetbench::proto::Message7_M9_M15* Message7_M9::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M9_M15* Message7_M9::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.M9.f_6)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message7_M9_M15* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M9_M15* Message7_M9::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M9_M15>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message7_M9_M15* Message7_M9::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message7_M9_M15* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.M9.f_6)
  return _msg;
}
inline void Message7_M9::set_allocated_f_6(::fleetbench::proto::Message7_M9_M15* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message7_M9_M15*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.M9.f_6)
}

// -------------------------------------------------------------------

// Message7

// optional uint64 f_0 = 3;
inline bool Message7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Message7::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_0)
  return _internal_f_0();
}
inline void Message7::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_0)
}
inline ::uint64_t Message7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message7::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 5;
inline bool Message7::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message7::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message7::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message7::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_1)
}
inline std::string* Message7::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_1)
  return _s;
}
inline const std::string& Message7::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message7::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message7::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message7::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message7::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_1)
}

// optional int64 f_2 = 6;
inline bool Message7::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message7::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message7::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_2)
  return _internal_f_2();
}
inline void Message7::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_2)
}
inline ::int64_t Message7::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message7::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 7;
inline bool Message7::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message7::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Message7::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_3)
  return _internal_f_3();
}
inline void Message7::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_3)
}
inline float Message7::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message7::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional uint32 f_4 = 9;
inline bool Message7::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message7::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Message7::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_4)
  return _internal_f_4();
}
inline void Message7::set_f_4(::uint32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_4)
}
inline ::uint32_t Message7::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message7::_internal_set_f_4(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional float f_5 = 11;
inline bool Message7::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message7::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float Message7::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_5)
  return _internal_f_5();
}
inline void Message7::set_f_5(float value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message7.f_5)
}
inline float Message7::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message7::_internal_set_f_5(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message7.M1 f_11 = 12;
inline bool Message7::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message7::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message7_M1& Message7::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M1* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M1&>(::fleetbench::proto::_Message7_M1_default_instance_);
}
inline const ::fleetbench::proto::Message7_M1& Message7::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_11)
  return _internal_f_11();
}
inline void Message7::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message7_M1* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M1*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_11)
}
inline ::fleetbench::proto::Message7_M1* Message7::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M1* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M1* Message7::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_11)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message7_M1* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M1* Message7::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M1>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M1*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message7_M1* Message7::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message7_M1* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_11)
  return _msg;
}
inline void Message7::set_allocated_f_11(::fleetbench::proto::Message7_M1* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message7_M1*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_11)
}

// repeated .fleetbench.proto.Message7.M2 f_12 = 13;
inline int Message7::_internal_f_12_size() const {
  return _internal_f_12().size();
}
inline int Message7::f_12_size() const {
  return _internal_f_12_size();
}
inline void Message7::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.Clear();
}
inline ::fleetbench::proto::Message7_M2* Message7::mutable_f_12(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_12)
  return _internal_mutable_f_12()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>* Message7::mutable_f_12()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.f_12)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_12();
}
inline const ::fleetbench::proto::Message7_M2& Message7::f_12(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_12)
  return _internal_f_12().Get(index);
}
inline ::fleetbench::proto::Message7_M2* Message7::add_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M2* _add = _internal_mutable_f_12()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.f_12)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>& Message7::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.f_12)
  return _internal_f_12();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>&
Message7::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M2>*
Message7::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_12_;
}

// optional .fleetbench.proto.Message7.M3 f_13 = 14;
inline bool Message7::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_13_ != nullptr);
  return value;
}
inline void Message7::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ != nullptr) _impl_.f_13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message7_M3& Message7::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M3* p = _impl_.f_13_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M3&>(::fleetbench::proto::_Message7_M3_default_instance_);
}
inline const ::fleetbench::proto::Message7_M3& Message7::f_13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_13)
  return _internal_f_13();
}
inline void Message7::unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message7_M3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_13_);
  }
  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message7_M3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_13)
}
inline ::fleetbench::proto::Message7_M3* Message7::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M3* released = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M3* Message7::unsafe_arena_release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_13)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message7_M3* temp = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M3* Message7::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M3>(GetArena());
    _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message7_M3*>(p);
  }
  return _impl_.f_13_;
}
inline ::fleetbench::proto::Message7_M3* Message7::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message7_M3* _msg = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_13)
  return _msg;
}
inline void Message7::set_allocated_f_13(::fleetbench::proto::Message7_M3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message7_M3*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_13)
}

// optional .fleetbench.proto.Message7.M4 f_14 = 16;
inline bool Message7::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_14_ != nullptr);
  return value;
}
inline void Message7::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ != nullptr) _impl_.f_14_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message7_M4& Message7::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M4* p = _impl_.f_14_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M4&>(::fleetbench::proto::_Message7_M4_default_instance_);
}
inline const ::fleetbench::proto::Message7_M4& Message7::f_14() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_14)
  return _internal_f_14();
}
inline void Message7::unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message7_M4* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_14_);
  }
  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message7_M4*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_14)
}
inline ::fleetbench::proto::Message7_M4* Message7::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M4* released = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M4* Message7::unsafe_arena_release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_14)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message7_M4* temp = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M4* Message7::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M4>(GetArena());
    _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message7_M4*>(p);
  }
  return _impl_.f_14_;
}
inline ::fleetbench::proto::Message7_M4* Message7::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message7_M4* _msg = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_14)
  return _msg;
}
inline void Message7::set_allocated_f_14(::fleetbench::proto::Message7_M4* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_14_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message7_M4*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_14)
}

// optional .fleetbench.proto.Message7.M5 f_16 = 19;
inline bool Message7::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_16_ != nullptr);
  return value;
}
inline void Message7::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ != nullptr) _impl_.f_16_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message7_M5& Message7::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M5* p = _impl_.f_16_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M5&>(::fleetbench::proto::_Message7_M5_default_instance_);
}
inline const ::fleetbench::proto::Message7_M5& Message7::f_16() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_16)
  return _internal_f_16();
}
inline void Message7::unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message7_M5* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_16_);
  }
  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message7_M5*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_16)
}
inline ::fleetbench::proto::Message7_M5* Message7::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message7_M5* released = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M5* Message7::unsafe_arena_release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_16)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message7_M5* temp = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M5* Message7::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M5>(GetArena());
    _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message7_M5*>(p);
  }
  return _impl_.f_16_;
}
inline ::fleetbench::proto::Message7_M5* Message7::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message7_M5* _msg = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_16)
  return _msg;
}
inline void Message7::set_allocated_f_16(::fleetbench::proto::Message7_M5* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_16_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message7_M5*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_16)
}

// repeated .fleetbench.proto.Message7.M6 f_19 = 20;
inline int Message7::_internal_f_19_size() const {
  return _internal_f_19().size();
}
inline int Message7::f_19_size() const {
  return _internal_f_19_size();
}
inline void Message7::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_.Clear();
}
inline ::fleetbench::proto::Message7_M6* Message7::mutable_f_19(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_19)
  return _internal_mutable_f_19()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>* Message7::mutable_f_19()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message7.f_19)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_19();
}
inline const ::fleetbench::proto::Message7_M6& Message7::f_19(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_19)
  return _internal_f_19().Get(index);
}
inline ::fleetbench::proto::Message7_M6* Message7::add_f_19() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message7_M6* _add = _internal_mutable_f_19()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message7.f_19)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>& Message7::f_19() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message7.f_19)
  return _internal_f_19();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>&
Message7::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message7_M6>*
Message7::_internal_mutable_f_19() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_19_;
}

// optional .fleetbench.proto.Message7.M7 f_20 = 21;
inline bool Message7::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_20_ != nullptr);
  return value;
}
inline void Message7::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_20_ != nullptr) _impl_.f_20_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message7_M7& Message7::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M7* p = _impl_.f_20_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M7&>(::fleetbench::proto::_Message7_M7_default_instance_);
}
inline const ::fleetbench::proto::Message7_M7& Message7::f_20() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_20)
  return _internal_f_20();
}
inline void Message7::unsafe_arena_set_allocated_f_20(::fleetbench::proto::Message7_M7* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_20_);
  }
  _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message7_M7*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_20)
}
inline ::fleetbench::proto::Message7_M7* Message7::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message7_M7* released = _impl_.f_20_;
  _impl_.f_20_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M7* Message7::unsafe_arena_release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_20)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message7_M7* temp = _impl_.f_20_;
  _impl_.f_20_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M7* Message7::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_20_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M7>(GetArena());
    _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message7_M7*>(p);
  }
  return _impl_.f_20_;
}
inline ::fleetbench::proto::Message7_M7* Message7::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message7_M7* _msg = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_20)
  return _msg;
}
inline void Message7::set_allocated_f_20(::fleetbench::proto::Message7_M7* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_20_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message7_M7*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_20)
}

// optional .fleetbench.proto.Message7.M8 f_21 = 22;
inline bool Message7::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_21_ != nullptr);
  return value;
}
inline void Message7::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ != nullptr) _impl_.f_21_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::fleetbench::proto::Message7_M8& Message7::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M8* p = _impl_.f_21_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M8&>(::fleetbench::proto::_Message7_M8_default_instance_);
}
inline const ::fleetbench::proto::Message7_M8& Message7::f_21() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_21)
  return _internal_f_21();
}
inline void Message7::unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message7_M8* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_21_);
  }
  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message7_M8*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_21)
}
inline ::fleetbench::proto::Message7_M8* Message7::release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message7_M8* released = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M8* Message7::unsafe_arena_release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_21)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message7_M8* temp = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M8* Message7::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M8>(GetArena());
    _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message7_M8*>(p);
  }
  return _impl_.f_21_;
}
inline ::fleetbench::proto::Message7_M8* Message7::mutable_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::fleetbench::proto::Message7_M8* _msg = _internal_mutable_f_21();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_21)
  return _msg;
}
inline void Message7::set_allocated_f_21(::fleetbench::proto::Message7_M8* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_21_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message7_M8*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_21)
}

// optional .fleetbench.proto.Message7.M9 f_22 = 23;
inline bool Message7::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_22_ != nullptr);
  return value;
}
inline void Message7::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ != nullptr) _impl_.f_22_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::fleetbench::proto::Message7_M9& Message7::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message7_M9* p = _impl_.f_22_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message7_M9&>(::fleetbench::proto::_Message7_M9_default_instance_);
}
inline const ::fleetbench::proto::Message7_M9& Message7::f_22() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message7.f_22)
  return _internal_f_22();
}
inline void Message7::unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message7_M9* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_22_);
  }
  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M9*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message7.f_22)
}
inline ::fleetbench::proto::Message7_M9* Message7::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message7_M9* released = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message7_M9* Message7::unsafe_arena_release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message7.f_22)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message7_M9* temp = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message7_M9* Message7::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message7_M9>(GetArena());
    _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M9*>(p);
  }
  return _impl_.f_22_;
}
inline ::fleetbench::proto::Message7_M9* Message7::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::fleetbench::proto::Message7_M9* _msg = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message7.f_22)
  return _msg;
}
inline void Message7::set_allocated_f_22(::fleetbench::proto::Message7_M9* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_22_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message7_M9*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message7.f_22)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fleetbench


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fleetbench::proto::Message7_M1_M14_M34_E26> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M1_M14_M34_E26>() {
  return ::fleetbench::proto::Message7_M1_M14_M34_E26_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M1_M14_M34_E27> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M1_M14_M34_E27>() {
  return ::fleetbench::proto::Message7_M1_M14_M34_E27_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E50_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E51_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E52_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E53_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E54_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E55_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E56_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E57_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_M100_M101_M102_E58_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_M97_M98_M99_E49_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_M89_M95_M96_E48_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M69_M78_M85_E45_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_M90_E47_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M62_M72_M75_M88_E46_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M67_E42_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E43_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M64_M73_E44_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E40_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41>() {
  return ::fleetbench::proto::Message7_M2_M19_M29_M38_M60_M65_E41_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E4> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E4>() {
  return ::fleetbench::proto::Message7_M2_M19_E4_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E5> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E5>() {
  return ::fleetbench::proto::Message7_M2_M19_E5_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E6> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E6>() {
  return ::fleetbench::proto::Message7_M2_M19_E6_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E7> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E7>() {
  return ::fleetbench::proto::Message7_M2_M19_E7_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E8> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E8>() {
  return ::fleetbench::proto::Message7_M2_M19_E8_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E9> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E9>() {
  return ::fleetbench::proto::Message7_M2_M19_E9_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E10> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E10>() {
  return ::fleetbench::proto::Message7_M2_M19_E10_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E11> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E11>() {
  return ::fleetbench::proto::Message7_M2_M19_E11_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E12> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E12>() {
  return ::fleetbench::proto::Message7_M2_M19_E12_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E13> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E13>() {
  return ::fleetbench::proto::Message7_M2_M19_E13_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E14> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E14>() {
  return ::fleetbench::proto::Message7_M2_M19_E14_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E15> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E15>() {
  return ::fleetbench::proto::Message7_M2_M19_E15_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E16> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E16>() {
  return ::fleetbench::proto::Message7_M2_M19_E16_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E17> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E17>() {
  return ::fleetbench::proto::Message7_M2_M19_E17_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E18> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E18>() {
  return ::fleetbench::proto::Message7_M2_M19_E18_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E19> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E19>() {
  return ::fleetbench::proto::Message7_M2_M19_E19_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E20> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E20>() {
  return ::fleetbench::proto::Message7_M2_M19_E20_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E21> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E21>() {
  return ::fleetbench::proto::Message7_M2_M19_E21_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E22> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E22>() {
  return ::fleetbench::proto::Message7_M2_M19_E22_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M2_M19_E23> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M2_M19_E23>() {
  return ::fleetbench::proto::Message7_M2_M19_E23_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M5_M13_M31_M39_E31> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M5_M13_M31_M39_E31>() {
  return ::fleetbench::proto::Message7_M5_M13_M31_M39_E31_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M10_M27_M50_E35> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M10_M27_M50_E35>() {
  return ::fleetbench::proto::Message7_M6_M10_M27_M50_E35_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M24_M36_E29> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M24_M36_E29>() {
  return ::fleetbench::proto::Message7_M6_M12_M24_M36_E29_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E37_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M35_M61_E38_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M35_E28> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M35_E28>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M35_E28_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M37_E30> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M37_E30>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M37_E30_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M49_M59_M63_E39_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M49_E33> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M49_E33>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M49_E33_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M6_M12_M30_M49_E34> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M6_M12_M30_M49_E34>() {
  return ::fleetbench::proto::Message7_M6_M12_M30_M49_E34_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M7_E1> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M7_E1>() {
  return ::fleetbench::proto::Message7_M7_E1_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M7_E2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M7_E2>() {
  return ::fleetbench::proto::Message7_M7_E2_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M7_E3> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M7_E3>() {
  return ::fleetbench::proto::Message7_M7_E3_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36>() {
  return ::fleetbench::proto::Message7_M8_M16_M28_M40_M58_E36_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M8_M16_M28_M40_E32> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M8_M16_M28_M40_E32>() {
  return ::fleetbench::proto::Message7_M8_M16_M28_M40_E32_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M8_M16_M28_E25> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M8_M16_M28_E25>() {
  return ::fleetbench::proto::Message7_M8_M16_M28_E25_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message7_M8_M18_M20_E24> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message7_M8_M18_M20_E24>() {
  return ::fleetbench::proto::Message7_M8_M18_M20_E24_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage7_2eproto_2epb_2eh
