// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_2eproto;
namespace tachidromos {
namespace tests {
class IntRepeatedMessage;
struct IntRepeatedMessageDefaultTypeInternal;
extern IntRepeatedMessageDefaultTypeInternal _IntRepeatedMessage_default_instance_;
class NestedRepeatedMessage;
struct NestedRepeatedMessageDefaultTypeInternal;
extern NestedRepeatedMessageDefaultTypeInternal _NestedRepeatedMessage_default_instance_;
class RepeatedMessage;
struct RepeatedMessageDefaultTypeInternal;
extern RepeatedMessageDefaultTypeInternal _RepeatedMessage_default_instance_;
class SingularMessage;
struct SingularMessageDefaultTypeInternal;
extern SingularMessageDefaultTypeInternal _SingularMessage_default_instance_;
class SingularMessage_NestedMessage;
struct SingularMessage_NestedMessageDefaultTypeInternal;
extern SingularMessage_NestedMessageDefaultTypeInternal _SingularMessage_NestedMessage_default_instance_;
class SingularMessage_NestedMessage2;
struct SingularMessage_NestedMessage2DefaultTypeInternal;
extern SingularMessage_NestedMessage2DefaultTypeInternal _SingularMessage_NestedMessage2_default_instance_;
class StringRepeatedMessage;
struct StringRepeatedMessageDefaultTypeInternal;
extern StringRepeatedMessageDefaultTypeInternal _StringRepeatedMessage_default_instance_;
}  // namespace tests
}  // namespace tachidromos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tachidromos {
namespace tests {
enum SingularMessage_Status : int {
  SingularMessage_Status_UNKNOWN = 0,
  SingularMessage_Status_ACTIVE = 1,
  SingularMessage_Status_INACTIVE = 2,
  SingularMessage_Status_DELETED = 3,
  SingularMessage_Status_SingularMessage_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SingularMessage_Status_SingularMessage_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SingularMessage_Status_IsValid(int value);
extern const uint32_t SingularMessage_Status_internal_data_[];
constexpr SingularMessage_Status SingularMessage_Status_Status_MIN = static_cast<SingularMessage_Status>(0);
constexpr SingularMessage_Status SingularMessage_Status_Status_MAX = static_cast<SingularMessage_Status>(3);
constexpr int SingularMessage_Status_Status_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SingularMessage_Status_descriptor();
template <typename T>
const std::string& SingularMessage_Status_Name(T value) {
  static_assert(std::is_same<T, SingularMessage_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return SingularMessage_Status_Name(static_cast<SingularMessage_Status>(value));
}
template <>
inline const std::string& SingularMessage_Status_Name(SingularMessage_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SingularMessage_Status_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SingularMessage_Status_Parse(absl::string_view name, SingularMessage_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingularMessage_Status>(
      SingularMessage_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StringRepeatedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.StringRepeatedMessage) */ {
 public:
  inline StringRepeatedMessage() : StringRepeatedMessage(nullptr) {}
  ~StringRepeatedMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StringRepeatedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline StringRepeatedMessage(const StringRepeatedMessage& from) : StringRepeatedMessage(nullptr, from) {}
  inline StringRepeatedMessage(StringRepeatedMessage&& from) noexcept
      : StringRepeatedMessage(nullptr, std::move(from)) {}
  inline StringRepeatedMessage& operator=(const StringRepeatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringRepeatedMessage& operator=(StringRepeatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringRepeatedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringRepeatedMessage* internal_default_instance() {
    return reinterpret_cast<const StringRepeatedMessage*>(
        &_StringRepeatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StringRepeatedMessage& a, StringRepeatedMessage& b) { a.Swap(&b); }
  inline void Swap(StringRepeatedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringRepeatedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringRepeatedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StringRepeatedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StringRepeatedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StringRepeatedMessage& from) { StringRepeatedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StringRepeatedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.StringRepeatedMessage"; }

 protected:
  explicit StringRepeatedMessage(::google::protobuf::Arena* arena);
  StringRepeatedMessage(::google::protobuf::Arena* arena, const StringRepeatedMessage& from);
  StringRepeatedMessage(::google::protobuf::Arena* arena, StringRepeatedMessage&& from) noexcept
      : StringRepeatedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < string_fields_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).data())), string_fields(i).size()));
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(string_fields().size());
      for (int i = 0; i < string_fields_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).c_str())));
        sizes_list.push_back(string_fields(i).size());
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < string_fields_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).c_str())));
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      sizes.push_back(0);
      sizes.push_back(string_fields().size());
      for (int i = 0; i < string_fields_size(); ++i) {
        sizes.push_back(string_fields(i).size());
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      ptrs.push_back(nullptr);
      // non-primitive field pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      size_t num_string_fields_entries = sizes[idx++];
      for (size_t i = 0; i < num_string_fields_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_string_fields(std::move(tmp_str));
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kStringFieldsFieldNumber = 1,
  };
  // repeated string string_fields = 1;
  int string_fields_size() const;
  private:
  int _internal_string_fields_size() const;

  public:
  void clear_string_fields() ;
  const std::string& string_fields(int index) const;
  std::string* mutable_string_fields(int index);
  void set_string_fields(int index, const std::string& value);
  void set_string_fields(int index, std::string&& value);
  void set_string_fields(int index, const char* value);
  void set_string_fields(int index, const char* value, std::size_t size);
  void set_string_fields(int index, absl::string_view value);
  std::string* add_string_fields();
  void add_string_fields(const std::string& value);
  void add_string_fields(std::string&& value);
  void add_string_fields(const char* value);
  void add_string_fields(const char* value, std::size_t size);
  void add_string_fields(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& string_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_fields();

  public:
  // @@protoc_insertion_point(class_scope:tachidromos.tests.StringRepeatedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      61, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StringRepeatedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> string_fields_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SingularMessage_NestedMessage2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.SingularMessage.NestedMessage2) */ {
 public:
  inline SingularMessage_NestedMessage2() : SingularMessage_NestedMessage2(nullptr) {}
  ~SingularMessage_NestedMessage2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SingularMessage_NestedMessage2(
      ::google::protobuf::internal::ConstantInitialized);

  inline SingularMessage_NestedMessage2(const SingularMessage_NestedMessage2& from) : SingularMessage_NestedMessage2(nullptr, from) {}
  inline SingularMessage_NestedMessage2(SingularMessage_NestedMessage2&& from) noexcept
      : SingularMessage_NestedMessage2(nullptr, std::move(from)) {}
  inline SingularMessage_NestedMessage2& operator=(const SingularMessage_NestedMessage2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingularMessage_NestedMessage2& operator=(SingularMessage_NestedMessage2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingularMessage_NestedMessage2& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingularMessage_NestedMessage2* internal_default_instance() {
    return reinterpret_cast<const SingularMessage_NestedMessage2*>(
        &_SingularMessage_NestedMessage2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SingularMessage_NestedMessage2& a, SingularMessage_NestedMessage2& b) { a.Swap(&b); }
  inline void Swap(SingularMessage_NestedMessage2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingularMessage_NestedMessage2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingularMessage_NestedMessage2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SingularMessage_NestedMessage2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SingularMessage_NestedMessage2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SingularMessage_NestedMessage2& from) { SingularMessage_NestedMessage2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SingularMessage_NestedMessage2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.SingularMessage.NestedMessage2"; }

 protected:
  explicit SingularMessage_NestedMessage2(::google::protobuf::Arena* arena);
  SingularMessage_NestedMessage2(::google::protobuf::Arena* arena, const SingularMessage_NestedMessage2& from);
  SingularMessage_NestedMessage2(::google::protobuf::Arena* arena, SingularMessage_NestedMessage2&& from) noexcept
      : SingularMessage_NestedMessage2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string1().c_str())), nested_string1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string2().c_str())), nested_string2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string1().c_str())));
      sizes_list.push_back(nested_string1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string2().c_str())));
      sizes_list.push_back(nested_string2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      sizes.push_back(0);
      sizes.push_back(nested_string1().size());
      sizes.push_back(nested_string2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      ptrs.push_back(nullptr);
      // non-primitive field pointers + allocation
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_nested_string1(std::move(tmp_str));
      }
      //std::string tmp_str1(sizes[idx++], 'x');  // Preallocate needed size
      //set_nested_string1(std::move(tmp_str1));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string1().c_str())));
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_nested_string2(std::move(tmp_str));
      }
      //std::string tmp_str2(sizes[idx++], 'x');  // Preallocate needed size
      //set_nested_string2(std::move(tmp_str2));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string2().c_str())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_nested_string1(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_nested_string2(std::move(tmp_str));
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNestedString1FieldNumber = 1,
    kNestedString2FieldNumber = 2,
  };
  // string nested_string1 = 1;
  void clear_nested_string1() ;
  const std::string& nested_string1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nested_string1(Arg_&& arg, Args_... args);
  std::string* mutable_nested_string1();
  PROTOBUF_NODISCARD std::string* release_nested_string1();
  void set_allocated_nested_string1(std::string* value);

  private:
  const std::string& _internal_nested_string1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_string1(
      const std::string& value);
  std::string* _internal_mutable_nested_string1();

  public:
  // string nested_string2 = 2;
  void clear_nested_string2() ;
  const std::string& nested_string2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nested_string2(Arg_&& arg, Args_... args);
  std::string* mutable_nested_string2();
  PROTOBUF_NODISCARD std::string* release_nested_string2();
  void set_allocated_nested_string2(std::string* value);

  private:
  const std::string& _internal_nested_string2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_string2(
      const std::string& value);
  std::string* _internal_mutable_nested_string2();

  public:
  // @@protoc_insertion_point(class_scope:tachidromos.tests.SingularMessage.NestedMessage2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      85, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SingularMessage_NestedMessage2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nested_string1_;
    ::google::protobuf::internal::ArenaStringPtr nested_string2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SingularMessage_NestedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.SingularMessage.NestedMessage) */ {
 public:
  inline SingularMessage_NestedMessage() : SingularMessage_NestedMessage(nullptr) {}
  ~SingularMessage_NestedMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SingularMessage_NestedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline SingularMessage_NestedMessage(const SingularMessage_NestedMessage& from) : SingularMessage_NestedMessage(nullptr, from) {}
  inline SingularMessage_NestedMessage(SingularMessage_NestedMessage&& from) noexcept
      : SingularMessage_NestedMessage(nullptr, std::move(from)) {}
  inline SingularMessage_NestedMessage& operator=(const SingularMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingularMessage_NestedMessage& operator=(SingularMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingularMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingularMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const SingularMessage_NestedMessage*>(
        &_SingularMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SingularMessage_NestedMessage& a, SingularMessage_NestedMessage& b) { a.Swap(&b); }
  inline void Swap(SingularMessage_NestedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingularMessage_NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingularMessage_NestedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SingularMessage_NestedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SingularMessage_NestedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SingularMessage_NestedMessage& from) { SingularMessage_NestedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SingularMessage_NestedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.SingularMessage.NestedMessage"; }

 protected:
  explicit SingularMessage_NestedMessage(::google::protobuf::Arena* arena);
  SingularMessage_NestedMessage(::google::protobuf::Arena* arena, const SingularMessage_NestedMessage& from);
  SingularMessage_NestedMessage(::google::protobuf::Arena* arena, SingularMessage_NestedMessage&& from) noexcept
      : SingularMessage_NestedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(nested_int())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string().c_str())), nested_string().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(nested_int()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string().c_str())));
      sizes_list.push_back(nested_string().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      sizes.push_back(end_addr - start_addr + sizeof(nested_int()));
      sizes.push_back(nested_string().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.nested_int_);
      ptrs.push_back(start_addr);
      // non-primitive field pointers + allocation
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_nested_string(std::move(tmp_str));
      }
      //std::string tmp_str1(sizes[idx++], 'x');  // Preallocate needed size
      //set_nested_string(std::move(tmp_str1));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(nested_string().c_str())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_nested_string(std::move(tmp_str));
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNestedStringFieldNumber = 1,
    kNestedIntFieldNumber = 2,
  };
  // string nested_string = 1;
  void clear_nested_string() ;
  const std::string& nested_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nested_string(Arg_&& arg, Args_... args);
  std::string* mutable_nested_string();
  PROTOBUF_NODISCARD std::string* release_nested_string();
  void set_allocated_nested_string(std::string* value);

  private:
  const std::string& _internal_nested_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_string(
      const std::string& value);
  std::string* _internal_mutable_nested_string();

  public:
  // int32 nested_int = 2;
  void clear_nested_int() ;
  ::int32_t nested_int() const;
  void set_nested_int(::int32_t value);

  private:
  ::int32_t _internal_nested_int() const;
  void _internal_set_nested_int(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tachidromos.tests.SingularMessage.NestedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      69, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SingularMessage_NestedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr nested_string_;
    ::int32_t nested_int_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class IntRepeatedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.IntRepeatedMessage) */ {
 public:
  inline IntRepeatedMessage() : IntRepeatedMessage(nullptr) {}
  ~IntRepeatedMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IntRepeatedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline IntRepeatedMessage(const IntRepeatedMessage& from) : IntRepeatedMessage(nullptr, from) {}
  inline IntRepeatedMessage(IntRepeatedMessage&& from) noexcept
      : IntRepeatedMessage(nullptr, std::move(from)) {}
  inline IntRepeatedMessage& operator=(const IntRepeatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntRepeatedMessage& operator=(IntRepeatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntRepeatedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntRepeatedMessage* internal_default_instance() {
    return reinterpret_cast<const IntRepeatedMessage*>(
        &_IntRepeatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(IntRepeatedMessage& a, IntRepeatedMessage& b) { a.Swap(&b); }
  inline void Swap(IntRepeatedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntRepeatedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntRepeatedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<IntRepeatedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntRepeatedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IntRepeatedMessage& from) { IntRepeatedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntRepeatedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.IntRepeatedMessage"; }

 protected:
  explicit IntRepeatedMessage(::google::protobuf::Arena* arena);
  IntRepeatedMessage(::google::protobuf::Arena* arena, const IntRepeatedMessage& from);
  IntRepeatedMessage(::google::protobuf::Arena* arena, IntRepeatedMessage&& from) noexcept
      : IntRepeatedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())), int_fields().size() * sizeof(::int32_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())));
      sizes_list.push_back(int_fields().size() * sizeof(::int32_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      sizes.push_back(0);
      sizes.push_back(int_fields().size() * sizeof(::int32_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      ptrs.push_back(nullptr);
      // non-primitive field pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      mutable_int_fields()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIntFieldsFieldNumber = 1,
  };
  // repeated int32 int_fields = 1;
  int int_fields_size() const;
  private:
  int _internal_int_fields_size() const;

  public:
  void clear_int_fields() ;
  ::int32_t int_fields(int index) const;
  void set_int_fields(int index, ::int32_t value);
  void add_int_fields(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& int_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_int_fields();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int_fields();

  public:
  // @@protoc_insertion_point(class_scope:tachidromos.tests.IntRepeatedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IntRepeatedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> int_fields_;
    mutable ::google::protobuf::internal::CachedSize _int_fields_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class SingularMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.SingularMessage) */ {
 public:
  inline SingularMessage() : SingularMessage(nullptr) {}
  ~SingularMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SingularMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline SingularMessage(const SingularMessage& from) : SingularMessage(nullptr, from) {}
  inline SingularMessage(SingularMessage&& from) noexcept
      : SingularMessage(nullptr, std::move(from)) {}
  inline SingularMessage& operator=(const SingularMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingularMessage& operator=(SingularMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingularMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingularMessage* internal_default_instance() {
    return reinterpret_cast<const SingularMessage*>(
        &_SingularMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SingularMessage& a, SingularMessage& b) { a.Swap(&b); }
  inline void Swap(SingularMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingularMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingularMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SingularMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SingularMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SingularMessage& from) { SingularMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SingularMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.SingularMessage"; }

 protected:
  explicit SingularMessage(::google::protobuf::Arena* arena);
  SingularMessage(::google::protobuf::Arena* arena, const SingularMessage& from);
  SingularMessage(::google::protobuf::Arena* arena, SingularMessage&& from) noexcept
      : SingularMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using NestedMessage = SingularMessage_NestedMessage;
  using NestedMessage2 = SingularMessage_NestedMessage2;
  using Status = SingularMessage_Status;
  static constexpr Status UNKNOWN = SingularMessage_Status_UNKNOWN;
  static constexpr Status ACTIVE = SingularMessage_Status_ACTIVE;
  static constexpr Status INACTIVE = SingularMessage_Status_INACTIVE;
  static constexpr Status DELETED = SingularMessage_Status_DELETED;
  static inline bool Status_IsValid(int value) {
    return SingularMessage_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = SingularMessage_Status_Status_MIN;
  static constexpr Status Status_MAX = SingularMessage_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = SingularMessage_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return SingularMessage_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return SingularMessage_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return SingularMessage_Status_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.long_field_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.whatever_bro_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(whatever_bro())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_string().c_str())), test_empty_string().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(string_field().c_str())), string_field().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_bytes().c_str())), test_empty_bytes().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_field().c_str())), bytes_field().size()));
      mutable_nested_message()->generate_schema(schema);
      mutable_nested_message2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.long_field_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.whatever_bro_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(whatever_bro()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_string().c_str())));
      sizes_list.push_back(test_empty_string().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_field().c_str())));
      sizes_list.push_back(string_field().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_bytes().c_str())));
      sizes_list.push_back(test_empty_bytes().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_field().c_str())));
      sizes_list.push_back(bytes_field().size());
      mutable_nested_message()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_nested_message2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.long_field_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.whatever_bro_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_string().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_field().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_bytes().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_field().c_str())));
      mutable_nested_message()->generate_scatter_ptrs(ptrs);
      mutable_nested_message2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.long_field_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.whatever_bro_);
      sizes.push_back(end_addr - start_addr + sizeof(whatever_bro()));
      sizes.push_back(test_empty_string().size());
      sizes.push_back(string_field().size());
      sizes.push_back(test_empty_bytes().size());
      sizes.push_back(bytes_field().size());
      mutable_nested_message()->generate_scatter_sizes(sizes);
      mutable_nested_message2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.long_field_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.whatever_bro_);
      ptrs.push_back(start_addr);
      // non-primitive field pointers + allocation
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_test_empty_string(std::move(tmp_str));
      }
      //std::string tmp_str1(sizes[idx++], 'x');  // Preallocate needed size
      //set_test_empty_string(std::move(tmp_str1));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_string().c_str())));
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_string_field(std::move(tmp_str));
      }
      //std::string tmp_str2(sizes[idx++], 'x');  // Preallocate needed size
      //set_string_field(std::move(tmp_str2));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_field().c_str())));
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_test_empty_bytes(std::move(tmp_str));
      }
      //std::string tmp_str3(sizes[idx++], 'x');  // Preallocate needed size
      //set_test_empty_bytes(std::move(tmp_str3));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(test_empty_bytes().c_str())));
      // allocate
      {
      std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
      set_bytes_field(std::move(tmp_str));
      }
      //std::string tmp_str4(sizes[idx++], 'x');  // Preallocate needed size
      //set_bytes_field(std::move(tmp_str4));
      // store pointer in the pointers list
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_field().c_str())));
      idx = mutable_nested_message()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_nested_message2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_test_empty_string(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_string_field(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_test_empty_bytes(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
        set_bytes_field(std::move(tmp_str));
      }
      idx = mutable_nested_message()->allocate_from_sizes(sizes, idx); 
      idx = mutable_nested_message2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTestEmptyStringFieldNumber = 14,
    kStringFieldFieldNumber = 15,
    kTestEmptyBytesFieldNumber = 16,
    kBytesFieldFieldNumber = 17,
    kNestedMessageFieldNumber = 19,
    kNestedMessage2FieldNumber = 20,
    kLongFieldFieldNumber = 2,
    kIntFieldFieldNumber = 1,
    kUintFieldFieldNumber = 3,
    kUlongFieldFieldNumber = 4,
    kSlongFieldFieldNumber = 6,
    kSintFieldFieldNumber = 5,
    kFixedFieldFieldNumber = 7,
    kLfixedFieldFieldNumber = 8,
    kSlfixedFieldFieldNumber = 10,
    kSfixedFieldFieldNumber = 9,
    kFloatFieldFieldNumber = 11,
    kDoubleFieldFieldNumber = 12,
    kBoolFieldFieldNumber = 13,
    kStatusFieldNumber = 18,
    kTestEmptyIntFieldNumber = 21,
    kWhateverBroFieldNumber = 22,
  };
  // string test_empty_string = 14;
  void clear_test_empty_string() ;
  const std::string& test_empty_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_empty_string(Arg_&& arg, Args_... args);
  std::string* mutable_test_empty_string();
  PROTOBUF_NODISCARD std::string* release_test_empty_string();
  void set_allocated_test_empty_string(std::string* value);

  private:
  const std::string& _internal_test_empty_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_empty_string(
      const std::string& value);
  std::string* _internal_mutable_test_empty_string();

  public:
  // string string_field = 15;
  void clear_string_field() ;
  const std::string& string_field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_field(Arg_&& arg, Args_... args);
  std::string* mutable_string_field();
  PROTOBUF_NODISCARD std::string* release_string_field();
  void set_allocated_string_field(std::string* value);

  private:
  const std::string& _internal_string_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_field(
      const std::string& value);
  std::string* _internal_mutable_string_field();

  public:
  // bytes test_empty_bytes = 16;
  void clear_test_empty_bytes() ;
  const std::string& test_empty_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_empty_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_test_empty_bytes();
  PROTOBUF_NODISCARD std::string* release_test_empty_bytes();
  void set_allocated_test_empty_bytes(std::string* value);

  private:
  const std::string& _internal_test_empty_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_empty_bytes(
      const std::string& value);
  std::string* _internal_mutable_test_empty_bytes();

  public:
  // bytes bytes_field = 17;
  void clear_bytes_field() ;
  const std::string& bytes_field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes_field(Arg_&& arg, Args_... args);
  std::string* mutable_bytes_field();
  PROTOBUF_NODISCARD std::string* release_bytes_field();
  void set_allocated_bytes_field(std::string* value);

  private:
  const std::string& _internal_bytes_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_field(
      const std::string& value);
  std::string* _internal_mutable_bytes_field();

  public:
  // .tachidromos.tests.SingularMessage.NestedMessage nested_message = 19;
  bool has_nested_message() const;
  void clear_nested_message() ;
  const ::tachidromos::tests::SingularMessage_NestedMessage& nested_message() const;
  PROTOBUF_NODISCARD ::tachidromos::tests::SingularMessage_NestedMessage* release_nested_message();
  ::tachidromos::tests::SingularMessage_NestedMessage* mutable_nested_message();
  void set_allocated_nested_message(::tachidromos::tests::SingularMessage_NestedMessage* value);
  void unsafe_arena_set_allocated_nested_message(::tachidromos::tests::SingularMessage_NestedMessage* value);
  ::tachidromos::tests::SingularMessage_NestedMessage* unsafe_arena_release_nested_message();

  private:
  const ::tachidromos::tests::SingularMessage_NestedMessage& _internal_nested_message() const;
  ::tachidromos::tests::SingularMessage_NestedMessage* _internal_mutable_nested_message();

  public:
  // .tachidromos.tests.SingularMessage.NestedMessage2 nested_message2 = 20;
  bool has_nested_message2() const;
  void clear_nested_message2() ;
  const ::tachidromos::tests::SingularMessage_NestedMessage2& nested_message2() const;
  PROTOBUF_NODISCARD ::tachidromos::tests::SingularMessage_NestedMessage2* release_nested_message2();
  ::tachidromos::tests::SingularMessage_NestedMessage2* mutable_nested_message2();
  void set_allocated_nested_message2(::tachidromos::tests::SingularMessage_NestedMessage2* value);
  void unsafe_arena_set_allocated_nested_message2(::tachidromos::tests::SingularMessage_NestedMessage2* value);
  ::tachidromos::tests::SingularMessage_NestedMessage2* unsafe_arena_release_nested_message2();

  private:
  const ::tachidromos::tests::SingularMessage_NestedMessage2& _internal_nested_message2() const;
  ::tachidromos::tests::SingularMessage_NestedMessage2* _internal_mutable_nested_message2();

  public:
  // int64 long_field = 2;
  void clear_long_field() ;
  ::int64_t long_field() const;
  void set_long_field(::int64_t value);

  private:
  ::int64_t _internal_long_field() const;
  void _internal_set_long_field(::int64_t value);

  public:
  // int32 int_field = 1;
  void clear_int_field() ;
  ::int32_t int_field() const;
  void set_int_field(::int32_t value);

  private:
  ::int32_t _internal_int_field() const;
  void _internal_set_int_field(::int32_t value);

  public:
  // uint32 uint_field = 3;
  void clear_uint_field() ;
  ::uint32_t uint_field() const;
  void set_uint_field(::uint32_t value);

  private:
  ::uint32_t _internal_uint_field() const;
  void _internal_set_uint_field(::uint32_t value);

  public:
  // uint64 ulong_field = 4;
  void clear_ulong_field() ;
  ::uint64_t ulong_field() const;
  void set_ulong_field(::uint64_t value);

  private:
  ::uint64_t _internal_ulong_field() const;
  void _internal_set_ulong_field(::uint64_t value);

  public:
  // sint64 slong_field = 6;
  void clear_slong_field() ;
  ::int64_t slong_field() const;
  void set_slong_field(::int64_t value);

  private:
  ::int64_t _internal_slong_field() const;
  void _internal_set_slong_field(::int64_t value);

  public:
  // sint32 sint_field = 5;
  void clear_sint_field() ;
  ::int32_t sint_field() const;
  void set_sint_field(::int32_t value);

  private:
  ::int32_t _internal_sint_field() const;
  void _internal_set_sint_field(::int32_t value);

  public:
  // fixed32 fixed_field = 7;
  void clear_fixed_field() ;
  ::uint32_t fixed_field() const;
  void set_fixed_field(::uint32_t value);

  private:
  ::uint32_t _internal_fixed_field() const;
  void _internal_set_fixed_field(::uint32_t value);

  public:
  // fixed64 lfixed_field = 8;
  void clear_lfixed_field() ;
  ::uint64_t lfixed_field() const;
  void set_lfixed_field(::uint64_t value);

  private:
  ::uint64_t _internal_lfixed_field() const;
  void _internal_set_lfixed_field(::uint64_t value);

  public:
  // sfixed64 slfixed_field = 10;
  void clear_slfixed_field() ;
  ::int64_t slfixed_field() const;
  void set_slfixed_field(::int64_t value);

  private:
  ::int64_t _internal_slfixed_field() const;
  void _internal_set_slfixed_field(::int64_t value);

  public:
  // sfixed32 sfixed_field = 9;
  void clear_sfixed_field() ;
  ::int32_t sfixed_field() const;
  void set_sfixed_field(::int32_t value);

  private:
  ::int32_t _internal_sfixed_field() const;
  void _internal_set_sfixed_field(::int32_t value);

  public:
  // float float_field = 11;
  void clear_float_field() ;
  float float_field() const;
  void set_float_field(float value);

  private:
  float _internal_float_field() const;
  void _internal_set_float_field(float value);

  public:
  // double double_field = 12;
  void clear_double_field() ;
  double double_field() const;
  void set_double_field(double value);

  private:
  double _internal_double_field() const;
  void _internal_set_double_field(double value);

  public:
  // bool bool_field = 13;
  void clear_bool_field() ;
  bool bool_field() const;
  void set_bool_field(bool value);

  private:
  bool _internal_bool_field() const;
  void _internal_set_bool_field(bool value);

  public:
  // .tachidromos.tests.SingularMessage.Status status = 18;
  void clear_status() ;
  ::tachidromos::tests::SingularMessage_Status status() const;
  void set_status(::tachidromos::tests::SingularMessage_Status value);

  private:
  ::tachidromos::tests::SingularMessage_Status _internal_status() const;
  void _internal_set_status(::tachidromos::tests::SingularMessage_Status value);

  public:
  // int32 test_empty_int = 21;
  void clear_test_empty_int() ;
  ::int32_t test_empty_int() const;
  void set_test_empty_int(::int32_t value);

  private:
  ::int32_t _internal_test_empty_int() const;
  void _internal_set_test_empty_int(::int32_t value);

  public:
  // int32 whatever_bro = 22;
  void clear_whatever_bro() ;
  ::int32_t whatever_bro() const;
  void set_whatever_bro(::int32_t value);

  private:
  ::int32_t _internal_whatever_bro() const;
  void _internal_set_whatever_bro(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tachidromos.tests.SingularMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 22, 2,
      87, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SingularMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr test_empty_string_;
    ::google::protobuf::internal::ArenaStringPtr string_field_;
    ::google::protobuf::internal::ArenaStringPtr test_empty_bytes_;
    ::google::protobuf::internal::ArenaStringPtr bytes_field_;
    ::tachidromos::tests::SingularMessage_NestedMessage* nested_message_;
    ::tachidromos::tests::SingularMessage_NestedMessage2* nested_message2_;
    ::int64_t long_field_;
    ::int32_t int_field_;
    ::uint32_t uint_field_;
    ::uint64_t ulong_field_;
    ::int64_t slong_field_;
    ::int32_t sint_field_;
    ::uint32_t fixed_field_;
    ::uint64_t lfixed_field_;
    ::int64_t slfixed_field_;
    ::int32_t sfixed_field_;
    float float_field_;
    double double_field_;
    bool bool_field_;
    int status_;
    ::int32_t test_empty_int_;
    ::int32_t whatever_bro_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class RepeatedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.RepeatedMessage) */ {
 public:
  inline RepeatedMessage() : RepeatedMessage(nullptr) {}
  ~RepeatedMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RepeatedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline RepeatedMessage(const RepeatedMessage& from) : RepeatedMessage(nullptr, from) {}
  inline RepeatedMessage(RepeatedMessage&& from) noexcept
      : RepeatedMessage(nullptr, std::move(from)) {}
  inline RepeatedMessage& operator=(const RepeatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedMessage& operator=(RepeatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedMessage* internal_default_instance() {
    return reinterpret_cast<const RepeatedMessage*>(
        &_RepeatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RepeatedMessage& a, RepeatedMessage& b) { a.Swap(&b); }
  inline void Swap(RepeatedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RepeatedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RepeatedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RepeatedMessage& from) { RepeatedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RepeatedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.RepeatedMessage"; }

 protected:
  explicit RepeatedMessage(::google::protobuf::Arena* arena);
  RepeatedMessage(::google::protobuf::Arena* arena, const RepeatedMessage& from);
  RepeatedMessage(::google::protobuf::Arena* arena, RepeatedMessage&& from) noexcept
      : RepeatedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())), int_fields().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(long_fields().data())), long_fields().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(uint_fields().data())), uint_fields().size() * sizeof(::uint32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(ulong_fields().data())), ulong_fields().size() * sizeof(::uint64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sint_fields().data())), sint_fields().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slong_fields().data())), slong_fields().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(fixed_fields().data())), fixed_fields().size() * sizeof(::uint32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(lfixed_fields().data())), lfixed_fields().size() * sizeof(::uint64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sfixed_fields().data())), sfixed_fields().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slfixed_fields().data())), slfixed_fields().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(float_fields().data())), float_fields().size() * sizeof(float)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<double*>(double_fields().data())), double_fields().size() * sizeof(double)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<bool*>(bool_fields().data())), bool_fields().size() * sizeof(bool)));
      for (int i = 0; i < string_fields_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).data())), string_fields(i).size()));
      }
      for (int i = 0; i < bytes_fields_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_fields(i).data())), bytes_fields(i).size()));
      }
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())));
      sizes_list.push_back(int_fields().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(long_fields().data())));
      sizes_list.push_back(long_fields().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(uint_fields().data())));
      sizes_list.push_back(uint_fields().size() * sizeof(::uint32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(ulong_fields().data())));
      sizes_list.push_back(ulong_fields().size() * sizeof(::uint64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sint_fields().data())));
      sizes_list.push_back(sint_fields().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slong_fields().data())));
      sizes_list.push_back(slong_fields().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(fixed_fields().data())));
      sizes_list.push_back(fixed_fields().size() * sizeof(::uint32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(lfixed_fields().data())));
      sizes_list.push_back(lfixed_fields().size() * sizeof(::uint64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sfixed_fields().data())));
      sizes_list.push_back(sfixed_fields().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slfixed_fields().data())));
      sizes_list.push_back(slfixed_fields().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(float_fields().data())));
      sizes_list.push_back(float_fields().size() * sizeof(float));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<double*>(double_fields().data())));
      sizes_list.push_back(double_fields().size() * sizeof(double));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<bool*>(bool_fields().data())));
      sizes_list.push_back(bool_fields().size() * sizeof(bool));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(string_fields().size());
      for (int i = 0; i < string_fields_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).c_str())));
        sizes_list.push_back(string_fields(i).size());
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(bytes_fields().size());
      for (int i = 0; i < bytes_fields_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_fields(i).c_str())));
        sizes_list.push_back(bytes_fields(i).size());
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(nested_messages().size());
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(int_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(long_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(uint_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(ulong_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sint_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slong_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(fixed_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(lfixed_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(sfixed_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(slfixed_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(float_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<double*>(double_fields().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<bool*>(bool_fields().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < string_fields_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(string_fields(i).c_str())));
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < bytes_fields_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(bytes_fields(i).c_str())));
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      sizes.push_back(0);
      sizes.push_back(int_fields().size() * sizeof(::int32_t));
      sizes.push_back(long_fields().size() * sizeof(::int64_t));
      sizes.push_back(uint_fields().size() * sizeof(::uint32_t));
      sizes.push_back(ulong_fields().size() * sizeof(::uint64_t));
      sizes.push_back(sint_fields().size() * sizeof(::int32_t));
      sizes.push_back(slong_fields().size() * sizeof(::int64_t));
      sizes.push_back(fixed_fields().size() * sizeof(::uint32_t));
      sizes.push_back(lfixed_fields().size() * sizeof(::uint64_t));
      sizes.push_back(sfixed_fields().size() * sizeof(::int32_t));
      sizes.push_back(slfixed_fields().size() * sizeof(::int64_t));
      sizes.push_back(float_fields().size() * sizeof(float));
      sizes.push_back(double_fields().size() * sizeof(double));
      sizes.push_back(bool_fields().size() * sizeof(bool));
      sizes.push_back(string_fields().size());
      for (int i = 0; i < string_fields_size(); ++i) {
        sizes.push_back(string_fields(i).size());
      }
      sizes.push_back(bytes_fields().size());
      for (int i = 0; i < bytes_fields_size(); ++i) {
        sizes.push_back(bytes_fields(i).size());
      }
      sizes.push_back(nested_messages().size());
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      ptrs.push_back(nullptr);
      // non-primitive field pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      mutable_int_fields()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_long_fields()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_uint_fields()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      mutable_ulong_fields()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      mutable_sint_fields()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_slong_fields()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_fixed_fields()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      mutable_lfixed_fields()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      mutable_sfixed_fields()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_slfixed_fields()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_float_fields()->Resize(sizes[idx++] / sizeof(float), 0);
      mutable_double_fields()->Resize(sizes[idx++] / sizeof(double), 0);
      mutable_bool_fields()->Resize(sizes[idx++] / sizeof(bool), 0);
      size_t num_string_fields_entries = sizes[idx++];
      for (size_t i = 0; i < num_string_fields_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_string_fields(std::move(tmp_str));
      }
      size_t num_bytes_fields_entries = sizes[idx++];
      for (size_t i = 0; i < num_bytes_fields_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_bytes_fields(std::move(tmp_str));
      }
      size_t num_nested_messages_entries = sizes[idx++];
      for (size_t i = 0; i < num_nested_messages_entries; ++i) {
        auto* new_msg = add_nested_messages();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_nested_messages(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kIntFieldsFieldNumber = 1,
    kLongFieldsFieldNumber = 2,
    kUintFieldsFieldNumber = 3,
    kUlongFieldsFieldNumber = 4,
    kSintFieldsFieldNumber = 5,
    kSlongFieldsFieldNumber = 6,
    kFixedFieldsFieldNumber = 7,
    kLfixedFieldsFieldNumber = 8,
    kSfixedFieldsFieldNumber = 9,
    kSlfixedFieldsFieldNumber = 10,
    kFloatFieldsFieldNumber = 11,
    kDoubleFieldsFieldNumber = 12,
    kBoolFieldsFieldNumber = 13,
    kStringFieldsFieldNumber = 14,
    kBytesFieldsFieldNumber = 15,
    kNestedMessagesFieldNumber = 16,
  };
  // repeated int32 int_fields = 1;
  int int_fields_size() const;
  private:
  int _internal_int_fields_size() const;

  public:
  void clear_int_fields() ;
  ::int32_t int_fields(int index) const;
  void set_int_fields(int index, ::int32_t value);
  void add_int_fields(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& int_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_int_fields();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int_fields();

  public:
  // repeated int64 long_fields = 2;
  int long_fields_size() const;
  private:
  int _internal_long_fields_size() const;

  public:
  void clear_long_fields() ;
  ::int64_t long_fields(int index) const;
  void set_long_fields(int index, ::int64_t value);
  void add_long_fields(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& long_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_long_fields();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_long_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_long_fields();

  public:
  // repeated uint32 uint_fields = 3;
  int uint_fields_size() const;
  private:
  int _internal_uint_fields_size() const;

  public:
  void clear_uint_fields() ;
  ::uint32_t uint_fields(int index) const;
  void set_uint_fields(int index, ::uint32_t value);
  void add_uint_fields(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& uint_fields() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_uint_fields();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_uint_fields() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_uint_fields();

  public:
  // repeated uint64 ulong_fields = 4;
  int ulong_fields_size() const;
  private:
  int _internal_ulong_fields_size() const;

  public:
  void clear_ulong_fields() ;
  ::uint64_t ulong_fields(int index) const;
  void set_ulong_fields(int index, ::uint64_t value);
  void add_ulong_fields(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& ulong_fields() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_ulong_fields();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_ulong_fields() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_ulong_fields();

  public:
  // repeated sint32 sint_fields = 5;
  int sint_fields_size() const;
  private:
  int _internal_sint_fields_size() const;

  public:
  void clear_sint_fields() ;
  ::int32_t sint_fields(int index) const;
  void set_sint_fields(int index, ::int32_t value);
  void add_sint_fields(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& sint_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_sint_fields();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_sint_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_sint_fields();

  public:
  // repeated sint64 slong_fields = 6;
  int slong_fields_size() const;
  private:
  int _internal_slong_fields_size() const;

  public:
  void clear_slong_fields() ;
  ::int64_t slong_fields(int index) const;
  void set_slong_fields(int index, ::int64_t value);
  void add_slong_fields(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& slong_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_slong_fields();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_slong_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_slong_fields();

  public:
  // repeated fixed32 fixed_fields = 7;
  int fixed_fields_size() const;
  private:
  int _internal_fixed_fields_size() const;

  public:
  void clear_fixed_fields() ;
  ::uint32_t fixed_fields(int index) const;
  void set_fixed_fields(int index, ::uint32_t value);
  void add_fixed_fields(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& fixed_fields() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_fixed_fields();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_fixed_fields() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_fixed_fields();

  public:
  // repeated fixed64 lfixed_fields = 8;
  int lfixed_fields_size() const;
  private:
  int _internal_lfixed_fields_size() const;

  public:
  void clear_lfixed_fields() ;
  ::uint64_t lfixed_fields(int index) const;
  void set_lfixed_fields(int index, ::uint64_t value);
  void add_lfixed_fields(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& lfixed_fields() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_lfixed_fields();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_lfixed_fields() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_lfixed_fields();

  public:
  // repeated sfixed32 sfixed_fields = 9;
  int sfixed_fields_size() const;
  private:
  int _internal_sfixed_fields_size() const;

  public:
  void clear_sfixed_fields() ;
  ::int32_t sfixed_fields(int index) const;
  void set_sfixed_fields(int index, ::int32_t value);
  void add_sfixed_fields(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& sfixed_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_sfixed_fields();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_sfixed_fields() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_sfixed_fields();

  public:
  // repeated sfixed64 slfixed_fields = 10;
  int slfixed_fields_size() const;
  private:
  int _internal_slfixed_fields_size() const;

  public:
  void clear_slfixed_fields() ;
  ::int64_t slfixed_fields(int index) const;
  void set_slfixed_fields(int index, ::int64_t value);
  void add_slfixed_fields(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& slfixed_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_slfixed_fields();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_slfixed_fields() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_slfixed_fields();

  public:
  // repeated float float_fields = 11;
  int float_fields_size() const;
  private:
  int _internal_float_fields_size() const;

  public:
  void clear_float_fields() ;
  float float_fields(int index) const;
  void set_float_fields(int index, float value);
  void add_float_fields(float value);
  const ::google::protobuf::RepeatedField<float>& float_fields() const;
  ::google::protobuf::RepeatedField<float>* mutable_float_fields();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_float_fields() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_float_fields();

  public:
  // repeated double double_fields = 12;
  int double_fields_size() const;
  private:
  int _internal_double_fields_size() const;

  public:
  void clear_double_fields() ;
  double double_fields(int index) const;
  void set_double_fields(int index, double value);
  void add_double_fields(double value);
  const ::google::protobuf::RepeatedField<double>& double_fields() const;
  ::google::protobuf::RepeatedField<double>* mutable_double_fields();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_double_fields() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_double_fields();

  public:
  // repeated bool bool_fields = 13;
  int bool_fields_size() const;
  private:
  int _internal_bool_fields_size() const;

  public:
  void clear_bool_fields() ;
  bool bool_fields(int index) const;
  void set_bool_fields(int index, bool value);
  void add_bool_fields(bool value);
  const ::google::protobuf::RepeatedField<bool>& bool_fields() const;
  ::google::protobuf::RepeatedField<bool>* mutable_bool_fields();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_bool_fields() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_bool_fields();

  public:
  // repeated string string_fields = 14;
  int string_fields_size() const;
  private:
  int _internal_string_fields_size() const;

  public:
  void clear_string_fields() ;
  const std::string& string_fields(int index) const;
  std::string* mutable_string_fields(int index);
  void set_string_fields(int index, const std::string& value);
  void set_string_fields(int index, std::string&& value);
  void set_string_fields(int index, const char* value);
  void set_string_fields(int index, const char* value, std::size_t size);
  void set_string_fields(int index, absl::string_view value);
  std::string* add_string_fields();
  void add_string_fields(const std::string& value);
  void add_string_fields(std::string&& value);
  void add_string_fields(const char* value);
  void add_string_fields(const char* value, std::size_t size);
  void add_string_fields(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& string_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_fields();

  public:
  // repeated bytes bytes_fields = 15;
  int bytes_fields_size() const;
  private:
  int _internal_bytes_fields_size() const;

  public:
  void clear_bytes_fields() ;
  const std::string& bytes_fields(int index) const;
  std::string* mutable_bytes_fields(int index);
  void set_bytes_fields(int index, const std::string& value);
  void set_bytes_fields(int index, std::string&& value);
  void set_bytes_fields(int index, const char* value);
  void set_bytes_fields(int index, const void* value, std::size_t size);
  void set_bytes_fields(int index, absl::string_view value);
  std::string* add_bytes_fields();
  void add_bytes_fields(const std::string& value);
  void add_bytes_fields(std::string&& value);
  void add_bytes_fields(const char* value);
  void add_bytes_fields(const void* value, std::size_t size);
  void add_bytes_fields(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& bytes_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bytes_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bytes_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bytes_fields();

  public:
  // repeated .tachidromos.tests.SingularMessage.NestedMessage nested_messages = 16;
  int nested_messages_size() const;
  private:
  int _internal_nested_messages_size() const;

  public:
  void clear_nested_messages() ;
  ::tachidromos::tests::SingularMessage_NestedMessage* mutable_nested_messages(int index);
  ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* mutable_nested_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& _internal_nested_messages() const;
  ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* _internal_mutable_nested_messages();
  public:
  const ::tachidromos::tests::SingularMessage_NestedMessage& nested_messages(int index) const;
  ::tachidromos::tests::SingularMessage_NestedMessage* add_nested_messages();
  const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& nested_messages() const;
  // @@protoc_insertion_point(class_scope:tachidromos.tests.RepeatedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 1,
      71, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RepeatedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> int_fields_;
    mutable ::google::protobuf::internal::CachedSize _int_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> long_fields_;
    mutable ::google::protobuf::internal::CachedSize _long_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> uint_fields_;
    mutable ::google::protobuf::internal::CachedSize _uint_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint64_t> ulong_fields_;
    mutable ::google::protobuf::internal::CachedSize _ulong_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> sint_fields_;
    mutable ::google::protobuf::internal::CachedSize _sint_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> slong_fields_;
    mutable ::google::protobuf::internal::CachedSize _slong_fields_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> fixed_fields_;
    ::google::protobuf::RepeatedField<::uint64_t> lfixed_fields_;
    ::google::protobuf::RepeatedField<::int32_t> sfixed_fields_;
    ::google::protobuf::RepeatedField<::int64_t> slfixed_fields_;
    ::google::protobuf::RepeatedField<float> float_fields_;
    ::google::protobuf::RepeatedField<double> double_fields_;
    ::google::protobuf::RepeatedField<bool> bool_fields_;
    ::google::protobuf::RepeatedPtrField<std::string> string_fields_;
    ::google::protobuf::RepeatedPtrField<std::string> bytes_fields_;
    ::google::protobuf::RepeatedPtrField< ::tachidromos::tests::SingularMessage_NestedMessage > nested_messages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class NestedRepeatedMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tachidromos.tests.NestedRepeatedMessage) */ {
 public:
  inline NestedRepeatedMessage() : NestedRepeatedMessage(nullptr) {}
  ~NestedRepeatedMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NestedRepeatedMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline NestedRepeatedMessage(const NestedRepeatedMessage& from) : NestedRepeatedMessage(nullptr, from) {}
  inline NestedRepeatedMessage(NestedRepeatedMessage&& from) noexcept
      : NestedRepeatedMessage(nullptr, std::move(from)) {}
  inline NestedRepeatedMessage& operator=(const NestedRepeatedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NestedRepeatedMessage& operator=(NestedRepeatedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NestedRepeatedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NestedRepeatedMessage* internal_default_instance() {
    return reinterpret_cast<const NestedRepeatedMessage*>(
        &_NestedRepeatedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(NestedRepeatedMessage& a, NestedRepeatedMessage& b) { a.Swap(&b); }
  inline void Swap(NestedRepeatedMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NestedRepeatedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NestedRepeatedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NestedRepeatedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NestedRepeatedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NestedRepeatedMessage& from) { NestedRepeatedMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NestedRepeatedMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tachidromos.tests.NestedRepeatedMessage"; }

 protected:
  explicit NestedRepeatedMessage(::google::protobuf::Arena* arena);
  NestedRepeatedMessage(::google::protobuf::Arena* arena, const NestedRepeatedMessage& from);
  NestedRepeatedMessage(::google::protobuf::Arena* arena, NestedRepeatedMessage&& from) noexcept
      : NestedRepeatedMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(nested_messages().size());
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      sizes.push_back(0);
      sizes.push_back(nested_messages().size());
      for (int i = 0; i < nested_messages_size(); ++i) {
        mutable_nested_messages(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      // only primitive field pointers
      ptrs.push_back(nullptr);
      // non-primitive field pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      idx++;
      size_t num_nested_messages_entries = sizes[idx++];
      for (size_t i = 0; i < num_nested_messages_entries; ++i) {
        auto* new_msg = add_nested_messages();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_nested_messages(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNestedMessagesFieldNumber = 1,
  };
  // repeated .tachidromos.tests.SingularMessage.NestedMessage nested_messages = 1;
  int nested_messages_size() const;
  private:
  int _internal_nested_messages_size() const;

  public:
  void clear_nested_messages() ;
  ::tachidromos::tests::SingularMessage_NestedMessage* mutable_nested_messages(int index);
  ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* mutable_nested_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& _internal_nested_messages() const;
  ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* _internal_mutable_nested_messages();
  public:
  const ::tachidromos::tests::SingularMessage_NestedMessage& nested_messages(int index) const;
  ::tachidromos::tests::SingularMessage_NestedMessage* add_nested_messages();
  const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& nested_messages() const;
  // @@protoc_insertion_point(class_scope:tachidromos.tests.NestedRepeatedMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_NestedRepeatedMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::tachidromos::tests::SingularMessage_NestedMessage > nested_messages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SingularMessage_NestedMessage

// string nested_string = 1;
inline void SingularMessage_NestedMessage::clear_nested_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string_.ClearToEmpty();
}
inline const std::string& SingularMessage_NestedMessage::nested_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.NestedMessage.nested_string)
  return _internal_nested_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage_NestedMessage::set_nested_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.NestedMessage.nested_string)
}
inline std::string* SingularMessage_NestedMessage::mutable_nested_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nested_string();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.NestedMessage.nested_string)
  return _s;
}
inline const std::string& SingularMessage_NestedMessage::_internal_nested_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_string_.Get();
}
inline void SingularMessage_NestedMessage::_internal_set_nested_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string_.Set(value, GetArena());
}
inline std::string* SingularMessage_NestedMessage::_internal_mutable_nested_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nested_string_.Mutable( GetArena());
}
inline std::string* SingularMessage_NestedMessage::release_nested_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.NestedMessage.nested_string)
  return _impl_.nested_string_.Release();
}
inline void SingularMessage_NestedMessage::set_allocated_nested_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nested_string_.IsDefault()) {
          _impl_.nested_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.NestedMessage.nested_string)
}

// int32 nested_int = 2;
inline void SingularMessage_NestedMessage::clear_nested_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_int_ = 0;
}
inline ::int32_t SingularMessage_NestedMessage::nested_int() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.NestedMessage.nested_int)
  return _internal_nested_int();
}
inline void SingularMessage_NestedMessage::set_nested_int(::int32_t value) {
  _internal_set_nested_int(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.NestedMessage.nested_int)
}
inline ::int32_t SingularMessage_NestedMessage::_internal_nested_int() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_int_;
}
inline void SingularMessage_NestedMessage::_internal_set_nested_int(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_int_ = value;
}

// -------------------------------------------------------------------

// SingularMessage_NestedMessage2

// string nested_string1 = 1;
inline void SingularMessage_NestedMessage2::clear_nested_string1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string1_.ClearToEmpty();
}
inline const std::string& SingularMessage_NestedMessage2::nested_string1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.NestedMessage2.nested_string1)
  return _internal_nested_string1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage_NestedMessage2::set_nested_string1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.NestedMessage2.nested_string1)
}
inline std::string* SingularMessage_NestedMessage2::mutable_nested_string1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nested_string1();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.NestedMessage2.nested_string1)
  return _s;
}
inline const std::string& SingularMessage_NestedMessage2::_internal_nested_string1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_string1_.Get();
}
inline void SingularMessage_NestedMessage2::_internal_set_nested_string1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string1_.Set(value, GetArena());
}
inline std::string* SingularMessage_NestedMessage2::_internal_mutable_nested_string1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nested_string1_.Mutable( GetArena());
}
inline std::string* SingularMessage_NestedMessage2::release_nested_string1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.NestedMessage2.nested_string1)
  return _impl_.nested_string1_.Release();
}
inline void SingularMessage_NestedMessage2::set_allocated_nested_string1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nested_string1_.IsDefault()) {
          _impl_.nested_string1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.NestedMessage2.nested_string1)
}

// string nested_string2 = 2;
inline void SingularMessage_NestedMessage2::clear_nested_string2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string2_.ClearToEmpty();
}
inline const std::string& SingularMessage_NestedMessage2::nested_string2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.NestedMessage2.nested_string2)
  return _internal_nested_string2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage_NestedMessage2::set_nested_string2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.NestedMessage2.nested_string2)
}
inline std::string* SingularMessage_NestedMessage2::mutable_nested_string2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nested_string2();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.NestedMessage2.nested_string2)
  return _s;
}
inline const std::string& SingularMessage_NestedMessage2::_internal_nested_string2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_string2_.Get();
}
inline void SingularMessage_NestedMessage2::_internal_set_nested_string2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string2_.Set(value, GetArena());
}
inline std::string* SingularMessage_NestedMessage2::_internal_mutable_nested_string2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nested_string2_.Mutable( GetArena());
}
inline std::string* SingularMessage_NestedMessage2::release_nested_string2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.NestedMessage2.nested_string2)
  return _impl_.nested_string2_.Release();
}
inline void SingularMessage_NestedMessage2::set_allocated_nested_string2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_string2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nested_string2_.IsDefault()) {
          _impl_.nested_string2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.NestedMessage2.nested_string2)
}

// -------------------------------------------------------------------

// SingularMessage

// int32 int_field = 1;
inline void SingularMessage::clear_int_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_field_ = 0;
}
inline ::int32_t SingularMessage::int_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.int_field)
  return _internal_int_field();
}
inline void SingularMessage::set_int_field(::int32_t value) {
  _internal_set_int_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.int_field)
}
inline ::int32_t SingularMessage::_internal_int_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_field_;
}
inline void SingularMessage::_internal_set_int_field(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_field_ = value;
}

// int64 long_field = 2;
inline void SingularMessage::clear_long_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_field_ = ::int64_t{0};
}
inline ::int64_t SingularMessage::long_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.long_field)
  return _internal_long_field();
}
inline void SingularMessage::set_long_field(::int64_t value) {
  _internal_set_long_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.long_field)
}
inline ::int64_t SingularMessage::_internal_long_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long_field_;
}
inline void SingularMessage::_internal_set_long_field(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_field_ = value;
}

// uint32 uint_field = 3;
inline void SingularMessage::clear_uint_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint_field_ = 0u;
}
inline ::uint32_t SingularMessage::uint_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.uint_field)
  return _internal_uint_field();
}
inline void SingularMessage::set_uint_field(::uint32_t value) {
  _internal_set_uint_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.uint_field)
}
inline ::uint32_t SingularMessage::_internal_uint_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint_field_;
}
inline void SingularMessage::_internal_set_uint_field(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint_field_ = value;
}

// uint64 ulong_field = 4;
inline void SingularMessage::clear_ulong_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ulong_field_ = ::uint64_t{0u};
}
inline ::uint64_t SingularMessage::ulong_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.ulong_field)
  return _internal_ulong_field();
}
inline void SingularMessage::set_ulong_field(::uint64_t value) {
  _internal_set_ulong_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.ulong_field)
}
inline ::uint64_t SingularMessage::_internal_ulong_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ulong_field_;
}
inline void SingularMessage::_internal_set_ulong_field(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ulong_field_ = value;
}

// sint32 sint_field = 5;
inline void SingularMessage::clear_sint_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sint_field_ = 0;
}
inline ::int32_t SingularMessage::sint_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.sint_field)
  return _internal_sint_field();
}
inline void SingularMessage::set_sint_field(::int32_t value) {
  _internal_set_sint_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.sint_field)
}
inline ::int32_t SingularMessage::_internal_sint_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sint_field_;
}
inline void SingularMessage::_internal_set_sint_field(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sint_field_ = value;
}

// sint64 slong_field = 6;
inline void SingularMessage::clear_slong_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slong_field_ = ::int64_t{0};
}
inline ::int64_t SingularMessage::slong_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.slong_field)
  return _internal_slong_field();
}
inline void SingularMessage::set_slong_field(::int64_t value) {
  _internal_set_slong_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.slong_field)
}
inline ::int64_t SingularMessage::_internal_slong_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slong_field_;
}
inline void SingularMessage::_internal_set_slong_field(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slong_field_ = value;
}

// fixed32 fixed_field = 7;
inline void SingularMessage::clear_fixed_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_field_ = 0u;
}
inline ::uint32_t SingularMessage::fixed_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.fixed_field)
  return _internal_fixed_field();
}
inline void SingularMessage::set_fixed_field(::uint32_t value) {
  _internal_set_fixed_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.fixed_field)
}
inline ::uint32_t SingularMessage::_internal_fixed_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fixed_field_;
}
inline void SingularMessage::_internal_set_fixed_field(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_field_ = value;
}

// fixed64 lfixed_field = 8;
inline void SingularMessage::clear_lfixed_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lfixed_field_ = ::uint64_t{0u};
}
inline ::uint64_t SingularMessage::lfixed_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.lfixed_field)
  return _internal_lfixed_field();
}
inline void SingularMessage::set_lfixed_field(::uint64_t value) {
  _internal_set_lfixed_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.lfixed_field)
}
inline ::uint64_t SingularMessage::_internal_lfixed_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lfixed_field_;
}
inline void SingularMessage::_internal_set_lfixed_field(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lfixed_field_ = value;
}

// sfixed32 sfixed_field = 9;
inline void SingularMessage::clear_sfixed_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sfixed_field_ = 0;
}
inline ::int32_t SingularMessage::sfixed_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.sfixed_field)
  return _internal_sfixed_field();
}
inline void SingularMessage::set_sfixed_field(::int32_t value) {
  _internal_set_sfixed_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.sfixed_field)
}
inline ::int32_t SingularMessage::_internal_sfixed_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sfixed_field_;
}
inline void SingularMessage::_internal_set_sfixed_field(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sfixed_field_ = value;
}

// sfixed64 slfixed_field = 10;
inline void SingularMessage::clear_slfixed_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slfixed_field_ = ::int64_t{0};
}
inline ::int64_t SingularMessage::slfixed_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.slfixed_field)
  return _internal_slfixed_field();
}
inline void SingularMessage::set_slfixed_field(::int64_t value) {
  _internal_set_slfixed_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.slfixed_field)
}
inline ::int64_t SingularMessage::_internal_slfixed_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slfixed_field_;
}
inline void SingularMessage::_internal_set_slfixed_field(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slfixed_field_ = value;
}

// float float_field = 11;
inline void SingularMessage::clear_float_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_field_ = 0;
}
inline float SingularMessage::float_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.float_field)
  return _internal_float_field();
}
inline void SingularMessage::set_float_field(float value) {
  _internal_set_float_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.float_field)
}
inline float SingularMessage::_internal_float_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_field_;
}
inline void SingularMessage::_internal_set_float_field(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_field_ = value;
}

// double double_field = 12;
inline void SingularMessage::clear_double_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.double_field_ = 0;
}
inline double SingularMessage::double_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.double_field)
  return _internal_double_field();
}
inline void SingularMessage::set_double_field(double value) {
  _internal_set_double_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.double_field)
}
inline double SingularMessage::_internal_double_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.double_field_;
}
inline void SingularMessage::_internal_set_double_field(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.double_field_ = value;
}

// bool bool_field = 13;
inline void SingularMessage::clear_bool_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_field_ = false;
}
inline bool SingularMessage::bool_field() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.bool_field)
  return _internal_bool_field();
}
inline void SingularMessage::set_bool_field(bool value) {
  _internal_set_bool_field(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.bool_field)
}
inline bool SingularMessage::_internal_bool_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bool_field_;
}
inline void SingularMessage::_internal_set_bool_field(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_field_ = value;
}

// string test_empty_string = 14;
inline void SingularMessage::clear_test_empty_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_string_.ClearToEmpty();
}
inline const std::string& SingularMessage::test_empty_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.test_empty_string)
  return _internal_test_empty_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage::set_test_empty_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.test_empty_string)
}
inline std::string* SingularMessage::mutable_test_empty_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_empty_string();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.test_empty_string)
  return _s;
}
inline const std::string& SingularMessage::_internal_test_empty_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_empty_string_.Get();
}
inline void SingularMessage::_internal_set_test_empty_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_string_.Set(value, GetArena());
}
inline std::string* SingularMessage::_internal_mutable_test_empty_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_empty_string_.Mutable( GetArena());
}
inline std::string* SingularMessage::release_test_empty_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.test_empty_string)
  return _impl_.test_empty_string_.Release();
}
inline void SingularMessage::set_allocated_test_empty_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.test_empty_string_.IsDefault()) {
          _impl_.test_empty_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.test_empty_string)
}

// string string_field = 15;
inline void SingularMessage::clear_string_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_field_.ClearToEmpty();
}
inline const std::string& SingularMessage::string_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.string_field)
  return _internal_string_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage::set_string_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.string_field)
}
inline std::string* SingularMessage::mutable_string_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_field();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.string_field)
  return _s;
}
inline const std::string& SingularMessage::_internal_string_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_field_.Get();
}
inline void SingularMessage::_internal_set_string_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_field_.Set(value, GetArena());
}
inline std::string* SingularMessage::_internal_mutable_string_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.string_field_.Mutable( GetArena());
}
inline std::string* SingularMessage::release_string_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.string_field)
  return _impl_.string_field_.Release();
}
inline void SingularMessage::set_allocated_string_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.string_field_.IsDefault()) {
          _impl_.string_field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.string_field)
}

// bytes test_empty_bytes = 16;
inline void SingularMessage::clear_test_empty_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_bytes_.ClearToEmpty();
}
inline const std::string& SingularMessage::test_empty_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.test_empty_bytes)
  return _internal_test_empty_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage::set_test_empty_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.test_empty_bytes)
}
inline std::string* SingularMessage::mutable_test_empty_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_empty_bytes();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.test_empty_bytes)
  return _s;
}
inline const std::string& SingularMessage::_internal_test_empty_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_empty_bytes_.Get();
}
inline void SingularMessage::_internal_set_test_empty_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_bytes_.Set(value, GetArena());
}
inline std::string* SingularMessage::_internal_mutable_test_empty_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_empty_bytes_.Mutable( GetArena());
}
inline std::string* SingularMessage::release_test_empty_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.test_empty_bytes)
  return _impl_.test_empty_bytes_.Release();
}
inline void SingularMessage::set_allocated_test_empty_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.test_empty_bytes_.IsDefault()) {
          _impl_.test_empty_bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.test_empty_bytes)
}

// bytes bytes_field = 17;
inline void SingularMessage::clear_bytes_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_field_.ClearToEmpty();
}
inline const std::string& SingularMessage::bytes_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.bytes_field)
  return _internal_bytes_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SingularMessage::set_bytes_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_field_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.bytes_field)
}
inline std::string* SingularMessage::mutable_bytes_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bytes_field();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.bytes_field)
  return _s;
}
inline const std::string& SingularMessage::_internal_bytes_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_field_.Get();
}
inline void SingularMessage::_internal_set_bytes_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_field_.Set(value, GetArena());
}
inline std::string* SingularMessage::_internal_mutable_bytes_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.bytes_field_.Mutable( GetArena());
}
inline std::string* SingularMessage::release_bytes_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.bytes_field)
  return _impl_.bytes_field_.Release();
}
inline void SingularMessage::set_allocated_bytes_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_field_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_field_.IsDefault()) {
          _impl_.bytes_field_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.bytes_field)
}

// .tachidromos.tests.SingularMessage.Status status = 18;
inline void SingularMessage::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::tachidromos::tests::SingularMessage_Status SingularMessage::status() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.status)
  return _internal_status();
}
inline void SingularMessage::set_status(::tachidromos::tests::SingularMessage_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.status)
}
inline ::tachidromos::tests::SingularMessage_Status SingularMessage::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tachidromos::tests::SingularMessage_Status>(_impl_.status_);
}
inline void SingularMessage::_internal_set_status(::tachidromos::tests::SingularMessage_Status value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// .tachidromos.tests.SingularMessage.NestedMessage nested_message = 19;
inline bool SingularMessage::has_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nested_message_ != nullptr);
  return value;
}
inline void SingularMessage::clear_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message_ != nullptr) _impl_.nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage& SingularMessage::_internal_nested_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tachidromos::tests::SingularMessage_NestedMessage* p = _impl_.nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::tachidromos::tests::SingularMessage_NestedMessage&>(::tachidromos::tests::_SingularMessage_NestedMessage_default_instance_);
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage& SingularMessage::nested_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.nested_message)
  return _internal_nested_message();
}
inline void SingularMessage::unsafe_arena_set_allocated_nested_message(::tachidromos::tests::SingularMessage_NestedMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nested_message_);
  }
  _impl_.nested_message_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tachidromos.tests.SingularMessage.nested_message)
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* SingularMessage::release_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tachidromos::tests::SingularMessage_NestedMessage* released = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* SingularMessage::unsafe_arena_release_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.nested_message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tachidromos::tests::SingularMessage_NestedMessage* temp = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
  return temp;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* SingularMessage::_internal_mutable_nested_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tachidromos::tests::SingularMessage_NestedMessage>(GetArena());
    _impl_.nested_message_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage*>(p);
  }
  return _impl_.nested_message_;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* SingularMessage::mutable_nested_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tachidromos::tests::SingularMessage_NestedMessage* _msg = _internal_mutable_nested_message();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.nested_message)
  return _msg;
}
inline void SingularMessage::set_allocated_nested_message(::tachidromos::tests::SingularMessage_NestedMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.nested_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nested_message_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.nested_message)
}

// .tachidromos.tests.SingularMessage.NestedMessage2 nested_message2 = 20;
inline bool SingularMessage::has_nested_message2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nested_message2_ != nullptr);
  return value;
}
inline void SingularMessage::clear_nested_message2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message2_ != nullptr) _impl_.nested_message2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage2& SingularMessage::_internal_nested_message2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tachidromos::tests::SingularMessage_NestedMessage2* p = _impl_.nested_message2_;
  return p != nullptr ? *p : reinterpret_cast<const ::tachidromos::tests::SingularMessage_NestedMessage2&>(::tachidromos::tests::_SingularMessage_NestedMessage2_default_instance_);
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage2& SingularMessage::nested_message2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.nested_message2)
  return _internal_nested_message2();
}
inline void SingularMessage::unsafe_arena_set_allocated_nested_message2(::tachidromos::tests::SingularMessage_NestedMessage2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nested_message2_);
  }
  _impl_.nested_message2_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tachidromos.tests.SingularMessage.nested_message2)
}
inline ::tachidromos::tests::SingularMessage_NestedMessage2* SingularMessage::release_nested_message2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tachidromos::tests::SingularMessage_NestedMessage2* released = _impl_.nested_message2_;
  _impl_.nested_message2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage2* SingularMessage::unsafe_arena_release_nested_message2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tachidromos.tests.SingularMessage.nested_message2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tachidromos::tests::SingularMessage_NestedMessage2* temp = _impl_.nested_message2_;
  _impl_.nested_message2_ = nullptr;
  return temp;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage2* SingularMessage::_internal_mutable_nested_message2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nested_message2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tachidromos::tests::SingularMessage_NestedMessage2>(GetArena());
    _impl_.nested_message2_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage2*>(p);
  }
  return _impl_.nested_message2_;
}
inline ::tachidromos::tests::SingularMessage_NestedMessage2* SingularMessage::mutable_nested_message2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tachidromos::tests::SingularMessage_NestedMessage2* _msg = _internal_mutable_nested_message2();
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.SingularMessage.nested_message2)
  return _msg;
}
inline void SingularMessage::set_allocated_nested_message2(::tachidromos::tests::SingularMessage_NestedMessage2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.nested_message2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.nested_message2_ = reinterpret_cast<::tachidromos::tests::SingularMessage_NestedMessage2*>(value);
  // @@protoc_insertion_point(field_set_allocated:tachidromos.tests.SingularMessage.nested_message2)
}

// int32 test_empty_int = 21;
inline void SingularMessage::clear_test_empty_int() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_int_ = 0;
}
inline ::int32_t SingularMessage::test_empty_int() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.test_empty_int)
  return _internal_test_empty_int();
}
inline void SingularMessage::set_test_empty_int(::int32_t value) {
  _internal_set_test_empty_int(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.test_empty_int)
}
inline ::int32_t SingularMessage::_internal_test_empty_int() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_empty_int_;
}
inline void SingularMessage::_internal_set_test_empty_int(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_int_ = value;
}

// int32 whatever_bro = 22;
inline void SingularMessage::clear_whatever_bro() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.whatever_bro_ = 0;
}
inline ::int32_t SingularMessage::whatever_bro() const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.SingularMessage.whatever_bro)
  return _internal_whatever_bro();
}
inline void SingularMessage::set_whatever_bro(::int32_t value) {
  _internal_set_whatever_bro(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.SingularMessage.whatever_bro)
}
inline ::int32_t SingularMessage::_internal_whatever_bro() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.whatever_bro_;
}
inline void SingularMessage::_internal_set_whatever_bro(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.whatever_bro_ = value;
}

// -------------------------------------------------------------------

// RepeatedMessage

// repeated int32 int_fields = 1;
inline int RepeatedMessage::_internal_int_fields_size() const {
  return _internal_int_fields().size();
}
inline int RepeatedMessage::int_fields_size() const {
  return _internal_int_fields_size();
}
inline void RepeatedMessage::clear_int_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_fields_.Clear();
}
inline ::int32_t RepeatedMessage::int_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.int_fields)
  return _internal_int_fields().Get(index);
}
inline void RepeatedMessage::set_int_fields(int index, ::int32_t value) {
  _internal_mutable_int_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.int_fields)
}
inline void RepeatedMessage::add_int_fields(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_int_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.int_fields)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RepeatedMessage::int_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.int_fields)
  return _internal_int_fields();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::mutable_int_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.int_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int_fields();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RepeatedMessage::_internal_int_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_fields_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::_internal_mutable_int_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int_fields_;
}

// repeated int64 long_fields = 2;
inline int RepeatedMessage::_internal_long_fields_size() const {
  return _internal_long_fields().size();
}
inline int RepeatedMessage::long_fields_size() const {
  return _internal_long_fields_size();
}
inline void RepeatedMessage::clear_long_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.long_fields_.Clear();
}
inline ::int64_t RepeatedMessage::long_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.long_fields)
  return _internal_long_fields().Get(index);
}
inline void RepeatedMessage::set_long_fields(int index, ::int64_t value) {
  _internal_mutable_long_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.long_fields)
}
inline void RepeatedMessage::add_long_fields(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_long_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.long_fields)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& RepeatedMessage::long_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.long_fields)
  return _internal_long_fields();
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::mutable_long_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.long_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_long_fields();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
RepeatedMessage::_internal_long_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.long_fields_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::_internal_mutable_long_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.long_fields_;
}

// repeated uint32 uint_fields = 3;
inline int RepeatedMessage::_internal_uint_fields_size() const {
  return _internal_uint_fields().size();
}
inline int RepeatedMessage::uint_fields_size() const {
  return _internal_uint_fields_size();
}
inline void RepeatedMessage::clear_uint_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint_fields_.Clear();
}
inline ::uint32_t RepeatedMessage::uint_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.uint_fields)
  return _internal_uint_fields().Get(index);
}
inline void RepeatedMessage::set_uint_fields(int index, ::uint32_t value) {
  _internal_mutable_uint_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.uint_fields)
}
inline void RepeatedMessage::add_uint_fields(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_uint_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.uint_fields)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& RepeatedMessage::uint_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.uint_fields)
  return _internal_uint_fields();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* RepeatedMessage::mutable_uint_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.uint_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_uint_fields();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
RepeatedMessage::_internal_uint_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint_fields_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* RepeatedMessage::_internal_mutable_uint_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.uint_fields_;
}

// repeated uint64 ulong_fields = 4;
inline int RepeatedMessage::_internal_ulong_fields_size() const {
  return _internal_ulong_fields().size();
}
inline int RepeatedMessage::ulong_fields_size() const {
  return _internal_ulong_fields_size();
}
inline void RepeatedMessage::clear_ulong_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ulong_fields_.Clear();
}
inline ::uint64_t RepeatedMessage::ulong_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.ulong_fields)
  return _internal_ulong_fields().Get(index);
}
inline void RepeatedMessage::set_ulong_fields(int index, ::uint64_t value) {
  _internal_mutable_ulong_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.ulong_fields)
}
inline void RepeatedMessage::add_ulong_fields(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ulong_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.ulong_fields)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& RepeatedMessage::ulong_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.ulong_fields)
  return _internal_ulong_fields();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* RepeatedMessage::mutable_ulong_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.ulong_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ulong_fields();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
RepeatedMessage::_internal_ulong_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ulong_fields_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* RepeatedMessage::_internal_mutable_ulong_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ulong_fields_;
}

// repeated sint32 sint_fields = 5;
inline int RepeatedMessage::_internal_sint_fields_size() const {
  return _internal_sint_fields().size();
}
inline int RepeatedMessage::sint_fields_size() const {
  return _internal_sint_fields_size();
}
inline void RepeatedMessage::clear_sint_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sint_fields_.Clear();
}
inline ::int32_t RepeatedMessage::sint_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.sint_fields)
  return _internal_sint_fields().Get(index);
}
inline void RepeatedMessage::set_sint_fields(int index, ::int32_t value) {
  _internal_mutable_sint_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.sint_fields)
}
inline void RepeatedMessage::add_sint_fields(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_sint_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.sint_fields)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RepeatedMessage::sint_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.sint_fields)
  return _internal_sint_fields();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::mutable_sint_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.sint_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sint_fields();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RepeatedMessage::_internal_sint_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sint_fields_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::_internal_mutable_sint_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sint_fields_;
}

// repeated sint64 slong_fields = 6;
inline int RepeatedMessage::_internal_slong_fields_size() const {
  return _internal_slong_fields().size();
}
inline int RepeatedMessage::slong_fields_size() const {
  return _internal_slong_fields_size();
}
inline void RepeatedMessage::clear_slong_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slong_fields_.Clear();
}
inline ::int64_t RepeatedMessage::slong_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.slong_fields)
  return _internal_slong_fields().Get(index);
}
inline void RepeatedMessage::set_slong_fields(int index, ::int64_t value) {
  _internal_mutable_slong_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.slong_fields)
}
inline void RepeatedMessage::add_slong_fields(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_slong_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.slong_fields)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& RepeatedMessage::slong_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.slong_fields)
  return _internal_slong_fields();
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::mutable_slong_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.slong_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_slong_fields();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
RepeatedMessage::_internal_slong_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slong_fields_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::_internal_mutable_slong_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.slong_fields_;
}

// repeated fixed32 fixed_fields = 7;
inline int RepeatedMessage::_internal_fixed_fields_size() const {
  return _internal_fixed_fields().size();
}
inline int RepeatedMessage::fixed_fields_size() const {
  return _internal_fixed_fields_size();
}
inline void RepeatedMessage::clear_fixed_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fixed_fields_.Clear();
}
inline ::uint32_t RepeatedMessage::fixed_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.fixed_fields)
  return _internal_fixed_fields().Get(index);
}
inline void RepeatedMessage::set_fixed_fields(int index, ::uint32_t value) {
  _internal_mutable_fixed_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.fixed_fields)
}
inline void RepeatedMessage::add_fixed_fields(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_fixed_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.fixed_fields)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& RepeatedMessage::fixed_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.fixed_fields)
  return _internal_fixed_fields();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* RepeatedMessage::mutable_fixed_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.fixed_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fixed_fields();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
RepeatedMessage::_internal_fixed_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fixed_fields_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* RepeatedMessage::_internal_mutable_fixed_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fixed_fields_;
}

// repeated fixed64 lfixed_fields = 8;
inline int RepeatedMessage::_internal_lfixed_fields_size() const {
  return _internal_lfixed_fields().size();
}
inline int RepeatedMessage::lfixed_fields_size() const {
  return _internal_lfixed_fields_size();
}
inline void RepeatedMessage::clear_lfixed_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lfixed_fields_.Clear();
}
inline ::uint64_t RepeatedMessage::lfixed_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.lfixed_fields)
  return _internal_lfixed_fields().Get(index);
}
inline void RepeatedMessage::set_lfixed_fields(int index, ::uint64_t value) {
  _internal_mutable_lfixed_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.lfixed_fields)
}
inline void RepeatedMessage::add_lfixed_fields(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_lfixed_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.lfixed_fields)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& RepeatedMessage::lfixed_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.lfixed_fields)
  return _internal_lfixed_fields();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* RepeatedMessage::mutable_lfixed_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.lfixed_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lfixed_fields();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
RepeatedMessage::_internal_lfixed_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lfixed_fields_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* RepeatedMessage::_internal_mutable_lfixed_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lfixed_fields_;
}

// repeated sfixed32 sfixed_fields = 9;
inline int RepeatedMessage::_internal_sfixed_fields_size() const {
  return _internal_sfixed_fields().size();
}
inline int RepeatedMessage::sfixed_fields_size() const {
  return _internal_sfixed_fields_size();
}
inline void RepeatedMessage::clear_sfixed_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sfixed_fields_.Clear();
}
inline ::int32_t RepeatedMessage::sfixed_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.sfixed_fields)
  return _internal_sfixed_fields().Get(index);
}
inline void RepeatedMessage::set_sfixed_fields(int index, ::int32_t value) {
  _internal_mutable_sfixed_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.sfixed_fields)
}
inline void RepeatedMessage::add_sfixed_fields(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_sfixed_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.sfixed_fields)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RepeatedMessage::sfixed_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.sfixed_fields)
  return _internal_sfixed_fields();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::mutable_sfixed_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.sfixed_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sfixed_fields();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
RepeatedMessage::_internal_sfixed_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sfixed_fields_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RepeatedMessage::_internal_mutable_sfixed_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sfixed_fields_;
}

// repeated sfixed64 slfixed_fields = 10;
inline int RepeatedMessage::_internal_slfixed_fields_size() const {
  return _internal_slfixed_fields().size();
}
inline int RepeatedMessage::slfixed_fields_size() const {
  return _internal_slfixed_fields_size();
}
inline void RepeatedMessage::clear_slfixed_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slfixed_fields_.Clear();
}
inline ::int64_t RepeatedMessage::slfixed_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.slfixed_fields)
  return _internal_slfixed_fields().Get(index);
}
inline void RepeatedMessage::set_slfixed_fields(int index, ::int64_t value) {
  _internal_mutable_slfixed_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.slfixed_fields)
}
inline void RepeatedMessage::add_slfixed_fields(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_slfixed_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.slfixed_fields)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& RepeatedMessage::slfixed_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.slfixed_fields)
  return _internal_slfixed_fields();
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::mutable_slfixed_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.slfixed_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_slfixed_fields();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
RepeatedMessage::_internal_slfixed_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slfixed_fields_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* RepeatedMessage::_internal_mutable_slfixed_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.slfixed_fields_;
}

// repeated float float_fields = 11;
inline int RepeatedMessage::_internal_float_fields_size() const {
  return _internal_float_fields().size();
}
inline int RepeatedMessage::float_fields_size() const {
  return _internal_float_fields_size();
}
inline void RepeatedMessage::clear_float_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_fields_.Clear();
}
inline float RepeatedMessage::float_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.float_fields)
  return _internal_float_fields().Get(index);
}
inline void RepeatedMessage::set_float_fields(int index, float value) {
  _internal_mutable_float_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.float_fields)
}
inline void RepeatedMessage::add_float_fields(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_float_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.float_fields)
}
inline const ::google::protobuf::RepeatedField<float>& RepeatedMessage::float_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.float_fields)
  return _internal_float_fields();
}
inline ::google::protobuf::RepeatedField<float>* RepeatedMessage::mutable_float_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.float_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_float_fields();
}
inline const ::google::protobuf::RepeatedField<float>&
RepeatedMessage::_internal_float_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_fields_;
}
inline ::google::protobuf::RepeatedField<float>* RepeatedMessage::_internal_mutable_float_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.float_fields_;
}

// repeated double double_fields = 12;
inline int RepeatedMessage::_internal_double_fields_size() const {
  return _internal_double_fields().size();
}
inline int RepeatedMessage::double_fields_size() const {
  return _internal_double_fields_size();
}
inline void RepeatedMessage::clear_double_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.double_fields_.Clear();
}
inline double RepeatedMessage::double_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.double_fields)
  return _internal_double_fields().Get(index);
}
inline void RepeatedMessage::set_double_fields(int index, double value) {
  _internal_mutable_double_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.double_fields)
}
inline void RepeatedMessage::add_double_fields(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_double_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.double_fields)
}
inline const ::google::protobuf::RepeatedField<double>& RepeatedMessage::double_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.double_fields)
  return _internal_double_fields();
}
inline ::google::protobuf::RepeatedField<double>* RepeatedMessage::mutable_double_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.double_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_double_fields();
}
inline const ::google::protobuf::RepeatedField<double>&
RepeatedMessage::_internal_double_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.double_fields_;
}
inline ::google::protobuf::RepeatedField<double>* RepeatedMessage::_internal_mutable_double_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.double_fields_;
}

// repeated bool bool_fields = 13;
inline int RepeatedMessage::_internal_bool_fields_size() const {
  return _internal_bool_fields().size();
}
inline int RepeatedMessage::bool_fields_size() const {
  return _internal_bool_fields_size();
}
inline void RepeatedMessage::clear_bool_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_fields_.Clear();
}
inline bool RepeatedMessage::bool_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.bool_fields)
  return _internal_bool_fields().Get(index);
}
inline void RepeatedMessage::set_bool_fields(int index, bool value) {
  _internal_mutable_bool_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.bool_fields)
}
inline void RepeatedMessage::add_bool_fields(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bool_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.bool_fields)
}
inline const ::google::protobuf::RepeatedField<bool>& RepeatedMessage::bool_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.bool_fields)
  return _internal_bool_fields();
}
inline ::google::protobuf::RepeatedField<bool>* RepeatedMessage::mutable_bool_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.bool_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bool_fields();
}
inline const ::google::protobuf::RepeatedField<bool>&
RepeatedMessage::_internal_bool_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bool_fields_;
}
inline ::google::protobuf::RepeatedField<bool>* RepeatedMessage::_internal_mutable_bool_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bool_fields_;
}

// repeated string string_fields = 14;
inline int RepeatedMessage::_internal_string_fields_size() const {
  return _internal_string_fields().size();
}
inline int RepeatedMessage::string_fields_size() const {
  return _internal_string_fields_size();
}
inline void RepeatedMessage::clear_string_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_fields_.Clear();
}
inline std::string* RepeatedMessage::add_string_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_string_fields()->Add();
  // @@protoc_insertion_point(field_add_mutable:tachidromos.tests.RepeatedMessage.string_fields)
  return _s;
}
inline const std::string& RepeatedMessage::string_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.string_fields)
  return _internal_string_fields().Get(index);
}
inline std::string* RepeatedMessage::mutable_string_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.RepeatedMessage.string_fields)
  return _internal_mutable_string_fields()->Mutable(index);
}
inline void RepeatedMessage::set_string_fields(int index, const std::string& value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::set_string_fields(int index, std::string&& value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::set_string_fields(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_string_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::set_string_fields(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_string_fields()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::set_string_fields(int index, absl::string_view value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::add_string_fields(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::add_string_fields(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::add_string_fields(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::add_string_fields(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tachidromos.tests.RepeatedMessage.string_fields)
}
inline void RepeatedMessage::add_string_fields(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:tachidromos.tests.RepeatedMessage.string_fields)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepeatedMessage::string_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.string_fields)
  return _internal_string_fields();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RepeatedMessage::mutable_string_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.string_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_string_fields();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepeatedMessage::_internal_string_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_fields_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RepeatedMessage::_internal_mutable_string_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.string_fields_;
}

// repeated bytes bytes_fields = 15;
inline int RepeatedMessage::_internal_bytes_fields_size() const {
  return _internal_bytes_fields().size();
}
inline int RepeatedMessage::bytes_fields_size() const {
  return _internal_bytes_fields_size();
}
inline void RepeatedMessage::clear_bytes_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_fields_.Clear();
}
inline std::string* RepeatedMessage::add_bytes_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_bytes_fields()->Add();
  // @@protoc_insertion_point(field_add_mutable:tachidromos.tests.RepeatedMessage.bytes_fields)
  return _s;
}
inline const std::string& RepeatedMessage::bytes_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.bytes_fields)
  return _internal_bytes_fields().Get(index);
}
inline std::string* RepeatedMessage::mutable_bytes_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.RepeatedMessage.bytes_fields)
  return _internal_mutable_bytes_fields()->Mutable(index);
}
inline void RepeatedMessage::set_bytes_fields(int index, const std::string& value) {
  _internal_mutable_bytes_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::set_bytes_fields(int index, std::string&& value) {
  _internal_mutable_bytes_fields()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::set_bytes_fields(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_bytes_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::set_bytes_fields(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_bytes_fields()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::set_bytes_fields(int index, absl::string_view value) {
  _internal_mutable_bytes_fields()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::add_bytes_fields(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bytes_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::add_bytes_fields(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bytes_fields()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::add_bytes_fields(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bytes_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::add_bytes_fields(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bytes_fields()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline void RepeatedMessage::add_bytes_fields(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_bytes_fields()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:tachidromos.tests.RepeatedMessage.bytes_fields)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepeatedMessage::bytes_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.bytes_fields)
  return _internal_bytes_fields();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RepeatedMessage::mutable_bytes_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.bytes_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bytes_fields();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RepeatedMessage::_internal_bytes_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_fields_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RepeatedMessage::_internal_mutable_bytes_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bytes_fields_;
}

// repeated .tachidromos.tests.SingularMessage.NestedMessage nested_messages = 16;
inline int RepeatedMessage::_internal_nested_messages_size() const {
  return _internal_nested_messages().size();
}
inline int RepeatedMessage::nested_messages_size() const {
  return _internal_nested_messages_size();
}
inline void RepeatedMessage::clear_nested_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_messages_.Clear();
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* RepeatedMessage::mutable_nested_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.RepeatedMessage.nested_messages)
  return _internal_mutable_nested_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* RepeatedMessage::mutable_nested_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.RepeatedMessage.nested_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nested_messages();
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage& RepeatedMessage::nested_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.RepeatedMessage.nested_messages)
  return _internal_nested_messages().Get(index);
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* RepeatedMessage::add_nested_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tachidromos::tests::SingularMessage_NestedMessage* _add = _internal_mutable_nested_messages()->Add();
  // @@protoc_insertion_point(field_add:tachidromos.tests.RepeatedMessage.nested_messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& RepeatedMessage::nested_messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.RepeatedMessage.nested_messages)
  return _internal_nested_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>&
RepeatedMessage::_internal_nested_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_messages_;
}
inline ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>*
RepeatedMessage::_internal_mutable_nested_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nested_messages_;
}

// -------------------------------------------------------------------

// IntRepeatedMessage

// repeated int32 int_fields = 1;
inline int IntRepeatedMessage::_internal_int_fields_size() const {
  return _internal_int_fields().size();
}
inline int IntRepeatedMessage::int_fields_size() const {
  return _internal_int_fields_size();
}
inline void IntRepeatedMessage::clear_int_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_fields_.Clear();
}
inline ::int32_t IntRepeatedMessage::int_fields(int index) const {
  // @@protoc_insertion_point(field_get:tachidromos.tests.IntRepeatedMessage.int_fields)
  return _internal_int_fields().Get(index);
}
inline void IntRepeatedMessage::set_int_fields(int index, ::int32_t value) {
  _internal_mutable_int_fields()->Set(index, value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.IntRepeatedMessage.int_fields)
}
inline void IntRepeatedMessage::add_int_fields(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_int_fields()->Add(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.IntRepeatedMessage.int_fields)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& IntRepeatedMessage::int_fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.IntRepeatedMessage.int_fields)
  return _internal_int_fields();
}
inline ::google::protobuf::RepeatedField<::int32_t>* IntRepeatedMessage::mutable_int_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.IntRepeatedMessage.int_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int_fields();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
IntRepeatedMessage::_internal_int_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_fields_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* IntRepeatedMessage::_internal_mutable_int_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int_fields_;
}

// -------------------------------------------------------------------

// StringRepeatedMessage

// repeated string string_fields = 1;
inline int StringRepeatedMessage::_internal_string_fields_size() const {
  return _internal_string_fields().size();
}
inline int StringRepeatedMessage::string_fields_size() const {
  return _internal_string_fields_size();
}
inline void StringRepeatedMessage::clear_string_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_fields_.Clear();
}
inline std::string* StringRepeatedMessage::add_string_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_string_fields()->Add();
  // @@protoc_insertion_point(field_add_mutable:tachidromos.tests.StringRepeatedMessage.string_fields)
  return _s;
}
inline const std::string& StringRepeatedMessage::string_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.StringRepeatedMessage.string_fields)
  return _internal_string_fields().Get(index);
}
inline std::string* StringRepeatedMessage::mutable_string_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.StringRepeatedMessage.string_fields)
  return _internal_mutable_string_fields()->Mutable(index);
}
inline void StringRepeatedMessage::set_string_fields(int index, const std::string& value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::set_string_fields(int index, std::string&& value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::set_string_fields(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_string_fields()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::set_string_fields(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_string_fields()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::set_string_fields(int index, absl::string_view value) {
  _internal_mutable_string_fields()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::add_string_fields(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::add_string_fields(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::add_string_fields(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::add_string_fields(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline void StringRepeatedMessage::add_string_fields(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_string_fields()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:tachidromos.tests.StringRepeatedMessage.string_fields)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StringRepeatedMessage::string_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.StringRepeatedMessage.string_fields)
  return _internal_string_fields();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StringRepeatedMessage::mutable_string_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.StringRepeatedMessage.string_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_string_fields();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
StringRepeatedMessage::_internal_string_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_fields_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
StringRepeatedMessage::_internal_mutable_string_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.string_fields_;
}

// -------------------------------------------------------------------

// NestedRepeatedMessage

// repeated .tachidromos.tests.SingularMessage.NestedMessage nested_messages = 1;
inline int NestedRepeatedMessage::_internal_nested_messages_size() const {
  return _internal_nested_messages().size();
}
inline int NestedRepeatedMessage::nested_messages_size() const {
  return _internal_nested_messages_size();
}
inline void NestedRepeatedMessage::clear_nested_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nested_messages_.Clear();
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* NestedRepeatedMessage::mutable_nested_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tachidromos.tests.NestedRepeatedMessage.nested_messages)
  return _internal_mutable_nested_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>* NestedRepeatedMessage::mutable_nested_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tachidromos.tests.NestedRepeatedMessage.nested_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nested_messages();
}
inline const ::tachidromos::tests::SingularMessage_NestedMessage& NestedRepeatedMessage::nested_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tachidromos.tests.NestedRepeatedMessage.nested_messages)
  return _internal_nested_messages().Get(index);
}
inline ::tachidromos::tests::SingularMessage_NestedMessage* NestedRepeatedMessage::add_nested_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tachidromos::tests::SingularMessage_NestedMessage* _add = _internal_mutable_nested_messages()->Add();
  // @@protoc_insertion_point(field_add:tachidromos.tests.NestedRepeatedMessage.nested_messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>& NestedRepeatedMessage::nested_messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tachidromos.tests.NestedRepeatedMessage.nested_messages)
  return _internal_nested_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>&
NestedRepeatedMessage::_internal_nested_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nested_messages_;
}
inline ::google::protobuf::RepeatedPtrField<::tachidromos::tests::SingularMessage_NestedMessage>*
NestedRepeatedMessage::_internal_mutable_nested_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nested_messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace tests
}  // namespace tachidromos


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tachidromos::tests::SingularMessage_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tachidromos::tests::SingularMessage_Status>() {
  return ::tachidromos::tests::SingularMessage_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
