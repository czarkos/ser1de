// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message2 {
  optional uint64 f_0 = 1;
  optional float f_1 = 2;
  optional int64 f_2 = 3;
  optional int32 f_3 = 5;
  optional int64 f_4 = 8;
  optional int64 f_5 = 9;
  message M1 {
    optional uint32 f_0 = 2;
    message M14 {
      optional uint64 f_0 = 2;
      message M27 {
        optional fixed64 f_0 = 2;
        message M48 {
          optional float f_0 = 1;
          message M80 {
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 92;
              E16_CONST_2 = 84;
              E16_CONST_3 = 43;
              E16_CONST_4 = 40;
              E16_CONST_5 = 47;
            }
            optional E16 f_0 = 1;
          }
          optional M80 f_1 = 2;
        }
        optional M48 f_2 = 3;
        message M53 {
          optional string f_0 = 2;
          message M74 {
            optional bytes f_0 = 1;
            //optional bytes f_0 = 1 [ctype = CORD];
          }
          repeated M74 f_2 = 3;
        }
        optional M53 f_3 = 4;
        message M57 {
          optional bool f_0 = 1;
          optional int64 f_1 = 2;
        }
        optional M57 f_4 = 5;
      }
      optional M27 f_2 = 3;
      message M29 {
        optional double f_0 = 1;
        message M50 {
          optional bool f_0 = 1;
          optional int64 f_1 = 3;
          message M76 {
            optional fixed32 f_0 = 2;
          }
          optional M76 f_3 = 4;
        }
        repeated M50 f_1 = 4;
      }
      optional M29 f_3 = 4;
      message M40 {
        optional int32 f_0 = 1;
        message M43 {
          enum E10 {
            E10_UNSPECIFIED = 0;
            E10_CONST_1 = 126;
            E10_CONST_2 = 62;
            E10_CONST_3 = 41;
            E10_CONST_4 = 59;
            E10_CONST_5 = 43;
          }
          repeated E10 f_0 = 2 [packed = true];
          message M71 {
            optional bytes f_0 = 4;
            //optional bytes f_0 = 4 [ctype = CORD];
            message M87 {
              optional string f_0 = 1;
              optional float f_1 = 3;
              optional string f_2 = 5;
              optional string f_3 = 6;
              optional bool f_4 = 9;
              optional string f_5 = 13;
              enum E17 {
                E17_UNSPECIFIED = 0;
                E17_CONST_1 = 107;
                E17_CONST_2 = 93;
                E17_CONST_3 = 24;
                E17_CONST_4 = 108;
                E17_CONST_5 = 42;
              }
              optional E17 f_6 = 14;
              optional int64 f_7 = 15;
              optional string f_8 = 17;
              optional uint64 f_9 = 18;
              optional float f_10 = 20;
              optional int32 f_11 = 21;
              repeated sint64 f_12 = 22 [packed = true];
              optional bytes f_13 = 23;
              optional string f_14 = 24;
              optional uint64 f_15 = 25;
              optional fixed32 f_16 = 27;
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 44;
                E18_CONST_2 = 20;
                E18_CONST_3 = 27;
                E18_CONST_4 = 37;
                E18_CONST_5 = 113;
              }
              optional E18 f_17 = 28;
              optional int32 f_18 = 29;
              optional int32 f_19 = 31;
              optional int32 f_20 = 32;
              optional bool f_21 = 33;
              optional int64 f_22 = 36;
              optional float f_23 = 37;
              optional int64 f_24 = 38;
              optional int64 f_25 = 40;
              optional bool f_26 = 41;
              optional string f_27 = 42;
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 10;
                E19_CONST_2 = 7;
                E19_CONST_3 = 112;
                E19_CONST_4 = 35;
                E19_CONST_5 = 41;
              }
              optional E19 f_28 = 43;
              optional int32 f_29 = 45;
              optional int32 f_30 = 46;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 80;
                E20_CONST_2 = 51;
                E20_CONST_3 = 110;
                E20_CONST_4 = 4;
                E20_CONST_5 = 52;
              }
              optional E20 f_31 = 47;
              message M89 {
                optional fixed32 f_0 = 1;
              }
              optional M89 f_47 = 48;
              message M95 {
                optional int64 f_0 = 1;
              }
              repeated M95 f_48 = 50;
            }
            optional M87 f_4 = 6;
          }
          optional M71 f_2 = 4;
          message M75 {
            optional bytes f_0 = 1;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 106;
              E14_CONST_2 = 11;
              E14_CONST_3 = 74;
              E14_CONST_4 = 126;
              E14_CONST_5 = 27;
            }
            optional E14 f_1 = 2;
          }
          repeated M75 f_4 = 5;
        }
        repeated M43 f_1 = 2;
        message M46 {
          optional uint64 f_0 = 2;
          message M66 {
            optional int32 f_0 = 2;
          }
          optional M66 f_2 = 3;
        }
        optional M46 f_2 = 3;
      }
      optional M40 f_4 = 5;
    }
    optional M14 f_2 = 4;
  }
  repeated M1 f_9 = 10;
  message M2 {
    optional string f_0 = 1;
  }
  optional M2 f_10 = 13;
  message M3 {
    optional int32 f_0 = 1;
  }
  optional M3 f_13 = 15;
  message M4 {
    optional int64 f_0 = 2;
    message M16 {
      optional int64 f_0 = 1;
      message M28 {
        optional float f_0 = 1;
        message M44 {
          optional double f_0 = 1;
          message M61 {
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 99;
              E11_CONST_2 = 7;
              E11_CONST_3 = 14;
              E11_CONST_4 = 121;
              E11_CONST_5 = 94;
            }
            optional E11 f_0 = 1;
            message M86 {
              optional int32 f_0 = 3;
              message M88 {
                optional uint32 f_0 = 1;
              }
              optional M88 f_3 = 4;
              message M91 {
                optional float f_0 = 1;
                message M101 {
                  optional fixed64 f_0 = 1;
                  optional int64 f_1 = 6;
                  optional uint64 f_2 = 7;
                  optional fixed64 f_3 = 8;
                  optional string f_4 = 10;
                  optional bool f_5 = 11;
                  optional int64 f_6 = 12;
                  optional float f_7 = 14;
                  optional int64 f_8 = 16;
                  optional string f_9 = 18;
                  optional int32 f_10 = 19;
                  optional int64 f_11 = 20;
                  optional uint32 f_12 = 21;
                  optional fixed64 f_13 = 22;
                  optional int64 f_14 = 23;
                  optional bool f_15 = 26;
                  optional int32 f_16 = 27;
                  optional int64 f_17 = 28;
                  optional fixed64 f_18 = 29;
                  enum E27 {
                    E27_UNSPECIFIED = 0;
                    E27_CONST_1 = 18;
                    E27_CONST_2 = 26;
                    E27_CONST_3 = 98;
                    E27_CONST_4 = 13;
                    E27_CONST_5 = 9;
                  }
                  optional E27 f_19 = 30;
                  enum E28 {
                    E28_UNSPECIFIED = 0;
                    E28_CONST_1 = 41;
                    E28_CONST_2 = 71;
                    E28_CONST_3 = 3;
                    E28_CONST_4 = 121;
                    E28_CONST_5 = 98;
                  }
                  optional E28 f_20 = 31;
                  optional uint32 f_21 = 33;
                  optional int64 f_22 = 35;
                  optional uint32 f_23 = 36;
                  optional string f_24 = 39;
                  optional string f_25 = 41;
                  message M105 {
                    enum E29 {
                      E29_UNSPECIFIED = 0;
                      E29_CONST_1 = 1;
                      E29_CONST_2 = 2;
                      E29_CONST_3 = 22;
                      E29_CONST_4 = 83;
                      E29_CONST_5 = 21;
                    }
                    optional E29 f_0 = 2;
                    message M107 {
                      optional uint64 f_0 = 1;
                    }
                    optional M107 f_2 = 4;
                  }
                  repeated M105 f_41 = 42;
                }
                optional M101 f_1 = 2;
              }
              repeated M91 f_4 = 5;
            }
            optional M86 f_1 = 2;
          }
          optional M61 f_1 = 3;
          message M63 {
            optional float f_0 = 2;
          }
          optional M63 f_3 = 4;
          message M65 {
            enum E12 {
              E12_UNSPECIFIED = 0;
              E12_CONST_1 = 12;
              E12_CONST_2 = 69;
              E12_CONST_3 = 27;
              E12_CONST_4 = 123;
              E12_CONST_5 = 90;
            }
            optional E12 f_0 = 1;
          }
          optional M65 f_4 = 5;
          message M72 {
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 117;
              E13_CONST_2 = 118;
              E13_CONST_3 = 66;
              E13_CONST_4 = 70;
              E13_CONST_5 = 35;
            }
            optional E13 f_0 = 1;
          }
          repeated M72 f_5 = 6;
        }
        repeated M44 f_1 = 2;
      }
      optional M28 f_1 = 2;
      message M32 {
        optional uint64 f_0 = 1;
        message M55 {
          optional int64 f_0 = 2;
          optional string f_1 = 4;
          optional string f_2 = 5;
          optional int64 f_3 = 7;
          optional int32 f_4 = 8;
          optional bool f_5 = 10;
          optional bool f_6 = 11;
          optional string f_7 = 15;
          optional int32 f_8 = 16;
          message M60 {
            optional fixed32 f_0 = 1;
          }
          repeated M60 f_16 = 17;
          message M79 {
            optional int64 f_0 = 1;
          }
          optional M79 f_17 = 18;
        }
        repeated M55 f_1 = 3;
      }
      optional M32 f_2 = 3;
      message M38 {
        repeated string f_0 = 2;
        message M42 {
          optional bytes f_0 = 1;
          message M82 {
            optional int32 f_0 = 1;
          }
          repeated M82 f_1 = 3;
        }
        repeated M42 f_2 = 4;
        message M51 {
          optional string f_0 = 1;
        }
        optional M51 f_4 = 5;
      }
      repeated M38 f_3 = 4;
    }
    optional M16 f_2 = 3;
  }
  optional M4 f_15 = 16;
  message M5 {
    repeated int32 f_0 = 2 [packed = true];
    message M12 {
      optional bytes f_0 = 1;
      optional int32 f_1 = 3;
      optional int32 f_2 = 4;
      optional float f_3 = 5;
      optional string f_4 = 6;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 124;
        E3_CONST_2 = 84;
        E3_CONST_3 = 106;
        E3_CONST_4 = 16;
        E3_CONST_5 = 123;
      }
      optional E3 f_5 = 8;
      optional fixed32 f_6 = 9;
      optional float f_7 = 10;
      optional int64 f_8 = 12;
      optional int64 f_9 = 13;
      message M31 {
        optional int32 f_0 = 2;
        optional int64 f_1 = 5;
      }
      optional M31 f_13 = 14;
      message M36 {
        optional uint32 f_0 = 1;
      }
      optional M36 f_14 = 16;
    }
    optional M12 f_2 = 4;
    message M18 {
      optional int32 f_0 = 1;
      message M22 {
        optional float f_0 = 1;
        message M52 {
          optional string f_0 = 3;
        }
        repeated M52 f_1 = 3;
      }
      optional M22 f_1 = 3;
      message M23 {
        optional uint64 f_0 = 1;
        message M49 {
          optional sfixed64 f_0 = 1;
          message M81 {
            optional int64 f_0 = 2;
          }
          optional M81 f_1 = 2;
        }
        repeated M49 f_1 = 2;
        message M58 {
          optional int64 f_0 = 3;
          message M62 {
            optional int32 f_0 = 1;
            message M83 {
              optional string f_0 = 2;
              message M90 {
                optional float f_0 = 1;
              }
              optional M90 f_2 = 4;
              message M98 {
                enum E26 {
                  E26_UNSPECIFIED = 0;
                  E26_CONST_1 = 89;
                  E26_CONST_2 = 117;
                  E26_CONST_3 = 58;
                  E26_CONST_4 = 55;
                  E26_CONST_5 = 32;
                }
                optional E26 f_0 = 4;
              }
              optional M98 f_4 = 6;
            }
            optional M83 f_1 = 2;
          }
          optional M62 f_3 = 4;
          message M68 {
            optional string f_0 = 2;
            message M85 {
              optional float f_0 = 1;
              optional int64 f_1 = 4;
              optional float f_2 = 6;
              repeated int32 f_3 = 7 [packed = true];
              message M94 {
                optional fixed64 f_0 = 2;
                optional bool f_1 = 3;
                enum E21 {
                  E21_UNSPECIFIED = 0;
                  E21_CONST_1 = 48;
                  E21_CONST_2 = 88;
                  E21_CONST_3 = 49;
                  E21_CONST_4 = 102;
                  E21_CONST_5 = 57;
                }
                optional E21 f_2 = 4;
                enum E22 {
                  E22_UNSPECIFIED = 0;
                  E22_CONST_1 = 104;
                  E22_CONST_2 = 93;
                  E22_CONST_3 = 123;
                  E22_CONST_4 = 78;
                  E22_CONST_5 = 110;
                }
                optional E22 f_3 = 5;
                message M100 {
                  optional string f_0 = 1 ;
                  message M102 {
                    optional bool f_0 = 2;
                  }
                  optional M102 f_1 = 2;
                  message M106 {
                    optional bytes f_0 = 1;
                  }
                  repeated M106 f_2 = 3;
                }
                repeated M100 f_5 = 6;
              }
              optional M94 f_7 = 9;
              message M97 {
                enum E25 {
                  E25_UNSPECIFIED = 0;
                  E25_CONST_1 = 45;
                  E25_CONST_2 = 3;
                  E25_CONST_3 = 126;
                  E25_CONST_4 = 88;
                  E25_CONST_5 = 32;
                }
                optional E25 f_0 = 1;
              }
              repeated M97 f_9 = 12;
            }
            optional M85 f_2 = 3;
          }
          optional M68 f_4 = 6;
        }
        optional M58 f_2 = 3;
      }
      optional M23 f_3 = 5;
    }
    optional M18 f_4 = 5;
  }
  repeated M5 f_16 = 17;
  message M6 {
    optional string f_0 = 1;
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 66;
      E1_CONST_2 = 79;
      E1_CONST_3 = 116;
      E1_CONST_4 = 112;
      E1_CONST_5 = 118;
    }
    optional E1 f_1 = 2;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 52;
      E2_CONST_2 = 88;
      E2_CONST_3 = 123;
      E2_CONST_4 = 113;
      E2_CONST_5 = 64;
    }
    optional E2 f_2 = 4;
    optional float f_3 = 5;
    optional int64 f_4 = 7;
  }
  optional M6 f_17 = 19;
  message M7 {
    optional double f_0 = 1;
    message M15 {
      optional double f_0 = 1;
      message M24 {
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 15;
          E7_CONST_2 = 55;
          E7_CONST_3 = 75;
          E7_CONST_4 = 6;
          E7_CONST_5 = 65;
        }
        repeated E7 f_0 = 1 [packed = true];
        optional int64 f_1 = 3;
        optional int32 f_2 = 4;
      }
      optional M24 f_1 = 2;
      message M26 {
        optional int64 f_0 = 2;
        message M47 {
          optional string f_0 = 3;
        }
        repeated M47 f_2 = 3;
      }
      optional M26 f_2 = 3;
      message M30 {
        optional int64 f_0 = 2;
      }
      repeated M30 f_3 = 4;
    }
    optional M15 f_1 = 2;
    message M20 {
      optional string f_0 = 1;
    }
    optional M20 f_2 = 4;
  }
  optional M7 f_19 = 20;
  message M8 {
    optional bool f_0 = 2;
  }
  optional M8 f_20 = 22;
  message M9 {
    optional fixed64 f_0 = 1;
  }
  optional M9 f_22 = 25;
  message M10 {
    repeated int32 f_0 = 1 [packed = true];
    message M17 {
      optional string f_0 = 1;
    }
    optional M17 f_1 = 3;
    message M19 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 116;
        E4_CONST_2 = 123;
        E4_CONST_3 = 94;
        E4_CONST_4 = 90;
        E4_CONST_5 = 73;
      }
      optional E4 f_0 = 1;
      optional int64 f_1 = 4;
      optional fixed64 f_2 = 5;
      message M37 {
        optional int64 f_0 = 1;
        optional uint64 f_1 = 3;
        optional int64 f_2 = 4;
      }
      repeated M37 f_5 = 6;
      message M39 {
        optional uint32 f_0 = 2;
      }
      optional M39 f_6 = 7;
    }
    repeated M19 f_3 = 4;
  }
  optional M10 f_25 = 26;
  message M11 {
    optional string f_0 = 1;
    message M13 {
      optional int32 f_0 = 3;
      message M33 {
        optional string f_0 = 2;
        message M59 {
          optional int32 f_0 = 1;
          message M64 {
            optional int32 f_0 = 2;
          }
          optional M64 f_1 = 3;
          message M77 {
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 89;
              E15_CONST_2 = 94;
              E15_CONST_3 = 95;
              E15_CONST_4 = 12;
              E15_CONST_5 = 99;
            }
            optional E15 f_0 = 4;
          }
          optional M77 f_3 = 5;
        }
        optional M59 f_2 = 4;
      }
      optional M33 f_3 = 4;
      message M35 {
        optional int64 f_0 = 4;
        message M56 {
          optional bool f_0 = 1;
          message M73 {
            optional string f_0 = 3;
          }
          optional M73 f_1 = 2;
          message M78 {
            optional int64 f_0 = 3;
          }
          repeated M78 f_2 = 4;
        }
        optional M56 f_4 = 5;
      }
      repeated M35 f_4 = 7;
    }
    optional M13 f_1 = 2;
    message M21 {
      optional bool f_0 = 2;
      optional double f_1 = 3;
      optional bytes f_2 = 4;
      //optional bytes f_2 = 4 [ctype = CORD];
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 119;
        E5_CONST_2 = 72;
        E5_CONST_3 = 9;
        E5_CONST_4 = 68;
        E5_CONST_5 = 34;
      }
      optional E5 f_3 = 5;
      optional float f_4 = 6;
      optional uint64 f_5 = 8;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 47;
        E6_CONST_2 = 5;
        E6_CONST_3 = 71;
        E6_CONST_4 = 3;
        E6_CONST_5 = 63;
      }
      optional E6 f_6 = 10;
      optional fixed32 f_7 = 12;
      optional int64 f_8 = 13;
      optional string f_9 = 14;
      optional int64 f_10 = 17;
      message M25 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 113;
          E8_CONST_2 = 123;
          E8_CONST_3 = 104;
          E8_CONST_4 = 7;
          E8_CONST_5 = 36;
        }
        optional E8 f_0 = 2;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 112;
          E9_CONST_2 = 42;
          E9_CONST_3 = 47;
          E9_CONST_4 = 119;
          E9_CONST_5 = 9;
        }
        optional E9 f_1 = 3;
        optional string f_2 = 4;
        optional int64 f_3 = 5;
      }
      repeated M25 f_17 = 19;
      message M34 {
        optional int32 f_0 = 2;
        message M45 {
          optional int64 f_0 = 2;
          optional sfixed32 f_1 = 3;
          optional string f_2 = 5;
          message M67 {
            optional int32 f_0 = 1;
            message M84 {
              optional string f_0 = 3;
              message M92 {
                optional float f_0 = 2;
              }
              optional M92 f_3 = 4;
              message M93 {
                optional fixed32 f_0 = 2;
              }
              optional M93 f_4 = 5;
              message M96 {
                optional string f_0 = 2;
                enum E23 {
                  E23_UNSPECIFIED = 0;
                  E23_CONST_1 = 31;
                  E23_CONST_2 = 29;
                  E23_CONST_3 = 57;
                  E23_CONST_4 = 5;
                  E23_CONST_5 = 32;
                }
                optional E23 f_1 = 3;
                enum E24 {
                  E24_UNSPECIFIED = 0;
                  E24_CONST_1 = 40;
                  E24_CONST_2 = 57;
                  E24_CONST_3 = 73;
                  E24_CONST_4 = 117;
                  E24_CONST_5 = 126;
                }
                optional E24 f_2 = 4;
                message M99 {
                  optional string f_0 = 2;
                  message M103 {
                    optional string f_0 = 1;
                    message M108 {
                      repeated sint64 f_0 = 1 [packed = true];
                      message M110 {
                        optional int32 f_0 = 1;
                      }
                      optional M110 f_1 = 2;
                      message M112 {
                        optional fixed64 f_0 = 1;
                        message M113 {
                          optional int32 f_0 = 2;
                        }
                        optional M113 f_1 = 2;
                        message M114 {
                          enum E30 {
                            E30_UNSPECIFIED = 0;
                            E30_CONST_1 = 117;
                            E30_CONST_2 = 8;
                            E30_CONST_3 = 120;
                            E30_CONST_4 = 107;
                            E30_CONST_5 = 60;
                          }
                          optional E30 f_0 = 1;
                          message M115 {
                            optional string f_0 = 2;
                            optional uint32 f_1 = 3;
                            enum E31 {
                              E31_UNSPECIFIED = 0;
                              E31_CONST_1 = 35;
                              E31_CONST_2 = 84;
                              E31_CONST_3 = 58;
                              E31_CONST_4 = 49;
                              E31_CONST_5 = 80;
                            }
                            optional E31 f_2 = 4;
                            optional sfixed32 f_3 = 9;
                            message M116 {
                              optional int64 f_0 = 2;
                              optional double f_1 = 3;
                              optional bool f_2 = 4;
                              enum E32 {
                                E32_UNSPECIFIED = 0;
                                E32_CONST_1 = 55;
                                E32_CONST_2 = 76;
                                E32_CONST_3 = 88;
                                E32_CONST_4 = 122;
                                E32_CONST_5 = 101;
                              }
                              optional E32 f_3 = 6;
                              optional int64 f_4 = 7;
                              optional double f_5 = 9;
                              optional string f_6 = 10;
                              enum E33 {
                                E33_UNSPECIFIED = 0;
                                E33_CONST_1 = 96;
                                E33_CONST_2 = 116;
                                E33_CONST_3 = 10244;
                                E33_CONST_4 = 122;
                                E33_CONST_5 = 26;
                              }
                              optional E33 f_7 = 11;
                              optional string f_8 = 13;
                              optional uint64 f_9 = 14;
                              message M117 {
                                optional int64 f_0 = 2;
                                message M118 {
                                  optional int64 f_0 = 3;
                                  message M119 {
                                    optional bytes f_0 = 1;
                                    message M120 {
                                      optional bool f_0 = 1;
                                    }
                                    optional M120 f_1 = 2;
                                    message M121 {
                                      optional int64 f_0 = 1;
                                    }
                                    optional M121 f_2 = 4;
                                  }
                                  optional M119 f_3 = 6;
                                }
                                repeated M118 f_2 = 5;
                              }
                              repeated M117 f_14 = 16;
                            }
                            optional M116 f_9 = 10;
                          }
                          optional M115 f_1 = 4;
                        }
                        repeated M114 f_2 = 4;
                      }
                      optional M112 f_2 = 3;
                    }
                    repeated M108 f_1 = 2;
                  }
                  repeated M103 f_2 = 3;
                  message M104 {
                    optional fixed32 f_0 = 2;
                    message M109 {
                      optional float f_0 = 1;
                      optional int64 f_1 = 2;
                      optional int64 f_2 = 3;
                      message M111 {
                        optional string f_0 = 1;
                      }
                      optional M111 f_3 = 4;
                    }
                    optional M109 f_2 = 4;
                  }
                  optional M104 f_3 = 4;
                }
                optional M99 f_4 = 5;
              }
              repeated M96 f_5 = 6;
            }
            repeated M84 f_1 = 3;
          }
          optional M67 f_5 = 8;
        }
        repeated M45 f_2 = 4;
      }
      optional M34 f_19 = 20;
      message M41 {
        optional uint32 f_0 = 1;
        optional uint64 f_1 = 2;
        optional int64 f_2 = 4;
        optional double f_3 = 5;
        optional string f_4 = 6;
        optional bool f_5 = 8;
        optional bool f_6 = 9;
        repeated int32 f_7 = 10 [packed = true];
        optional string f_8 = 11;
        message M54 {
          optional string f_0 = 3;
          message M69 {
            optional int64 f_0 = 1;
            optional int64 f_1 = 2;
          }
          optional M69 f_3 = 5;
          message M70 {
            optional string f_0 = 1;
          }
          optional M70 f_5 = 6;
        }
        optional M54 f_11 = 12;
      }
      optional M41 f_20 = 23;
    }
    optional M21 f_2 = 4;
  }
  optional M11 f_26 = 28;
}
