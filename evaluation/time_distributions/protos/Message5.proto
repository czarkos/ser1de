// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message5 {
  repeated int64 f_0 = 1 [packed = true];
  repeated uint32 f_1 = 2 [packed = true];
  optional int64 f_2 = 3;
  optional fixed64 f_3 = 4;
  optional bytes f_4 = 6;
  optional uint64 f_5 = 7;
  message M1 {
    optional bytes f_0 = 2;
    //optional bytes f_0 = 2 [ctype = CORD];
  }
  optional M1 f_7 = 8;
  message M2 {
    optional string f_0 = 2;
    message M18 {
      optional string f_0 = 2;
      message M23 {
        optional int64 f_0 = 3;
        optional float f_1 = 4;
        enum E6 {
          E6_UNSPECIFIED = 0;
          E6_CONST_1 = 87;
          E6_CONST_2 = 57;
          E6_CONST_3 = 54;
          E6_CONST_4 = 19;
          E6_CONST_5 = 13;
        }
        optional E6 f_2 = 5;
        optional int64 f_3 = 6;
        optional fixed64 f_4 = 9;
        enum E7 {
          E7_UNSPECIFIED = 0;
          E7_CONST_1 = 7;
          E7_CONST_2 = 42;
          E7_CONST_3 = 44;
          E7_CONST_4 = 124;
          E7_CONST_5 = 10;
        }
        optional E7 f_5 = 10;
        optional int64 f_6 = 11;
        optional int64 f_7 = 12;
        optional double f_8 = 14;
        optional bool f_9 = 16;
        optional string f_10 = 17;
        optional int64 f_11 = 18;
        optional string f_12 = 20;
        optional string f_13 = 22;
        message M30 {
          optional string f_0 = 1;
          optional int32 f_1 = 3;
          optional int64 f_2 = 5;
          optional string f_3 = 6;
          message M45 {
            optional fixed32 f_0 = 2;
            message M57 {
              optional int32 f_0 = 2;
            }
            repeated M57 f_2 = 3;
            message M63 {
              enum E18 {
                E18_UNSPECIFIED = 0;
                E18_CONST_1 = 96;
                E18_CONST_2 = 22;
                E18_CONST_3 = 8;
                E18_CONST_4 = 67;
                E18_CONST_5 = 39;
              }
              optional E18 f_0 = 1;
              message M72 {
                optional fixed32 f_0 = 1;
                enum E22 {
                  E22_UNSPECIFIED = 0;
                  E22_CONST_1 = 65;
                  E22_CONST_2 = 68;
                  E22_CONST_3 = 26;
                  E22_CONST_4 = 93;
                  E22_CONST_5 = 125;
                }
                optional E22 f_1 = 2;
                message M79 {
                  enum E28 {
                    E28_UNSPECIFIED = 0;
                    E28_CONST_1 = 16;
                    E28_CONST_2 = 17;
                    E28_CONST_3 = 85;
                    E28_CONST_4 = 61;
                    E28_CONST_5 = 58;
                  }
                  optional E28 f_0 = 1;
                  message M86 {
                    optional int32 f_0 = 3;
                    message M91 {
                      optional float f_0 = 1;
                      enum E29 {
                        E29_UNSPECIFIED = 0;
                        E29_CONST_1 = 25;
                        E29_CONST_2 = 15;
                        E29_CONST_3 = 114;
                        E29_CONST_4 = 52;
                        E29_CONST_5 = 111;
                      }
                      optional E29 f_1 = 2;
                      optional int64 f_2 = 3;
                      enum E30 {
                        E30_UNSPECIFIED = 0;
                        E30_CONST_1 = 107;
                        E30_CONST_2 = 85;
                        E30_CONST_3 = 29;
                        E30_CONST_4 = 70;
                        E30_CONST_5 = 21;
                      }
                      optional E30 f_3 = 6;
                      message M92 {
                        optional bool f_0 = 1;
                      }
                      optional M92 f_6 = 7;
                    }
                    repeated M91 f_3 = 4;
                  }
                  repeated M86 f_1 = 3;
                }
                optional M79 f_2 = 4;
                message M82 {
                  optional uint64 f_0 = 3;
                  message M84 {
                    optional int32 f_0 = 1;
                    message M89 {
                      optional int32 f_0 = 3;
                    }
                    optional M89 f_1 = 2;
                  }
                  repeated M84 f_3 = 4;
                }
                optional M82 f_4 = 5;
              }
              optional M72 f_1 = 2;
            }
            repeated M63 f_3 = 5;
          }
          optional M45 f_6 = 7;
        }
        optional M30 f_22 = 23;
        message M33 {
          optional float f_0 = 1;
          message M50 {
            optional string f_0 = 2;
            optional string f_1 = 4;
          }
          repeated M50 f_1 = 4;
        }
        optional M33 f_23 = 24;
      }
      optional M23 f_2 = 3;
      message M26 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 101;
          E8_CONST_2 = 125;
          E8_CONST_3 = 60;
          E8_CONST_4 = 80;
          E8_CONST_5 = 72;
        }
        optional E8 f_0 = 2;
        optional int32 f_1 = 3;
        optional int32 f_2 = 5;
        optional int32 f_3 = 6;
        message M27 {
          optional int64 f_0 = 1;
        }
        optional M27 f_6 = 7;
        message M32 {
          optional bytes f_0 = 1;
          optional int64 f_1 = 2;
          optional int32 f_2 = 3;
          optional double f_3 = 4;
        }
        repeated M32 f_7 = 8;
        message M38 {
          optional double f_0 = 1;
          message M49 {
            optional fixed64 f_0 = 2;
            optional int32 f_1 = 3;
            enum E9 {
              E9_UNSPECIFIED = 0;
              E9_CONST_1 = 65;
              E9_CONST_2 = 49;
              E9_CONST_3 = 24;
              E9_CONST_4 = 115;
              E9_CONST_5 = 116;
            }
            optional E9 f_2 = 4;
            optional int32 f_3 = 5;
            message M67 {
              optional float f_0 = 1;
              optional int32 f_1 = 3;
              optional float f_2 = 4;
              optional string f_3 = 5;
              optional bytes f_4 = 6;
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 4;
                E19_CONST_2 = 51;
                E19_CONST_3 = 98;
                E19_CONST_4 = 113;
                E19_CONST_5 = 37;
              }
              optional E19 f_5 = 7;
            }
            optional M67 f_5 = 7;
          }
          repeated M49 f_1 = 2;
        }
        optional M38 f_8 = 9;
      }
      optional M26 f_3 = 4;
    }
    optional M18 f_2 = 5;
  }
  optional M2 f_8 = 9;
  message M3 {
    optional double f_0 = 1;
    message M17 {
      optional double f_0 = 1;
      message M21 {
        optional string f_0 = 1;
        message M39 {
          optional string f_0 = 1;
        }
        repeated M39 f_1 = 2;
        message M42 {
          optional int64 f_0 = 2;
          optional int64 f_1 = 3;
          optional int64 f_2 = 4;
          optional int64 f_3 = 5;
          optional bool f_4 = 6;
          optional int32 f_5 = 7;
          optional fixed32 f_6 = 9;
          optional uint64 f_7 = 10;
        }
        repeated M42 f_2 = 3;
      }
      optional M21 f_1 = 2;
    }
    optional M17 f_1 = 2;
  }
  repeated M3 f_9 = 11;
  message M4 {
    optional int64 f_0 = 1;
    message M19 {
      optional string f_0 = 1;
    }
    repeated M19 f_1 = 4;
  }
  repeated M4 f_11 = 12;
  message M5 {
    optional int64 f_0 = 1;
    optional fixed32 f_1 = 3;
    optional string f_2 = 4;
    optional string f_3 = 6;
    optional float f_4 = 7;
    optional string f_5 = 8;
    message M12 {
      optional float f_0 = 1;
    }
    optional M12 f_8 = 10;
  }
  repeated M5 f_12 = 14;
  message M6 {
    optional float f_0 = 1;
  }
  optional M6 f_14 = 16;
  message M7 {
    optional int32 f_0 = 3;
  }
  repeated M7 f_16 = 17;
  message M8 {
    optional float f_0 = 2;
  }
  repeated M8 f_17 = 18;
  message M9 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 94;
      E1_CONST_2 = 40;
      E1_CONST_3 = 13;
      E1_CONST_4 = 88;
      E1_CONST_5 = 43;
    }
    optional E1 f_0 = 2;
    message M14 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 39;
        E4_CONST_2 = 102;
        E4_CONST_3 = 113;
        E4_CONST_4 = 21;
        E4_CONST_5 = 99;
      }
      optional E4 f_0 = 2;
    }
    optional M14 f_2 = 4;
  }
  optional M9 f_18 = 21;
  message M10 {
    optional string f_0 = 2;
    message M11 {
      optional string f_0 = 1;
      optional float f_1 = 3;
      repeated uint32 f_2 = 4 [packed = true];
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 107;
        E2_CONST_2 = 62;
        E2_CONST_3 = 97;
        E2_CONST_4 = 43;
        E2_CONST_5 = 47;
      }
      optional E2 f_3 = 5;
      optional fixed64 f_4 = 6;
      optional string f_5 = 7;
      optional float f_6 = 8;
      message M22 {
        enum E5 {
          E5_UNSPECIFIED = 0;
          E5_CONST_1 = 39;
          E5_CONST_2 = 104;
          E5_CONST_3 = 103;
          E5_CONST_4 = 18;
          E5_CONST_5 = 81;
        }
        optional E5 f_0 = 1;
        optional bytes f_1 = 3;
        message M35 {
          optional int32 f_0 = 2;
          message M43 {
            optional float f_0 = 1;
            message M59 {
              optional bytes f_0 = 1;
            }
            optional M59 f_1 = 2;
          }
          repeated M43 f_2 = 3;
        }
        optional M35 f_3 = 4;
        message M37 {
          optional string f_0 = 3;
          optional string f_1 = 4;
          message M47 {
            optional int32 f_0 = 2;
            optional uint64 f_1 = 3;
            optional int64 f_2 = 4;
            optional bytes f_3 = 5 ;
            optional float f_4 = 6;
            optional float f_5 = 8;
            optional int64 f_6 = 9;
            message M55 {
              optional float f_0 = 3;
            }
            optional M55 f_9 = 11;
          }
          optional M47 f_4 = 7;
        }
        optional M37 f_4 = 5;
      }
      optional M22 f_8 = 9;
      message M25 {
        optional int64 f_0 = 2;
        optional string f_1 = 3;
        optional string f_2 = 4;
        optional bool f_3 = 5;
        optional string f_4 = 6;
        optional int64 f_5 = 7;
        message M34 {
          optional bytes f_0 = 1;
          message M51 {
            optional bool f_0 = 1;
            message M64 {
              optional int64 f_0 = 2;
              message M69 {
                optional int64 f_0 = 1;
              }
              optional M69 f_2 = 3;
            }
            repeated M64 f_1 = 3;
          }
          repeated M51 f_1 = 4;
          message M53 {
            optional uint64 f_0 = 1;
            optional int64 f_1 = 2;
            optional float f_2 = 4;
            optional int64 f_3 = 5;
            optional int64 f_4 = 6;
            enum E10 {
              E10_UNSPECIFIED = 0;
              E10_CONST_1 = 98;
              E10_CONST_2 = 73;
              E10_CONST_3 = 55;
              E10_CONST_4 = 51;
              E10_CONST_5 = 2;
            }
            repeated E10 f_5 = 8 [packed = true];
            optional int32 f_6 = 10;
            repeated int32 f_7 = 13 [packed = true];
            optional float f_8 = 14;
            optional int64 f_9 = 15;
            enum E11 {
              E11_UNSPECIFIED = 0;
              E11_CONST_1 = 56;
              E11_CONST_2 = 23;
              E11_CONST_3 = 43;
              E11_CONST_4 = 126;
              E11_CONST_5 = 99;
            }
            optional E11 f_10 = 16;
            enum E12 {
              E12_UNSPECIFIED = 0;
              E12_CONST_1 = 68;
              E12_CONST_2 = 98;
              E12_CONST_3 = 52;
              E12_CONST_4 = 14;
              E12_CONST_5 = 26;
            }
            repeated E12 f_11 = 19 [packed = true];
            optional bool f_12 = 21;
            optional int64 f_13 = 24;
            optional double f_14 = 25;
            optional float f_15 = 26;
            optional int32 f_16 = 28;
            enum E13 {
              E13_UNSPECIFIED = 0;
              E13_CONST_1 = 5;
              E13_CONST_2 = 20;
              E13_CONST_3 = 92;
              E13_CONST_4 = 25;
              E13_CONST_5 = 115;
            }
            optional E13 f_17 = 29;
            optional int32 f_18 = 31;
            optional bool f_19 = 32;
            optional int64 f_20 = 34;
            optional int64 f_21 = 36;
            optional string f_22 = 37;
            optional string f_23 = 38;
            optional float f_24 = 39;
            optional int32 f_25 = 40;
            optional uint32 f_26 = 41;
            optional bytes f_27 = 42;
            //optional bytes f_27 = 42 [ctype = CORD];
            optional bool f_28 = 43;
            optional float f_29 = 44;
            optional double f_30 = 45;
            enum E14 {
              E14_UNSPECIFIED = 0;
              E14_CONST_1 = 18;
              E14_CONST_2 = 56;
              E14_CONST_3 = 11;
              E14_CONST_4 = 125;
              E14_CONST_5 = 107;
            }
            optional E14 f_31 = 47;
            optional int64 f_32 = 48;
            optional float f_33 = 50;
            enum E15 {
              E15_UNSPECIFIED = 0;
              E15_CONST_1 = 122;
              E15_CONST_2 = 59;
              E15_CONST_3 = 34;
              E15_CONST_4 = 76;
              E15_CONST_5 = 61;
            }
            optional E15 f_34 = 52;
            optional string f_35 = 53;
            optional bytes f_36 = 55;
            enum E16 {
              E16_UNSPECIFIED = 0;
              E16_CONST_1 = 86;
              E16_CONST_2 = 65;
              E16_CONST_3 = 111;
              E16_CONST_4 = 88;
              E16_CONST_5 = 91;
            }
            optional E16 f_37 = 57;
            optional bytes f_38 = 58;
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 64;
              E17_CONST_2 = 93;
              E17_CONST_3 = 51;
              E17_CONST_4 = 13;
              E17_CONST_5 = 29;
            }
            optional E17 f_39 = 59;
            message M68 {
              optional float f_0 = 1;
              optional float f_1 = 2;
              optional int64 f_2 = 4;
              optional bool f_3 = 5;
              repeated int32 f_4 = 6 [packed = true];
              optional string f_5 = 8;
              optional int64 f_6 = 10;
              optional bool f_7 = 11;
              optional bool f_8 = 13;
              optional string f_9 = 14;
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 117;
                E20_CONST_2 = 104;
                E20_CONST_3 = 16;
                E20_CONST_4 = 116;
                E20_CONST_5 = 20;
              }
              optional E20 f_10 = 15;
              optional int64 f_11 = 18;
              optional string f_12 = 19 ;
              optional string f_13 = 20;
              optional uint64 f_14 = 21;
              optional float f_15 = 23;
              optional int64 f_16 = 25;
              optional int32 f_17 = 27;
              optional bool f_18 = 28;
              optional int32 f_19 = 30;
              optional float f_20 = 31;
              optional string f_21 = 32;
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 120;
                E21_CONST_2 = 6;
                E21_CONST_3 = 101;
                E21_CONST_4 = 113;
                E21_CONST_5 = 26;
              }
              optional E21 f_22 = 33;
              repeated int32 f_23 = 35 [packed = true];
              repeated uint64 f_24 = 36 [packed = true];
              optional float f_25 = 39;
              optional float f_26 = 40;
              optional int32 f_27 = 41;
              optional fixed32 f_28 = 43;
              optional int64 f_29 = 44;
              optional string f_30 = 46;
              optional string f_31 = 47;
              optional int32 f_32 = 49;
              optional int64 f_33 = 50;
              optional uint32 f_34 = 52;
              optional float f_35 = 53;
              optional float f_36 = 54;
              optional bool f_37 = 56;
              optional int64 f_38 = 58;
              optional int64 f_39 = 59;
              optional uint32 f_40 = 60;
              optional string f_41 = 61;
              optional float f_42 = 62;
              optional bytes f_43 = 63;
              message M71 {
                optional uint64 f_0 = 1;
                message M78 {
                  optional string f_0 = 1;
                  optional float f_1 = 2;
                  repeated float f_2 = 5 [packed = true];
                  optional int32 f_3 = 7;
                }
                optional M78 f_1 = 3;
              }
              optional M71 f_63 = 65;
            }
            optional M68 f_59 = 60;
          }
          repeated M53 f_4 = 6;
        }
        optional M34 f_7 = 8;
        message M40 {
          optional int64 f_0 = 3;
          optional string f_1 = 4;
          optional bytes f_2 = 6;
          optional fixed64 f_3 = 8;
        }
        optional M40 f_8 = 10;
        message M41 {
          optional bytes f_0 = 1;
          //optional bytes f_0 = 1 [ctype = CORD];
        }
        repeated M41 f_10 = 11;
      }
      optional M25 f_9 = 10;
    }
    optional M11 f_2 = 4;
    message M13 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 107;
        E3_CONST_2 = 56;
        E3_CONST_3 = 50;
        E3_CONST_4 = 34;
        E3_CONST_5 = 100;
      }
      optional E3 f_0 = 2;
    }
    repeated M13 f_4 = 5;
    message M15 {
      repeated float f_0 = 2 [packed = true];
    }
    optional M15 f_5 = 6;
    message M16 {
      optional float f_0 = 2;
      optional sfixed32 f_1 = 3;
      message M24 {
        optional bytes f_0 = 1 ;
        message M28 {
          optional double f_0 = 1;
          message M44 {
            optional float f_0 = 2;
          }
          repeated M44 f_1 = 3;
          message M46 {
            optional double f_0 = 1;
            message M62 {
              optional bytes f_0 = 2;
              //optional bytes f_0 = 2 [ctype = CORD];
            }
            optional M62 f_1 = 2;
          }
          optional M46 f_3 = 6;
        }
        optional M28 f_1 = 2;
        message M29 {
          optional float f_0 = 1;
        }
        optional M29 f_2 = 3;
        message M31 {
          optional float f_0 = 1;
        }
        repeated M31 f_3 = 4;
        message M36 {
          repeated bytes f_0 = 2 ;
          message M48 {
            optional bytes f_0 = 1;
            message M54 {
              optional int64 f_0 = 2;
              optional float f_1 = 5;
              message M74 {
                optional int64 f_0 = 2;
                optional uint32 f_1 = 3;
                repeated int32 f_2 = 5 [packed = true];
                message M77 {
                  optional string f_0 = 1;
                  enum E27 {
                    E27_UNSPECIFIED = 0;
                    E27_CONST_1 = 118;
                    E27_CONST_2 = 61;
                    E27_CONST_3 = 50;
                    E27_CONST_4 = 74;
                    E27_CONST_5 = 93;
                  }
                  optional E27 f_1 = 2;
                  message M83 {
                    optional int64 f_0 = 2;
                    message M88 {
                      optional int64 f_0 = 2;
                      message M94 {
                        optional int32 f_0 = 2;
                        optional int64 f_1 = 3;
                        optional float f_2 = 4;
                        optional double f_3 = 5;
                        enum E31 {
                          E31_UNSPECIFIED = 0;
                          E31_CONST_1 = 8;
                          E31_CONST_2 = 108;
                          E31_CONST_3 = 40;
                          E31_CONST_4 = 50;
                          E31_CONST_5 = 109;
                        }
                        optional E31 f_4 = 6;
                        optional int64 f_5 = 7;
                        optional string f_6 = 9;
                        enum E32 {
                          E32_UNSPECIFIED = 0;
                          E32_CONST_1 = 21;
                          E32_CONST_2 = 103;
                          E32_CONST_3 = 111;
                          E32_CONST_4 = 41;
                          E32_CONST_5 = 90;
                        }
                        repeated E32 f_7 = 10 [packed = true];
                      }
                      optional M94 f_2 = 3;
                    }
                    repeated M88 f_2 = 3;
                  }
                  optional M83 f_2 = 3;
                  message M87 {
                    optional int32 f_0 = 2;
                    message M90 {
                      optional string f_0 = 1;
                      message M93 {
                        optional float f_0 = 1;
                        message M95 {
                          optional bool f_0 = 1;
                          optional int64 f_1 = 2;
                          enum E33 {
                            E33_UNSPECIFIED = 0;
                            E33_CONST_1 = 45;
                            E33_CONST_2 = 44;
                            E33_CONST_3 = 80;
                            E33_CONST_4 = 36;
                            E33_CONST_5 = 22;
                          }
                          optional E33 f_2 = 4;
                          optional sfixed32 f_3 = 6;
                          optional bool f_4 = 8;
                          optional int64 f_5 = 9;
                          optional string f_6 = 11;
                          optional uint64 f_7 = 13;
                          optional int64 f_8 = 14;
                          optional int64 f_9 = 17;
                          optional int32 f_10 = 20;
                          optional int64 f_11 = 21;
                          optional int64 f_12 = 23;
                          optional bool f_13 = 24;
                          enum E34 {
                            E34_UNSPECIFIED = 0;
                            E34_CONST_1 = 64;
                            E34_CONST_2 = 107;
                            E34_CONST_3 = 83;
                            E34_CONST_4 = 10;
                            E34_CONST_5 = 114;
                          }
                          optional E34 f_14 = 25;
                          optional int32 f_15 = 27;
                          optional fixed64 f_16 = 28;
                          optional fixed32 f_17 = 29;
                          enum E35 {
                            E35_UNSPECIFIED = 0;
                            E35_CONST_1 = 55;
                            E35_CONST_2 = 119;
                            E35_CONST_3 = 98;
                            E35_CONST_4 = 99;
                            E35_CONST_5 = 43;
                          }
                          optional E35 f_18 = 30;
                          optional string f_19 = 32;
                          optional double f_20 = 34;
                          optional bool f_21 = 36;
                          optional string f_22 = 37;
                          optional uint32 f_23 = 38;
                          optional int64 f_24 = 40;
                          optional int32 f_25 = 41;
                          optional string f_26 = 42;
                          optional string f_27 = 43;
                          repeated string f_28 = 45;
                          optional string f_29 = 46;
                          optional int64 f_30 = 48;
                          optional fixed32 f_31 = 49;
                          optional fixed32 f_32 = 50;
                          message M96 {
                            optional string f_0 = 2;
                            message M97 {
                              optional int32 f_0 = 1;
                              message M98 {
                                optional double f_0 = 2;
                                message M99 {
                                  optional int64 f_0 = 1;
                                  message M100 {
                                    optional string f_0 = 2;
                                    message M101 {
                                      optional int32 f_0 = 1;
                                    }
                                    optional M101 f_2 = 5;
                                    message M102 {
                                      optional string f_0 = 1;
                                      optional string f_1 = 2;
                                      optional float f_2 = 3;
                                    }
                                    optional M102 f_5 = 7;
                                  }
                                  repeated M100 f_1 = 2;
                                }
                                optional M99 f_2 = 3;
                              }
                              optional M98 f_1 = 2;
                            }
                            optional M97 f_2 = 4;
                          }
                          optional M96 f_50 = 51;
                        }
                        optional M95 f_1 = 4;
                      }
                      optional M93 f_1 = 4;
                    }
                    optional M90 f_2 = 4;
                  }
                  optional M87 f_3 = 4;
                }
                repeated M77 f_5 = 6;
                message M80 {
                  optional string f_0 = 1;
                }
                optional M80 f_6 = 9;
              }
              optional M74 f_5 = 6;
            }
            optional M54 f_1 = 2;
            message M56 {
              optional float f_0 = 1;
              message M75 {
                enum E25 {
                  E25_UNSPECIFIED = 0;
                  E25_CONST_1 = 91;
                  E25_CONST_2 = 72;
                  E25_CONST_3 = 75;
                  E25_CONST_4 = 98;
                  E25_CONST_5 = 20;
                }
                optional E25 f_0 = 4;
              }
              repeated M75 f_1 = 2;
            }
            optional M56 f_2 = 5;
            message M61 {
              optional uint32 f_0 = 1;
              message M70 {
                optional string f_0 = 2;
              }
              optional M70 f_1 = 2;
            }
            optional M61 f_5 = 6;
          }
          optional M48 f_2 = 4;
          message M52 {
            optional double f_0 = 2;
            message M58 {
              optional int64 f_0 = 2;
            }
            optional M58 f_2 = 3;
            message M60 {
              optional bool f_0 = 1;
            }
            optional M60 f_3 = 5;
            message M65 {
              optional int64 f_0 = 1;
              message M76 {
                optional int32 f_0 = 3;
                optional string f_1 = 5;
                enum E26 {
                  E26_UNSPECIFIED = 0;
                  E26_CONST_1 = 31;
                  E26_CONST_2 = 95;
                  E26_CONST_3 = 106;
                  E26_CONST_4 = 117;
                  E26_CONST_5 = 25;
                }
                repeated E26 f_2 = 6 [packed = true];
                optional bool f_3 = 7;
              }
              optional M76 f_1 = 2;
            }
            optional M65 f_5 = 7;
            message M66 {
              optional uint64 f_0 = 1;
              message M73 {
                enum E23 {
                  E23_UNSPECIFIED = 0;
                  E23_CONST_1 = 98;
                  E23_CONST_2 = 28;
                  E23_CONST_3 = 24;
                  E23_CONST_4 = 68;
                  E23_CONST_5 = 74;
                }
                optional E23 f_0 = 2;
                enum E24 {
                  E24_UNSPECIFIED = 0;
                  E24_CONST_1 = 21;
                  E24_CONST_2 = 29;
                  E24_CONST_3 = 113;
                  E24_CONST_4 = 17;
                  E24_CONST_5 = 97;
                }
                optional E24 f_1 = 3;
                optional float f_2 = 5;
                optional bytes f_3 = 6;
                message M81 {
                  optional float f_0 = 2;
                  message M85 {
                    optional bool f_0 = 1;
                  }
                  repeated M85 f_2 = 3;
                }
                optional M81 f_6 = 7;
              }
              repeated M73 f_1 = 2;
            }
            optional M66 f_7 = 8;
          }
          optional M52 f_4 = 5;
        }
        repeated M36 f_4 = 5;
      }
      optional M24 f_3 = 5;
    }
    optional M16 f_6 = 8;
    message M20 {
      optional double f_0 = 1;
      optional bool f_1 = 2;
      optional double f_2 = 3;
      optional int64 f_3 = 4;
      optional float f_4 = 5;
      optional string f_5 = 6;
      optional double f_6 = 8;
      optional string f_7 = 10;
    }
    optional M20 f_8 = 10;
  }
  optional M10 f_21 = 22;
}
