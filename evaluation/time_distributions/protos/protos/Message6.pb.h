// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/Message6.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage6_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage6_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fMessage6_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fMessage6_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fMessage6_2eproto;
namespace fleetbench {
namespace proto {
class Message6;
struct Message6DefaultTypeInternal;
extern Message6DefaultTypeInternal _Message6_default_instance_;
class Message6_M1;
struct Message6_M1DefaultTypeInternal;
extern Message6_M1DefaultTypeInternal _Message6_M1_default_instance_;
class Message6_M1_M15;
struct Message6_M1_M15DefaultTypeInternal;
extern Message6_M1_M15DefaultTypeInternal _Message6_M1_M15_default_instance_;
class Message6_M1_M15_M21;
struct Message6_M1_M15_M21DefaultTypeInternal;
extern Message6_M1_M15_M21DefaultTypeInternal _Message6_M1_M15_M21_default_instance_;
class Message6_M1_M15_M23;
struct Message6_M1_M15_M23DefaultTypeInternal;
extern Message6_M1_M15_M23DefaultTypeInternal _Message6_M1_M15_M23_default_instance_;
class Message6_M1_M15_M23_M28;
struct Message6_M1_M15_M23_M28DefaultTypeInternal;
extern Message6_M1_M15_M23_M28DefaultTypeInternal _Message6_M1_M15_M23_M28_default_instance_;
class Message6_M1_M15_M23_M28_M42;
struct Message6_M1_M15_M23_M28_M42DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44;
struct Message6_M1_M15_M23_M28_M42_M44DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M47;
struct Message6_M1_M15_M23_M28_M42_M44_M47DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M47DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M47_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M47_M55;
struct Message6_M1_M15_M23_M28_M42_M44_M47_M55DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M47_M55DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M47_M55_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57;
struct Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M50;
struct Message6_M1_M15_M23_M28_M42_M44_M50DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M50DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M50_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M50_M52;
struct Message6_M1_M15_M23_M28_M42_M44_M50_M52DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M50_M52DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M50_M52_default_instance_;
class Message6_M1_M15_M23_M28_M42_M44_M50_M54;
struct Message6_M1_M15_M23_M28_M42_M44_M50_M54DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M44_M50_M54DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M44_M50_M54_default_instance_;
class Message6_M1_M15_M23_M28_M42_M45;
struct Message6_M1_M15_M23_M28_M42_M45DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M45DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M45_default_instance_;
class Message6_M1_M15_M23_M28_M42_M45_M49;
struct Message6_M1_M15_M23_M28_M42_M45_M49DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M42_M45_M49DefaultTypeInternal _Message6_M1_M15_M23_M28_M42_M45_M49_default_instance_;
class Message6_M1_M15_M23_M28_M43;
struct Message6_M1_M15_M23_M28_M43DefaultTypeInternal;
extern Message6_M1_M15_M23_M28_M43DefaultTypeInternal _Message6_M1_M15_M23_M28_M43_default_instance_;
class Message6_M1_M17;
struct Message6_M1_M17DefaultTypeInternal;
extern Message6_M1_M17DefaultTypeInternal _Message6_M1_M17_default_instance_;
class Message6_M2;
struct Message6_M2DefaultTypeInternal;
extern Message6_M2DefaultTypeInternal _Message6_M2_default_instance_;
class Message6_M2_M10;
struct Message6_M2_M10DefaultTypeInternal;
extern Message6_M2_M10DefaultTypeInternal _Message6_M2_M10_default_instance_;
class Message6_M2_M10_M19;
struct Message6_M2_M10_M19DefaultTypeInternal;
extern Message6_M2_M10_M19DefaultTypeInternal _Message6_M2_M10_M19_default_instance_;
class Message6_M2_M12;
struct Message6_M2_M12DefaultTypeInternal;
extern Message6_M2_M12DefaultTypeInternal _Message6_M2_M12_default_instance_;
class Message6_M2_M14;
struct Message6_M2_M14DefaultTypeInternal;
extern Message6_M2_M14DefaultTypeInternal _Message6_M2_M14_default_instance_;
class Message6_M2_M16;
struct Message6_M2_M16DefaultTypeInternal;
extern Message6_M2_M16DefaultTypeInternal _Message6_M2_M16_default_instance_;
class Message6_M3;
struct Message6_M3DefaultTypeInternal;
extern Message6_M3DefaultTypeInternal _Message6_M3_default_instance_;
class Message6_M3_M11;
struct Message6_M3_M11DefaultTypeInternal;
extern Message6_M3_M11DefaultTypeInternal _Message6_M3_M11_default_instance_;
class Message6_M3_M11_M22;
struct Message6_M3_M11_M22DefaultTypeInternal;
extern Message6_M3_M11_M22DefaultTypeInternal _Message6_M3_M11_M22_default_instance_;
class Message6_M3_M11_M22_M32;
struct Message6_M3_M11_M22_M32DefaultTypeInternal;
extern Message6_M3_M11_M22_M32DefaultTypeInternal _Message6_M3_M11_M22_M32_default_instance_;
class Message6_M4;
struct Message6_M4DefaultTypeInternal;
extern Message6_M4DefaultTypeInternal _Message6_M4_default_instance_;
class Message6_M4_M13;
struct Message6_M4_M13DefaultTypeInternal;
extern Message6_M4_M13DefaultTypeInternal _Message6_M4_M13_default_instance_;
class Message6_M4_M13_M24;
struct Message6_M4_M13_M24DefaultTypeInternal;
extern Message6_M4_M13_M24DefaultTypeInternal _Message6_M4_M13_M24_default_instance_;
class Message6_M4_M13_M26;
struct Message6_M4_M13_M26DefaultTypeInternal;
extern Message6_M4_M13_M26DefaultTypeInternal _Message6_M4_M13_M26_default_instance_;
class Message6_M4_M13_M26_M31;
struct Message6_M4_M13_M26_M31DefaultTypeInternal;
extern Message6_M4_M13_M26_M31DefaultTypeInternal _Message6_M4_M13_M26_M31_default_instance_;
class Message6_M4_M13_M26_M31_M40;
struct Message6_M4_M13_M26_M31_M40DefaultTypeInternal;
extern Message6_M4_M13_M26_M31_M40DefaultTypeInternal _Message6_M4_M13_M26_M31_M40_default_instance_;
class Message6_M4_M13_M26_M35;
struct Message6_M4_M13_M26_M35DefaultTypeInternal;
extern Message6_M4_M13_M26_M35DefaultTypeInternal _Message6_M4_M13_M26_M35_default_instance_;
class Message6_M4_M13_M26_M35_M39;
struct Message6_M4_M13_M26_M35_M39DefaultTypeInternal;
extern Message6_M4_M13_M26_M35_M39DefaultTypeInternal _Message6_M4_M13_M26_M35_M39_default_instance_;
class Message6_M4_M6;
struct Message6_M4_M6DefaultTypeInternal;
extern Message6_M4_M6DefaultTypeInternal _Message6_M4_M6_default_instance_;
class Message6_M4_M6_M18;
struct Message6_M4_M6_M18DefaultTypeInternal;
extern Message6_M4_M6_M18DefaultTypeInternal _Message6_M4_M6_M18_default_instance_;
class Message6_M4_M6_M18_M29;
struct Message6_M4_M6_M18_M29DefaultTypeInternal;
extern Message6_M4_M6_M18_M29DefaultTypeInternal _Message6_M4_M6_M18_M29_default_instance_;
class Message6_M4_M6_M18_M29_M38;
struct Message6_M4_M6_M18_M29_M38DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M38DefaultTypeInternal _Message6_M4_M6_M18_M29_M38_default_instance_;
class Message6_M4_M6_M18_M29_M41;
struct Message6_M4_M6_M18_M29_M41DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46;
struct Message6_M4_M6_M18_M29_M41_M46DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48;
struct Message6_M4_M6_M18_M29_M41_M46_M48DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_default_instance_;
class Message6_M4_M6_M18_M29_M41_M46_M48_M53;
struct Message6_M4_M6_M18_M29_M41_M46_M48_M53DefaultTypeInternal;
extern Message6_M4_M6_M18_M29_M41_M46_M48_M53DefaultTypeInternal _Message6_M4_M6_M18_M29_M41_M46_M48_M53_default_instance_;
class Message6_M4_M6_M25;
struct Message6_M4_M6_M25DefaultTypeInternal;
extern Message6_M4_M6_M25DefaultTypeInternal _Message6_M4_M6_M25_default_instance_;
class Message6_M4_M6_M25_M30;
struct Message6_M4_M6_M25_M30DefaultTypeInternal;
extern Message6_M4_M6_M25_M30DefaultTypeInternal _Message6_M4_M6_M25_M30_default_instance_;
class Message6_M4_M6_M25_M33;
struct Message6_M4_M6_M25_M33DefaultTypeInternal;
extern Message6_M4_M6_M25_M33DefaultTypeInternal _Message6_M4_M6_M25_M33_default_instance_;
class Message6_M4_M7;
struct Message6_M4_M7DefaultTypeInternal;
extern Message6_M4_M7DefaultTypeInternal _Message6_M4_M7_default_instance_;
class Message6_M5;
struct Message6_M5DefaultTypeInternal;
extern Message6_M5DefaultTypeInternal _Message6_M5_default_instance_;
class Message6_M5_M8;
struct Message6_M5_M8DefaultTypeInternal;
extern Message6_M5_M8DefaultTypeInternal _Message6_M5_M8_default_instance_;
class Message6_M5_M8_M27;
struct Message6_M5_M8_M27DefaultTypeInternal;
extern Message6_M5_M8_M27DefaultTypeInternal _Message6_M5_M8_M27_default_instance_;
class Message6_M5_M8_M27_M34;
struct Message6_M5_M8_M27_M34DefaultTypeInternal;
extern Message6_M5_M8_M27_M34DefaultTypeInternal _Message6_M5_M8_M27_M34_default_instance_;
class Message6_M5_M8_M27_M36;
struct Message6_M5_M8_M27_M36DefaultTypeInternal;
extern Message6_M5_M8_M27_M36DefaultTypeInternal _Message6_M5_M8_M27_M36_default_instance_;
class Message6_M5_M8_M27_M36_M37;
struct Message6_M5_M8_M27_M36_M37DefaultTypeInternal;
extern Message6_M5_M8_M27_M36_M37DefaultTypeInternal _Message6_M5_M8_M27_M36_M37_default_instance_;
class Message6_M5_M9;
struct Message6_M5_M9DefaultTypeInternal;
extern Message6_M5_M9DefaultTypeInternal _Message6_M5_M9_default_instance_;
class Message6_M5_M9_M20;
struct Message6_M5_M9_M20DefaultTypeInternal;
extern Message6_M5_M9_M20DefaultTypeInternal _Message6_M5_M9_M20_default_instance_;
}  // namespace proto
}  // namespace fleetbench
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fleetbench {
namespace proto {
enum Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 : int {
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_1 = 5,
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_2 = 126,
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_3 = 104,
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_4 = 39,
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_5 = 90,
};

bool Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>(126);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E80_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>(
      Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M47_E63 : int {
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_1 = 21,
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_2 = 15,
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_3 = 98,
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_4 = 99,
  Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_5 = 31,
};

bool Message6_M1_M15_M23_M28_M42_M44_M47_E63_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M47_E63_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M47_E63 Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M47_E63>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M47_E63 Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M47_E63>(99);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_ARRAYSIZE = 99 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M47_E63_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M47_E63_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M47_E63>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E63_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M47_E63_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_E63_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M47_E63* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M47_E63>(
      Message6_M1_M15_M23_M28_M42_M44_M47_E63_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_1 = 112,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_2 = 90,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_3 = 125,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_4 = 30,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_5 = 40,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>(125);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E78_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>(
      Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_1 = 15,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_2 = 64,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_3 = 115,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_4 = 30,
  Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_5 = 122,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>(122);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E79_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>(
      Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E64 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_1 = 18,
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_2 = 109,
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_3 = 27,
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_4 = 69,
  Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_5 = 114,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E64_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E64_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E64 Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E64>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E64 Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E64>(114);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E64_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E64_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E64>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E64_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E64_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E64_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E64* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E64>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E64_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E65 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_1 = 107,
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_2 = 48,
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_3 = 27,
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_4 = 5,
  Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_5 = 10,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E65_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E65_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E65 Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E65>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E65 Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E65>(107);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E65_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E65_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E65>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E65_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E65_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E65_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E65* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E65>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E65_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E66 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_1 = 55,
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_2 = 46,
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_3 = 50,
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_4 = 80,
  Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_5 = 34,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E66_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E66_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E66 Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E66>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E66 Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E66>(80);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_ARRAYSIZE = 80 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E66_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E66_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E66>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E66_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E66_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E66_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E66* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E66>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E66_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E67 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_1 = 105,
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_2 = 111,
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_3 = 15,
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_4 = 92,
  Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_5 = 16,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E67_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E67_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E67 Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E67>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E67 Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E67>(111);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_ARRAYSIZE = 111 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E67_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E67_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E67>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E67_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E67_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E67_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E67* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E67>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E67_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E68 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_1 = 24,
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_2 = 22,
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_3 = 102,
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_4 = 28,
  Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_5 = 78,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E68_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E68_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E68 Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E68>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E68 Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E68>(102);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_ARRAYSIZE = 102 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E68_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E68_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E68>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E68_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E68_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E68_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E68* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E68>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E68_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E69 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_1 = 34,
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_2 = 9,
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_3 = 39,
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_4 = 37,
  Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_5 = 86,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E69_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E69_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E69 Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E69>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E69 Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E69>(86);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_ARRAYSIZE = 86 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E69_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E69_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E69>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E69_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E69_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E69_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E69* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E69>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E69_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E70 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_1 = 84,
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_2 = 125,
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_3 = 121,
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_4 = 119,
  Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_5 = 123,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E70_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E70_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E70 Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E70>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E70 Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E70>(125);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E70_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E70_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E70>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E70_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E70_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E70_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E70* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E70>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E70_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E71 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_1 = 81,
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_2 = 51,
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_3 = 114,
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_4 = 52,
  Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_5 = 10,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E71_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E71_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E71 Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E71>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E71 Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E71>(114);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E71_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E71_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E71>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E71_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E71_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E71_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E71* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E71>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E71_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E72 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_1 = 47,
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_2 = 13,
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_3 = 10,
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_4 = 19,
  Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_5 = 68,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E72_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E72_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E72 Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E72>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E72 Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E72>(68);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_ARRAYSIZE = 68 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E72_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E72_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E72>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E72_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E72_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E72_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E72* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E72>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E72_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E73 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_1 = 36,
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_2 = 45,
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_3 = 16,
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_4 = 80,
  Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_5 = 111,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E73_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E73_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E73 Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E73>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E73 Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E73>(111);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_ARRAYSIZE = 111 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E73_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E73_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E73>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E73_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E73_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E73_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E73* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E73>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E73_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E74 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_1 = 13,
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_2 = 64,
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_3 = 94,
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_4 = 110,
  Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_5 = 61,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E74_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E74_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E74 Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E74>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E74 Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E74>(110);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E74_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E74_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E74>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E74_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E74_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E74_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E74* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E74>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E74_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E75 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_1 = 15,
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_2 = 100,
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_3 = 18,
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_4 = 62,
  Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_5 = 44,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E75_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E75_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E75 Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E75>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E75 Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E75>(100);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E75_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E75_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E75>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E75_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E75_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E75_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E75* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E75>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E75_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E76 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_1 = 83,
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_2 = 110,
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_3 = 99,
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_4 = 44,
  Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_5 = 114,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E76_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E76_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E76 Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E76>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E76 Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E76>(114);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E76_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E76_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E76>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E76_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E76_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E76_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E76* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E76>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E76_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M44_M50_E77 : int {
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_1 = 112,
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_2 = 91,
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_3 = 111,
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_4 = 8,
  Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_5 = 17,
};

bool Message6_M1_M15_M23_M28_M42_M44_M50_E77_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_E77_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E77 Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E77>(0);
constexpr Message6_M1_M15_M23_M28_M42_M44_M50_E77 Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M44_M50_E77>(112);
constexpr int Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M44_M50_E77_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_E77_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M44_M50_E77>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E77_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M44_M50_E77_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_E77_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M44_M50_E77* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M44_M50_E77>(
      Message6_M1_M15_M23_M28_M42_M44_M50_E77_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M45_E45 : int {
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_1 = 71,
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_2 = 66,
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_3 = 58,
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_4 = 33,
  Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_5 = 114,
};

bool Message6_M1_M15_M23_M28_M42_M45_E45_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M45_E45_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M45_E45 Message6_M1_M15_M23_M28_M42_M45_E45_E45_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M45_E45>(0);
constexpr Message6_M1_M15_M23_M28_M42_M45_E45 Message6_M1_M15_M23_M28_M42_M45_E45_E45_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M45_E45>(114);
constexpr int Message6_M1_M15_M23_M28_M42_M45_E45_E45_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M45_E45_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M45_E45_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M45_E45>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E45_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M45_E45_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M45_E45_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M45_E45* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M45_E45>(
      Message6_M1_M15_M23_M28_M42_M45_E45_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M45_E46 : int {
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_1 = 100,
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_2 = 46,
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_3 = 36,
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_4 = 24,
  Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_5 = 18,
};

bool Message6_M1_M15_M23_M28_M42_M45_E46_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M45_E46_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M45_E46 Message6_M1_M15_M23_M28_M42_M45_E46_E46_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M45_E46>(0);
constexpr Message6_M1_M15_M23_M28_M42_M45_E46 Message6_M1_M15_M23_M28_M42_M45_E46_E46_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M45_E46>(100);
constexpr int Message6_M1_M15_M23_M28_M42_M45_E46_E46_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M45_E46_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M45_E46_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M45_E46>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E46_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M45_E46_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M45_E46_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M45_E46* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M45_E46>(
      Message6_M1_M15_M23_M28_M42_M45_E46_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M45_E47 : int {
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_1 = 75,
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_2 = 61,
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_3 = 16,
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_4 = 2,
  Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_5 = 31,
};

bool Message6_M1_M15_M23_M28_M42_M45_E47_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M45_E47_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M45_E47 Message6_M1_M15_M23_M28_M42_M45_E47_E47_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M45_E47>(0);
constexpr Message6_M1_M15_M23_M28_M42_M45_E47 Message6_M1_M15_M23_M28_M42_M45_E47_E47_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M45_E47>(75);
constexpr int Message6_M1_M15_M23_M28_M42_M45_E47_E47_ARRAYSIZE = 75 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M45_E47_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M45_E47_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M45_E47>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E47_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M45_E47_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M45_E47_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M45_E47* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M45_E47>(
      Message6_M1_M15_M23_M28_M42_M45_E47_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M45_E48 : int {
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_1 = 110,
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_2 = 97,
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_3 = 84,
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_4 = 11,
  Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_5 = 124,
};

bool Message6_M1_M15_M23_M28_M42_M45_E48_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M45_E48_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M45_E48 Message6_M1_M15_M23_M28_M42_M45_E48_E48_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M45_E48>(0);
constexpr Message6_M1_M15_M23_M28_M42_M45_E48 Message6_M1_M15_M23_M28_M42_M45_E48_E48_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M45_E48>(124);
constexpr int Message6_M1_M15_M23_M28_M42_M45_E48_E48_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M45_E48_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M45_E48_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M45_E48>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E48_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M45_E48_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M45_E48_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M45_E48* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M45_E48>(
      Message6_M1_M15_M23_M28_M42_M45_E48_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M42_M45_E49 : int {
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_1 = 63,
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_2 = 106,
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_3 = 38,
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_4 = 84,
  Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_5 = 89,
};

bool Message6_M1_M15_M23_M28_M42_M45_E49_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M42_M45_E49_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M42_M45_E49 Message6_M1_M15_M23_M28_M42_M45_E49_E49_MIN = static_cast<Message6_M1_M15_M23_M28_M42_M45_E49>(0);
constexpr Message6_M1_M15_M23_M28_M42_M45_E49 Message6_M1_M15_M23_M28_M42_M45_E49_E49_MAX = static_cast<Message6_M1_M15_M23_M28_M42_M45_E49>(106);
constexpr int Message6_M1_M15_M23_M28_M42_M45_E49_E49_ARRAYSIZE = 106 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M42_M45_E49_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M42_M45_E49_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M42_M45_E49>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E49_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M42_M45_E49_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M42_M45_E49_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M42_M45_E49* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M42_M45_E49>(
      Message6_M1_M15_M23_M28_M42_M45_E49_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E38 : int {
  Message6_M1_M15_M23_M28_M43_E38_E38_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E38_E38_CONST_1 = 34,
  Message6_M1_M15_M23_M28_M43_E38_E38_CONST_2 = 115,
  Message6_M1_M15_M23_M28_M43_E38_E38_CONST_3 = 78,
  Message6_M1_M15_M23_M28_M43_E38_E38_CONST_4 = 35,
  Message6_M1_M15_M23_M28_M43_E38_E38_CONST_5 = 74,
};

bool Message6_M1_M15_M23_M28_M43_E38_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E38_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E38 Message6_M1_M15_M23_M28_M43_E38_E38_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E38>(0);
constexpr Message6_M1_M15_M23_M28_M43_E38 Message6_M1_M15_M23_M28_M43_E38_E38_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E38>(115);
constexpr int Message6_M1_M15_M23_M28_M43_E38_E38_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E38_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E38_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E38>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E38_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E38_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E38_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E38* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E38>(
      Message6_M1_M15_M23_M28_M43_E38_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E39 : int {
  Message6_M1_M15_M23_M28_M43_E39_E39_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E39_E39_CONST_1 = 122,
  Message6_M1_M15_M23_M28_M43_E39_E39_CONST_2 = 87,
  Message6_M1_M15_M23_M28_M43_E39_E39_CONST_3 = 36,
  Message6_M1_M15_M23_M28_M43_E39_E39_CONST_4 = 82,
  Message6_M1_M15_M23_M28_M43_E39_E39_CONST_5 = 103,
};

bool Message6_M1_M15_M23_M28_M43_E39_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E39_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E39 Message6_M1_M15_M23_M28_M43_E39_E39_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E39>(0);
constexpr Message6_M1_M15_M23_M28_M43_E39 Message6_M1_M15_M23_M28_M43_E39_E39_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E39>(122);
constexpr int Message6_M1_M15_M23_M28_M43_E39_E39_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E39_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E39_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E39>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E39_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E39_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E39_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E39* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E39>(
      Message6_M1_M15_M23_M28_M43_E39_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E40 : int {
  Message6_M1_M15_M23_M28_M43_E40_E40_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E40_E40_CONST_1 = 123,
  Message6_M1_M15_M23_M28_M43_E40_E40_CONST_2 = 83,
  Message6_M1_M15_M23_M28_M43_E40_E40_CONST_3 = 19,
  Message6_M1_M15_M23_M28_M43_E40_E40_CONST_4 = 33,
  Message6_M1_M15_M23_M28_M43_E40_E40_CONST_5 = 40,
};

bool Message6_M1_M15_M23_M28_M43_E40_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E40_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E40 Message6_M1_M15_M23_M28_M43_E40_E40_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E40>(0);
constexpr Message6_M1_M15_M23_M28_M43_E40 Message6_M1_M15_M23_M28_M43_E40_E40_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E40>(123);
constexpr int Message6_M1_M15_M23_M28_M43_E40_E40_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E40_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E40_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E40>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E40_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E40_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E40_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E40* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E40>(
      Message6_M1_M15_M23_M28_M43_E40_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E41 : int {
  Message6_M1_M15_M23_M28_M43_E41_E41_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E41_E41_CONST_1 = 60,
  Message6_M1_M15_M23_M28_M43_E41_E41_CONST_2 = 103,
  Message6_M1_M15_M23_M28_M43_E41_E41_CONST_3 = 111,
  Message6_M1_M15_M23_M28_M43_E41_E41_CONST_4 = 54,
  Message6_M1_M15_M23_M28_M43_E41_E41_CONST_5 = 120,
};

bool Message6_M1_M15_M23_M28_M43_E41_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E41_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E41 Message6_M1_M15_M23_M28_M43_E41_E41_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E41>(0);
constexpr Message6_M1_M15_M23_M28_M43_E41 Message6_M1_M15_M23_M28_M43_E41_E41_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E41>(120);
constexpr int Message6_M1_M15_M23_M28_M43_E41_E41_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E41_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E41_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E41>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E41_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E41_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E41_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E41* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E41>(
      Message6_M1_M15_M23_M28_M43_E41_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E42 : int {
  Message6_M1_M15_M23_M28_M43_E42_E42_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E42_E42_CONST_1 = 43,
  Message6_M1_M15_M23_M28_M43_E42_E42_CONST_2 = 103,
  Message6_M1_M15_M23_M28_M43_E42_E42_CONST_3 = 95,
  Message6_M1_M15_M23_M28_M43_E42_E42_CONST_4 = 112,
  Message6_M1_M15_M23_M28_M43_E42_E42_CONST_5 = 93,
};

bool Message6_M1_M15_M23_M28_M43_E42_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E42_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E42 Message6_M1_M15_M23_M28_M43_E42_E42_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E42>(0);
constexpr Message6_M1_M15_M23_M28_M43_E42 Message6_M1_M15_M23_M28_M43_E42_E42_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E42>(112);
constexpr int Message6_M1_M15_M23_M28_M43_E42_E42_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E42_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E42_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E42>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E42_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E42_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E42_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E42* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E42>(
      Message6_M1_M15_M23_M28_M43_E42_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E43 : int {
  Message6_M1_M15_M23_M28_M43_E43_E43_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E43_E43_CONST_1 = 75,
  Message6_M1_M15_M23_M28_M43_E43_E43_CONST_2 = 81,
  Message6_M1_M15_M23_M28_M43_E43_E43_CONST_3 = 89,
  Message6_M1_M15_M23_M28_M43_E43_E43_CONST_4 = 58,
  Message6_M1_M15_M23_M28_M43_E43_E43_CONST_5 = 82,
};

bool Message6_M1_M15_M23_M28_M43_E43_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E43_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E43 Message6_M1_M15_M23_M28_M43_E43_E43_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E43>(0);
constexpr Message6_M1_M15_M23_M28_M43_E43 Message6_M1_M15_M23_M28_M43_E43_E43_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E43>(89);
constexpr int Message6_M1_M15_M23_M28_M43_E43_E43_ARRAYSIZE = 89 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E43_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E43_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E43>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E43_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E43_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E43_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E43* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E43>(
      Message6_M1_M15_M23_M28_M43_E43_descriptor(), name, value);
}
enum Message6_M1_M15_M23_M28_M43_E44 : int {
  Message6_M1_M15_M23_M28_M43_E44_E44_UNSPECIFIED = 0,
  Message6_M1_M15_M23_M28_M43_E44_E44_CONST_1 = 41,
  Message6_M1_M15_M23_M28_M43_E44_E44_CONST_2 = 7,
  Message6_M1_M15_M23_M28_M43_E44_E44_CONST_3 = 81,
  Message6_M1_M15_M23_M28_M43_E44_E44_CONST_4 = 103,
  Message6_M1_M15_M23_M28_M43_E44_E44_CONST_5 = 83,
};

bool Message6_M1_M15_M23_M28_M43_E44_IsValid(int value);
extern const uint32_t Message6_M1_M15_M23_M28_M43_E44_internal_data_[];
constexpr Message6_M1_M15_M23_M28_M43_E44 Message6_M1_M15_M23_M28_M43_E44_E44_MIN = static_cast<Message6_M1_M15_M23_M28_M43_E44>(0);
constexpr Message6_M1_M15_M23_M28_M43_E44 Message6_M1_M15_M23_M28_M43_E44_E44_MAX = static_cast<Message6_M1_M15_M23_M28_M43_E44>(103);
constexpr int Message6_M1_M15_M23_M28_M43_E44_E44_ARRAYSIZE = 103 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M15_M23_M28_M43_E44_descriptor();
template <typename T>
const std::string& Message6_M1_M15_M23_M28_M43_E44_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M15_M23_M28_M43_E44>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E44_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M15_M23_M28_M43_E44_descriptor(), value);
}
inline bool Message6_M1_M15_M23_M28_M43_E44_Parse(absl::string_view name, Message6_M1_M15_M23_M28_M43_E44* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M15_M23_M28_M43_E44>(
      Message6_M1_M15_M23_M28_M43_E44_descriptor(), name, value);
}
enum Message6_M1_M17_E7 : int {
  Message6_M1_M17_E7_E7_UNSPECIFIED = 0,
  Message6_M1_M17_E7_E7_CONST_1 = 13,
  Message6_M1_M17_E7_E7_CONST_2 = 45,
  Message6_M1_M17_E7_E7_CONST_3 = 56,
  Message6_M1_M17_E7_E7_CONST_4 = 84,
  Message6_M1_M17_E7_E7_CONST_5 = 11,
};

bool Message6_M1_M17_E7_IsValid(int value);
extern const uint32_t Message6_M1_M17_E7_internal_data_[];
constexpr Message6_M1_M17_E7 Message6_M1_M17_E7_E7_MIN = static_cast<Message6_M1_M17_E7>(0);
constexpr Message6_M1_M17_E7 Message6_M1_M17_E7_E7_MAX = static_cast<Message6_M1_M17_E7>(84);
constexpr int Message6_M1_M17_E7_E7_ARRAYSIZE = 84 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M17_E7_descriptor();
template <typename T>
const std::string& Message6_M1_M17_E7_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M17_E7>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E7_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M17_E7_descriptor(), value);
}
inline bool Message6_M1_M17_E7_Parse(absl::string_view name, Message6_M1_M17_E7* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M17_E7>(
      Message6_M1_M17_E7_descriptor(), name, value);
}
enum Message6_M1_M17_E8 : int {
  Message6_M1_M17_E8_E8_UNSPECIFIED = 0,
  Message6_M1_M17_E8_E8_CONST_1 = 45,
  Message6_M1_M17_E8_E8_CONST_2 = 123,
  Message6_M1_M17_E8_E8_CONST_3 = 34,
  Message6_M1_M17_E8_E8_CONST_4 = 113,
  Message6_M1_M17_E8_E8_CONST_5 = 48351032,
};

bool Message6_M1_M17_E8_IsValid(int value);
extern const uint32_t Message6_M1_M17_E8_internal_data_[];
constexpr Message6_M1_M17_E8 Message6_M1_M17_E8_E8_MIN = static_cast<Message6_M1_M17_E8>(0);
constexpr Message6_M1_M17_E8 Message6_M1_M17_E8_E8_MAX = static_cast<Message6_M1_M17_E8>(48351032);
constexpr int Message6_M1_M17_E8_E8_ARRAYSIZE = 48351032 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_M17_E8_descriptor();
template <typename T>
const std::string& Message6_M1_M17_E8_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_M17_E8>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E8_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_M17_E8_descriptor(), value);
}
inline bool Message6_M1_M17_E8_Parse(absl::string_view name, Message6_M1_M17_E8* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_M17_E8>(
      Message6_M1_M17_E8_descriptor(), name, value);
}
enum Message6_M1_E3 : int {
  Message6_M1_E3_E3_UNSPECIFIED = 0,
  Message6_M1_E3_E3_CONST_1 = 70,
  Message6_M1_E3_E3_CONST_2 = 115,
  Message6_M1_E3_E3_CONST_3 = 76,
  Message6_M1_E3_E3_CONST_4 = 4,
  Message6_M1_E3_E3_CONST_5 = 106,
};

bool Message6_M1_E3_IsValid(int value);
extern const uint32_t Message6_M1_E3_internal_data_[];
constexpr Message6_M1_E3 Message6_M1_E3_E3_MIN = static_cast<Message6_M1_E3>(0);
constexpr Message6_M1_E3 Message6_M1_E3_E3_MAX = static_cast<Message6_M1_E3>(115);
constexpr int Message6_M1_E3_E3_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M1_E3_descriptor();
template <typename T>
const std::string& Message6_M1_E3_Name(T value) {
  static_assert(std::is_same<T, Message6_M1_E3>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E3_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M1_E3_descriptor(), value);
}
inline bool Message6_M1_E3_Parse(absl::string_view name, Message6_M1_E3* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M1_E3>(
      Message6_M1_E3_descriptor(), name, value);
}
enum Message6_M3_M11_M22_M32_E33 : int {
  Message6_M3_M11_M22_M32_E33_E33_UNSPECIFIED = 0,
  Message6_M3_M11_M22_M32_E33_E33_CONST_1 = 25,
  Message6_M3_M11_M22_M32_E33_E33_CONST_2 = 48,
  Message6_M3_M11_M22_M32_E33_E33_CONST_3 = 62,
  Message6_M3_M11_M22_M32_E33_E33_CONST_4 = 46,
  Message6_M3_M11_M22_M32_E33_E33_CONST_5 = 33,
};

bool Message6_M3_M11_M22_M32_E33_IsValid(int value);
extern const uint32_t Message6_M3_M11_M22_M32_E33_internal_data_[];
constexpr Message6_M3_M11_M22_M32_E33 Message6_M3_M11_M22_M32_E33_E33_MIN = static_cast<Message6_M3_M11_M22_M32_E33>(0);
constexpr Message6_M3_M11_M22_M32_E33 Message6_M3_M11_M22_M32_E33_E33_MAX = static_cast<Message6_M3_M11_M22_M32_E33>(62);
constexpr int Message6_M3_M11_M22_M32_E33_E33_ARRAYSIZE = 62 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M3_M11_M22_M32_E33_descriptor();
template <typename T>
const std::string& Message6_M3_M11_M22_M32_E33_Name(T value) {
  static_assert(std::is_same<T, Message6_M3_M11_M22_M32_E33>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E33_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M3_M11_M22_M32_E33_descriptor(), value);
}
inline bool Message6_M3_M11_M22_M32_E33_Parse(absl::string_view name, Message6_M3_M11_M22_M32_E33* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M3_M11_M22_M32_E33>(
      Message6_M3_M11_M22_M32_E33_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 : int {
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_1 = 42,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_2 = 84,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_3 = 6,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_4 = 113,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_5 = 18,
};

bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>(113);
constexpr int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E82_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>(
      Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 : int {
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_1 = 17,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_2 = 24,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_3 = 29,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_4 = 38,
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_5 = 72,
};

bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>(72);
constexpr int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_ARRAYSIZE = 72 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E81_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>(
      Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E50 : int {
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_1 = 54,
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_2 = 97,
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_3 = 121,
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_4 = 7,
  Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_5 = 95,
};

bool Message6_M4_M6_M18_M29_M41_M46_E50_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E50_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E50 Message6_M4_M6_M18_M29_M41_M46_E50_E50_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E50>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E50 Message6_M4_M6_M18_M29_M41_M46_E50_E50_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E50>(121);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E50_E50_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E50_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E50_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E50>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E50_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E50_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E50_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E50* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E50>(
      Message6_M4_M6_M18_M29_M41_M46_E50_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E51 : int {
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_1 = 104,
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_2 = 72,
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_3 = 99,
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_4 = 92,
  Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_5 = 62,
};

bool Message6_M4_M6_M18_M29_M41_M46_E51_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E51_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E51 Message6_M4_M6_M18_M29_M41_M46_E51_E51_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E51>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E51 Message6_M4_M6_M18_M29_M41_M46_E51_E51_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E51>(104);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E51_E51_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E51_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E51_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E51>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E51_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E51_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E51_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E51* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E51>(
      Message6_M4_M6_M18_M29_M41_M46_E51_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E52 : int {
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_1 = 50,
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_2 = 119,
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_3 = 52,
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_4 = 55,
  Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_5 = 89,
};

bool Message6_M4_M6_M18_M29_M41_M46_E52_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E52_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E52 Message6_M4_M6_M18_M29_M41_M46_E52_E52_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E52>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E52 Message6_M4_M6_M18_M29_M41_M46_E52_E52_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E52>(119);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E52_E52_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E52_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E52_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E52>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E52_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E52_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E52_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E52* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E52>(
      Message6_M4_M6_M18_M29_M41_M46_E52_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E53 : int {
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_1 = 57,
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_2 = 81,
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_3 = 114,
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_4 = 43,
  Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_5 = 21,
};

bool Message6_M4_M6_M18_M29_M41_M46_E53_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E53_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E53 Message6_M4_M6_M18_M29_M41_M46_E53_E53_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E53>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E53 Message6_M4_M6_M18_M29_M41_M46_E53_E53_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E53>(114);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E53_E53_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E53_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E53_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E53>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E53_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E53_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E53_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E53* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E53>(
      Message6_M4_M6_M18_M29_M41_M46_E53_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E54 : int {
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_1 = 99,
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_2 = 41,
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_3 = 16,
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_4 = 100,
  Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_5 = 25,
};

bool Message6_M4_M6_M18_M29_M41_M46_E54_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E54_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E54 Message6_M4_M6_M18_M29_M41_M46_E54_E54_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E54>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E54 Message6_M4_M6_M18_M29_M41_M46_E54_E54_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E54>(100);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E54_E54_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E54_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E54_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E54>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E54_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E54_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E54_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E54* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E54>(
      Message6_M4_M6_M18_M29_M41_M46_E54_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E55 : int {
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_1 = 119,
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_2 = 14,
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_3 = 96,
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_4 = 47,
  Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_5 = 61,
};

bool Message6_M4_M6_M18_M29_M41_M46_E55_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E55_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E55 Message6_M4_M6_M18_M29_M41_M46_E55_E55_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E55>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E55 Message6_M4_M6_M18_M29_M41_M46_E55_E55_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E55>(119);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E55_E55_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E55_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E55_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E55>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E55_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E55_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E55_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E55* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E55>(
      Message6_M4_M6_M18_M29_M41_M46_E55_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E56 : int {
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_1 = 110,
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_2 = 34,
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_3 = 90,
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_4 = 115,
  Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_5 = 36,
};

bool Message6_M4_M6_M18_M29_M41_M46_E56_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E56_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E56 Message6_M4_M6_M18_M29_M41_M46_E56_E56_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E56>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E56 Message6_M4_M6_M18_M29_M41_M46_E56_E56_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E56>(115);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E56_E56_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E56_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E56_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E56>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E56_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E56_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E56_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E56* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E56>(
      Message6_M4_M6_M18_M29_M41_M46_E56_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E57 : int {
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_1 = 107,
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_2 = 57,
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_3 = 86,
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_4 = 74,
  Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_5 = 69,
};

bool Message6_M4_M6_M18_M29_M41_M46_E57_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E57_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E57 Message6_M4_M6_M18_M29_M41_M46_E57_E57_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E57>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E57 Message6_M4_M6_M18_M29_M41_M46_E57_E57_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E57>(107);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E57_E57_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E57_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E57_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E57>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E57_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E57_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E57_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E57* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E57>(
      Message6_M4_M6_M18_M29_M41_M46_E57_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E58 : int {
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_1 = 16,
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_2 = 31,
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_3 = 39,
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_4 = 81,
  Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_5 = 55,
};

bool Message6_M4_M6_M18_M29_M41_M46_E58_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E58_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E58 Message6_M4_M6_M18_M29_M41_M46_E58_E58_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E58>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E58 Message6_M4_M6_M18_M29_M41_M46_E58_E58_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E58>(81);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E58_E58_ARRAYSIZE = 81 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E58_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E58_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E58>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E58_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E58_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E58_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E58* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E58>(
      Message6_M4_M6_M18_M29_M41_M46_E58_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E59 : int {
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_1 = 108,
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_2 = 4,
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_3 = 49,
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_4 = 12,
  Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_5 = 74,
};

bool Message6_M4_M6_M18_M29_M41_M46_E59_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E59_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E59 Message6_M4_M6_M18_M29_M41_M46_E59_E59_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E59>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E59 Message6_M4_M6_M18_M29_M41_M46_E59_E59_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E59>(108);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E59_E59_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E59_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E59_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E59>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E59_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E59_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E59_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E59* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E59>(
      Message6_M4_M6_M18_M29_M41_M46_E59_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E60 : int {
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_1 = 16,
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_2 = 117,
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_3 = 100,
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_4 = 120,
  Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_5 = 3,
};

bool Message6_M4_M6_M18_M29_M41_M46_E60_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E60_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E60 Message6_M4_M6_M18_M29_M41_M46_E60_E60_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E60>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E60 Message6_M4_M6_M18_M29_M41_M46_E60_E60_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E60>(120);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E60_E60_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E60_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E60_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E60>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E60_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E60_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E60_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E60* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E60>(
      Message6_M4_M6_M18_M29_M41_M46_E60_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E61 : int {
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_1 = 77,
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_2 = 100,
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_3 = 66,
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_4 = 17,
  Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_5 = 15,
};

bool Message6_M4_M6_M18_M29_M41_M46_E61_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E61_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E61 Message6_M4_M6_M18_M29_M41_M46_E61_E61_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E61>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E61 Message6_M4_M6_M18_M29_M41_M46_E61_E61_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E61>(100);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E61_E61_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E61_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E61_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E61>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E61_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E61_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E61_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E61* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E61>(
      Message6_M4_M6_M18_M29_M41_M46_E61_descriptor(), name, value);
}
enum Message6_M4_M6_M18_M29_M41_M46_E62 : int {
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_UNSPECIFIED = 0,
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_1 = 59,
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_2 = 24,
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_3 = 23,
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_4 = 48,
  Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_5 = 34,
};

bool Message6_M4_M6_M18_M29_M41_M46_E62_IsValid(int value);
extern const uint32_t Message6_M4_M6_M18_M29_M41_M46_E62_internal_data_[];
constexpr Message6_M4_M6_M18_M29_M41_M46_E62 Message6_M4_M6_M18_M29_M41_M46_E62_E62_MIN = static_cast<Message6_M4_M6_M18_M29_M41_M46_E62>(0);
constexpr Message6_M4_M6_M18_M29_M41_M46_E62 Message6_M4_M6_M18_M29_M41_M46_E62_E62_MAX = static_cast<Message6_M4_M6_M18_M29_M41_M46_E62>(59);
constexpr int Message6_M4_M6_M18_M29_M41_M46_E62_E62_ARRAYSIZE = 59 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M18_M29_M41_M46_E62_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M18_M29_M41_M46_E62_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M18_M29_M41_M46_E62>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E62_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M18_M29_M41_M46_E62_descriptor(), value);
}
inline bool Message6_M4_M6_M18_M29_M41_M46_E62_Parse(absl::string_view name, Message6_M4_M6_M18_M29_M41_M46_E62* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M18_M29_M41_M46_E62>(
      Message6_M4_M6_M18_M29_M41_M46_E62_descriptor(), name, value);
}
enum Message6_M4_M6_M25_M33_E34 : int {
  Message6_M4_M6_M25_M33_E34_E34_UNSPECIFIED = 0,
  Message6_M4_M6_M25_M33_E34_E34_CONST_1 = 21,
  Message6_M4_M6_M25_M33_E34_E34_CONST_2 = 121,
  Message6_M4_M6_M25_M33_E34_E34_CONST_3 = 113,
  Message6_M4_M6_M25_M33_E34_E34_CONST_4 = 30,
  Message6_M4_M6_M25_M33_E34_E34_CONST_5 = 23,
};

bool Message6_M4_M6_M25_M33_E34_IsValid(int value);
extern const uint32_t Message6_M4_M6_M25_M33_E34_internal_data_[];
constexpr Message6_M4_M6_M25_M33_E34 Message6_M4_M6_M25_M33_E34_E34_MIN = static_cast<Message6_M4_M6_M25_M33_E34>(0);
constexpr Message6_M4_M6_M25_M33_E34 Message6_M4_M6_M25_M33_E34_E34_MAX = static_cast<Message6_M4_M6_M25_M33_E34>(121);
constexpr int Message6_M4_M6_M25_M33_E34_E34_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M25_M33_E34_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M25_M33_E34_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M25_M33_E34>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E34_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M25_M33_E34_descriptor(), value);
}
inline bool Message6_M4_M6_M25_M33_E34_Parse(absl::string_view name, Message6_M4_M6_M25_M33_E34* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M25_M33_E34>(
      Message6_M4_M6_M25_M33_E34_descriptor(), name, value);
}
enum Message6_M4_M6_M25_E9 : int {
  Message6_M4_M6_M25_E9_E9_UNSPECIFIED = 0,
  Message6_M4_M6_M25_E9_E9_CONST_1 = 20,
  Message6_M4_M6_M25_E9_E9_CONST_2 = 93,
  Message6_M4_M6_M25_E9_E9_CONST_3 = 107,
  Message6_M4_M6_M25_E9_E9_CONST_4 = 78,
  Message6_M4_M6_M25_E9_E9_CONST_5 = 121,
};

bool Message6_M4_M6_M25_E9_IsValid(int value);
extern const uint32_t Message6_M4_M6_M25_E9_internal_data_[];
constexpr Message6_M4_M6_M25_E9 Message6_M4_M6_M25_E9_E9_MIN = static_cast<Message6_M4_M6_M25_E9>(0);
constexpr Message6_M4_M6_M25_E9 Message6_M4_M6_M25_E9_E9_MAX = static_cast<Message6_M4_M6_M25_E9>(121);
constexpr int Message6_M4_M6_M25_E9_E9_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M6_M25_E9_descriptor();
template <typename T>
const std::string& Message6_M4_M6_M25_E9_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M6_M25_E9>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E9_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M6_M25_E9_descriptor(), value);
}
inline bool Message6_M4_M6_M25_E9_Parse(absl::string_view name, Message6_M4_M6_M25_E9* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M6_M25_E9>(
      Message6_M4_M6_M25_E9_descriptor(), name, value);
}
enum Message6_M4_M13_M26_E10 : int {
  Message6_M4_M13_M26_E10_E10_UNSPECIFIED = 0,
  Message6_M4_M13_M26_E10_E10_CONST_1 = 61,
  Message6_M4_M13_M26_E10_E10_CONST_2 = 69,
  Message6_M4_M13_M26_E10_E10_CONST_3 = 20,
  Message6_M4_M13_M26_E10_E10_CONST_4 = 72,
  Message6_M4_M13_M26_E10_E10_CONST_5 = 93,
};

bool Message6_M4_M13_M26_E10_IsValid(int value);
extern const uint32_t Message6_M4_M13_M26_E10_internal_data_[];
constexpr Message6_M4_M13_M26_E10 Message6_M4_M13_M26_E10_E10_MIN = static_cast<Message6_M4_M13_M26_E10>(0);
constexpr Message6_M4_M13_M26_E10 Message6_M4_M13_M26_E10_E10_MAX = static_cast<Message6_M4_M13_M26_E10>(93);
constexpr int Message6_M4_M13_M26_E10_E10_ARRAYSIZE = 93 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M13_M26_E10_descriptor();
template <typename T>
const std::string& Message6_M4_M13_M26_E10_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M13_M26_E10>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E10_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M13_M26_E10_descriptor(), value);
}
inline bool Message6_M4_M13_M26_E10_Parse(absl::string_view name, Message6_M4_M13_M26_E10* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M13_M26_E10>(
      Message6_M4_M13_M26_E10_descriptor(), name, value);
}
enum Message6_M4_M13_M26_E11 : int {
  Message6_M4_M13_M26_E11_E11_UNSPECIFIED = 0,
  Message6_M4_M13_M26_E11_E11_CONST_1 = 13,
  Message6_M4_M13_M26_E11_E11_CONST_2 = 100,
  Message6_M4_M13_M26_E11_E11_CONST_3 = 95,
  Message6_M4_M13_M26_E11_E11_CONST_4 = 56,
  Message6_M4_M13_M26_E11_E11_CONST_5 = 48,
};

bool Message6_M4_M13_M26_E11_IsValid(int value);
extern const uint32_t Message6_M4_M13_M26_E11_internal_data_[];
constexpr Message6_M4_M13_M26_E11 Message6_M4_M13_M26_E11_E11_MIN = static_cast<Message6_M4_M13_M26_E11>(0);
constexpr Message6_M4_M13_M26_E11 Message6_M4_M13_M26_E11_E11_MAX = static_cast<Message6_M4_M13_M26_E11>(100);
constexpr int Message6_M4_M13_M26_E11_E11_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M4_M13_M26_E11_descriptor();
template <typename T>
const std::string& Message6_M4_M13_M26_E11_Name(T value) {
  static_assert(std::is_same<T, Message6_M4_M13_M26_E11>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E11_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M4_M13_M26_E11_descriptor(), value);
}
inline bool Message6_M4_M13_M26_E11_Parse(absl::string_view name, Message6_M4_M13_M26_E11* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M4_M13_M26_E11>(
      Message6_M4_M13_M26_E11_descriptor(), name, value);
}
enum Message6_M5_M8_M27_M34_E35 : int {
  Message6_M5_M8_M27_M34_E35_E35_UNSPECIFIED = 0,
  Message6_M5_M8_M27_M34_E35_E35_CONST_1 = 54,
  Message6_M5_M8_M27_M34_E35_E35_CONST_2 = 80,
  Message6_M5_M8_M27_M34_E35_E35_CONST_3 = 71,
  Message6_M5_M8_M27_M34_E35_E35_CONST_4 = 74,
  Message6_M5_M8_M27_M34_E35_E35_CONST_5 = 41,
};

bool Message6_M5_M8_M27_M34_E35_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_M34_E35_internal_data_[];
constexpr Message6_M5_M8_M27_M34_E35 Message6_M5_M8_M27_M34_E35_E35_MIN = static_cast<Message6_M5_M8_M27_M34_E35>(0);
constexpr Message6_M5_M8_M27_M34_E35 Message6_M5_M8_M27_M34_E35_E35_MAX = static_cast<Message6_M5_M8_M27_M34_E35>(80);
constexpr int Message6_M5_M8_M27_M34_E35_E35_ARRAYSIZE = 80 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_M34_E35_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_M34_E35_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_M34_E35>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E35_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_M34_E35_descriptor(), value);
}
inline bool Message6_M5_M8_M27_M34_E35_Parse(absl::string_view name, Message6_M5_M8_M27_M34_E35* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_M34_E35>(
      Message6_M5_M8_M27_M34_E35_descriptor(), name, value);
}
enum Message6_M5_M8_M27_M34_E36 : int {
  Message6_M5_M8_M27_M34_E36_E36_UNSPECIFIED = 0,
  Message6_M5_M8_M27_M34_E36_E36_CONST_1 = 31,
  Message6_M5_M8_M27_M34_E36_E36_CONST_2 = 29,
  Message6_M5_M8_M27_M34_E36_E36_CONST_3 = 99,
  Message6_M5_M8_M27_M34_E36_E36_CONST_4 = 107,
  Message6_M5_M8_M27_M34_E36_E36_CONST_5 = 90,
};

bool Message6_M5_M8_M27_M34_E36_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_M34_E36_internal_data_[];
constexpr Message6_M5_M8_M27_M34_E36 Message6_M5_M8_M27_M34_E36_E36_MIN = static_cast<Message6_M5_M8_M27_M34_E36>(0);
constexpr Message6_M5_M8_M27_M34_E36 Message6_M5_M8_M27_M34_E36_E36_MAX = static_cast<Message6_M5_M8_M27_M34_E36>(107);
constexpr int Message6_M5_M8_M27_M34_E36_E36_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_M34_E36_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_M34_E36_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_M34_E36>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E36_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_M34_E36_descriptor(), value);
}
inline bool Message6_M5_M8_M27_M34_E36_Parse(absl::string_view name, Message6_M5_M8_M27_M34_E36* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_M34_E36>(
      Message6_M5_M8_M27_M34_E36_descriptor(), name, value);
}
enum Message6_M5_M8_M27_M36_E37 : int {
  Message6_M5_M8_M27_M36_E37_E37_UNSPECIFIED = 0,
  Message6_M5_M8_M27_M36_E37_E37_CONST_1 = 119,
  Message6_M5_M8_M27_M36_E37_E37_CONST_2 = 24,
  Message6_M5_M8_M27_M36_E37_E37_CONST_3 = 120,
  Message6_M5_M8_M27_M36_E37_E37_CONST_4 = 16,
  Message6_M5_M8_M27_M36_E37_E37_CONST_5 = 89,
};

bool Message6_M5_M8_M27_M36_E37_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_M36_E37_internal_data_[];
constexpr Message6_M5_M8_M27_M36_E37 Message6_M5_M8_M27_M36_E37_E37_MIN = static_cast<Message6_M5_M8_M27_M36_E37>(0);
constexpr Message6_M5_M8_M27_M36_E37 Message6_M5_M8_M27_M36_E37_E37_MAX = static_cast<Message6_M5_M8_M27_M36_E37>(120);
constexpr int Message6_M5_M8_M27_M36_E37_E37_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_M36_E37_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_M36_E37_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_M36_E37>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E37_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_M36_E37_descriptor(), value);
}
inline bool Message6_M5_M8_M27_M36_E37_Parse(absl::string_view name, Message6_M5_M8_M27_M36_E37* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_M36_E37>(
      Message6_M5_M8_M27_M36_E37_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E12 : int {
  Message6_M5_M8_M27_E12_E12_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E12_E12_CONST_1 = 52,
  Message6_M5_M8_M27_E12_E12_CONST_2 = 65,
  Message6_M5_M8_M27_E12_E12_CONST_3 = 12,
  Message6_M5_M8_M27_E12_E12_CONST_4 = 106,
  Message6_M5_M8_M27_E12_E12_CONST_5 = 51,
};

bool Message6_M5_M8_M27_E12_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E12_internal_data_[];
constexpr Message6_M5_M8_M27_E12 Message6_M5_M8_M27_E12_E12_MIN = static_cast<Message6_M5_M8_M27_E12>(0);
constexpr Message6_M5_M8_M27_E12 Message6_M5_M8_M27_E12_E12_MAX = static_cast<Message6_M5_M8_M27_E12>(106);
constexpr int Message6_M5_M8_M27_E12_E12_ARRAYSIZE = 106 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E12_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E12_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E12>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E12_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E12_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E12_Parse(absl::string_view name, Message6_M5_M8_M27_E12* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E12>(
      Message6_M5_M8_M27_E12_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E13 : int {
  Message6_M5_M8_M27_E13_E13_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E13_E13_CONST_1 = 77,
  Message6_M5_M8_M27_E13_E13_CONST_2 = 45,
  Message6_M5_M8_M27_E13_E13_CONST_3 = 31,
  Message6_M5_M8_M27_E13_E13_CONST_4 = 14,
  Message6_M5_M8_M27_E13_E13_CONST_5 = 123,
};

bool Message6_M5_M8_M27_E13_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E13_internal_data_[];
constexpr Message6_M5_M8_M27_E13 Message6_M5_M8_M27_E13_E13_MIN = static_cast<Message6_M5_M8_M27_E13>(0);
constexpr Message6_M5_M8_M27_E13 Message6_M5_M8_M27_E13_E13_MAX = static_cast<Message6_M5_M8_M27_E13>(123);
constexpr int Message6_M5_M8_M27_E13_E13_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E13_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E13_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E13>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E13_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E13_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E13_Parse(absl::string_view name, Message6_M5_M8_M27_E13* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E13>(
      Message6_M5_M8_M27_E13_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E14 : int {
  Message6_M5_M8_M27_E14_E14_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E14_E14_CONST_1 = 74,
  Message6_M5_M8_M27_E14_E14_CONST_2 = 71,
  Message6_M5_M8_M27_E14_E14_CONST_3 = 110,
  Message6_M5_M8_M27_E14_E14_CONST_4 = 17,
  Message6_M5_M8_M27_E14_E14_CONST_5 = 43,
};

bool Message6_M5_M8_M27_E14_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E14_internal_data_[];
constexpr Message6_M5_M8_M27_E14 Message6_M5_M8_M27_E14_E14_MIN = static_cast<Message6_M5_M8_M27_E14>(0);
constexpr Message6_M5_M8_M27_E14 Message6_M5_M8_M27_E14_E14_MAX = static_cast<Message6_M5_M8_M27_E14>(110);
constexpr int Message6_M5_M8_M27_E14_E14_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E14_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E14_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E14>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E14_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E14_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E14_Parse(absl::string_view name, Message6_M5_M8_M27_E14* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E14>(
      Message6_M5_M8_M27_E14_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E15 : int {
  Message6_M5_M8_M27_E15_E15_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E15_E15_CONST_1 = 95,
  Message6_M5_M8_M27_E15_E15_CONST_2 = 13,
  Message6_M5_M8_M27_E15_E15_CONST_3 = 120,
  Message6_M5_M8_M27_E15_E15_CONST_4 = 70,
  Message6_M5_M8_M27_E15_E15_CONST_5 = 24,
};

bool Message6_M5_M8_M27_E15_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E15_internal_data_[];
constexpr Message6_M5_M8_M27_E15 Message6_M5_M8_M27_E15_E15_MIN = static_cast<Message6_M5_M8_M27_E15>(0);
constexpr Message6_M5_M8_M27_E15 Message6_M5_M8_M27_E15_E15_MAX = static_cast<Message6_M5_M8_M27_E15>(120);
constexpr int Message6_M5_M8_M27_E15_E15_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E15_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E15_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E15>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E15_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E15_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E15_Parse(absl::string_view name, Message6_M5_M8_M27_E15* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E15>(
      Message6_M5_M8_M27_E15_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E16 : int {
  Message6_M5_M8_M27_E16_E16_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E16_E16_CONST_1 = 106,
  Message6_M5_M8_M27_E16_E16_CONST_2 = 58,
  Message6_M5_M8_M27_E16_E16_CONST_3 = 66,
  Message6_M5_M8_M27_E16_E16_CONST_4 = 109,
  Message6_M5_M8_M27_E16_E16_CONST_5 = 69,
};

bool Message6_M5_M8_M27_E16_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E16_internal_data_[];
constexpr Message6_M5_M8_M27_E16 Message6_M5_M8_M27_E16_E16_MIN = static_cast<Message6_M5_M8_M27_E16>(0);
constexpr Message6_M5_M8_M27_E16 Message6_M5_M8_M27_E16_E16_MAX = static_cast<Message6_M5_M8_M27_E16>(109);
constexpr int Message6_M5_M8_M27_E16_E16_ARRAYSIZE = 109 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E16_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E16_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E16>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E16_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E16_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E16_Parse(absl::string_view name, Message6_M5_M8_M27_E16* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E16>(
      Message6_M5_M8_M27_E16_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E17 : int {
  Message6_M5_M8_M27_E17_E17_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E17_E17_CONST_1 = 46,
  Message6_M5_M8_M27_E17_E17_CONST_2 = 40,
  Message6_M5_M8_M27_E17_E17_CONST_3 = 81,
  Message6_M5_M8_M27_E17_E17_CONST_4 = 49,
  Message6_M5_M8_M27_E17_E17_CONST_5 = 112,
};

bool Message6_M5_M8_M27_E17_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E17_internal_data_[];
constexpr Message6_M5_M8_M27_E17 Message6_M5_M8_M27_E17_E17_MIN = static_cast<Message6_M5_M8_M27_E17>(0);
constexpr Message6_M5_M8_M27_E17 Message6_M5_M8_M27_E17_E17_MAX = static_cast<Message6_M5_M8_M27_E17>(112);
constexpr int Message6_M5_M8_M27_E17_E17_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E17_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E17_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E17>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E17_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E17_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E17_Parse(absl::string_view name, Message6_M5_M8_M27_E17* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E17>(
      Message6_M5_M8_M27_E17_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E18 : int {
  Message6_M5_M8_M27_E18_E18_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E18_E18_CONST_1 = 116,
  Message6_M5_M8_M27_E18_E18_CONST_2 = 117,
  Message6_M5_M8_M27_E18_E18_CONST_3 = 43,
  Message6_M5_M8_M27_E18_E18_CONST_4 = 85,
  Message6_M5_M8_M27_E18_E18_CONST_5 = 52,
};

bool Message6_M5_M8_M27_E18_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E18_internal_data_[];
constexpr Message6_M5_M8_M27_E18 Message6_M5_M8_M27_E18_E18_MIN = static_cast<Message6_M5_M8_M27_E18>(0);
constexpr Message6_M5_M8_M27_E18 Message6_M5_M8_M27_E18_E18_MAX = static_cast<Message6_M5_M8_M27_E18>(117);
constexpr int Message6_M5_M8_M27_E18_E18_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E18_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E18_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E18>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E18_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E18_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E18_Parse(absl::string_view name, Message6_M5_M8_M27_E18* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E18>(
      Message6_M5_M8_M27_E18_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E19 : int {
  Message6_M5_M8_M27_E19_E19_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E19_E19_CONST_1 = 26,
  Message6_M5_M8_M27_E19_E19_CONST_2 = 67,
  Message6_M5_M8_M27_E19_E19_CONST_3 = 32,
  Message6_M5_M8_M27_E19_E19_CONST_4 = 31,
  Message6_M5_M8_M27_E19_E19_CONST_5 = 110,
};

bool Message6_M5_M8_M27_E19_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E19_internal_data_[];
constexpr Message6_M5_M8_M27_E19 Message6_M5_M8_M27_E19_E19_MIN = static_cast<Message6_M5_M8_M27_E19>(0);
constexpr Message6_M5_M8_M27_E19 Message6_M5_M8_M27_E19_E19_MAX = static_cast<Message6_M5_M8_M27_E19>(110);
constexpr int Message6_M5_M8_M27_E19_E19_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E19_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E19_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E19>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E19_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E19_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E19_Parse(absl::string_view name, Message6_M5_M8_M27_E19* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E19>(
      Message6_M5_M8_M27_E19_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E20 : int {
  Message6_M5_M8_M27_E20_E20_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E20_E20_CONST_1 = 55,
  Message6_M5_M8_M27_E20_E20_CONST_2 = 87,
  Message6_M5_M8_M27_E20_E20_CONST_3 = 100,
  Message6_M5_M8_M27_E20_E20_CONST_4 = 66,
  Message6_M5_M8_M27_E20_E20_CONST_5 = 41,
};

bool Message6_M5_M8_M27_E20_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E20_internal_data_[];
constexpr Message6_M5_M8_M27_E20 Message6_M5_M8_M27_E20_E20_MIN = static_cast<Message6_M5_M8_M27_E20>(0);
constexpr Message6_M5_M8_M27_E20 Message6_M5_M8_M27_E20_E20_MAX = static_cast<Message6_M5_M8_M27_E20>(100);
constexpr int Message6_M5_M8_M27_E20_E20_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E20_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E20_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E20>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E20_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E20_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E20_Parse(absl::string_view name, Message6_M5_M8_M27_E20* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E20>(
      Message6_M5_M8_M27_E20_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E21 : int {
  Message6_M5_M8_M27_E21_E21_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E21_E21_CONST_1 = 116,
  Message6_M5_M8_M27_E21_E21_CONST_2 = 113,
  Message6_M5_M8_M27_E21_E21_CONST_3 = 124,
  Message6_M5_M8_M27_E21_E21_CONST_4 = 55,
  Message6_M5_M8_M27_E21_E21_CONST_5 = 32,
};

bool Message6_M5_M8_M27_E21_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E21_internal_data_[];
constexpr Message6_M5_M8_M27_E21 Message6_M5_M8_M27_E21_E21_MIN = static_cast<Message6_M5_M8_M27_E21>(0);
constexpr Message6_M5_M8_M27_E21 Message6_M5_M8_M27_E21_E21_MAX = static_cast<Message6_M5_M8_M27_E21>(124);
constexpr int Message6_M5_M8_M27_E21_E21_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E21_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E21_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E21>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E21_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E21_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E21_Parse(absl::string_view name, Message6_M5_M8_M27_E21* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E21>(
      Message6_M5_M8_M27_E21_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E22 : int {
  Message6_M5_M8_M27_E22_E22_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E22_E22_CONST_1 = 74,
  Message6_M5_M8_M27_E22_E22_CONST_2 = 3,
  Message6_M5_M8_M27_E22_E22_CONST_3 = 64,
  Message6_M5_M8_M27_E22_E22_CONST_4 = 35,
  Message6_M5_M8_M27_E22_E22_CONST_5 = 91,
};

bool Message6_M5_M8_M27_E22_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E22_internal_data_[];
constexpr Message6_M5_M8_M27_E22 Message6_M5_M8_M27_E22_E22_MIN = static_cast<Message6_M5_M8_M27_E22>(0);
constexpr Message6_M5_M8_M27_E22 Message6_M5_M8_M27_E22_E22_MAX = static_cast<Message6_M5_M8_M27_E22>(91);
constexpr int Message6_M5_M8_M27_E22_E22_ARRAYSIZE = 91 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E22_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E22_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E22>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E22_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E22_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E22_Parse(absl::string_view name, Message6_M5_M8_M27_E22* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E22>(
      Message6_M5_M8_M27_E22_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E23 : int {
  Message6_M5_M8_M27_E23_E23_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E23_E23_CONST_1 = 103,
  Message6_M5_M8_M27_E23_E23_CONST_2 = 122,
  Message6_M5_M8_M27_E23_E23_CONST_3 = 60,
  Message6_M5_M8_M27_E23_E23_CONST_4 = 75,
  Message6_M5_M8_M27_E23_E23_CONST_5 = 99,
};

bool Message6_M5_M8_M27_E23_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E23_internal_data_[];
constexpr Message6_M5_M8_M27_E23 Message6_M5_M8_M27_E23_E23_MIN = static_cast<Message6_M5_M8_M27_E23>(0);
constexpr Message6_M5_M8_M27_E23 Message6_M5_M8_M27_E23_E23_MAX = static_cast<Message6_M5_M8_M27_E23>(122);
constexpr int Message6_M5_M8_M27_E23_E23_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E23_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E23_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E23>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E23_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E23_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E23_Parse(absl::string_view name, Message6_M5_M8_M27_E23* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E23>(
      Message6_M5_M8_M27_E23_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E24 : int {
  Message6_M5_M8_M27_E24_E24_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E24_E24_CONST_1 = 84,
  Message6_M5_M8_M27_E24_E24_CONST_2 = 118,
  Message6_M5_M8_M27_E24_E24_CONST_3 = 89,
  Message6_M5_M8_M27_E24_E24_CONST_4 = 107,
  Message6_M5_M8_M27_E24_E24_CONST_5 = 82,
};

bool Message6_M5_M8_M27_E24_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E24_internal_data_[];
constexpr Message6_M5_M8_M27_E24 Message6_M5_M8_M27_E24_E24_MIN = static_cast<Message6_M5_M8_M27_E24>(0);
constexpr Message6_M5_M8_M27_E24 Message6_M5_M8_M27_E24_E24_MAX = static_cast<Message6_M5_M8_M27_E24>(118);
constexpr int Message6_M5_M8_M27_E24_E24_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E24_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E24_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E24>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E24_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E24_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E24_Parse(absl::string_view name, Message6_M5_M8_M27_E24* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E24>(
      Message6_M5_M8_M27_E24_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E25 : int {
  Message6_M5_M8_M27_E25_E25_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E25_E25_CONST_1 = 113,
  Message6_M5_M8_M27_E25_E25_CONST_2 = 31,
  Message6_M5_M8_M27_E25_E25_CONST_3 = 102,
  Message6_M5_M8_M27_E25_E25_CONST_4 = 44,
  Message6_M5_M8_M27_E25_E25_CONST_5 = 5,
};

bool Message6_M5_M8_M27_E25_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E25_internal_data_[];
constexpr Message6_M5_M8_M27_E25 Message6_M5_M8_M27_E25_E25_MIN = static_cast<Message6_M5_M8_M27_E25>(0);
constexpr Message6_M5_M8_M27_E25 Message6_M5_M8_M27_E25_E25_MAX = static_cast<Message6_M5_M8_M27_E25>(113);
constexpr int Message6_M5_M8_M27_E25_E25_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E25_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E25_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E25>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E25_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E25_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E25_Parse(absl::string_view name, Message6_M5_M8_M27_E25* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E25>(
      Message6_M5_M8_M27_E25_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E26 : int {
  Message6_M5_M8_M27_E26_E26_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E26_E26_CONST_1 = 19,
  Message6_M5_M8_M27_E26_E26_CONST_2 = 37,
  Message6_M5_M8_M27_E26_E26_CONST_3 = 28,
  Message6_M5_M8_M27_E26_E26_CONST_4 = 52,
  Message6_M5_M8_M27_E26_E26_CONST_5 = 126,
};

bool Message6_M5_M8_M27_E26_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E26_internal_data_[];
constexpr Message6_M5_M8_M27_E26 Message6_M5_M8_M27_E26_E26_MIN = static_cast<Message6_M5_M8_M27_E26>(0);
constexpr Message6_M5_M8_M27_E26 Message6_M5_M8_M27_E26_E26_MAX = static_cast<Message6_M5_M8_M27_E26>(126);
constexpr int Message6_M5_M8_M27_E26_E26_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E26_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E26_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E26>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E26_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E26_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E26_Parse(absl::string_view name, Message6_M5_M8_M27_E26* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E26>(
      Message6_M5_M8_M27_E26_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E27 : int {
  Message6_M5_M8_M27_E27_E27_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E27_E27_CONST_1 = 25,
  Message6_M5_M8_M27_E27_E27_CONST_2 = 27,
  Message6_M5_M8_M27_E27_E27_CONST_3 = 118,
  Message6_M5_M8_M27_E27_E27_CONST_4 = 35,
  Message6_M5_M8_M27_E27_E27_CONST_5 = 61,
};

bool Message6_M5_M8_M27_E27_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E27_internal_data_[];
constexpr Message6_M5_M8_M27_E27 Message6_M5_M8_M27_E27_E27_MIN = static_cast<Message6_M5_M8_M27_E27>(0);
constexpr Message6_M5_M8_M27_E27 Message6_M5_M8_M27_E27_E27_MAX = static_cast<Message6_M5_M8_M27_E27>(118);
constexpr int Message6_M5_M8_M27_E27_E27_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E27_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E27_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E27>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E27_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E27_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E27_Parse(absl::string_view name, Message6_M5_M8_M27_E27* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E27>(
      Message6_M5_M8_M27_E27_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E28 : int {
  Message6_M5_M8_M27_E28_E28_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E28_E28_CONST_1 = 36,
  Message6_M5_M8_M27_E28_E28_CONST_2 = 100,
  Message6_M5_M8_M27_E28_E28_CONST_3 = 82,
  Message6_M5_M8_M27_E28_E28_CONST_4 = 70,
  Message6_M5_M8_M27_E28_E28_CONST_5 = 3,
};

bool Message6_M5_M8_M27_E28_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E28_internal_data_[];
constexpr Message6_M5_M8_M27_E28 Message6_M5_M8_M27_E28_E28_MIN = static_cast<Message6_M5_M8_M27_E28>(0);
constexpr Message6_M5_M8_M27_E28 Message6_M5_M8_M27_E28_E28_MAX = static_cast<Message6_M5_M8_M27_E28>(100);
constexpr int Message6_M5_M8_M27_E28_E28_ARRAYSIZE = 100 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E28_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E28_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E28>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E28_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E28_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E28_Parse(absl::string_view name, Message6_M5_M8_M27_E28* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E28>(
      Message6_M5_M8_M27_E28_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E29 : int {
  Message6_M5_M8_M27_E29_E29_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E29_E29_CONST_1 = 86,
  Message6_M5_M8_M27_E29_E29_CONST_2 = 102,
  Message6_M5_M8_M27_E29_E29_CONST_3 = 82,
  Message6_M5_M8_M27_E29_E29_CONST_4 = 117,
  Message6_M5_M8_M27_E29_E29_CONST_5 = 37,
};

bool Message6_M5_M8_M27_E29_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E29_internal_data_[];
constexpr Message6_M5_M8_M27_E29 Message6_M5_M8_M27_E29_E29_MIN = static_cast<Message6_M5_M8_M27_E29>(0);
constexpr Message6_M5_M8_M27_E29 Message6_M5_M8_M27_E29_E29_MAX = static_cast<Message6_M5_M8_M27_E29>(117);
constexpr int Message6_M5_M8_M27_E29_E29_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E29_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E29_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E29>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E29_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E29_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E29_Parse(absl::string_view name, Message6_M5_M8_M27_E29* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E29>(
      Message6_M5_M8_M27_E29_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E30 : int {
  Message6_M5_M8_M27_E30_E30_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E30_E30_CONST_1 = 48,
  Message6_M5_M8_M27_E30_E30_CONST_2 = 69,
  Message6_M5_M8_M27_E30_E30_CONST_3 = 34,
  Message6_M5_M8_M27_E30_E30_CONST_4 = 120,
  Message6_M5_M8_M27_E30_E30_CONST_5 = 91,
};

bool Message6_M5_M8_M27_E30_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E30_internal_data_[];
constexpr Message6_M5_M8_M27_E30 Message6_M5_M8_M27_E30_E30_MIN = static_cast<Message6_M5_M8_M27_E30>(0);
constexpr Message6_M5_M8_M27_E30 Message6_M5_M8_M27_E30_E30_MAX = static_cast<Message6_M5_M8_M27_E30>(120);
constexpr int Message6_M5_M8_M27_E30_E30_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E30_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E30_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E30>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E30_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E30_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E30_Parse(absl::string_view name, Message6_M5_M8_M27_E30* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E30>(
      Message6_M5_M8_M27_E30_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E31 : int {
  Message6_M5_M8_M27_E31_E31_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E31_E31_CONST_1 = 97,
  Message6_M5_M8_M27_E31_E31_CONST_2 = 65,
  Message6_M5_M8_M27_E31_E31_CONST_3 = 22,
  Message6_M5_M8_M27_E31_E31_CONST_4 = 13,
  Message6_M5_M8_M27_E31_E31_CONST_5 = 90,
};

bool Message6_M5_M8_M27_E31_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E31_internal_data_[];
constexpr Message6_M5_M8_M27_E31 Message6_M5_M8_M27_E31_E31_MIN = static_cast<Message6_M5_M8_M27_E31>(0);
constexpr Message6_M5_M8_M27_E31 Message6_M5_M8_M27_E31_E31_MAX = static_cast<Message6_M5_M8_M27_E31>(97);
constexpr int Message6_M5_M8_M27_E31_E31_ARRAYSIZE = 97 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E31_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E31_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E31>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E31_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E31_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E31_Parse(absl::string_view name, Message6_M5_M8_M27_E31* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E31>(
      Message6_M5_M8_M27_E31_descriptor(), name, value);
}
enum Message6_M5_M8_M27_E32 : int {
  Message6_M5_M8_M27_E32_E32_UNSPECIFIED = 0,
  Message6_M5_M8_M27_E32_E32_CONST_1 = 7,
  Message6_M5_M8_M27_E32_E32_CONST_2 = 115,
  Message6_M5_M8_M27_E32_E32_CONST_3 = 59,
  Message6_M5_M8_M27_E32_E32_CONST_4 = 9,
  Message6_M5_M8_M27_E32_E32_CONST_5 = 65,
};

bool Message6_M5_M8_M27_E32_IsValid(int value);
extern const uint32_t Message6_M5_M8_M27_E32_internal_data_[];
constexpr Message6_M5_M8_M27_E32 Message6_M5_M8_M27_E32_E32_MIN = static_cast<Message6_M5_M8_M27_E32>(0);
constexpr Message6_M5_M8_M27_E32 Message6_M5_M8_M27_E32_E32_MAX = static_cast<Message6_M5_M8_M27_E32>(115);
constexpr int Message6_M5_M8_M27_E32_E32_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_M8_M27_E32_descriptor();
template <typename T>
const std::string& Message6_M5_M8_M27_E32_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_M8_M27_E32>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E32_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_M8_M27_E32_descriptor(), value);
}
inline bool Message6_M5_M8_M27_E32_Parse(absl::string_view name, Message6_M5_M8_M27_E32* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_M8_M27_E32>(
      Message6_M5_M8_M27_E32_descriptor(), name, value);
}
enum Message6_M5_E4 : int {
  Message6_M5_E4_E4_UNSPECIFIED = 0,
  Message6_M5_E4_E4_CONST_1 = 2,
  Message6_M5_E4_E4_CONST_2 = 19,
  Message6_M5_E4_E4_CONST_3 = 107,
  Message6_M5_E4_E4_CONST_4 = 30,
  Message6_M5_E4_E4_CONST_5 = 126,
};

bool Message6_M5_E4_IsValid(int value);
extern const uint32_t Message6_M5_E4_internal_data_[];
constexpr Message6_M5_E4 Message6_M5_E4_E4_MIN = static_cast<Message6_M5_E4>(0);
constexpr Message6_M5_E4 Message6_M5_E4_E4_MAX = static_cast<Message6_M5_E4>(126);
constexpr int Message6_M5_E4_E4_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_E4_descriptor();
template <typename T>
const std::string& Message6_M5_E4_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_E4>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E4_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_E4_descriptor(), value);
}
inline bool Message6_M5_E4_Parse(absl::string_view name, Message6_M5_E4* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_E4>(
      Message6_M5_E4_descriptor(), name, value);
}
enum Message6_M5_E5 : int {
  Message6_M5_E5_E5_UNSPECIFIED = 0,
  Message6_M5_E5_E5_CONST_1 = 15,
  Message6_M5_E5_E5_CONST_2 = 79,
  Message6_M5_E5_E5_CONST_3 = 119,
  Message6_M5_E5_E5_CONST_4 = 40,
  Message6_M5_E5_E5_CONST_5 = 76,
};

bool Message6_M5_E5_IsValid(int value);
extern const uint32_t Message6_M5_E5_internal_data_[];
constexpr Message6_M5_E5 Message6_M5_E5_E5_MIN = static_cast<Message6_M5_E5>(0);
constexpr Message6_M5_E5 Message6_M5_E5_E5_MAX = static_cast<Message6_M5_E5>(119);
constexpr int Message6_M5_E5_E5_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_E5_descriptor();
template <typename T>
const std::string& Message6_M5_E5_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_E5>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E5_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_E5_descriptor(), value);
}
inline bool Message6_M5_E5_Parse(absl::string_view name, Message6_M5_E5* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_E5>(
      Message6_M5_E5_descriptor(), name, value);
}
enum Message6_M5_E6 : int {
  Message6_M5_E6_E6_UNSPECIFIED = 0,
  Message6_M5_E6_E6_CONST_1 = 85,
  Message6_M5_E6_E6_CONST_2 = 30,
  Message6_M5_E6_E6_CONST_3 = 116,
  Message6_M5_E6_E6_CONST_4 = 40,
  Message6_M5_E6_E6_CONST_5 = 44,
};

bool Message6_M5_E6_IsValid(int value);
extern const uint32_t Message6_M5_E6_internal_data_[];
constexpr Message6_M5_E6 Message6_M5_E6_E6_MIN = static_cast<Message6_M5_E6>(0);
constexpr Message6_M5_E6 Message6_M5_E6_E6_MAX = static_cast<Message6_M5_E6>(116);
constexpr int Message6_M5_E6_E6_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_M5_E6_descriptor();
template <typename T>
const std::string& Message6_M5_E6_Name(T value) {
  static_assert(std::is_same<T, Message6_M5_E6>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E6_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_M5_E6_descriptor(), value);
}
inline bool Message6_M5_E6_Parse(absl::string_view name, Message6_M5_E6* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_M5_E6>(
      Message6_M5_E6_descriptor(), name, value);
}
enum Message6_E1 : int {
  Message6_E1_E1_UNSPECIFIED = 0,
  Message6_E1_E1_CONST_1 = 17,
  Message6_E1_E1_CONST_2 = 76,
  Message6_E1_E1_CONST_3 = 21,
  Message6_E1_E1_CONST_4 = 74,
  Message6_E1_E1_CONST_5 = 98,
};

bool Message6_E1_IsValid(int value);
extern const uint32_t Message6_E1_internal_data_[];
constexpr Message6_E1 Message6_E1_E1_MIN = static_cast<Message6_E1>(0);
constexpr Message6_E1 Message6_E1_E1_MAX = static_cast<Message6_E1>(98);
constexpr int Message6_E1_E1_ARRAYSIZE = 98 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_E1_descriptor();
template <typename T>
const std::string& Message6_E1_Name(T value) {
  static_assert(std::is_same<T, Message6_E1>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E1_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_E1_descriptor(), value);
}
inline bool Message6_E1_Parse(absl::string_view name, Message6_E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_E1>(
      Message6_E1_descriptor(), name, value);
}
enum Message6_E2 : int {
  Message6_E2_E2_UNSPECIFIED = 0,
  Message6_E2_E2_CONST_1 = 7,
  Message6_E2_E2_CONST_2 = 42,
  Message6_E2_E2_CONST_3 = 76,
  Message6_E2_E2_CONST_4 = 91,
  Message6_E2_E2_CONST_5 = 114,
};

bool Message6_E2_IsValid(int value);
extern const uint32_t Message6_E2_internal_data_[];
constexpr Message6_E2 Message6_E2_E2_MIN = static_cast<Message6_E2>(0);
constexpr Message6_E2 Message6_E2_E2_MAX = static_cast<Message6_E2>(114);
constexpr int Message6_E2_E2_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message6_E2_descriptor();
template <typename T>
const std::string& Message6_E2_Name(T value) {
  static_assert(std::is_same<T, Message6_E2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E2_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message6_E2_descriptor(), value);
}
inline bool Message6_E2_Parse(absl::string_view name, Message6_E2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message6_E2>(
      Message6_E2_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message6_M5_M9_M20 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M9.M20) */ {
 public:
  inline Message6_M5_M9_M20() : Message6_M5_M9_M20(nullptr) {}
  ~Message6_M5_M9_M20() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M9_M20(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M9_M20(const Message6_M5_M9_M20& from) : Message6_M5_M9_M20(nullptr, from) {}
  inline Message6_M5_M9_M20(Message6_M5_M9_M20&& from) noexcept
      : Message6_M5_M9_M20(nullptr, std::move(from)) {}
  inline Message6_M5_M9_M20& operator=(const Message6_M5_M9_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M9_M20& operator=(Message6_M5_M9_M20&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M9_M20& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M9_M20* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M9_M20*>(
        &_Message6_M5_M9_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 66;
  friend void swap(Message6_M5_M9_M20& a, Message6_M5_M9_M20& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M9_M20* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M9_M20* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M9_M20* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M9_M20>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M9_M20& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M9_M20& from) { Message6_M5_M9_M20::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M9_M20* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M9.M20"; }

 protected:
  explicit Message6_M5_M9_M20(::google::protobuf::Arena* arena);
  Message6_M5_M9_M20(::google::protobuf::Arena* arena, const Message6_M5_M9_M20& from);
  Message6_M5_M9_M20(::google::protobuf::Arena* arena, Message6_M5_M9_M20&& from) noexcept
      : Message6_M5_M9_M20(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M9.M20)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M9_M20_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M8_M27_M36_M37 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M8.M27.M36.M37) */ {
 public:
  inline Message6_M5_M8_M27_M36_M37() : Message6_M5_M8_M27_M36_M37(nullptr) {}
  ~Message6_M5_M8_M27_M36_M37() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M8_M27_M36_M37(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M8_M27_M36_M37(const Message6_M5_M8_M27_M36_M37& from) : Message6_M5_M8_M27_M36_M37(nullptr, from) {}
  inline Message6_M5_M8_M27_M36_M37(Message6_M5_M8_M27_M36_M37&& from) noexcept
      : Message6_M5_M8_M27_M36_M37(nullptr, std::move(from)) {}
  inline Message6_M5_M8_M27_M36_M37& operator=(const Message6_M5_M8_M27_M36_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M8_M27_M36_M37& operator=(Message6_M5_M8_M27_M36_M37&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M8_M27_M36_M37& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M8_M27_M36_M37* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M8_M27_M36_M37*>(
        &_Message6_M5_M8_M27_M36_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(Message6_M5_M8_M27_M36_M37& a, Message6_M5_M8_M27_M36_M37& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M8_M27_M36_M37* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M8_M27_M36_M37* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M8_M27_M36_M37* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M8_M27_M36_M37>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M8_M27_M36_M37& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M8_M27_M36_M37& from) { Message6_M5_M8_M27_M36_M37::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M8_M27_M36_M37* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M8.M27.M36.M37"; }

 protected:
  explicit Message6_M5_M8_M27_M36_M37(::google::protobuf::Arena* arena);
  Message6_M5_M8_M27_M36_M37(::google::protobuf::Arena* arena, const Message6_M5_M8_M27_M36_M37& from);
  Message6_M5_M8_M27_M36_M37(::google::protobuf::Arena* arena, Message6_M5_M8_M27_M36_M37&& from) noexcept
      : Message6_M5_M8_M27_M36_M37(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M8.M27.M36.M37)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M8_M27_M36_M37_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M8_M27_M34 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M8.M27.M34) */ {
 public:
  inline Message6_M5_M8_M27_M34() : Message6_M5_M8_M27_M34(nullptr) {}
  ~Message6_M5_M8_M27_M34() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M8_M27_M34(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M8_M27_M34(const Message6_M5_M8_M27_M34& from) : Message6_M5_M8_M27_M34(nullptr, from) {}
  inline Message6_M5_M8_M27_M34(Message6_M5_M8_M27_M34&& from) noexcept
      : Message6_M5_M8_M27_M34(nullptr, std::move(from)) {}
  inline Message6_M5_M8_M27_M34& operator=(const Message6_M5_M8_M27_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M8_M27_M34& operator=(Message6_M5_M8_M27_M34&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M8_M27_M34& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M8_M27_M34* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M8_M27_M34*>(
        &_Message6_M5_M8_M27_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(Message6_M5_M8_M27_M34& a, Message6_M5_M8_M27_M34& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M8_M27_M34* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M8_M27_M34* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M8_M27_M34* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M8_M27_M34>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M8_M27_M34& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M8_M27_M34& from) { Message6_M5_M8_M27_M34::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M8_M27_M34* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M8.M27.M34"; }

 protected:
  explicit Message6_M5_M8_M27_M34(::google::protobuf::Arena* arena);
  Message6_M5_M8_M27_M34(::google::protobuf::Arena* arena, const Message6_M5_M8_M27_M34& from);
  Message6_M5_M8_M27_M34(::google::protobuf::Arena* arena, Message6_M5_M8_M27_M34&& from) noexcept
      : Message6_M5_M8_M27_M34(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E35 = Message6_M5_M8_M27_M34_E35;
  static constexpr E35 E35_UNSPECIFIED = Message6_M5_M8_M27_M34_E35_E35_UNSPECIFIED;
  static constexpr E35 E35_CONST_1 = Message6_M5_M8_M27_M34_E35_E35_CONST_1;
  static constexpr E35 E35_CONST_2 = Message6_M5_M8_M27_M34_E35_E35_CONST_2;
  static constexpr E35 E35_CONST_3 = Message6_M5_M8_M27_M34_E35_E35_CONST_3;
  static constexpr E35 E35_CONST_4 = Message6_M5_M8_M27_M34_E35_E35_CONST_4;
  static constexpr E35 E35_CONST_5 = Message6_M5_M8_M27_M34_E35_E35_CONST_5;
  static inline bool E35_IsValid(int value) {
    return Message6_M5_M8_M27_M34_E35_IsValid(value);
  }
  static constexpr E35 E35_MIN = Message6_M5_M8_M27_M34_E35_E35_MIN;
  static constexpr E35 E35_MAX = Message6_M5_M8_M27_M34_E35_E35_MAX;
  static constexpr int E35_ARRAYSIZE = Message6_M5_M8_M27_M34_E35_E35_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E35_descriptor() {
    return Message6_M5_M8_M27_M34_E35_descriptor();
  }
  template <typename T>
  static inline const std::string& E35_Name(T value) {
    return Message6_M5_M8_M27_M34_E35_Name(value);
  }
  static inline bool E35_Parse(absl::string_view name, E35* value) {
    return Message6_M5_M8_M27_M34_E35_Parse(name, value);
  }
  using E36 = Message6_M5_M8_M27_M34_E36;
  static constexpr E36 E36_UNSPECIFIED = Message6_M5_M8_M27_M34_E36_E36_UNSPECIFIED;
  static constexpr E36 E36_CONST_1 = Message6_M5_M8_M27_M34_E36_E36_CONST_1;
  static constexpr E36 E36_CONST_2 = Message6_M5_M8_M27_M34_E36_E36_CONST_2;
  static constexpr E36 E36_CONST_3 = Message6_M5_M8_M27_M34_E36_E36_CONST_3;
  static constexpr E36 E36_CONST_4 = Message6_M5_M8_M27_M34_E36_E36_CONST_4;
  static constexpr E36 E36_CONST_5 = Message6_M5_M8_M27_M34_E36_E36_CONST_5;
  static inline bool E36_IsValid(int value) {
    return Message6_M5_M8_M27_M34_E36_IsValid(value);
  }
  static constexpr E36 E36_MIN = Message6_M5_M8_M27_M34_E36_E36_MIN;
  static constexpr E36 E36_MAX = Message6_M5_M8_M27_M34_E36_E36_MAX;
  static constexpr int E36_ARRAYSIZE = Message6_M5_M8_M27_M34_E36_E36_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E36_descriptor() {
    return Message6_M5_M8_M27_M34_E36_descriptor();
  }
  template <typename T>
  static inline const std::string& E36_Name(T value) {
    return Message6_M5_M8_M27_M34_E36_Name(value);
  }
  static inline bool E36_Parse(absl::string_view name, E36* value) {
    return Message6_M5_M8_M27_M34_E36_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF3FieldNumber = 6,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF4FieldNumber = 7,
  };
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.M34.E35 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M5_M8_M27_M34_E35 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M5_M8_M27_M34_E35 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_M34_E35 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M5_M8_M27_M34_E35 value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.M34.E36 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message6_M5_M8_M27_M34_E36 f_4() const;
  void set_f_4(::fleetbench::proto::Message6_M5_M8_M27_M34_E36 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_M34_E36 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message6_M5_M8_M27_M34_E36 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M8.M27.M34)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M8_M27_M34_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    int f_0_;
    ::int32_t f_1_;
    int f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M7) */ {
 public:
  inline Message6_M4_M7() : Message6_M4_M7(nullptr) {}
  ~Message6_M4_M7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M7(const Message6_M4_M7& from) : Message6_M4_M7(nullptr, from) {}
  inline Message6_M4_M7(Message6_M4_M7&& from) noexcept
      : Message6_M4_M7(nullptr, std::move(from)) {}
  inline Message6_M4_M7& operator=(const Message6_M4_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M7& operator=(Message6_M4_M7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M7* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M7*>(
        &_Message6_M4_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Message6_M4_M7& a, Message6_M4_M7& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M7& from) { Message6_M4_M7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M7"; }

 protected:
  explicit Message6_M4_M7(::google::protobuf::Arena* arena);
  Message6_M4_M7(::google::protobuf::Arena* arena, const Message6_M4_M7& from);
  Message6_M4_M7(::google::protobuf::Arena* arena, Message6_M4_M7&& from) noexcept
      : Message6_M4_M7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M25_M33 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M25.M33) */ {
 public:
  inline Message6_M4_M6_M25_M33() : Message6_M4_M6_M25_M33(nullptr) {}
  ~Message6_M4_M6_M25_M33() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M25_M33(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M25_M33(const Message6_M4_M6_M25_M33& from) : Message6_M4_M6_M25_M33(nullptr, from) {}
  inline Message6_M4_M6_M25_M33(Message6_M4_M6_M25_M33&& from) noexcept
      : Message6_M4_M6_M25_M33(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M25_M33& operator=(const Message6_M4_M6_M25_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M25_M33& operator=(Message6_M4_M6_M25_M33&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M25_M33& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M25_M33* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M25_M33*>(
        &_Message6_M4_M6_M25_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Message6_M4_M6_M25_M33& a, Message6_M4_M6_M25_M33& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M25_M33* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M25_M33* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M25_M33* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M25_M33>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M25_M33& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M25_M33& from) { Message6_M4_M6_M25_M33::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M25_M33* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M25.M33"; }

 protected:
  explicit Message6_M4_M6_M25_M33(::google::protobuf::Arena* arena);
  Message6_M4_M6_M25_M33(::google::protobuf::Arena* arena, const Message6_M4_M6_M25_M33& from);
  Message6_M4_M6_M25_M33(::google::protobuf::Arena* arena, Message6_M4_M6_M25_M33&& from) noexcept
      : Message6_M4_M6_M25_M33(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E34 = Message6_M4_M6_M25_M33_E34;
  static constexpr E34 E34_UNSPECIFIED = Message6_M4_M6_M25_M33_E34_E34_UNSPECIFIED;
  static constexpr E34 E34_CONST_1 = Message6_M4_M6_M25_M33_E34_E34_CONST_1;
  static constexpr E34 E34_CONST_2 = Message6_M4_M6_M25_M33_E34_E34_CONST_2;
  static constexpr E34 E34_CONST_3 = Message6_M4_M6_M25_M33_E34_E34_CONST_3;
  static constexpr E34 E34_CONST_4 = Message6_M4_M6_M25_M33_E34_E34_CONST_4;
  static constexpr E34 E34_CONST_5 = Message6_M4_M6_M25_M33_E34_E34_CONST_5;
  static inline bool E34_IsValid(int value) {
    return Message6_M4_M6_M25_M33_E34_IsValid(value);
  }
  static constexpr E34 E34_MIN = Message6_M4_M6_M25_M33_E34_E34_MIN;
  static constexpr E34 E34_MAX = Message6_M4_M6_M25_M33_E34_E34_MAX;
  static constexpr int E34_ARRAYSIZE = Message6_M4_M6_M25_M33_E34_E34_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E34_descriptor() {
    return Message6_M4_M6_M25_M33_E34_descriptor();
  }
  template <typename T>
  static inline const std::string& E34_Name(T value) {
    return Message6_M4_M6_M25_M33_E34_Name(value);
  }
  static inline bool E34_Parse(absl::string_view name, E34* value) {
    return Message6_M4_M6_M25_M33_E34_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
    kF2FieldNumber = 6,
  };
  // optional fixed32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M25.M33.E34 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M6_M25_M33_E34 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M4_M6_M25_M33_E34 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M25_M33_E34 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M4_M6_M25_M33_E34 value);

  public:
  // optional fixed64 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint64_t f_2() const;
  void set_f_2(::uint64_t value);

  private:
  ::uint64_t _internal_f_2() const;
  void _internal_set_f_2(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M25.M33)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M25_M33_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    int f_1_;
    ::uint64_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M25_M30 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M25.M30) */ {
 public:
  inline Message6_M4_M6_M25_M30() : Message6_M4_M6_M25_M30(nullptr) {}
  ~Message6_M4_M6_M25_M30() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M25_M30(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M25_M30(const Message6_M4_M6_M25_M30& from) : Message6_M4_M6_M25_M30(nullptr, from) {}
  inline Message6_M4_M6_M25_M30(Message6_M4_M6_M25_M30&& from) noexcept
      : Message6_M4_M6_M25_M30(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M25_M30& operator=(const Message6_M4_M6_M25_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M25_M30& operator=(Message6_M4_M6_M25_M30&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M25_M30& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M25_M30* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M25_M30*>(
        &_Message6_M4_M6_M25_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(Message6_M4_M6_M25_M30& a, Message6_M4_M6_M25_M30& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M25_M30* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M25_M30* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M25_M30* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M25_M30>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M25_M30& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M25_M30& from) { Message6_M4_M6_M25_M30::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M25_M30* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M25.M30"; }

 protected:
  explicit Message6_M4_M6_M25_M30(::google::protobuf::Arena* arena);
  Message6_M4_M6_M25_M30(::google::protobuf::Arena* arena, const Message6_M4_M6_M25_M30& from);
  Message6_M4_M6_M25_M30(::google::protobuf::Arena* arena, Message6_M4_M6_M25_M30&& from) noexcept
      : Message6_M4_M6_M25_M30(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M25.M30)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M25_M30_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M53 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M53() : Message6_M4_M6_M18_M29_M41_M46_M48_M53(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M53() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M53(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M53(const Message6_M4_M6_M18_M29_M41_M46_M48_M53& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M53(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M53(Message6_M4_M6_M18_M29_M41_M46_M48_M53&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M53(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M53& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M53& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M53&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M53& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M53* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M53*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M53& a, Message6_M4_M6_M18_M29_M41_M46_M48_M53& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M53* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M53* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M53* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M53>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M53& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M53& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M53::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M53* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M53(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M53(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M53& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M53(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M53&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M53(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M53_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E81 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81;
  static constexpr E81 E81_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_UNSPECIFIED;
  static constexpr E81 E81_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_1;
  static constexpr E81 E81_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_2;
  static constexpr E81 E81_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_3;
  static constexpr E81 E81_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_4;
  static constexpr E81 E81_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_CONST_5;
  static inline bool E81_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_IsValid(value);
  }
  static constexpr E81 E81_MIN = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_MIN;
  static constexpr E81 E81_MAX = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_MAX;
  static constexpr int E81_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_E81_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E81_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_descriptor();
  }
  template <typename T>
  static inline const std::string& E81_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_Name(value);
  }
  static inline bool E81_Parse(absl::string_view name, E81* value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_7())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())), f_8().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_7()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      sizes_list.push_back(f_8().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      sizes.push_back(end_addr - start_addr + sizeof(f_7()));
      sizes.push_back(f_8().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_8().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_8(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF8FieldNumber = 11,
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
    kF3FieldNumber = 5,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
  };
  // optional string f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  const std::string& f_8() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_8(Arg_&& arg, Args_... args);
  std::string* mutable_f_8();
  PROTOBUF_NODISCARD std::string* release_f_8();
  void set_allocated_f_8(std::string* value);

  private:
  const std::string& _internal_f_8() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_8(
      const std::string& value);
  std::string* _internal_mutable_f_8();

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.E81 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 value);

  public:
  // optional float f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional uint32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint32_t f_5() const;
  void set_f_5(::uint32_t value);

  private:
  ::uint32_t _internal_f_5() const;
  void _internal_set_f_5(::uint32_t value);

  public:
  // optional int32 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // optional int64 f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      83, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_8_;
    ::int64_t f_1_;
    int f_0_;
    float f_3_;
    ::int64_t f_2_;
    ::int64_t f_4_;
    ::uint32_t f_5_;
    ::int32_t f_6_;
    ::int64_t f_7_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      83, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      107, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      107, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M38 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M38) */ {
 public:
  inline Message6_M4_M6_M18_M29_M38() : Message6_M4_M6_M18_M29_M38(nullptr) {}
  ~Message6_M4_M6_M18_M29_M38() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M38(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M38(const Message6_M4_M6_M18_M29_M38& from) : Message6_M4_M6_M18_M29_M38(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M38(Message6_M4_M6_M18_M29_M38&& from) noexcept
      : Message6_M4_M6_M18_M29_M38(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M38& operator=(const Message6_M4_M6_M18_M29_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M38& operator=(Message6_M4_M6_M18_M29_M38&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M38& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M38* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M38*>(
        &_Message6_M4_M6_M18_M29_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(Message6_M4_M6_M18_M29_M38& a, Message6_M4_M6_M18_M29_M38& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M38* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M38* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M38* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M38>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M38& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M38& from) { Message6_M4_M6_M18_M29_M38::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M38* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M38"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M38(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M38(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M38& from);
  Message6_M4_M6_M18_M29_M38(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M38&& from) noexcept
      : Message6_M4_M6_M18_M29_M38(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M38)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M38_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M26_M35_M39 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M26.M35.M39) */ {
 public:
  inline Message6_M4_M13_M26_M35_M39() : Message6_M4_M13_M26_M35_M39(nullptr) {}
  ~Message6_M4_M13_M26_M35_M39() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M26_M35_M39(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M26_M35_M39(const Message6_M4_M13_M26_M35_M39& from) : Message6_M4_M13_M26_M35_M39(nullptr, from) {}
  inline Message6_M4_M13_M26_M35_M39(Message6_M4_M13_M26_M35_M39&& from) noexcept
      : Message6_M4_M13_M26_M35_M39(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M26_M35_M39& operator=(const Message6_M4_M13_M26_M35_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M26_M35_M39& operator=(Message6_M4_M13_M26_M35_M39&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M26_M35_M39& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M26_M35_M39* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M26_M35_M39*>(
        &_Message6_M4_M13_M26_M35_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(Message6_M4_M13_M26_M35_M39& a, Message6_M4_M13_M26_M35_M39& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M26_M35_M39* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M26_M35_M39* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M26_M35_M39* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M26_M35_M39>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M26_M35_M39& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M26_M35_M39& from) { Message6_M4_M13_M26_M35_M39::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M26_M35_M39* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M26.M35.M39"; }

 protected:
  explicit Message6_M4_M13_M26_M35_M39(::google::protobuf::Arena* arena);
  Message6_M4_M13_M26_M35_M39(::google::protobuf::Arena* arena, const Message6_M4_M13_M26_M35_M39& from);
  Message6_M4_M13_M26_M35_M39(::google::protobuf::Arena* arena, Message6_M4_M13_M26_M35_M39&& from) noexcept
      : Message6_M4_M13_M26_M35_M39(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M26.M35.M39)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M26_M35_M39_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M26_M31_M40 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M26.M31.M40) */ {
 public:
  inline Message6_M4_M13_M26_M31_M40() : Message6_M4_M13_M26_M31_M40(nullptr) {}
  ~Message6_M4_M13_M26_M31_M40() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M26_M31_M40(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M26_M31_M40(const Message6_M4_M13_M26_M31_M40& from) : Message6_M4_M13_M26_M31_M40(nullptr, from) {}
  inline Message6_M4_M13_M26_M31_M40(Message6_M4_M13_M26_M31_M40&& from) noexcept
      : Message6_M4_M13_M26_M31_M40(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M26_M31_M40& operator=(const Message6_M4_M13_M26_M31_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M26_M31_M40& operator=(Message6_M4_M13_M26_M31_M40&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M26_M31_M40& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M26_M31_M40* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M26_M31_M40*>(
        &_Message6_M4_M13_M26_M31_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(Message6_M4_M13_M26_M31_M40& a, Message6_M4_M13_M26_M31_M40& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M26_M31_M40* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M26_M31_M40* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M26_M31_M40* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M26_M31_M40>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M26_M31_M40& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M26_M31_M40& from) { Message6_M4_M13_M26_M31_M40::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M26_M31_M40* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M26.M31.M40"; }

 protected:
  explicit Message6_M4_M13_M26_M31_M40(::google::protobuf::Arena* arena);
  Message6_M4_M13_M26_M31_M40(::google::protobuf::Arena* arena, const Message6_M4_M13_M26_M31_M40& from);
  Message6_M4_M13_M26_M31_M40(::google::protobuf::Arena* arena, Message6_M4_M13_M26_M31_M40&& from) noexcept
      : Message6_M4_M13_M26_M31_M40(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M26.M31.M40)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M26_M31_M40_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M24 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M24) */ {
 public:
  inline Message6_M4_M13_M24() : Message6_M4_M13_M24(nullptr) {}
  ~Message6_M4_M13_M24() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M24(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M24(const Message6_M4_M13_M24& from) : Message6_M4_M13_M24(nullptr, from) {}
  inline Message6_M4_M13_M24(Message6_M4_M13_M24&& from) noexcept
      : Message6_M4_M13_M24(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M24& operator=(const Message6_M4_M13_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M24& operator=(Message6_M4_M13_M24&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M24& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M24* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M24*>(
        &_Message6_M4_M13_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(Message6_M4_M13_M24& a, Message6_M4_M13_M24& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M24* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M24* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M24* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M24>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M24& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M24& from) { Message6_M4_M13_M24::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M24* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M24"; }

 protected:
  explicit Message6_M4_M13_M24(::google::protobuf::Arena* arena);
  Message6_M4_M13_M24(::google::protobuf::Arena* arena, const Message6_M4_M13_M24& from);
  Message6_M4_M13_M24(::google::protobuf::Arena* arena, Message6_M4_M13_M24&& from) noexcept
      : Message6_M4_M13_M24(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M24)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M24_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M3_M11_M22_M32 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M3.M11.M22.M32) */ {
 public:
  inline Message6_M3_M11_M22_M32() : Message6_M3_M11_M22_M32(nullptr) {}
  ~Message6_M3_M11_M22_M32() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M3_M11_M22_M32(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M3_M11_M22_M32(const Message6_M3_M11_M22_M32& from) : Message6_M3_M11_M22_M32(nullptr, from) {}
  inline Message6_M3_M11_M22_M32(Message6_M3_M11_M22_M32&& from) noexcept
      : Message6_M3_M11_M22_M32(nullptr, std::move(from)) {}
  inline Message6_M3_M11_M22_M32& operator=(const Message6_M3_M11_M22_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M3_M11_M22_M32& operator=(Message6_M3_M11_M22_M32&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M3_M11_M22_M32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M3_M11_M22_M32* internal_default_instance() {
    return reinterpret_cast<const Message6_M3_M11_M22_M32*>(
        &_Message6_M3_M11_M22_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Message6_M3_M11_M22_M32& a, Message6_M3_M11_M22_M32& b) { a.Swap(&b); }
  inline void Swap(Message6_M3_M11_M22_M32* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M3_M11_M22_M32* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M3_M11_M22_M32* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M3_M11_M22_M32>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M3_M11_M22_M32& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M3_M11_M22_M32& from) { Message6_M3_M11_M22_M32::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M3_M11_M22_M32* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M3.M11.M22.M32"; }

 protected:
  explicit Message6_M3_M11_M22_M32(::google::protobuf::Arena* arena);
  Message6_M3_M11_M22_M32(::google::protobuf::Arena* arena, const Message6_M3_M11_M22_M32& from);
  Message6_M3_M11_M22_M32(::google::protobuf::Arena* arena, Message6_M3_M11_M22_M32&& from) noexcept
      : Message6_M3_M11_M22_M32(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E33 = Message6_M3_M11_M22_M32_E33;
  static constexpr E33 E33_UNSPECIFIED = Message6_M3_M11_M22_M32_E33_E33_UNSPECIFIED;
  static constexpr E33 E33_CONST_1 = Message6_M3_M11_M22_M32_E33_E33_CONST_1;
  static constexpr E33 E33_CONST_2 = Message6_M3_M11_M22_M32_E33_E33_CONST_2;
  static constexpr E33 E33_CONST_3 = Message6_M3_M11_M22_M32_E33_E33_CONST_3;
  static constexpr E33 E33_CONST_4 = Message6_M3_M11_M22_M32_E33_E33_CONST_4;
  static constexpr E33 E33_CONST_5 = Message6_M3_M11_M22_M32_E33_E33_CONST_5;
  static inline bool E33_IsValid(int value) {
    return Message6_M3_M11_M22_M32_E33_IsValid(value);
  }
  static constexpr E33 E33_MIN = Message6_M3_M11_M22_M32_E33_E33_MIN;
  static constexpr E33 E33_MAX = Message6_M3_M11_M22_M32_E33_E33_MAX;
  static constexpr int E33_ARRAYSIZE = Message6_M3_M11_M22_M32_E33_E33_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E33_descriptor() {
    return Message6_M3_M11_M22_M32_E33_descriptor();
  }
  template <typename T>
  static inline const std::string& E33_Name(T value) {
    return Message6_M3_M11_M22_M32_E33_Name(value);
  }
  static inline bool E33_Parse(absl::string_view name, E33* value) {
    return Message6_M3_M11_M22_M32_E33_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 5,
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF3FieldNumber = 7,
    kF4FieldNumber = 8,
    kF5FieldNumber = 10,
  };
  // optional string f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message6.M3.M11.M22.M32.E33 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M3_M11_M22_M32_E33 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M3_M11_M22_M32_E33 value);

  private:
  ::fleetbench::proto::Message6_M3_M11_M22_M32_E33 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M3_M11_M22_M32_E33 value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional uint64 f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M3.M11.M22.M32)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M3_M11_M22_M32_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    int f_0_;
    ::int32_t f_1_;
    ::uint64_t f_3_;
    ::int64_t f_4_;
    ::int64_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2_M16 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2.M16) */ {
 public:
  inline Message6_M2_M16() : Message6_M2_M16(nullptr) {}
  ~Message6_M2_M16() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2_M16(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2_M16(const Message6_M2_M16& from) : Message6_M2_M16(nullptr, from) {}
  inline Message6_M2_M16(Message6_M2_M16&& from) noexcept
      : Message6_M2_M16(nullptr, std::move(from)) {}
  inline Message6_M2_M16& operator=(const Message6_M2_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2_M16& operator=(Message6_M2_M16&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2_M16& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2_M16* internal_default_instance() {
    return reinterpret_cast<const Message6_M2_M16*>(
        &_Message6_M2_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Message6_M2_M16& a, Message6_M2_M16& b) { a.Swap(&b); }
  inline void Swap(Message6_M2_M16* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2_M16* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2_M16* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2_M16>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2_M16& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2_M16& from) { Message6_M2_M16::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2_M16* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2.M16"; }

 protected:
  explicit Message6_M2_M16(::google::protobuf::Arena* arena);
  Message6_M2_M16(::google::protobuf::Arena* arena, const Message6_M2_M16& from);
  Message6_M2_M16(::google::protobuf::Arena* arena, Message6_M2_M16&& from) noexcept
      : Message6_M2_M16(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2.M16)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_M16_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    ::int64_t f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2_M14 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2.M14) */ {
 public:
  inline Message6_M2_M14() : Message6_M2_M14(nullptr) {}
  ~Message6_M2_M14() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2_M14(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2_M14(const Message6_M2_M14& from) : Message6_M2_M14(nullptr, from) {}
  inline Message6_M2_M14(Message6_M2_M14&& from) noexcept
      : Message6_M2_M14(nullptr, std::move(from)) {}
  inline Message6_M2_M14& operator=(const Message6_M2_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2_M14& operator=(Message6_M2_M14&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2_M14& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2_M14* internal_default_instance() {
    return reinterpret_cast<const Message6_M2_M14*>(
        &_Message6_M2_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Message6_M2_M14& a, Message6_M2_M14& b) { a.Swap(&b); }
  inline void Swap(Message6_M2_M14* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2_M14* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2_M14* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2_M14>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2_M14& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2_M14& from) { Message6_M2_M14::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2_M14* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2.M14"; }

 protected:
  explicit Message6_M2_M14(::google::protobuf::Arena* arena);
  Message6_M2_M14(::google::protobuf::Arena* arena, const Message6_M2_M14& from);
  Message6_M2_M14(::google::protobuf::Arena* arena, Message6_M2_M14&& from) noexcept
      : Message6_M2_M14(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_0().data())), f_0().size() * sizeof(::uint64_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::uint64_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::uint64_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // repeated uint64 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::uint64_t f_0(int index) const;
  void set_f_0(int index, ::uint64_t value);
  void add_f_0(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& f_0() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2.M14)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_M14_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint64_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2_M12 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2.M12) */ {
 public:
  inline Message6_M2_M12() : Message6_M2_M12(nullptr) {}
  ~Message6_M2_M12() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2_M12(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2_M12(const Message6_M2_M12& from) : Message6_M2_M12(nullptr, from) {}
  inline Message6_M2_M12(Message6_M2_M12&& from) noexcept
      : Message6_M2_M12(nullptr, std::move(from)) {}
  inline Message6_M2_M12& operator=(const Message6_M2_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2_M12& operator=(Message6_M2_M12&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2_M12& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2_M12* internal_default_instance() {
    return reinterpret_cast<const Message6_M2_M12*>(
        &_Message6_M2_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(Message6_M2_M12& a, Message6_M2_M12& b) { a.Swap(&b); }
  inline void Swap(Message6_M2_M12* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2_M12* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2_M12* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2_M12>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2_M12& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2_M12& from) { Message6_M2_M12::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2_M12* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2.M12"; }

 protected:
  explicit Message6_M2_M12(::google::protobuf::Arena* arena);
  Message6_M2_M12(::google::protobuf::Arena* arena, const Message6_M2_M12& from);
  Message6_M2_M12(::google::protobuf::Arena* arena, Message6_M2_M12&& from) noexcept
      : Message6_M2_M12(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2.M12)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_M12_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2_M10_M19 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2.M10.M19) */ {
 public:
  inline Message6_M2_M10_M19() : Message6_M2_M10_M19(nullptr) {}
  ~Message6_M2_M10_M19() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2_M10_M19(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2_M10_M19(const Message6_M2_M10_M19& from) : Message6_M2_M10_M19(nullptr, from) {}
  inline Message6_M2_M10_M19(Message6_M2_M10_M19&& from) noexcept
      : Message6_M2_M10_M19(nullptr, std::move(from)) {}
  inline Message6_M2_M10_M19& operator=(const Message6_M2_M10_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2_M10_M19& operator=(Message6_M2_M10_M19&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2_M10_M19& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2_M10_M19* internal_default_instance() {
    return reinterpret_cast<const Message6_M2_M10_M19*>(
        &_Message6_M2_M10_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Message6_M2_M10_M19& a, Message6_M2_M10_M19& b) { a.Swap(&b); }
  inline void Swap(Message6_M2_M10_M19* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2_M10_M19* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2_M10_M19* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2_M10_M19>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2_M10_M19& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2_M10_M19& from) { Message6_M2_M10_M19::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2_M10_M19* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2.M10.M19"; }

 protected:
  explicit Message6_M2_M10_M19(::google::protobuf::Arena* arena);
  Message6_M2_M10_M19(::google::protobuf::Arena* arena, const Message6_M2_M10_M19& from);
  Message6_M2_M10_M19(::google::protobuf::Arena* arena, Message6_M2_M10_M19&& from) noexcept
      : Message6_M2_M10_M19(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional bytes f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2.M10.M19)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_M10_M19_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M17 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M17) */ {
 public:
  inline Message6_M1_M17() : Message6_M1_M17(nullptr) {}
  ~Message6_M1_M17() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M17(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M17(const Message6_M1_M17& from) : Message6_M1_M17(nullptr, from) {}
  inline Message6_M1_M17(Message6_M1_M17&& from) noexcept
      : Message6_M1_M17(nullptr, std::move(from)) {}
  inline Message6_M1_M17& operator=(const Message6_M1_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M17& operator=(Message6_M1_M17&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M17& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M17* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M17*>(
        &_Message6_M1_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Message6_M1_M17& a, Message6_M1_M17& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M17* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M17* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M17* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M17>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M17& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M17& from) { Message6_M1_M17::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M17* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M17"; }

 protected:
  explicit Message6_M1_M17(::google::protobuf::Arena* arena);
  Message6_M1_M17(::google::protobuf::Arena* arena, const Message6_M1_M17& from);
  Message6_M1_M17(::google::protobuf::Arena* arena, Message6_M1_M17&& from) noexcept
      : Message6_M1_M17(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E7 = Message6_M1_M17_E7;
  static constexpr E7 E7_UNSPECIFIED = Message6_M1_M17_E7_E7_UNSPECIFIED;
  static constexpr E7 E7_CONST_1 = Message6_M1_M17_E7_E7_CONST_1;
  static constexpr E7 E7_CONST_2 = Message6_M1_M17_E7_E7_CONST_2;
  static constexpr E7 E7_CONST_3 = Message6_M1_M17_E7_E7_CONST_3;
  static constexpr E7 E7_CONST_4 = Message6_M1_M17_E7_E7_CONST_4;
  static constexpr E7 E7_CONST_5 = Message6_M1_M17_E7_E7_CONST_5;
  static inline bool E7_IsValid(int value) {
    return Message6_M1_M17_E7_IsValid(value);
  }
  static constexpr E7 E7_MIN = Message6_M1_M17_E7_E7_MIN;
  static constexpr E7 E7_MAX = Message6_M1_M17_E7_E7_MAX;
  static constexpr int E7_ARRAYSIZE = Message6_M1_M17_E7_E7_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E7_descriptor() {
    return Message6_M1_M17_E7_descriptor();
  }
  template <typename T>
  static inline const std::string& E7_Name(T value) {
    return Message6_M1_M17_E7_Name(value);
  }
  static inline bool E7_Parse(absl::string_view name, E7* value) {
    return Message6_M1_M17_E7_Parse(name, value);
  }
  using E8 = Message6_M1_M17_E8;
  static constexpr E8 E8_UNSPECIFIED = Message6_M1_M17_E8_E8_UNSPECIFIED;
  static constexpr E8 E8_CONST_1 = Message6_M1_M17_E8_E8_CONST_1;
  static constexpr E8 E8_CONST_2 = Message6_M1_M17_E8_E8_CONST_2;
  static constexpr E8 E8_CONST_3 = Message6_M1_M17_E8_E8_CONST_3;
  static constexpr E8 E8_CONST_4 = Message6_M1_M17_E8_E8_CONST_4;
  static constexpr E8 E8_CONST_5 = Message6_M1_M17_E8_E8_CONST_5;
  static inline bool E8_IsValid(int value) {
    return Message6_M1_M17_E8_IsValid(value);
  }
  static constexpr E8 E8_MIN = Message6_M1_M17_E8_E8_MIN;
  static constexpr E8 E8_MAX = Message6_M1_M17_E8_E8_MAX;
  static constexpr int E8_ARRAYSIZE = Message6_M1_M17_E8_E8_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E8_descriptor() {
    return Message6_M1_M17_E8_descriptor();
  }
  template <typename T>
  static inline const std::string& E8_Name(T value) {
    return Message6_M1_M17_E8_Name(value);
  }
  static inline bool E8_Parse(absl::string_view name, E8* value) {
    return Message6_M1_M17_E8_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_16_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_16())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())), f_0().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_2().data())), f_2().size() * sizeof(float)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_5().data())), f_5().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_15().data())), f_15().size() * sizeof(::uint64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_16_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_16()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(float));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_5().data())));
      sizes_list.push_back(f_5().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_15().data())));
      sizes_list.push_back(f_15().size() * sizeof(::uint64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_16_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_5().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_15().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_16_);
      sizes.push_back(end_addr - start_addr + sizeof(f_16()));
      sizes.push_back(f_0().size() * sizeof(::int64_t));
      sizes.push_back(f_2().size() * sizeof(float));
      sizes.push_back(f_5().size() * sizeof(::int64_t));
      sizes.push_back(f_15().size() * sizeof(::uint64_t));
      sizes.push_back(f_4().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_9().size());
      sizes.push_back(f_12().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_16_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      mutable_f_2()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_2().data())));
      mutable_f_5()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_5().data())));
      mutable_f_15()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint64_t*>(f_15().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_2()->Resize(sizes[idx++] / sizeof(float), 0);
      mutable_f_5()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_15()->Resize(sizes[idx++] / sizeof(::uint64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF2FieldNumber = 6,
    kF5FieldNumber = 9,
    kF15FieldNumber = 22,
    kF4FieldNumber = 8,
    kF7FieldNumber = 12,
    kF9FieldNumber = 14,
    kF12FieldNumber = 18,
    kF1FieldNumber = 4,
    kF3FieldNumber = 7,
    kF8FieldNumber = 13,
    kF6FieldNumber = 11,
    kF10FieldNumber = 15,
    kF11FieldNumber = 16,
    kF14FieldNumber = 21,
    kF13FieldNumber = 19,
    kF16FieldNumber = 24,
  };
  // repeated int64 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int64_t f_0(int index) const;
  void set_f_0(int index, ::int64_t value);
  void add_f_0(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_0();

  public:
  // repeated float f_2 = 6 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  float f_2(int index) const;
  void set_f_2(int index, float value);
  void add_f_2(float value);
  const ::google::protobuf::RepeatedField<float>& f_2() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_2();

  public:
  // repeated int64 f_5 = 9 [packed = true];
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::int64_t f_5(int index) const;
  void set_f_5(int index, ::int64_t value);
  void add_f_5(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_5() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_5() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_5();

  public:
  // repeated uint64 f_15 = 22 [packed = true];
  int f_15_size() const;
  private:
  int _internal_f_15_size() const;

  public:
  void clear_f_15() ;
  ::uint64_t f_15(int index) const;
  void set_f_15(int index, ::uint64_t value);
  void add_f_15(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& f_15() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_f_15();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_f_15() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_f_15();

  public:
  // optional string f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_9 = 14;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional string f_12 = 18;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional int64 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional bool f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional .fleetbench.proto.Message6.M1.M17.E7 f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message6_M1_M17_E7 f_8() const;
  void set_f_8(::fleetbench::proto::Message6_M1_M17_E7 value);

  private:
  ::fleetbench::proto::Message6_M1_M17_E7 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message6_M1_M17_E7 value);

  public:
  // optional int64 f_6 = 11;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional int32 f_10 = 15;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int32_t f_10() const;
  void set_f_10(::int32_t value);

  private:
  ::int32_t _internal_f_10() const;
  void _internal_set_f_10(::int32_t value);

  public:
  // optional int32 f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int32_t f_11() const;
  void set_f_11(::int32_t value);

  private:
  ::int32_t _internal_f_11() const;
  void _internal_set_f_11(::int32_t value);

  public:
  // optional int64 f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int64_t f_14() const;
  void set_f_14(::int64_t value);

  private:
  ::int64_t _internal_f_14() const;
  void _internal_set_f_14(::int64_t value);

  public:
  // optional float f_13 = 19;
  bool has_f_13() const;
  void clear_f_13() ;
  float f_13() const;
  void set_f_13(float value);

  private:
  float _internal_f_13() const;
  void _internal_set_f_13(float value);

  public:
  // optional .fleetbench.proto.Message6.M1.M17.E8 f_16 = 24;
  bool has_f_16() const;
  void clear_f_16() ;
  ::fleetbench::proto::Message6_M1_M17_E8 f_16() const;
  void set_f_16(::fleetbench::proto::Message6_M1_M17_E8 value);

  private:
  ::fleetbench::proto::Message6_M1_M17_E8 _internal_f_16() const;
  void _internal_set_f_16(::fleetbench::proto::Message6_M1_M17_E8 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M17)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 2,
      70, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M17_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> f_2_;
    ::google::protobuf::RepeatedField<::int64_t> f_5_;
    mutable ::google::protobuf::internal::CachedSize _f_5_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint64_t> f_15_;
    mutable ::google::protobuf::internal::CachedSize _f_15_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::int64_t f_1_;
    bool f_3_;
    int f_8_;
    ::int64_t f_6_;
    ::int32_t f_10_;
    ::int32_t f_11_;
    ::int64_t f_14_;
    float f_13_;
    int f_16_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M43 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M43) */ {
 public:
  inline Message6_M1_M15_M23_M28_M43() : Message6_M1_M15_M23_M28_M43(nullptr) {}
  ~Message6_M1_M15_M23_M28_M43() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M43(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M43(const Message6_M1_M15_M23_M28_M43& from) : Message6_M1_M15_M23_M28_M43(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M43(Message6_M1_M15_M23_M28_M43&& from) noexcept
      : Message6_M1_M15_M23_M28_M43(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M43& operator=(const Message6_M1_M15_M23_M28_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M43& operator=(Message6_M1_M15_M23_M28_M43&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M43& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M43* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M43*>(
        &_Message6_M1_M15_M23_M28_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Message6_M1_M15_M23_M28_M43& a, Message6_M1_M15_M23_M28_M43& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M43* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M43* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M43* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M43>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M43& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M43& from) { Message6_M1_M15_M23_M28_M43::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M43* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M43"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M43(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M43(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M43& from);
  Message6_M1_M15_M23_M28_M43(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M43&& from) noexcept
      : Message6_M1_M15_M23_M28_M43(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E38 = Message6_M1_M15_M23_M28_M43_E38;
  static constexpr E38 E38_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E38_E38_UNSPECIFIED;
  static constexpr E38 E38_CONST_1 = Message6_M1_M15_M23_M28_M43_E38_E38_CONST_1;
  static constexpr E38 E38_CONST_2 = Message6_M1_M15_M23_M28_M43_E38_E38_CONST_2;
  static constexpr E38 E38_CONST_3 = Message6_M1_M15_M23_M28_M43_E38_E38_CONST_3;
  static constexpr E38 E38_CONST_4 = Message6_M1_M15_M23_M28_M43_E38_E38_CONST_4;
  static constexpr E38 E38_CONST_5 = Message6_M1_M15_M23_M28_M43_E38_E38_CONST_5;
  static inline bool E38_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E38_IsValid(value);
  }
  static constexpr E38 E38_MIN = Message6_M1_M15_M23_M28_M43_E38_E38_MIN;
  static constexpr E38 E38_MAX = Message6_M1_M15_M23_M28_M43_E38_E38_MAX;
  static constexpr int E38_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E38_E38_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E38_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E38_descriptor();
  }
  template <typename T>
  static inline const std::string& E38_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E38_Name(value);
  }
  static inline bool E38_Parse(absl::string_view name, E38* value) {
    return Message6_M1_M15_M23_M28_M43_E38_Parse(name, value);
  }
  using E39 = Message6_M1_M15_M23_M28_M43_E39;
  static constexpr E39 E39_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E39_E39_UNSPECIFIED;
  static constexpr E39 E39_CONST_1 = Message6_M1_M15_M23_M28_M43_E39_E39_CONST_1;
  static constexpr E39 E39_CONST_2 = Message6_M1_M15_M23_M28_M43_E39_E39_CONST_2;
  static constexpr E39 E39_CONST_3 = Message6_M1_M15_M23_M28_M43_E39_E39_CONST_3;
  static constexpr E39 E39_CONST_4 = Message6_M1_M15_M23_M28_M43_E39_E39_CONST_4;
  static constexpr E39 E39_CONST_5 = Message6_M1_M15_M23_M28_M43_E39_E39_CONST_5;
  static inline bool E39_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E39_IsValid(value);
  }
  static constexpr E39 E39_MIN = Message6_M1_M15_M23_M28_M43_E39_E39_MIN;
  static constexpr E39 E39_MAX = Message6_M1_M15_M23_M28_M43_E39_E39_MAX;
  static constexpr int E39_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E39_E39_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E39_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E39_descriptor();
  }
  template <typename T>
  static inline const std::string& E39_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E39_Name(value);
  }
  static inline bool E39_Parse(absl::string_view name, E39* value) {
    return Message6_M1_M15_M23_M28_M43_E39_Parse(name, value);
  }
  using E40 = Message6_M1_M15_M23_M28_M43_E40;
  static constexpr E40 E40_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E40_E40_UNSPECIFIED;
  static constexpr E40 E40_CONST_1 = Message6_M1_M15_M23_M28_M43_E40_E40_CONST_1;
  static constexpr E40 E40_CONST_2 = Message6_M1_M15_M23_M28_M43_E40_E40_CONST_2;
  static constexpr E40 E40_CONST_3 = Message6_M1_M15_M23_M28_M43_E40_E40_CONST_3;
  static constexpr E40 E40_CONST_4 = Message6_M1_M15_M23_M28_M43_E40_E40_CONST_4;
  static constexpr E40 E40_CONST_5 = Message6_M1_M15_M23_M28_M43_E40_E40_CONST_5;
  static inline bool E40_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E40_IsValid(value);
  }
  static constexpr E40 E40_MIN = Message6_M1_M15_M23_M28_M43_E40_E40_MIN;
  static constexpr E40 E40_MAX = Message6_M1_M15_M23_M28_M43_E40_E40_MAX;
  static constexpr int E40_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E40_E40_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E40_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E40_descriptor();
  }
  template <typename T>
  static inline const std::string& E40_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E40_Name(value);
  }
  static inline bool E40_Parse(absl::string_view name, E40* value) {
    return Message6_M1_M15_M23_M28_M43_E40_Parse(name, value);
  }
  using E41 = Message6_M1_M15_M23_M28_M43_E41;
  static constexpr E41 E41_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E41_E41_UNSPECIFIED;
  static constexpr E41 E41_CONST_1 = Message6_M1_M15_M23_M28_M43_E41_E41_CONST_1;
  static constexpr E41 E41_CONST_2 = Message6_M1_M15_M23_M28_M43_E41_E41_CONST_2;
  static constexpr E41 E41_CONST_3 = Message6_M1_M15_M23_M28_M43_E41_E41_CONST_3;
  static constexpr E41 E41_CONST_4 = Message6_M1_M15_M23_M28_M43_E41_E41_CONST_4;
  static constexpr E41 E41_CONST_5 = Message6_M1_M15_M23_M28_M43_E41_E41_CONST_5;
  static inline bool E41_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E41_IsValid(value);
  }
  static constexpr E41 E41_MIN = Message6_M1_M15_M23_M28_M43_E41_E41_MIN;
  static constexpr E41 E41_MAX = Message6_M1_M15_M23_M28_M43_E41_E41_MAX;
  static constexpr int E41_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E41_E41_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E41_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E41_descriptor();
  }
  template <typename T>
  static inline const std::string& E41_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E41_Name(value);
  }
  static inline bool E41_Parse(absl::string_view name, E41* value) {
    return Message6_M1_M15_M23_M28_M43_E41_Parse(name, value);
  }
  using E42 = Message6_M1_M15_M23_M28_M43_E42;
  static constexpr E42 E42_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E42_E42_UNSPECIFIED;
  static constexpr E42 E42_CONST_1 = Message6_M1_M15_M23_M28_M43_E42_E42_CONST_1;
  static constexpr E42 E42_CONST_2 = Message6_M1_M15_M23_M28_M43_E42_E42_CONST_2;
  static constexpr E42 E42_CONST_3 = Message6_M1_M15_M23_M28_M43_E42_E42_CONST_3;
  static constexpr E42 E42_CONST_4 = Message6_M1_M15_M23_M28_M43_E42_E42_CONST_4;
  static constexpr E42 E42_CONST_5 = Message6_M1_M15_M23_M28_M43_E42_E42_CONST_5;
  static inline bool E42_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E42_IsValid(value);
  }
  static constexpr E42 E42_MIN = Message6_M1_M15_M23_M28_M43_E42_E42_MIN;
  static constexpr E42 E42_MAX = Message6_M1_M15_M23_M28_M43_E42_E42_MAX;
  static constexpr int E42_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E42_E42_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E42_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E42_descriptor();
  }
  template <typename T>
  static inline const std::string& E42_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E42_Name(value);
  }
  static inline bool E42_Parse(absl::string_view name, E42* value) {
    return Message6_M1_M15_M23_M28_M43_E42_Parse(name, value);
  }
  using E43 = Message6_M1_M15_M23_M28_M43_E43;
  static constexpr E43 E43_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E43_E43_UNSPECIFIED;
  static constexpr E43 E43_CONST_1 = Message6_M1_M15_M23_M28_M43_E43_E43_CONST_1;
  static constexpr E43 E43_CONST_2 = Message6_M1_M15_M23_M28_M43_E43_E43_CONST_2;
  static constexpr E43 E43_CONST_3 = Message6_M1_M15_M23_M28_M43_E43_E43_CONST_3;
  static constexpr E43 E43_CONST_4 = Message6_M1_M15_M23_M28_M43_E43_E43_CONST_4;
  static constexpr E43 E43_CONST_5 = Message6_M1_M15_M23_M28_M43_E43_E43_CONST_5;
  static inline bool E43_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E43_IsValid(value);
  }
  static constexpr E43 E43_MIN = Message6_M1_M15_M23_M28_M43_E43_E43_MIN;
  static constexpr E43 E43_MAX = Message6_M1_M15_M23_M28_M43_E43_E43_MAX;
  static constexpr int E43_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E43_E43_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E43_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E43_descriptor();
  }
  template <typename T>
  static inline const std::string& E43_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E43_Name(value);
  }
  static inline bool E43_Parse(absl::string_view name, E43* value) {
    return Message6_M1_M15_M23_M28_M43_E43_Parse(name, value);
  }
  using E44 = Message6_M1_M15_M23_M28_M43_E44;
  static constexpr E44 E44_UNSPECIFIED = Message6_M1_M15_M23_M28_M43_E44_E44_UNSPECIFIED;
  static constexpr E44 E44_CONST_1 = Message6_M1_M15_M23_M28_M43_E44_E44_CONST_1;
  static constexpr E44 E44_CONST_2 = Message6_M1_M15_M23_M28_M43_E44_E44_CONST_2;
  static constexpr E44 E44_CONST_3 = Message6_M1_M15_M23_M28_M43_E44_E44_CONST_3;
  static constexpr E44 E44_CONST_4 = Message6_M1_M15_M23_M28_M43_E44_E44_CONST_4;
  static constexpr E44 E44_CONST_5 = Message6_M1_M15_M23_M28_M43_E44_E44_CONST_5;
  static inline bool E44_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M43_E44_IsValid(value);
  }
  static constexpr E44 E44_MIN = Message6_M1_M15_M23_M28_M43_E44_E44_MIN;
  static constexpr E44 E44_MAX = Message6_M1_M15_M23_M28_M43_E44_E44_MAX;
  static constexpr int E44_ARRAYSIZE = Message6_M1_M15_M23_M28_M43_E44_E44_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E44_descriptor() {
    return Message6_M1_M15_M23_M28_M43_E44_descriptor();
  }
  template <typename T>
  static inline const std::string& E44_Name(T value) {
    return Message6_M1_M15_M23_M28_M43_E44_Name(value);
  }
  static inline bool E44_Parse(absl::string_view name, E44* value) {
    return Message6_M1_M15_M23_M28_M43_E44_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_48_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_48())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())), f_6().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())), f_14().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())), f_15().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())), f_20().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())), f_22().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())), f_23().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())), f_32().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())), f_34().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())), f_38().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_48_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_48()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      sizes_list.push_back(f_6().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      sizes_list.push_back(f_14().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      sizes_list.push_back(f_15().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      sizes_list.push_back(f_20().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      sizes_list.push_back(f_22().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      sizes_list.push_back(f_23().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      sizes_list.push_back(f_32().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      sizes_list.push_back(f_34().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      sizes_list.push_back(f_38().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_48_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_48_);
      sizes.push_back(end_addr - start_addr + sizeof(f_48()));
      sizes.push_back(f_6().size() * sizeof(::int64_t));
      sizes.push_back(f_5().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_9().size());
      sizes.push_back(f_14().size());
      sizes.push_back(f_15().size());
      sizes.push_back(f_20().size());
      sizes.push_back(f_22().size());
      sizes.push_back(f_23().size());
      sizes.push_back(f_32().size());
      sizes.push_back(f_34().size());
      sizes.push_back(f_38().size());
      sizes.push_back(f_46().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_48_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_32(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_32(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 12,
    kF5FieldNumber = 9,
    kF7FieldNumber = 13,
    kF9FieldNumber = 15,
    kF14FieldNumber = 21,
    kF15FieldNumber = 22,
    kF20FieldNumber = 28,
    kF22FieldNumber = 32,
    kF23FieldNumber = 33,
    kF32FieldNumber = 46,
    kF34FieldNumber = 50,
    kF38FieldNumber = 59,
    kF46FieldNumber = 68,
    kF0FieldNumber = 3,
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
    kF8FieldNumber = 14,
    kF10FieldNumber = 16,
    kF11FieldNumber = 17,
    kF12FieldNumber = 18,
    kF13FieldNumber = 20,
    kF16FieldNumber = 24,
    kF17FieldNumber = 25,
    kF18FieldNumber = 26,
    kF19FieldNumber = 27,
    kF24FieldNumber = 34,
    kF27FieldNumber = 38,
    kF26FieldNumber = 37,
    kF29FieldNumber = 41,
    kF28FieldNumber = 40,
    kF30FieldNumber = 42,
    kF21FieldNumber = 30,
    kF25FieldNumber = 35,
    kF35FieldNumber = 52,
    kF36FieldNumber = 54,
    kF31FieldNumber = 45,
    kF33FieldNumber = 49,
    kF37FieldNumber = 57,
    kF40FieldNumber = 61,
    kF39FieldNumber = 60,
    kF41FieldNumber = 62,
    kF42FieldNumber = 63,
    kF44FieldNumber = 66,
    kF43FieldNumber = 65,
    kF45FieldNumber = 67,
    kF47FieldNumber = 70,
    kF48FieldNumber = 71,
  };
  // repeated int64 f_6 = 12 [packed = true];
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  ::int64_t f_6(int index) const;
  void set_f_6(int index, ::int64_t value);
  void add_f_6(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_6() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_6() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_6();

  public:
  // optional string f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional string f_7 = 13;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional string f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  const std::string& f_14() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_14(Arg_&& arg, Args_... args);
  std::string* mutable_f_14();
  PROTOBUF_NODISCARD std::string* release_f_14();
  void set_allocated_f_14(std::string* value);

  private:
  const std::string& _internal_f_14() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_14(
      const std::string& value);
  std::string* _internal_mutable_f_14();

  public:
  // optional string f_15 = 22;
  bool has_f_15() const;
  void clear_f_15() ;
  const std::string& f_15() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_15(Arg_&& arg, Args_... args);
  std::string* mutable_f_15();
  PROTOBUF_NODISCARD std::string* release_f_15();
  void set_allocated_f_15(std::string* value);

  private:
  const std::string& _internal_f_15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_15(
      const std::string& value);
  std::string* _internal_mutable_f_15();

  public:
  // optional string f_20 = 28;
  bool has_f_20() const;
  void clear_f_20() ;
  const std::string& f_20() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_20(Arg_&& arg, Args_... args);
  std::string* mutable_f_20();
  PROTOBUF_NODISCARD std::string* release_f_20();
  void set_allocated_f_20(std::string* value);

  private:
  const std::string& _internal_f_20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_20(
      const std::string& value);
  std::string* _internal_mutable_f_20();

  public:
  // optional string f_22 = 32;
  bool has_f_22() const;
  void clear_f_22() ;
  const std::string& f_22() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_22(Arg_&& arg, Args_... args);
  std::string* mutable_f_22();
  PROTOBUF_NODISCARD std::string* release_f_22();
  void set_allocated_f_22(std::string* value);

  private:
  const std::string& _internal_f_22() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_22(
      const std::string& value);
  std::string* _internal_mutable_f_22();

  public:
  // optional bytes f_23 = 33;
  bool has_f_23() const;
  void clear_f_23() ;
  const std::string& f_23() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_23(Arg_&& arg, Args_... args);
  std::string* mutable_f_23();
  PROTOBUF_NODISCARD std::string* release_f_23();
  void set_allocated_f_23(std::string* value);

  private:
  const std::string& _internal_f_23() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_23(
      const std::string& value);
  std::string* _internal_mutable_f_23();

  public:
  // optional string f_32 = 46;
  bool has_f_32() const;
  void clear_f_32() ;
  const std::string& f_32() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_32(Arg_&& arg, Args_... args);
  std::string* mutable_f_32();
  PROTOBUF_NODISCARD std::string* release_f_32();
  void set_allocated_f_32(std::string* value);

  private:
  const std::string& _internal_f_32() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_32(
      const std::string& value);
  std::string* _internal_mutable_f_32();

  public:
  // optional string f_34 = 50;
  bool has_f_34() const;
  void clear_f_34() ;
  const std::string& f_34() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_34(Arg_&& arg, Args_... args);
  std::string* mutable_f_34();
  PROTOBUF_NODISCARD std::string* release_f_34();
  void set_allocated_f_34(std::string* value);

  private:
  const std::string& _internal_f_34() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_34(
      const std::string& value);
  std::string* _internal_mutable_f_34();

  public:
  // optional string f_38 = 59;
  bool has_f_38() const;
  void clear_f_38() ;
  const std::string& f_38() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_38(Arg_&& arg, Args_... args);
  std::string* mutable_f_38();
  PROTOBUF_NODISCARD std::string* release_f_38();
  void set_allocated_f_38(std::string* value);

  private:
  const std::string& _internal_f_38() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_38(
      const std::string& value);
  std::string* _internal_mutable_f_38();

  public:
  // optional string f_46 = 68;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional fixed32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E38 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E39 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 f_2() const;
  void set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 value);

  public:
  // optional fixed32 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional uint32 f_8 = 14;
  bool has_f_8() const;
  void clear_f_8() ;
  ::uint32_t f_8() const;
  void set_f_8(::uint32_t value);

  private:
  ::uint32_t _internal_f_8() const;
  void _internal_set_f_8(::uint32_t value);

  public:
  // optional int32 f_10 = 16;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int32_t f_10() const;
  void set_f_10(::int32_t value);

  private:
  ::int32_t _internal_f_10() const;
  void _internal_set_f_10(::int32_t value);

  public:
  // optional float f_11 = 17;
  bool has_f_11() const;
  void clear_f_11() ;
  float f_11() const;
  void set_f_11(float value);

  private:
  float _internal_f_11() const;
  void _internal_set_f_11(float value);

  public:
  // optional float f_12 = 18;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // optional fixed64 f_13 = 20;
  bool has_f_13() const;
  void clear_f_13() ;
  ::uint64_t f_13() const;
  void set_f_13(::uint64_t value);

  private:
  ::uint64_t _internal_f_13() const;
  void _internal_set_f_13(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E40 f_16 = 24;
  bool has_f_16() const;
  void clear_f_16() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 f_16() const;
  void set_f_16(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 _internal_f_16() const;
  void _internal_set_f_16(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 value);

  public:
  // optional int32 f_17 = 25;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int32_t f_17() const;
  void set_f_17(::int32_t value);

  private:
  ::int32_t _internal_f_17() const;
  void _internal_set_f_17(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E41 f_18 = 26;
  bool has_f_18() const;
  void clear_f_18() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 f_18() const;
  void set_f_18(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 _internal_f_18() const;
  void _internal_set_f_18(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 value);

  public:
  // optional int32 f_19 = 27;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int32_t f_19() const;
  void set_f_19(::int32_t value);

  private:
  ::int32_t _internal_f_19() const;
  void _internal_set_f_19(::int32_t value);

  public:
  // optional uint64 f_24 = 34;
  bool has_f_24() const;
  void clear_f_24() ;
  ::uint64_t f_24() const;
  void set_f_24(::uint64_t value);

  private:
  ::uint64_t _internal_f_24() const;
  void _internal_set_f_24(::uint64_t value);

  public:
  // optional int64 f_27 = 38;
  bool has_f_27() const;
  void clear_f_27() ;
  ::int64_t f_27() const;
  void set_f_27(::int64_t value);

  private:
  ::int64_t _internal_f_27() const;
  void _internal_set_f_27(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E42 f_26 = 37;
  bool has_f_26() const;
  void clear_f_26() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 f_26() const;
  void set_f_26(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 _internal_f_26() const;
  void _internal_set_f_26(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E43 f_29 = 41;
  bool has_f_29() const;
  void clear_f_29() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 f_29() const;
  void set_f_29(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 _internal_f_29() const;
  void _internal_set_f_29(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 value);

  public:
  // optional double f_28 = 40;
  bool has_f_28() const;
  void clear_f_28() ;
  double f_28() const;
  void set_f_28(double value);

  private:
  double _internal_f_28() const;
  void _internal_set_f_28(double value);

  public:
  // optional float f_30 = 42;
  bool has_f_30() const;
  void clear_f_30() ;
  float f_30() const;
  void set_f_30(float value);

  private:
  float _internal_f_30() const;
  void _internal_set_f_30(float value);

  public:
  // optional bool f_21 = 30;
  bool has_f_21() const;
  void clear_f_21() ;
  bool f_21() const;
  void set_f_21(bool value);

  private:
  bool _internal_f_21() const;
  void _internal_set_f_21(bool value);

  public:
  // optional bool f_25 = 35;
  bool has_f_25() const;
  void clear_f_25() ;
  bool f_25() const;
  void set_f_25(bool value);

  private:
  bool _internal_f_25() const;
  void _internal_set_f_25(bool value);

  public:
  // optional bool f_35 = 52;
  bool has_f_35() const;
  void clear_f_35() ;
  bool f_35() const;
  void set_f_35(bool value);

  private:
  bool _internal_f_35() const;
  void _internal_set_f_35(bool value);

  public:
  // optional bool f_36 = 54;
  bool has_f_36() const;
  void clear_f_36() ;
  bool f_36() const;
  void set_f_36(bool value);

  private:
  bool _internal_f_36() const;
  void _internal_set_f_36(bool value);

  public:
  // optional int32 f_31 = 45;
  bool has_f_31() const;
  void clear_f_31() ;
  ::int32_t f_31() const;
  void set_f_31(::int32_t value);

  private:
  ::int32_t _internal_f_31() const;
  void _internal_set_f_31(::int32_t value);

  public:
  // optional int32 f_33 = 49;
  bool has_f_33() const;
  void clear_f_33() ;
  ::int32_t f_33() const;
  void set_f_33(::int32_t value);

  private:
  ::int32_t _internal_f_33() const;
  void _internal_set_f_33(::int32_t value);

  public:
  // optional int64 f_37 = 57;
  bool has_f_37() const;
  void clear_f_37() ;
  ::int64_t f_37() const;
  void set_f_37(::int64_t value);

  private:
  ::int64_t _internal_f_37() const;
  void _internal_set_f_37(::int64_t value);

  public:
  // optional int64 f_40 = 61;
  bool has_f_40() const;
  void clear_f_40() ;
  ::int64_t f_40() const;
  void set_f_40(::int64_t value);

  private:
  ::int64_t _internal_f_40() const;
  void _internal_set_f_40(::int64_t value);

  public:
  // optional int32 f_39 = 60;
  bool has_f_39() const;
  void clear_f_39() ;
  ::int32_t f_39() const;
  void set_f_39(::int32_t value);

  private:
  ::int32_t _internal_f_39() const;
  void _internal_set_f_39(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E44 f_41 = 62;
  bool has_f_41() const;
  void clear_f_41() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 f_41() const;
  void set_f_41(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 _internal_f_41() const;
  void _internal_set_f_41(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 value);

  public:
  // optional int64 f_42 = 63;
  bool has_f_42() const;
  void clear_f_42() ;
  ::int64_t f_42() const;
  void set_f_42(::int64_t value);

  private:
  ::int64_t _internal_f_42() const;
  void _internal_set_f_42(::int64_t value);

  public:
  // optional int64 f_44 = 66;
  bool has_f_44() const;
  void clear_f_44() ;
  ::int64_t f_44() const;
  void set_f_44(::int64_t value);

  private:
  ::int64_t _internal_f_44() const;
  void _internal_set_f_44(::int64_t value);

  public:
  // optional float f_43 = 65;
  bool has_f_43() const;
  void clear_f_43() ;
  float f_43() const;
  void set_f_43(float value);

  private:
  float _internal_f_43() const;
  void _internal_set_f_43(float value);

  public:
  // optional int32 f_45 = 67;
  bool has_f_45() const;
  void clear_f_45() ;
  ::int32_t f_45() const;
  void set_f_45(::int32_t value);

  private:
  ::int32_t _internal_f_45() const;
  void _internal_set_f_45(::int32_t value);

  public:
  // optional bool f_47 = 70;
  bool has_f_47() const;
  void clear_f_47() ;
  bool f_47() const;
  void set_f_47(bool value);

  private:
  bool _internal_f_47() const;
  void _internal_set_f_47(bool value);

  public:
  // optional int32 f_48 = 71;
  bool has_f_48() const;
  void clear_f_48() ;
  ::int32_t f_48() const;
  void set_f_48(::int32_t value);

  private:
  ::int32_t _internal_f_48() const;
  void _internal_set_f_48(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M43)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 49, 7,
      142, 11>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M43_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_6_;
    mutable ::google::protobuf::internal::CachedSize _f_6_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_14_;
    ::google::protobuf::internal::ArenaStringPtr f_15_;
    ::google::protobuf::internal::ArenaStringPtr f_20_;
    ::google::protobuf::internal::ArenaStringPtr f_22_;
    ::google::protobuf::internal::ArenaStringPtr f_23_;
    ::google::protobuf::internal::ArenaStringPtr f_32_;
    ::google::protobuf::internal::ArenaStringPtr f_34_;
    ::google::protobuf::internal::ArenaStringPtr f_38_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::uint32_t f_0_;
    int f_1_;
    int f_2_;
    ::uint32_t f_3_;
    ::int64_t f_4_;
    ::uint32_t f_8_;
    ::int32_t f_10_;
    float f_11_;
    float f_12_;
    ::uint64_t f_13_;
    int f_16_;
    ::int32_t f_17_;
    int f_18_;
    ::int32_t f_19_;
    ::uint64_t f_24_;
    ::int64_t f_27_;
    int f_26_;
    int f_29_;
    double f_28_;
    float f_30_;
    bool f_21_;
    bool f_25_;
    bool f_35_;
    bool f_36_;
    ::int32_t f_31_;
    ::int32_t f_33_;
    ::int64_t f_37_;
    ::int64_t f_40_;
    ::int32_t f_39_;
    int f_41_;
    ::int64_t f_42_;
    ::int64_t f_44_;
    float f_43_;
    ::int32_t f_45_;
    bool f_47_;
    ::int32_t f_48_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M45_M49 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M45_M49() : Message6_M1_M15_M23_M28_M42_M45_M49(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M45_M49() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M45_M49(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M45_M49(const Message6_M1_M15_M23_M28_M42_M45_M49& from) : Message6_M1_M15_M23_M28_M42_M45_M49(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M45_M49(Message6_M1_M15_M23_M28_M42_M45_M49&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M45_M49(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M45_M49& operator=(const Message6_M1_M15_M23_M28_M42_M45_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M45_M49& operator=(Message6_M1_M15_M23_M28_M42_M45_M49&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M45_M49& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M45_M49* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M45_M49*>(
        &_Message6_M1_M15_M23_M28_M42_M45_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Message6_M1_M15_M23_M28_M42_M45_M49& a, Message6_M1_M15_M23_M28_M42_M45_M49& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M45_M49* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M45_M49* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M45_M49* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M45_M49>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M45_M49& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M45_M49& from) { Message6_M1_M15_M23_M28_M42_M45_M49::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M45_M49* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M45_M49(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M45_M49(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M45_M49& from);
  Message6_M1_M15_M23_M28_M42_M45_M49(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M45_M49&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M45_M49(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional fixed32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M45_M49_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M50_M54 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M54() : Message6_M1_M15_M23_M28_M42_M44_M50_M54(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M50_M54() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M50_M54(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M50_M54(const Message6_M1_M15_M23_M28_M42_M44_M50_M54& from) : Message6_M1_M15_M23_M28_M42_M44_M50_M54(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M54(Message6_M1_M15_M23_M28_M42_M44_M50_M54&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50_M54(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M54& operator=(const Message6_M1_M15_M23_M28_M42_M44_M50_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M54& operator=(Message6_M1_M15_M23_M28_M42_M44_M50_M54&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M50_M54& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M50_M54* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M50_M54*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M50_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M50_M54& a, Message6_M1_M15_M23_M28_M42_M44_M50_M54& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M50_M54* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M50_M54* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M50_M54* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M50_M54>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M50_M54& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M50_M54& from) { Message6_M1_M15_M23_M28_M42_M44_M50_M54::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M50_M54* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M50_M54(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M50_M54(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M50_M54& from);
  Message6_M1_M15_M23_M28_M42_M44_M50_M54(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M50_M54&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50_M54(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M50_M54_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M50_M52 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M52() : Message6_M1_M15_M23_M28_M42_M44_M50_M52(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M50_M52() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M50_M52(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M50_M52(const Message6_M1_M15_M23_M28_M42_M44_M50_M52& from) : Message6_M1_M15_M23_M28_M42_M44_M50_M52(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M52(Message6_M1_M15_M23_M28_M42_M44_M50_M52&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50_M52(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M52& operator=(const Message6_M1_M15_M23_M28_M42_M44_M50_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M50_M52& operator=(Message6_M1_M15_M23_M28_M42_M44_M50_M52&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M50_M52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M50_M52* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M50_M52*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M50_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M50_M52& a, Message6_M1_M15_M23_M28_M42_M44_M50_M52& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M50_M52* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M50_M52* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M50_M52* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M50_M52>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M50_M52& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M50_M52& from) { Message6_M1_M15_M23_M28_M42_M44_M50_M52::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M50_M52* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M50_M52(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M50_M52(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M50_M52& from);
  Message6_M1_M15_M23_M28_M42_M44_M50_M52(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M50_M52&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50_M52(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E78 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78;
  static constexpr E78 E78_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_UNSPECIFIED;
  static constexpr E78 E78_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_1;
  static constexpr E78 E78_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_2;
  static constexpr E78 E78_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_3;
  static constexpr E78 E78_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_4;
  static constexpr E78 E78_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_CONST_5;
  static inline bool E78_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_IsValid(value);
  }
  static constexpr E78 E78_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_MIN;
  static constexpr E78 E78_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_MAX;
  static constexpr int E78_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_E78_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E78_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_descriptor();
  }
  template <typename T>
  static inline const std::string& E78_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_Name(value);
  }
  static inline bool E78_Parse(absl::string_view name, E78* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_Parse(name, value);
  }
  using E79 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79;
  static constexpr E79 E79_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_UNSPECIFIED;
  static constexpr E79 E79_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_1;
  static constexpr E79 E79_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_2;
  static constexpr E79 E79_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_3;
  static constexpr E79 E79_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_4;
  static constexpr E79 E79_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_CONST_5;
  static inline bool E79_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_IsValid(value);
  }
  static constexpr E79 E79_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_MIN;
  static constexpr E79 E79_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_MAX;
  static constexpr int E79_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_E79_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E79_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_descriptor();
  }
  template <typename T>
  static inline const std::string& E79_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_Name(value);
  }
  static inline bool E79_Parse(absl::string_view name, E79* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_2().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_5().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
  };
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.E78 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.E79 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 value);

  public:
  // optional fixed32 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M50_M52_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    int f_0_;
    int f_1_;
    ::uint32_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57() : Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& from) : Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& operator=(const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& operator=(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& a, Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& from) { Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& from);
  Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E80 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80;
  static constexpr E80 E80_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_UNSPECIFIED;
  static constexpr E80 E80_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_1;
  static constexpr E80 E80_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_2;
  static constexpr E80 E80_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_3;
  static constexpr E80 E80_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_4;
  static constexpr E80 E80_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_CONST_5;
  static inline bool E80_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_IsValid(value);
  }
  static constexpr E80 E80_MIN = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_MIN;
  static constexpr E80 E80_MAX = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_MAX;
  static constexpr int E80_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_E80_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E80_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_descriptor();
  }
  template <typename T>
  static inline const std::string& E80_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_Name(value);
  }
  static inline bool E80_Parse(absl::string_view name, E80* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())), f_2().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_2().size() * sizeof(::int64_t));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
    kF1FieldNumber = 2,
  };
  // repeated int64 f_2 = 3 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int64_t f_2(int index) const;
  void set_f_2(int index, ::int64_t value);
  void add_f_2(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_2();

  public:
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional int64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.E80 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 1,
      72, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::int64_t f_3_;
    int f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M21 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M21) */ {
 public:
  inline Message6_M1_M15_M21() : Message6_M1_M15_M21(nullptr) {}
  ~Message6_M1_M15_M21() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M21(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M21(const Message6_M1_M15_M21& from) : Message6_M1_M15_M21(nullptr, from) {}
  inline Message6_M1_M15_M21(Message6_M1_M15_M21&& from) noexcept
      : Message6_M1_M15_M21(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M21& operator=(const Message6_M1_M15_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M21& operator=(Message6_M1_M15_M21&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M21& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M21* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M21*>(
        &_Message6_M1_M15_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message6_M1_M15_M21& a, Message6_M1_M15_M21& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M21* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M21* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M21* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M21>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M21& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M21& from) { Message6_M1_M15_M21::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M21* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M21"; }

 protected:
  explicit Message6_M1_M15_M21(::google::protobuf::Arena* arena);
  Message6_M1_M15_M21(::google::protobuf::Arena* arena, const Message6_M1_M15_M21& from);
  Message6_M1_M15_M21(::google::protobuf::Arena* arena, Message6_M1_M15_M21&& from) noexcept
      : Message6_M1_M15_M21(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())), f_2().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_2().size() * sizeof(::int64_t));
      sizes.push_back(f_0().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_5().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_2().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 7,
    kF0FieldNumber = 2,
    kF4FieldNumber = 9,
    kF5FieldNumber = 12,
    kF1FieldNumber = 4,
    kF3FieldNumber = 8,
  };
  // repeated int64 f_2 = 7 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int64_t f_2(int index) const;
  void set_f_2(int index, ::int64_t value);
  void add_f_2(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_2();

  public:
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_5 = 12;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional float f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional fixed32 f_3 = 8;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M21)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M21_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    float f_1_;
    ::uint32_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M9 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M9) */ {
 public:
  inline Message6_M5_M9() : Message6_M5_M9(nullptr) {}
  ~Message6_M5_M9() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M9(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M9(const Message6_M5_M9& from) : Message6_M5_M9(nullptr, from) {}
  inline Message6_M5_M9(Message6_M5_M9&& from) noexcept
      : Message6_M5_M9(nullptr, std::move(from)) {}
  inline Message6_M5_M9& operator=(const Message6_M5_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M9& operator=(Message6_M5_M9&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M9& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M9* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M9*>(
        &_Message6_M5_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 67;
  friend void swap(Message6_M5_M9& a, Message6_M5_M9& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M9* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M9* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M9* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M9>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M9& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M9& from) { Message6_M5_M9::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M9* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M9"; }

 protected:
  explicit Message6_M5_M9(::google::protobuf::Arena* arena);
  Message6_M5_M9(::google::protobuf::Arena* arena, const Message6_M5_M9& from);
  Message6_M5_M9(::google::protobuf::Arena* arena, Message6_M5_M9&& from) noexcept
      : Message6_M5_M9(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M20 = Message6_M5_M9_M20;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message6.M5.M9.M20 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M5_M9_M20& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M9_M20* release_f_1();
  ::fleetbench::proto::Message6_M5_M9_M20* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M5_M9_M20* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M5_M9_M20* value);
  ::fleetbench::proto::Message6_M5_M9_M20* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M5_M9_M20& _internal_f_1() const;
  ::fleetbench::proto::Message6_M5_M9_M20* _internal_mutable_f_1();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M9)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M9_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M5_M9_M20* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M8_M27_M36 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M8.M27.M36) */ {
 public:
  inline Message6_M5_M8_M27_M36() : Message6_M5_M8_M27_M36(nullptr) {}
  ~Message6_M5_M8_M27_M36() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M8_M27_M36(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M8_M27_M36(const Message6_M5_M8_M27_M36& from) : Message6_M5_M8_M27_M36(nullptr, from) {}
  inline Message6_M5_M8_M27_M36(Message6_M5_M8_M27_M36&& from) noexcept
      : Message6_M5_M8_M27_M36(nullptr, std::move(from)) {}
  inline Message6_M5_M8_M27_M36& operator=(const Message6_M5_M8_M27_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M8_M27_M36& operator=(Message6_M5_M8_M27_M36&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M8_M27_M36& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M8_M27_M36* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M8_M27_M36*>(
        &_Message6_M5_M8_M27_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Message6_M5_M8_M27_M36& a, Message6_M5_M8_M27_M36& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M8_M27_M36* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M8_M27_M36* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M8_M27_M36* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M8_M27_M36>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M8_M27_M36& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M8_M27_M36& from) { Message6_M5_M8_M27_M36::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M8_M27_M36* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M8.M27.M36"; }

 protected:
  explicit Message6_M5_M8_M27_M36(::google::protobuf::Arena* arena);
  Message6_M5_M8_M27_M36(::google::protobuf::Arena* arena, const Message6_M5_M8_M27_M36& from);
  Message6_M5_M8_M27_M36(::google::protobuf::Arena* arena, Message6_M5_M8_M27_M36&& from) noexcept
      : Message6_M5_M8_M27_M36(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M37 = Message6_M5_M8_M27_M36_M37;
  using E37 = Message6_M5_M8_M27_M36_E37;
  static constexpr E37 E37_UNSPECIFIED = Message6_M5_M8_M27_M36_E37_E37_UNSPECIFIED;
  static constexpr E37 E37_CONST_1 = Message6_M5_M8_M27_M36_E37_E37_CONST_1;
  static constexpr E37 E37_CONST_2 = Message6_M5_M8_M27_M36_E37_E37_CONST_2;
  static constexpr E37 E37_CONST_3 = Message6_M5_M8_M27_M36_E37_E37_CONST_3;
  static constexpr E37 E37_CONST_4 = Message6_M5_M8_M27_M36_E37_E37_CONST_4;
  static constexpr E37 E37_CONST_5 = Message6_M5_M8_M27_M36_E37_E37_CONST_5;
  static inline bool E37_IsValid(int value) {
    return Message6_M5_M8_M27_M36_E37_IsValid(value);
  }
  static constexpr E37 E37_MIN = Message6_M5_M8_M27_M36_E37_E37_MIN;
  static constexpr E37 E37_MAX = Message6_M5_M8_M27_M36_E37_E37_MAX;
  static constexpr int E37_ARRAYSIZE = Message6_M5_M8_M27_M36_E37_E37_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E37_descriptor() {
    return Message6_M5_M8_M27_M36_E37_descriptor();
  }
  template <typename T>
  static inline const std::string& E37_Name(T value) {
    return Message6_M5_M8_M27_M36_E37_Name(value);
  }
  static inline bool E37_Parse(absl::string_view name, E37* value) {
    return Message6_M5_M8_M27_M36_E37_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_12())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())), f_1().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      mutable_f_23()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_12()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      mutable_f_23()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      mutable_f_23()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      sizes.push_back(end_addr - start_addr + sizeof(f_12()));
      sizes.push_back(f_1().size() * sizeof(::int32_t));
      sizes.push_back(f_0().size());
      sizes.push_back(f_3().size());
      sizes.push_back(f_6().size());
      sizes.push_back(f_11().size());
      sizes.push_back(f_16().size());
      mutable_f_23()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      idx = mutable_f_23()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      idx = mutable_f_23()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
    kF6FieldNumber = 9,
    kF11FieldNumber = 16,
    kF16FieldNumber = 23,
    kF23FieldNumber = 25,
    kF4FieldNumber = 6,
    kF5FieldNumber = 8,
    kF2FieldNumber = 3,
    kF8FieldNumber = 13,
    kF7FieldNumber = 12,
    kF9FieldNumber = 14,
    kF10FieldNumber = 15,
    kF13FieldNumber = 19,
    kF14FieldNumber = 21,
    kF15FieldNumber = 22,
    kF12FieldNumber = 17,
  };
  // repeated int32 f_1 = 2 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int32_t f_1(int index) const;
  void set_f_1(int index, ::int32_t value);
  void add_f_1(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_1();

  public:
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional bytes f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional string f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional string f_16 = 23;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.M36.M37 f_23 = 25;
  bool has_f_23() const;
  void clear_f_23() ;
  const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37& f_23() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* release_f_23();
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* mutable_f_23();
  void set_allocated_f_23(::fleetbench::proto::Message6_M5_M8_M27_M36_M37* value);
  void unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message6_M5_M8_M27_M36_M37* value);
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* unsafe_arena_release_f_23();

  private:
  const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37& _internal_f_23() const;
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* _internal_mutable_f_23();

  public:
  // optional int64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int32 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.M36.E37 f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message6_M5_M8_M27_M36_E37 f_8() const;
  void set_f_8(::fleetbench::proto::Message6_M5_M8_M27_M36_E37 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_M36_E37 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message6_M5_M8_M27_M36_E37 value);

  public:
  // optional int64 f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // optional int64 f_9 = 14;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int64_t f_9() const;
  void set_f_9(::int64_t value);

  private:
  ::int64_t _internal_f_9() const;
  void _internal_set_f_9(::int64_t value);

  public:
  // optional int64 f_10 = 15;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int64_t f_10() const;
  void set_f_10(::int64_t value);

  private:
  ::int64_t _internal_f_10() const;
  void _internal_set_f_10(::int64_t value);

  public:
  // optional int64 f_13 = 19;
  bool has_f_13() const;
  void clear_f_13() ;
  ::int64_t f_13() const;
  void set_f_13(::int64_t value);

  private:
  ::int64_t _internal_f_13() const;
  void _internal_set_f_13(::int64_t value);

  public:
  // optional double f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  double f_14() const;
  void set_f_14(double value);

  private:
  double _internal_f_14() const;
  void _internal_set_f_14(double value);

  public:
  // optional uint64 f_15 = 22;
  bool has_f_15() const;
  void clear_f_15() ;
  ::uint64_t f_15() const;
  void set_f_15(::uint64_t value);

  private:
  ::uint64_t _internal_f_15() const;
  void _internal_set_f_15(::uint64_t value);

  public:
  // optional int32 f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int32_t f_12() const;
  void set_f_12(::int32_t value);

  private:
  ::int32_t _internal_f_12() const;
  void _internal_set_f_12(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M8.M27.M36)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 2,
      78, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M8_M27_M36_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* f_23_;
    ::int64_t f_4_;
    ::int64_t f_5_;
    ::int32_t f_2_;
    int f_8_;
    ::int64_t f_7_;
    ::int64_t f_9_;
    ::int64_t f_10_;
    ::int64_t f_13_;
    double f_14_;
    ::uint64_t f_15_;
    ::int32_t f_12_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M25 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M25) */ {
 public:
  inline Message6_M4_M6_M25() : Message6_M4_M6_M25(nullptr) {}
  ~Message6_M4_M6_M25() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M25(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M25(const Message6_M4_M6_M25& from) : Message6_M4_M6_M25(nullptr, from) {}
  inline Message6_M4_M6_M25(Message6_M4_M6_M25&& from) noexcept
      : Message6_M4_M6_M25(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M25& operator=(const Message6_M4_M6_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M25& operator=(Message6_M4_M6_M25&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M25& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M25* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M25*>(
        &_Message6_M4_M6_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(Message6_M4_M6_M25& a, Message6_M4_M6_M25& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M25* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M25* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M25* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M25>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M25& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M25& from) { Message6_M4_M6_M25::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M25* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M25"; }

 protected:
  explicit Message6_M4_M6_M25(::google::protobuf::Arena* arena);
  Message6_M4_M6_M25(::google::protobuf::Arena* arena, const Message6_M4_M6_M25& from);
  Message6_M4_M6_M25(::google::protobuf::Arena* arena, Message6_M4_M6_M25&& from) noexcept
      : Message6_M4_M6_M25(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M30 = Message6_M4_M6_M25_M30;
  using M33 = Message6_M4_M6_M25_M33;
  using E9 = Message6_M4_M6_M25_E9;
  static constexpr E9 E9_UNSPECIFIED = Message6_M4_M6_M25_E9_E9_UNSPECIFIED;
  static constexpr E9 E9_CONST_1 = Message6_M4_M6_M25_E9_E9_CONST_1;
  static constexpr E9 E9_CONST_2 = Message6_M4_M6_M25_E9_E9_CONST_2;
  static constexpr E9 E9_CONST_3 = Message6_M4_M6_M25_E9_E9_CONST_3;
  static constexpr E9 E9_CONST_4 = Message6_M4_M6_M25_E9_E9_CONST_4;
  static constexpr E9 E9_CONST_5 = Message6_M4_M6_M25_E9_E9_CONST_5;
  static inline bool E9_IsValid(int value) {
    return Message6_M4_M6_M25_E9_IsValid(value);
  }
  static constexpr E9 E9_MIN = Message6_M4_M6_M25_E9_E9_MIN;
  static constexpr E9 E9_MAX = Message6_M4_M6_M25_E9_E9_MAX;
  static constexpr int E9_ARRAYSIZE = Message6_M4_M6_M25_E9_E9_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E9_descriptor() {
    return Message6_M4_M6_M25_E9_descriptor();
  }
  template <typename T>
  static inline const std::string& E9_Name(T value) {
    return Message6_M4_M6_M25_E9_Name(value);
  }
  static inline bool E9_Parse(absl::string_view name, E9* value) {
    return Message6_M4_M6_M25_E9_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_6().size());
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_6().size());
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_4().size());
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_6_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_6_entries; ++i) {
        auto* new_msg = add_f_6();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_6(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_6_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_6_entries; ++i) {
        auto* new_msg = add_f_6();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_6(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 8,
    kF0FieldNumber = 1,
    kF4FieldNumber = 5,
    kF5FieldNumber = 6,
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M25.M33 f_6 = 8;
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  ::fleetbench::proto::Message6_M4_M6_M25_M33* mutable_f_6(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>& _internal_f_6() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>* _internal_mutable_f_6();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M25_M33& f_6(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M25_M33* add_f_6();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>& f_6() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M25.M30 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message6_M4_M6_M25_M30& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M25_M30* release_f_5();
  ::fleetbench::proto::Message6_M4_M6_M25_M30* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message6_M4_M6_M25_M30* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message6_M4_M6_M25_M30* value);
  ::fleetbench::proto::Message6_M4_M6_M25_M30* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M25_M30& _internal_f_5() const;
  ::fleetbench::proto::Message6_M4_M6_M25_M30* _internal_mutable_f_5();

  public:
  // optional int64 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M25.E9 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M6_M25_E9 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M4_M6_M25_E9 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M25_E9 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M4_M6_M25_E9 value);

  public:
  // optional uint32 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M25)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M25_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M25_M33 > f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::fleetbench::proto::Message6_M4_M6_M25_M30* f_5_;
    ::int64_t f_2_;
    int f_1_;
    ::uint32_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M68 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68;
  using M69 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())), f_1().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size() * sizeof(::int64_t));
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
    kF3FieldNumber = 4,
    kF4FieldNumber = 6,
  };
  // repeated int64 f_1 = 3 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int64_t f_1(int index) const;
  void set_f_1(int index, ::int64_t value);
  void add_f_1(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_1();

  public:
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* release_f_3();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& _internal_f_3() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* release_f_4();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& _internal_f_4() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* _internal_mutable_f_4();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* f_3_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M26_M35 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M26.M35) */ {
 public:
  inline Message6_M4_M13_M26_M35() : Message6_M4_M13_M26_M35(nullptr) {}
  ~Message6_M4_M13_M26_M35() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M26_M35(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M26_M35(const Message6_M4_M13_M26_M35& from) : Message6_M4_M13_M26_M35(nullptr, from) {}
  inline Message6_M4_M13_M26_M35(Message6_M4_M13_M26_M35&& from) noexcept
      : Message6_M4_M13_M26_M35(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M26_M35& operator=(const Message6_M4_M13_M26_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M26_M35& operator=(Message6_M4_M13_M26_M35&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M26_M35& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M26_M35* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M26_M35*>(
        &_Message6_M4_M13_M26_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(Message6_M4_M13_M26_M35& a, Message6_M4_M13_M26_M35& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M26_M35* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M26_M35* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M26_M35* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M26_M35>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M26_M35& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M26_M35& from) { Message6_M4_M13_M26_M35::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M26_M35* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M26.M35"; }

 protected:
  explicit Message6_M4_M13_M26_M35(::google::protobuf::Arena* arena);
  Message6_M4_M13_M26_M35(::google::protobuf::Arena* arena, const Message6_M4_M13_M26_M35& from);
  Message6_M4_M13_M26_M35(::google::protobuf::Arena* arena, Message6_M4_M13_M26_M35&& from) noexcept
      : Message6_M4_M13_M26_M35(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M39 = Message6_M4_M13_M26_M35_M39;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message6.M4.M13.M26.M35.M39 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* release_f_2();
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26_M35_M39* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26_M35_M39* value);
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M26.M35)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M26_M35_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M26_M31 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M26.M31) */ {
 public:
  inline Message6_M4_M13_M26_M31() : Message6_M4_M13_M26_M31(nullptr) {}
  ~Message6_M4_M13_M26_M31() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M26_M31(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M26_M31(const Message6_M4_M13_M26_M31& from) : Message6_M4_M13_M26_M31(nullptr, from) {}
  inline Message6_M4_M13_M26_M31(Message6_M4_M13_M26_M31&& from) noexcept
      : Message6_M4_M13_M26_M31(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M26_M31& operator=(const Message6_M4_M13_M26_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M26_M31& operator=(Message6_M4_M13_M26_M31&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M26_M31& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M26_M31* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M26_M31*>(
        &_Message6_M4_M13_M26_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(Message6_M4_M13_M26_M31& a, Message6_M4_M13_M26_M31& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M26_M31* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M26_M31* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M26_M31* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M26_M31>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M26_M31& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M26_M31& from) { Message6_M4_M13_M26_M31::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M26_M31* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M26.M31"; }

 protected:
  explicit Message6_M4_M13_M26_M31(::google::protobuf::Arena* arena);
  Message6_M4_M13_M26_M31(::google::protobuf::Arena* arena, const Message6_M4_M13_M26_M31& from);
  Message6_M4_M13_M26_M31(::google::protobuf::Arena* arena, Message6_M4_M13_M26_M31&& from) noexcept
      : Message6_M4_M13_M26_M31(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M40 = Message6_M4_M13_M26_M31_M40;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message6.M4.M13.M26.M31.M40 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M13_M26_M31_M40* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message6_M4_M13_M26_M31_M40& f_1(int index) const;
  ::fleetbench::proto::Message6_M4_M13_M26_M31_M40* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>& f_1() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M26.M31)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M26_M31_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M13_M26_M31_M40 > f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M3_M11_M22 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M3.M11.M22) */ {
 public:
  inline Message6_M3_M11_M22() : Message6_M3_M11_M22(nullptr) {}
  ~Message6_M3_M11_M22() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M3_M11_M22(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M3_M11_M22(const Message6_M3_M11_M22& from) : Message6_M3_M11_M22(nullptr, from) {}
  inline Message6_M3_M11_M22(Message6_M3_M11_M22&& from) noexcept
      : Message6_M3_M11_M22(nullptr, std::move(from)) {}
  inline Message6_M3_M11_M22& operator=(const Message6_M3_M11_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M3_M11_M22& operator=(Message6_M3_M11_M22&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M3_M11_M22& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M3_M11_M22* internal_default_instance() {
    return reinterpret_cast<const Message6_M3_M11_M22*>(
        &_Message6_M3_M11_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Message6_M3_M11_M22& a, Message6_M3_M11_M22& b) { a.Swap(&b); }
  inline void Swap(Message6_M3_M11_M22* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M3_M11_M22* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M3_M11_M22* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M3_M11_M22>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M3_M11_M22& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M3_M11_M22& from) { Message6_M3_M11_M22::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M3_M11_M22* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M3.M11.M22"; }

 protected:
  explicit Message6_M3_M11_M22(::google::protobuf::Arena* arena);
  Message6_M3_M11_M22(::google::protobuf::Arena* arena, const Message6_M3_M11_M22& from);
  Message6_M3_M11_M22(::google::protobuf::Arena* arena, Message6_M3_M11_M22&& from) noexcept
      : Message6_M3_M11_M22(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M32 = Message6_M3_M11_M22_M32;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M3.M11.M22.M32 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M3_M11_M22_M32& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M3_M11_M22_M32* release_f_2();
  ::fleetbench::proto::Message6_M3_M11_M22_M32* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22_M32* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22_M32* value);
  ::fleetbench::proto::Message6_M3_M11_M22_M32* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M3_M11_M22_M32& _internal_f_2() const;
  ::fleetbench::proto::Message6_M3_M11_M22_M32* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M3.M11.M22)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M3_M11_M22_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M3_M11_M22_M32* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2_M10 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2.M10) */ {
 public:
  inline Message6_M2_M10() : Message6_M2_M10(nullptr) {}
  ~Message6_M2_M10() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2_M10(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2_M10(const Message6_M2_M10& from) : Message6_M2_M10(nullptr, from) {}
  inline Message6_M2_M10(Message6_M2_M10&& from) noexcept
      : Message6_M2_M10(nullptr, std::move(from)) {}
  inline Message6_M2_M10& operator=(const Message6_M2_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2_M10& operator=(Message6_M2_M10&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2_M10& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2_M10* internal_default_instance() {
    return reinterpret_cast<const Message6_M2_M10*>(
        &_Message6_M2_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(Message6_M2_M10& a, Message6_M2_M10& b) { a.Swap(&b); }
  inline void Swap(Message6_M2_M10* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2_M10* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2_M10* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2_M10>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2_M10& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2_M10& from) { Message6_M2_M10::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2_M10* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2.M10"; }

 protected:
  explicit Message6_M2_M10(::google::protobuf::Arena* arena);
  Message6_M2_M10(::google::protobuf::Arena* arena, const Message6_M2_M10& from);
  Message6_M2_M10(::google::protobuf::Arena* arena, Message6_M2_M10&& from) noexcept
      : Message6_M2_M10(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M19 = Message6_M2_M10_M19;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())), f_2().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_2().size() * sizeof(::int32_t));
      sizes.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_4().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      size_t num_f_7_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_7_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF7FieldNumber = 8,
    kF4FieldNumber = 7,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
  };
  // repeated int32 f_2 = 3 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int32_t f_2(int index) const;
  void set_f_2(int index, ::int32_t value);
  void add_f_2(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_2();

  public:
  // repeated .fleetbench.proto.Message6.M2.M10.M19 f_7 = 8;
  int f_7_size() const;
  private:
  int _internal_f_7_size() const;

  public:
  void clear_f_7() ;
  ::fleetbench::proto::Message6_M2_M10_M19* mutable_f_7(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>* mutable_f_7();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>& _internal_f_7() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>* _internal_mutable_f_7();
  public:
  const ::fleetbench::proto::Message6_M2_M10_M19& f_7(int index) const;
  ::fleetbench::proto::Message6_M2_M10_M19* add_f_7();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>& f_7() const;
  // optional string f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional bool f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2.M10)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_M10_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M2_M10_M19 > f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    double f_0_;
    ::int32_t f_1_;
    bool f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M45 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M45() : Message6_M1_M15_M23_M28_M42_M45(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M45() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M45(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M45(const Message6_M1_M15_M23_M28_M42_M45& from) : Message6_M1_M15_M23_M28_M42_M45(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M45(Message6_M1_M15_M23_M28_M42_M45&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M45(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M45& operator=(const Message6_M1_M15_M23_M28_M42_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M45& operator=(Message6_M1_M15_M23_M28_M42_M45&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M45& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M45* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M45*>(
        &_Message6_M1_M15_M23_M28_M42_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Message6_M1_M15_M23_M28_M42_M45& a, Message6_M1_M15_M23_M28_M42_M45& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M45* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M45* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M45* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M45>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M45& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M45& from) { Message6_M1_M15_M23_M28_M42_M45::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M45* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M45(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M45(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M45& from);
  Message6_M1_M15_M23_M28_M42_M45(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M45&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M45(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M49 = Message6_M1_M15_M23_M28_M42_M45_M49;
  using E45 = Message6_M1_M15_M23_M28_M42_M45_E45;
  static constexpr E45 E45_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M45_E45_E45_UNSPECIFIED;
  static constexpr E45 E45_CONST_1 = Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_1;
  static constexpr E45 E45_CONST_2 = Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_2;
  static constexpr E45 E45_CONST_3 = Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_3;
  static constexpr E45 E45_CONST_4 = Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_4;
  static constexpr E45 E45_CONST_5 = Message6_M1_M15_M23_M28_M42_M45_E45_E45_CONST_5;
  static inline bool E45_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M45_E45_IsValid(value);
  }
  static constexpr E45 E45_MIN = Message6_M1_M15_M23_M28_M42_M45_E45_E45_MIN;
  static constexpr E45 E45_MAX = Message6_M1_M15_M23_M28_M42_M45_E45_E45_MAX;
  static constexpr int E45_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M45_E45_E45_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E45_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M45_E45_descriptor();
  }
  template <typename T>
  static inline const std::string& E45_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M45_E45_Name(value);
  }
  static inline bool E45_Parse(absl::string_view name, E45* value) {
    return Message6_M1_M15_M23_M28_M42_M45_E45_Parse(name, value);
  }
  using E46 = Message6_M1_M15_M23_M28_M42_M45_E46;
  static constexpr E46 E46_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M45_E46_E46_UNSPECIFIED;
  static constexpr E46 E46_CONST_1 = Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_1;
  static constexpr E46 E46_CONST_2 = Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_2;
  static constexpr E46 E46_CONST_3 = Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_3;
  static constexpr E46 E46_CONST_4 = Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_4;
  static constexpr E46 E46_CONST_5 = Message6_M1_M15_M23_M28_M42_M45_E46_E46_CONST_5;
  static inline bool E46_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M45_E46_IsValid(value);
  }
  static constexpr E46 E46_MIN = Message6_M1_M15_M23_M28_M42_M45_E46_E46_MIN;
  static constexpr E46 E46_MAX = Message6_M1_M15_M23_M28_M42_M45_E46_E46_MAX;
  static constexpr int E46_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M45_E46_E46_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E46_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M45_E46_descriptor();
  }
  template <typename T>
  static inline const std::string& E46_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M45_E46_Name(value);
  }
  static inline bool E46_Parse(absl::string_view name, E46* value) {
    return Message6_M1_M15_M23_M28_M42_M45_E46_Parse(name, value);
  }
  using E47 = Message6_M1_M15_M23_M28_M42_M45_E47;
  static constexpr E47 E47_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M45_E47_E47_UNSPECIFIED;
  static constexpr E47 E47_CONST_1 = Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_1;
  static constexpr E47 E47_CONST_2 = Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_2;
  static constexpr E47 E47_CONST_3 = Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_3;
  static constexpr E47 E47_CONST_4 = Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_4;
  static constexpr E47 E47_CONST_5 = Message6_M1_M15_M23_M28_M42_M45_E47_E47_CONST_5;
  static inline bool E47_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M45_E47_IsValid(value);
  }
  static constexpr E47 E47_MIN = Message6_M1_M15_M23_M28_M42_M45_E47_E47_MIN;
  static constexpr E47 E47_MAX = Message6_M1_M15_M23_M28_M42_M45_E47_E47_MAX;
  static constexpr int E47_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M45_E47_E47_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E47_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M45_E47_descriptor();
  }
  template <typename T>
  static inline const std::string& E47_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M45_E47_Name(value);
  }
  static inline bool E47_Parse(absl::string_view name, E47* value) {
    return Message6_M1_M15_M23_M28_M42_M45_E47_Parse(name, value);
  }
  using E48 = Message6_M1_M15_M23_M28_M42_M45_E48;
  static constexpr E48 E48_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M45_E48_E48_UNSPECIFIED;
  static constexpr E48 E48_CONST_1 = Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_1;
  static constexpr E48 E48_CONST_2 = Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_2;
  static constexpr E48 E48_CONST_3 = Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_3;
  static constexpr E48 E48_CONST_4 = Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_4;
  static constexpr E48 E48_CONST_5 = Message6_M1_M15_M23_M28_M42_M45_E48_E48_CONST_5;
  static inline bool E48_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M45_E48_IsValid(value);
  }
  static constexpr E48 E48_MIN = Message6_M1_M15_M23_M28_M42_M45_E48_E48_MIN;
  static constexpr E48 E48_MAX = Message6_M1_M15_M23_M28_M42_M45_E48_E48_MAX;
  static constexpr int E48_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M45_E48_E48_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E48_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M45_E48_descriptor();
  }
  template <typename T>
  static inline const std::string& E48_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M45_E48_Name(value);
  }
  static inline bool E48_Parse(absl::string_view name, E48* value) {
    return Message6_M1_M15_M23_M28_M42_M45_E48_Parse(name, value);
  }
  using E49 = Message6_M1_M15_M23_M28_M42_M45_E49;
  static constexpr E49 E49_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M45_E49_E49_UNSPECIFIED;
  static constexpr E49 E49_CONST_1 = Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_1;
  static constexpr E49 E49_CONST_2 = Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_2;
  static constexpr E49 E49_CONST_3 = Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_3;
  static constexpr E49 E49_CONST_4 = Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_4;
  static constexpr E49 E49_CONST_5 = Message6_M1_M15_M23_M28_M42_M45_E49_E49_CONST_5;
  static inline bool E49_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M45_E49_IsValid(value);
  }
  static constexpr E49 E49_MIN = Message6_M1_M15_M23_M28_M42_M45_E49_E49_MIN;
  static constexpr E49 E49_MAX = Message6_M1_M15_M23_M28_M42_M45_E49_E49_MAX;
  static constexpr int E49_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M45_E49_E49_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E49_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M45_E49_descriptor();
  }
  template <typename T>
  static inline const std::string& E49_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M45_E49_Name(value);
  }
  static inline bool E49_Parse(absl::string_view name, E49* value) {
    return Message6_M1_M15_M23_M28_M42_M45_E49_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_8().data())), f_8().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_8().data())));
      sizes_list.push_back(f_8().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_8().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_8().size() * sizeof(::int32_t));
      sizes.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_1().size());
      sizes.push_back(f_7().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_8().data())));
      size_t num_f_12_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_12_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF8FieldNumber = 12,
    kF12FieldNumber = 13,
    kF1FieldNumber = 2,
    kF7FieldNumber = 10,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
  };
  // repeated int32 f_8 = 12 [packed = true];
  int f_8_size() const;
  private:
  int _internal_f_8_size() const;

  public:
  void clear_f_8() ;
  ::int32_t f_8(int index) const;
  void set_f_8(int index, ::int32_t value);
  void add_f_8(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_8() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_8();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_8() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_8();

  public:
  // repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49 f_12 = 13;
  int f_12_size() const;
  private:
  int _internal_f_12_size() const;

  public:
  void clear_f_12() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49* mutable_f_12(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>* mutable_f_12();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>& _internal_f_12() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>* _internal_mutable_f_12();
  public:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49& f_12(int index) const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49* add_f_12();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>& f_12() const;
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E45 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E46 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 f_2() const;
  void set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 value);

  public:
  // optional int64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E47 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 f_4() const;
  void set_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E48 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 f_5() const;
  void set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E49 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 f_6() const;
  void set_f_6(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 6,
      71, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M45_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_8_;
    mutable ::google::protobuf::internal::CachedSize _f_8_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49 > f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    int f_0_;
    int f_2_;
    ::int64_t f_3_;
    int f_4_;
    int f_5_;
    int f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M50 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M50() : Message6_M1_M15_M23_M28_M42_M44_M50(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M50() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M50(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M50(const Message6_M1_M15_M23_M28_M42_M44_M50& from) : Message6_M1_M15_M23_M28_M42_M44_M50(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50(Message6_M1_M15_M23_M28_M42_M44_M50&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M50& operator=(const Message6_M1_M15_M23_M28_M42_M44_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M50& operator=(Message6_M1_M15_M23_M28_M42_M44_M50&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M50* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M50*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M50& a, Message6_M1_M15_M23_M28_M42_M44_M50& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M50* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M50* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M50* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M50>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M50& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M50& from) { Message6_M1_M15_M23_M28_M42_M44_M50::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M50* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M50(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M50(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M50& from);
  Message6_M1_M15_M23_M28_M42_M44_M50(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M50&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M50(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M52 = Message6_M1_M15_M23_M28_M42_M44_M50_M52;
  using M54 = Message6_M1_M15_M23_M28_M42_M44_M50_M54;
  using E64 = Message6_M1_M15_M23_M28_M42_M44_M50_E64;
  static constexpr E64 E64_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_UNSPECIFIED;
  static constexpr E64 E64_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_1;
  static constexpr E64 E64_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_2;
  static constexpr E64 E64_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_3;
  static constexpr E64 E64_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_4;
  static constexpr E64 E64_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_CONST_5;
  static inline bool E64_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E64_IsValid(value);
  }
  static constexpr E64 E64_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_MIN;
  static constexpr E64 E64_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_MAX;
  static constexpr int E64_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E64_E64_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E64_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E64_descriptor();
  }
  template <typename T>
  static inline const std::string& E64_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E64_Name(value);
  }
  static inline bool E64_Parse(absl::string_view name, E64* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E64_Parse(name, value);
  }
  using E65 = Message6_M1_M15_M23_M28_M42_M44_M50_E65;
  static constexpr E65 E65_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_UNSPECIFIED;
  static constexpr E65 E65_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_1;
  static constexpr E65 E65_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_2;
  static constexpr E65 E65_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_3;
  static constexpr E65 E65_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_4;
  static constexpr E65 E65_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_CONST_5;
  static inline bool E65_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E65_IsValid(value);
  }
  static constexpr E65 E65_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_MIN;
  static constexpr E65 E65_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_MAX;
  static constexpr int E65_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E65_E65_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E65_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E65_descriptor();
  }
  template <typename T>
  static inline const std::string& E65_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E65_Name(value);
  }
  static inline bool E65_Parse(absl::string_view name, E65* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E65_Parse(name, value);
  }
  using E66 = Message6_M1_M15_M23_M28_M42_M44_M50_E66;
  static constexpr E66 E66_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_UNSPECIFIED;
  static constexpr E66 E66_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_1;
  static constexpr E66 E66_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_2;
  static constexpr E66 E66_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_3;
  static constexpr E66 E66_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_4;
  static constexpr E66 E66_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_CONST_5;
  static inline bool E66_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E66_IsValid(value);
  }
  static constexpr E66 E66_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_MIN;
  static constexpr E66 E66_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_MAX;
  static constexpr int E66_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E66_E66_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E66_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E66_descriptor();
  }
  template <typename T>
  static inline const std::string& E66_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E66_Name(value);
  }
  static inline bool E66_Parse(absl::string_view name, E66* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E66_Parse(name, value);
  }
  using E67 = Message6_M1_M15_M23_M28_M42_M44_M50_E67;
  static constexpr E67 E67_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_UNSPECIFIED;
  static constexpr E67 E67_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_1;
  static constexpr E67 E67_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_2;
  static constexpr E67 E67_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_3;
  static constexpr E67 E67_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_4;
  static constexpr E67 E67_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_CONST_5;
  static inline bool E67_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E67_IsValid(value);
  }
  static constexpr E67 E67_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_MIN;
  static constexpr E67 E67_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_MAX;
  static constexpr int E67_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E67_E67_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E67_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E67_descriptor();
  }
  template <typename T>
  static inline const std::string& E67_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E67_Name(value);
  }
  static inline bool E67_Parse(absl::string_view name, E67* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E67_Parse(name, value);
  }
  using E68 = Message6_M1_M15_M23_M28_M42_M44_M50_E68;
  static constexpr E68 E68_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_UNSPECIFIED;
  static constexpr E68 E68_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_1;
  static constexpr E68 E68_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_2;
  static constexpr E68 E68_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_3;
  static constexpr E68 E68_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_4;
  static constexpr E68 E68_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_CONST_5;
  static inline bool E68_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E68_IsValid(value);
  }
  static constexpr E68 E68_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_MIN;
  static constexpr E68 E68_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_MAX;
  static constexpr int E68_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E68_E68_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E68_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E68_descriptor();
  }
  template <typename T>
  static inline const std::string& E68_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E68_Name(value);
  }
  static inline bool E68_Parse(absl::string_view name, E68* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E68_Parse(name, value);
  }
  using E69 = Message6_M1_M15_M23_M28_M42_M44_M50_E69;
  static constexpr E69 E69_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_UNSPECIFIED;
  static constexpr E69 E69_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_1;
  static constexpr E69 E69_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_2;
  static constexpr E69 E69_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_3;
  static constexpr E69 E69_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_4;
  static constexpr E69 E69_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_CONST_5;
  static inline bool E69_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E69_IsValid(value);
  }
  static constexpr E69 E69_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_MIN;
  static constexpr E69 E69_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_MAX;
  static constexpr int E69_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E69_E69_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E69_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E69_descriptor();
  }
  template <typename T>
  static inline const std::string& E69_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E69_Name(value);
  }
  static inline bool E69_Parse(absl::string_view name, E69* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E69_Parse(name, value);
  }
  using E70 = Message6_M1_M15_M23_M28_M42_M44_M50_E70;
  static constexpr E70 E70_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_UNSPECIFIED;
  static constexpr E70 E70_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_1;
  static constexpr E70 E70_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_2;
  static constexpr E70 E70_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_3;
  static constexpr E70 E70_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_4;
  static constexpr E70 E70_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_CONST_5;
  static inline bool E70_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E70_IsValid(value);
  }
  static constexpr E70 E70_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_MIN;
  static constexpr E70 E70_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_MAX;
  static constexpr int E70_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E70_E70_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E70_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E70_descriptor();
  }
  template <typename T>
  static inline const std::string& E70_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E70_Name(value);
  }
  static inline bool E70_Parse(absl::string_view name, E70* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E70_Parse(name, value);
  }
  using E71 = Message6_M1_M15_M23_M28_M42_M44_M50_E71;
  static constexpr E71 E71_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_UNSPECIFIED;
  static constexpr E71 E71_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_1;
  static constexpr E71 E71_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_2;
  static constexpr E71 E71_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_3;
  static constexpr E71 E71_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_4;
  static constexpr E71 E71_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_CONST_5;
  static inline bool E71_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E71_IsValid(value);
  }
  static constexpr E71 E71_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_MIN;
  static constexpr E71 E71_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_MAX;
  static constexpr int E71_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E71_E71_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E71_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E71_descriptor();
  }
  template <typename T>
  static inline const std::string& E71_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E71_Name(value);
  }
  static inline bool E71_Parse(absl::string_view name, E71* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E71_Parse(name, value);
  }
  using E72 = Message6_M1_M15_M23_M28_M42_M44_M50_E72;
  static constexpr E72 E72_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_UNSPECIFIED;
  static constexpr E72 E72_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_1;
  static constexpr E72 E72_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_2;
  static constexpr E72 E72_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_3;
  static constexpr E72 E72_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_4;
  static constexpr E72 E72_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_CONST_5;
  static inline bool E72_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E72_IsValid(value);
  }
  static constexpr E72 E72_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_MIN;
  static constexpr E72 E72_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_MAX;
  static constexpr int E72_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E72_E72_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E72_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E72_descriptor();
  }
  template <typename T>
  static inline const std::string& E72_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E72_Name(value);
  }
  static inline bool E72_Parse(absl::string_view name, E72* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E72_Parse(name, value);
  }
  using E73 = Message6_M1_M15_M23_M28_M42_M44_M50_E73;
  static constexpr E73 E73_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_UNSPECIFIED;
  static constexpr E73 E73_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_1;
  static constexpr E73 E73_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_2;
  static constexpr E73 E73_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_3;
  static constexpr E73 E73_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_4;
  static constexpr E73 E73_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_CONST_5;
  static inline bool E73_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E73_IsValid(value);
  }
  static constexpr E73 E73_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_MIN;
  static constexpr E73 E73_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_MAX;
  static constexpr int E73_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E73_E73_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E73_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E73_descriptor();
  }
  template <typename T>
  static inline const std::string& E73_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E73_Name(value);
  }
  static inline bool E73_Parse(absl::string_view name, E73* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E73_Parse(name, value);
  }
  using E74 = Message6_M1_M15_M23_M28_M42_M44_M50_E74;
  static constexpr E74 E74_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_UNSPECIFIED;
  static constexpr E74 E74_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_1;
  static constexpr E74 E74_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_2;
  static constexpr E74 E74_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_3;
  static constexpr E74 E74_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_4;
  static constexpr E74 E74_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_CONST_5;
  static inline bool E74_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E74_IsValid(value);
  }
  static constexpr E74 E74_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_MIN;
  static constexpr E74 E74_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_MAX;
  static constexpr int E74_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E74_E74_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E74_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E74_descriptor();
  }
  template <typename T>
  static inline const std::string& E74_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E74_Name(value);
  }
  static inline bool E74_Parse(absl::string_view name, E74* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E74_Parse(name, value);
  }
  using E75 = Message6_M1_M15_M23_M28_M42_M44_M50_E75;
  static constexpr E75 E75_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_UNSPECIFIED;
  static constexpr E75 E75_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_1;
  static constexpr E75 E75_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_2;
  static constexpr E75 E75_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_3;
  static constexpr E75 E75_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_4;
  static constexpr E75 E75_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_CONST_5;
  static inline bool E75_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E75_IsValid(value);
  }
  static constexpr E75 E75_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_MIN;
  static constexpr E75 E75_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_MAX;
  static constexpr int E75_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E75_E75_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E75_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E75_descriptor();
  }
  template <typename T>
  static inline const std::string& E75_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E75_Name(value);
  }
  static inline bool E75_Parse(absl::string_view name, E75* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E75_Parse(name, value);
  }
  using E76 = Message6_M1_M15_M23_M28_M42_M44_M50_E76;
  static constexpr E76 E76_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_UNSPECIFIED;
  static constexpr E76 E76_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_1;
  static constexpr E76 E76_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_2;
  static constexpr E76 E76_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_3;
  static constexpr E76 E76_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_4;
  static constexpr E76 E76_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_CONST_5;
  static inline bool E76_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E76_IsValid(value);
  }
  static constexpr E76 E76_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_MIN;
  static constexpr E76 E76_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_MAX;
  static constexpr int E76_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E76_E76_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E76_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E76_descriptor();
  }
  template <typename T>
  static inline const std::string& E76_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E76_Name(value);
  }
  static inline bool E76_Parse(absl::string_view name, E76* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E76_Parse(name, value);
  }
  using E77 = Message6_M1_M15_M23_M28_M42_M44_M50_E77;
  static constexpr E77 E77_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_UNSPECIFIED;
  static constexpr E77 E77_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_1;
  static constexpr E77 E77_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_2;
  static constexpr E77 E77_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_3;
  static constexpr E77 E77_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_4;
  static constexpr E77 E77_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_CONST_5;
  static inline bool E77_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E77_IsValid(value);
  }
  static constexpr E77 E77_MIN = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_MIN;
  static constexpr E77 E77_MAX = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_MAX;
  static constexpr int E77_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M50_E77_E77_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E77_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E77_descriptor();
  }
  template <typename T>
  static inline const std::string& E77_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E77_Name(value);
  }
  static inline bool E77_Parse(absl::string_view name, E77* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M50_E77_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_95_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_95())));
      for (int i = 0; i < f_14_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14(i).data())), f_14(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_23().data())), f_23().size() * sizeof(float)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_45().data())), f_45().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_63().data())), f_63().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_135_size(); ++i) {
        mutable_f_135(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())), f_13().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())), f_19().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_26().c_str())), f_26().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())), f_33().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())), f_38().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())), f_41().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())), f_43().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())), f_47().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())), f_48().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())), f_49().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_55().c_str())), f_55().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())), f_56().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_62().c_str())), f_62().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())), f_73().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_76().c_str())), f_76().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())), f_80().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())), f_86().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())), f_94().size()));
      mutable_f_133()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_95_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_95()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_14().size());
      for (int i = 0; i < f_14_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14(i).c_str())));
        sizes_list.push_back(f_14(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_23().data())));
      sizes_list.push_back(f_23().size() * sizeof(float));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_45().data())));
      sizes_list.push_back(f_45().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_63().data())));
      sizes_list.push_back(f_63().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_135().size());
      for (int i = 0; i < f_135_size(); ++i) {
        mutable_f_135(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      sizes_list.push_back(f_13().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      sizes_list.push_back(f_19().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_26().c_str())));
      sizes_list.push_back(f_26().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      sizes_list.push_back(f_33().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      sizes_list.push_back(f_38().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      sizes_list.push_back(f_41().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      sizes_list.push_back(f_43().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      sizes_list.push_back(f_47().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      sizes_list.push_back(f_48().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      sizes_list.push_back(f_49().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_55().c_str())));
      sizes_list.push_back(f_55().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      sizes_list.push_back(f_56().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_62().c_str())));
      sizes_list.push_back(f_62().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      sizes_list.push_back(f_73().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_76().c_str())));
      sizes_list.push_back(f_76().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      sizes_list.push_back(f_80().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      sizes_list.push_back(f_86().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      sizes_list.push_back(f_94().size());
      mutable_f_133()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_95_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_14_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_23().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_45().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_63().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_135_size(); ++i) {
        mutable_f_135(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_26().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_55().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_62().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_76().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      mutable_f_133()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_95_);
      sizes.push_back(end_addr - start_addr + sizeof(f_95()));
      sizes.push_back(f_14().size());
      for (int i = 0; i < f_14_size(); ++i) {
        sizes.push_back(f_14(i).size());
      }
      sizes.push_back(f_23().size() * sizeof(float));
      sizes.push_back(f_45().size() * sizeof(::int32_t));
      sizes.push_back(f_63().size() * sizeof(::int32_t));
      sizes.push_back(f_135().size());
      for (int i = 0; i < f_135_size(); ++i) {
        mutable_f_135(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
      sizes.push_back(f_9().size());
      sizes.push_back(f_13().size());
      sizes.push_back(f_19().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_26().size());
      sizes.push_back(f_33().size());
      sizes.push_back(f_38().size());
      sizes.push_back(f_41().size());
      sizes.push_back(f_43().size());
      sizes.push_back(f_47().size());
      sizes.push_back(f_48().size());
      sizes.push_back(f_49().size());
      sizes.push_back(f_55().size());
      sizes.push_back(f_56().size());
      sizes.push_back(f_62().size());
      sizes.push_back(f_73().size());
      sizes.push_back(f_76().size());
      sizes.push_back(f_80().size());
      sizes.push_back(f_86().size());
      sizes.push_back(f_94().size());
      mutable_f_133()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_95_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_14_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_14_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_14(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14(i).c_str())));
      }
      mutable_f_23()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_23().data())));
      mutable_f_45()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_45().data())));
      mutable_f_63()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_63().data())));
      size_t num_f_135_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_135_entries; ++i) {
        auto* new_msg = add_f_135();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_135(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_19(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_26(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_26().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_41(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_41().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_47(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_48(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_49(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_49().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_55(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_55().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_56(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_62(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_62().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_73(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_76(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_76().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_80(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_80().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_86(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      }
      idx = mutable_f_133()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_14_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_14_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_14(std::move(tmp_str));
      }
      mutable_f_23()->Resize(sizes[idx++] / sizeof(float), 0);
      mutable_f_45()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_63()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_135_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_135_entries; ++i) {
        auto* new_msg = add_f_135();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_135(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_19(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_26(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_41(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_47(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_48(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_49(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_55(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_56(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_62(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_73(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_76(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_80(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_86(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
      }
      idx = mutable_f_133()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF14FieldNumber = 22,
    kF23FieldNumber = 36,
    kF45FieldNumber = 63,
    kF63FieldNumber = 85,
    kF135FieldNumber = 137,
    kF0FieldNumber = 1,
    kF2FieldNumber = 5,
    kF9FieldNumber = 17,
    kF13FieldNumber = 21,
    kF19FieldNumber = 30,
    kF24FieldNumber = 37,
    kF26FieldNumber = 40,
    kF33FieldNumber = 47,
    kF38FieldNumber = 53,
    kF41FieldNumber = 57,
    kF43FieldNumber = 60,
    kF47FieldNumber = 65,
    kF48FieldNumber = 66,
    kF49FieldNumber = 67,
    kF55FieldNumber = 73,
    kF56FieldNumber = 74,
    kF62FieldNumber = 83,
    kF73FieldNumber = 100,
    kF76FieldNumber = 105,
    kF80FieldNumber = 112,
    kF86FieldNumber = 119,
    kF94FieldNumber = 132,
    kF133FieldNumber = 135,
    kF1FieldNumber = 3,
    kF3FieldNumber = 7,
    kF4FieldNumber = 8,
    kF5FieldNumber = 9,
    kF7FieldNumber = 11,
    kF6FieldNumber = 10,
    kF8FieldNumber = 13,
    kF11FieldNumber = 19,
    kF10FieldNumber = 18,
    kF12FieldNumber = 20,
    kF15FieldNumber = 25,
    kF16FieldNumber = 26,
    kF17FieldNumber = 27,
    kF18FieldNumber = 29,
    kF21FieldNumber = 34,
    kF22FieldNumber = 35,
    kF25FieldNumber = 38,
    kF29FieldNumber = 43,
    kF27FieldNumber = 41,
    kF28FieldNumber = 42,
    kF30FieldNumber = 44,
    kF32FieldNumber = 46,
    kF31FieldNumber = 45,
    kF35FieldNumber = 49,
    kF37FieldNumber = 51,
    kF36FieldNumber = 50,
    kF39FieldNumber = 54,
    kF42FieldNumber = 59,
    kF40FieldNumber = 55,
    kF20FieldNumber = 33,
    kF34FieldNumber = 48,
    kF58FieldNumber = 76,
    kF66FieldNumber = 89,
    kF44FieldNumber = 61,
    kF46FieldNumber = 64,
    kF51FieldNumber = 69,
    kF50FieldNumber = 68,
    kF52FieldNumber = 70,
    kF53FieldNumber = 71,
    kF54FieldNumber = 72,
    kF57FieldNumber = 75,
    kF59FieldNumber = 78,
    kF60FieldNumber = 79,
    kF61FieldNumber = 81,
    kF64FieldNumber = 87,
    kF65FieldNumber = 88,
    kF68FieldNumber = 93,
    kF69FieldNumber = 94,
    kF70FieldNumber = 95,
    kF71FieldNumber = 96,
    kF74FieldNumber = 102,
    kF75FieldNumber = 104,
    kF77FieldNumber = 107,
    kF78FieldNumber = 108,
    kF79FieldNumber = 109,
    kF67FieldNumber = 92,
    kF72FieldNumber = 98,
    kF87FieldNumber = 120,
    kF90FieldNumber = 127,
    kF81FieldNumber = 114,
    kF82FieldNumber = 115,
    kF84FieldNumber = 117,
    kF83FieldNumber = 116,
    kF85FieldNumber = 118,
    kF89FieldNumber = 125,
    kF88FieldNumber = 123,
    kF93FieldNumber = 131,
    kF91FieldNumber = 129,
    kF92FieldNumber = 130,
    kF95FieldNumber = 133,
  };
  // repeated bytes f_14 = 22;
  int f_14_size() const;
  private:
  int _internal_f_14_size() const;

  public:
  void clear_f_14() ;
  const std::string& f_14(int index) const;
  std::string* mutable_f_14(int index);
  void set_f_14(int index, const std::string& value);
  void set_f_14(int index, std::string&& value);
  void set_f_14(int index, const char* value);
  void set_f_14(int index, const void* value, std::size_t size);
  void set_f_14(int index, absl::string_view value);
  std::string* add_f_14();
  void add_f_14(const std::string& value);
  void add_f_14(std::string&& value);
  void add_f_14(const char* value);
  void add_f_14(const void* value, std::size_t size);
  void add_f_14(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_14() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_14();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_14() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_14();

  public:
  // repeated float f_23 = 36 [packed = true];
  int f_23_size() const;
  private:
  int _internal_f_23_size() const;

  public:
  void clear_f_23() ;
  float f_23(int index) const;
  void set_f_23(int index, float value);
  void add_f_23(float value);
  const ::google::protobuf::RepeatedField<float>& f_23() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_23();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_23() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_23();

  public:
  // repeated int32 f_45 = 63 [packed = true];
  int f_45_size() const;
  private:
  int _internal_f_45_size() const;

  public:
  void clear_f_45() ;
  ::int32_t f_45(int index) const;
  void set_f_45(int index, ::int32_t value);
  void add_f_45(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_45() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_45();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_45() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_45();

  public:
  // repeated int32 f_63 = 85 [packed = true];
  int f_63_size() const;
  private:
  int _internal_f_63_size() const;

  public:
  void clear_f_63() ;
  ::int32_t f_63(int index) const;
  void set_f_63(int index, ::int32_t value);
  void add_f_63(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_63() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_63();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_63() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_63();

  public:
  // repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54 f_135 = 137;
  int f_135_size() const;
  private:
  int _internal_f_135_size() const;

  public:
  void clear_f_135() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54* mutable_f_135(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>* mutable_f_135();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>& _internal_f_135() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>* _internal_mutable_f_135();
  public:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54& f_135(int index) const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54* add_f_135();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>& f_135() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional bytes f_9 = 17;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional bytes f_13 = 21;
  bool has_f_13() const;
  void clear_f_13() ;
  const std::string& f_13() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_13(Arg_&& arg, Args_... args);
  std::string* mutable_f_13();
  PROTOBUF_NODISCARD std::string* release_f_13();
  void set_allocated_f_13(std::string* value);

  private:
  const std::string& _internal_f_13() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_13(
      const std::string& value);
  std::string* _internal_mutable_f_13();

  public:
  // optional bytes f_19 = 30;
  bool has_f_19() const;
  void clear_f_19() ;
  const std::string& f_19() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_19(Arg_&& arg, Args_... args);
  std::string* mutable_f_19();
  PROTOBUF_NODISCARD std::string* release_f_19();
  void set_allocated_f_19(std::string* value);

  private:
  const std::string& _internal_f_19() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_19(
      const std::string& value);
  std::string* _internal_mutable_f_19();

  public:
  // optional string f_24 = 37;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional string f_26 = 40;
  bool has_f_26() const;
  void clear_f_26() ;
  const std::string& f_26() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_26(Arg_&& arg, Args_... args);
  std::string* mutable_f_26();
  PROTOBUF_NODISCARD std::string* release_f_26();
  void set_allocated_f_26(std::string* value);

  private:
  const std::string& _internal_f_26() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_26(
      const std::string& value);
  std::string* _internal_mutable_f_26();

  public:
  // optional string f_33 = 47;
  bool has_f_33() const;
  void clear_f_33() ;
  const std::string& f_33() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_33(Arg_&& arg, Args_... args);
  std::string* mutable_f_33();
  PROTOBUF_NODISCARD std::string* release_f_33();
  void set_allocated_f_33(std::string* value);

  private:
  const std::string& _internal_f_33() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_33(
      const std::string& value);
  std::string* _internal_mutable_f_33();

  public:
  // optional string f_38 = 53;
  bool has_f_38() const;
  void clear_f_38() ;
  const std::string& f_38() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_38(Arg_&& arg, Args_... args);
  std::string* mutable_f_38();
  PROTOBUF_NODISCARD std::string* release_f_38();
  void set_allocated_f_38(std::string* value);

  private:
  const std::string& _internal_f_38() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_38(
      const std::string& value);
  std::string* _internal_mutable_f_38();

  public:
  // optional bytes f_41 = 57;
  bool has_f_41() const;
  void clear_f_41() ;
  const std::string& f_41() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_41(Arg_&& arg, Args_... args);
  std::string* mutable_f_41();
  PROTOBUF_NODISCARD std::string* release_f_41();
  void set_allocated_f_41(std::string* value);

  private:
  const std::string& _internal_f_41() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_41(
      const std::string& value);
  std::string* _internal_mutable_f_41();

  public:
  // optional string f_43 = 60;
  bool has_f_43() const;
  void clear_f_43() ;
  const std::string& f_43() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_43(Arg_&& arg, Args_... args);
  std::string* mutable_f_43();
  PROTOBUF_NODISCARD std::string* release_f_43();
  void set_allocated_f_43(std::string* value);

  private:
  const std::string& _internal_f_43() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_43(
      const std::string& value);
  std::string* _internal_mutable_f_43();

  public:
  // optional string f_47 = 65;
  bool has_f_47() const;
  void clear_f_47() ;
  const std::string& f_47() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_47(Arg_&& arg, Args_... args);
  std::string* mutable_f_47();
  PROTOBUF_NODISCARD std::string* release_f_47();
  void set_allocated_f_47(std::string* value);

  private:
  const std::string& _internal_f_47() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_47(
      const std::string& value);
  std::string* _internal_mutable_f_47();

  public:
  // optional bytes f_48 = 66;
  bool has_f_48() const;
  void clear_f_48() ;
  const std::string& f_48() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_48(Arg_&& arg, Args_... args);
  std::string* mutable_f_48();
  PROTOBUF_NODISCARD std::string* release_f_48();
  void set_allocated_f_48(std::string* value);

  private:
  const std::string& _internal_f_48() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_48(
      const std::string& value);
  std::string* _internal_mutable_f_48();

  public:
  // optional string f_49 = 67;
  bool has_f_49() const;
  void clear_f_49() ;
  const std::string& f_49() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_49(Arg_&& arg, Args_... args);
  std::string* mutable_f_49();
  PROTOBUF_NODISCARD std::string* release_f_49();
  void set_allocated_f_49(std::string* value);

  private:
  const std::string& _internal_f_49() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_49(
      const std::string& value);
  std::string* _internal_mutable_f_49();

  public:
  // optional string f_55 = 73;
  bool has_f_55() const;
  void clear_f_55() ;
  const std::string& f_55() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_55(Arg_&& arg, Args_... args);
  std::string* mutable_f_55();
  PROTOBUF_NODISCARD std::string* release_f_55();
  void set_allocated_f_55(std::string* value);

  private:
  const std::string& _internal_f_55() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_55(
      const std::string& value);
  std::string* _internal_mutable_f_55();

  public:
  // optional string f_56 = 74;
  bool has_f_56() const;
  void clear_f_56() ;
  const std::string& f_56() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_56(Arg_&& arg, Args_... args);
  std::string* mutable_f_56();
  PROTOBUF_NODISCARD std::string* release_f_56();
  void set_allocated_f_56(std::string* value);

  private:
  const std::string& _internal_f_56() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_56(
      const std::string& value);
  std::string* _internal_mutable_f_56();

  public:
  // optional string f_62 = 83;
  bool has_f_62() const;
  void clear_f_62() ;
  const std::string& f_62() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_62(Arg_&& arg, Args_... args);
  std::string* mutable_f_62();
  PROTOBUF_NODISCARD std::string* release_f_62();
  void set_allocated_f_62(std::string* value);

  private:
  const std::string& _internal_f_62() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_62(
      const std::string& value);
  std::string* _internal_mutable_f_62();

  public:
  // optional string f_73 = 100;
  bool has_f_73() const;
  void clear_f_73() ;
  const std::string& f_73() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_73(Arg_&& arg, Args_... args);
  std::string* mutable_f_73();
  PROTOBUF_NODISCARD std::string* release_f_73();
  void set_allocated_f_73(std::string* value);

  private:
  const std::string& _internal_f_73() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_73(
      const std::string& value);
  std::string* _internal_mutable_f_73();

  public:
  // optional string f_76 = 105;
  bool has_f_76() const;
  void clear_f_76() ;
  const std::string& f_76() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_76(Arg_&& arg, Args_... args);
  std::string* mutable_f_76();
  PROTOBUF_NODISCARD std::string* release_f_76();
  void set_allocated_f_76(std::string* value);

  private:
  const std::string& _internal_f_76() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_76(
      const std::string& value);
  std::string* _internal_mutable_f_76();

  public:
  // optional string f_80 = 112;
  bool has_f_80() const;
  void clear_f_80() ;
  const std::string& f_80() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_80(Arg_&& arg, Args_... args);
  std::string* mutable_f_80();
  PROTOBUF_NODISCARD std::string* release_f_80();
  void set_allocated_f_80(std::string* value);

  private:
  const std::string& _internal_f_80() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_80(
      const std::string& value);
  std::string* _internal_mutable_f_80();

  public:
  // optional string f_86 = 119;
  bool has_f_86() const;
  void clear_f_86() ;
  const std::string& f_86() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_86(Arg_&& arg, Args_... args);
  std::string* mutable_f_86();
  PROTOBUF_NODISCARD std::string* release_f_86();
  void set_allocated_f_86(std::string* value);

  private:
  const std::string& _internal_f_86() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_86(
      const std::string& value);
  std::string* _internal_mutable_f_86();

  public:
  // optional string f_94 = 132;
  bool has_f_94() const;
  void clear_f_94() ;
  const std::string& f_94() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_94(Arg_&& arg, Args_... args);
  std::string* mutable_f_94();
  PROTOBUF_NODISCARD std::string* release_f_94();
  void set_allocated_f_94(std::string* value);

  private:
  const std::string& _internal_f_94() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_94(
      const std::string& value);
  std::string* _internal_mutable_f_94();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52 f_133 = 135;
  bool has_f_133() const;
  void clear_f_133() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52& f_133() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* release_f_133();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* mutable_f_133();
  void set_allocated_f_133(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* value);
  void unsafe_arena_set_allocated_f_133(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* unsafe_arena_release_f_133();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52& _internal_f_133() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* _internal_mutable_f_133();

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional int32 f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional int32 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E64 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 f_5() const;
  void set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 value);

  public:
  // optional double f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  double f_7() const;
  void set_f_7(double value);

  private:
  double _internal_f_7() const;
  void _internal_set_f_7(double value);

  public:
  // optional int32 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // optional int32 f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional int64 f_11 = 19;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int64_t f_11() const;
  void set_f_11(::int64_t value);

  private:
  ::int64_t _internal_f_11() const;
  void _internal_set_f_11(::int64_t value);

  public:
  // optional int32 f_10 = 18;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int32_t f_10() const;
  void set_f_10(::int32_t value);

  private:
  ::int32_t _internal_f_10() const;
  void _internal_set_f_10(::int32_t value);

  public:
  // optional float f_12 = 20;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // optional double f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  double f_15() const;
  void set_f_15(double value);

  private:
  double _internal_f_15() const;
  void _internal_set_f_15(double value);

  public:
  // optional int64 f_16 = 26;
  bool has_f_16() const;
  void clear_f_16() ;
  ::int64_t f_16() const;
  void set_f_16(::int64_t value);

  private:
  ::int64_t _internal_f_16() const;
  void _internal_set_f_16(::int64_t value);

  public:
  // optional fixed32 f_17 = 27;
  bool has_f_17() const;
  void clear_f_17() ;
  ::uint32_t f_17() const;
  void set_f_17(::uint32_t value);

  private:
  ::uint32_t _internal_f_17() const;
  void _internal_set_f_17(::uint32_t value);

  public:
  // optional uint32 f_18 = 29;
  bool has_f_18() const;
  void clear_f_18() ;
  ::uint32_t f_18() const;
  void set_f_18(::uint32_t value);

  private:
  ::uint32_t _internal_f_18() const;
  void _internal_set_f_18(::uint32_t value);

  public:
  // optional int32 f_21 = 34;
  bool has_f_21() const;
  void clear_f_21() ;
  ::int32_t f_21() const;
  void set_f_21(::int32_t value);

  private:
  ::int32_t _internal_f_21() const;
  void _internal_set_f_21(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E65 f_22 = 35;
  bool has_f_22() const;
  void clear_f_22() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 f_22() const;
  void set_f_22(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 _internal_f_22() const;
  void _internal_set_f_22(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E66 f_25 = 38;
  bool has_f_25() const;
  void clear_f_25() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 f_25() const;
  void set_f_25(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 _internal_f_25() const;
  void _internal_set_f_25(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 value);

  public:
  // optional int32 f_29 = 43;
  bool has_f_29() const;
  void clear_f_29() ;
  ::int32_t f_29() const;
  void set_f_29(::int32_t value);

  private:
  ::int32_t _internal_f_29() const;
  void _internal_set_f_29(::int32_t value);

  public:
  // optional int64 f_27 = 41;
  bool has_f_27() const;
  void clear_f_27() ;
  ::int64_t f_27() const;
  void set_f_27(::int64_t value);

  private:
  ::int64_t _internal_f_27() const;
  void _internal_set_f_27(::int64_t value);

  public:
  // optional int64 f_28 = 42;
  bool has_f_28() const;
  void clear_f_28() ;
  ::int64_t f_28() const;
  void set_f_28(::int64_t value);

  private:
  ::int64_t _internal_f_28() const;
  void _internal_set_f_28(::int64_t value);

  public:
  // optional int64 f_30 = 44;
  bool has_f_30() const;
  void clear_f_30() ;
  ::int64_t f_30() const;
  void set_f_30(::int64_t value);

  private:
  ::int64_t _internal_f_30() const;
  void _internal_set_f_30(::int64_t value);

  public:
  // optional uint64 f_32 = 46;
  bool has_f_32() const;
  void clear_f_32() ;
  ::uint64_t f_32() const;
  void set_f_32(::uint64_t value);

  private:
  ::uint64_t _internal_f_32() const;
  void _internal_set_f_32(::uint64_t value);

  public:
  // optional int32 f_31 = 45;
  bool has_f_31() const;
  void clear_f_31() ;
  ::int32_t f_31() const;
  void set_f_31(::int32_t value);

  private:
  ::int32_t _internal_f_31() const;
  void _internal_set_f_31(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E67 f_35 = 49;
  bool has_f_35() const;
  void clear_f_35() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 f_35() const;
  void set_f_35(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 _internal_f_35() const;
  void _internal_set_f_35(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 value);

  public:
  // optional int64 f_37 = 51;
  bool has_f_37() const;
  void clear_f_37() ;
  ::int64_t f_37() const;
  void set_f_37(::int64_t value);

  private:
  ::int64_t _internal_f_37() const;
  void _internal_set_f_37(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E68 f_36 = 50;
  bool has_f_36() const;
  void clear_f_36() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 f_36() const;
  void set_f_36(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 _internal_f_36() const;
  void _internal_set_f_36(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E69 f_39 = 54;
  bool has_f_39() const;
  void clear_f_39() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 f_39() const;
  void set_f_39(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 _internal_f_39() const;
  void _internal_set_f_39(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 value);

  public:
  // optional uint64 f_42 = 59;
  bool has_f_42() const;
  void clear_f_42() ;
  ::uint64_t f_42() const;
  void set_f_42(::uint64_t value);

  private:
  ::uint64_t _internal_f_42() const;
  void _internal_set_f_42(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E70 f_40 = 55;
  bool has_f_40() const;
  void clear_f_40() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 f_40() const;
  void set_f_40(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 _internal_f_40() const;
  void _internal_set_f_40(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 value);

  public:
  // optional bool f_20 = 33;
  bool has_f_20() const;
  void clear_f_20() ;
  bool f_20() const;
  void set_f_20(bool value);

  private:
  bool _internal_f_20() const;
  void _internal_set_f_20(bool value);

  public:
  // optional bool f_34 = 48;
  bool has_f_34() const;
  void clear_f_34() ;
  bool f_34() const;
  void set_f_34(bool value);

  private:
  bool _internal_f_34() const;
  void _internal_set_f_34(bool value);

  public:
  // optional bool f_58 = 76;
  bool has_f_58() const;
  void clear_f_58() ;
  bool f_58() const;
  void set_f_58(bool value);

  private:
  bool _internal_f_58() const;
  void _internal_set_f_58(bool value);

  public:
  // optional bool f_66 = 89;
  bool has_f_66() const;
  void clear_f_66() ;
  bool f_66() const;
  void set_f_66(bool value);

  private:
  bool _internal_f_66() const;
  void _internal_set_f_66(bool value);

  public:
  // optional fixed64 f_44 = 61;
  bool has_f_44() const;
  void clear_f_44() ;
  ::uint64_t f_44() const;
  void set_f_44(::uint64_t value);

  private:
  ::uint64_t _internal_f_44() const;
  void _internal_set_f_44(::uint64_t value);

  public:
  // optional fixed64 f_46 = 64;
  bool has_f_46() const;
  void clear_f_46() ;
  ::uint64_t f_46() const;
  void set_f_46(::uint64_t value);

  private:
  ::uint64_t _internal_f_46() const;
  void _internal_set_f_46(::uint64_t value);

  public:
  // optional int64 f_51 = 69;
  bool has_f_51() const;
  void clear_f_51() ;
  ::int64_t f_51() const;
  void set_f_51(::int64_t value);

  private:
  ::int64_t _internal_f_51() const;
  void _internal_set_f_51(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E71 f_50 = 68;
  bool has_f_50() const;
  void clear_f_50() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 f_50() const;
  void set_f_50(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 _internal_f_50() const;
  void _internal_set_f_50(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E72 f_52 = 70;
  bool has_f_52() const;
  void clear_f_52() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 f_52() const;
  void set_f_52(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 _internal_f_52() const;
  void _internal_set_f_52(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 value);

  public:
  // optional float f_53 = 71;
  bool has_f_53() const;
  void clear_f_53() ;
  float f_53() const;
  void set_f_53(float value);

  private:
  float _internal_f_53() const;
  void _internal_set_f_53(float value);

  public:
  // optional uint32 f_54 = 72;
  bool has_f_54() const;
  void clear_f_54() ;
  ::uint32_t f_54() const;
  void set_f_54(::uint32_t value);

  private:
  ::uint32_t _internal_f_54() const;
  void _internal_set_f_54(::uint32_t value);

  public:
  // optional float f_57 = 75;
  bool has_f_57() const;
  void clear_f_57() ;
  float f_57() const;
  void set_f_57(float value);

  private:
  float _internal_f_57() const;
  void _internal_set_f_57(float value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E73 f_59 = 78;
  bool has_f_59() const;
  void clear_f_59() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 f_59() const;
  void set_f_59(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 _internal_f_59() const;
  void _internal_set_f_59(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E74 f_60 = 79;
  bool has_f_60() const;
  void clear_f_60() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 f_60() const;
  void set_f_60(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 _internal_f_60() const;
  void _internal_set_f_60(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E75 f_61 = 81;
  bool has_f_61() const;
  void clear_f_61() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 f_61() const;
  void set_f_61(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 _internal_f_61() const;
  void _internal_set_f_61(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 value);

  public:
  // optional int64 f_64 = 87;
  bool has_f_64() const;
  void clear_f_64() ;
  ::int64_t f_64() const;
  void set_f_64(::int64_t value);

  private:
  ::int64_t _internal_f_64() const;
  void _internal_set_f_64(::int64_t value);

  public:
  // optional int64 f_65 = 88;
  bool has_f_65() const;
  void clear_f_65() ;
  ::int64_t f_65() const;
  void set_f_65(::int64_t value);

  private:
  ::int64_t _internal_f_65() const;
  void _internal_set_f_65(::int64_t value);

  public:
  // optional int64 f_68 = 93;
  bool has_f_68() const;
  void clear_f_68() ;
  ::int64_t f_68() const;
  void set_f_68(::int64_t value);

  private:
  ::int64_t _internal_f_68() const;
  void _internal_set_f_68(::int64_t value);

  public:
  // optional uint64 f_69 = 94;
  bool has_f_69() const;
  void clear_f_69() ;
  ::uint64_t f_69() const;
  void set_f_69(::uint64_t value);

  private:
  ::uint64_t _internal_f_69() const;
  void _internal_set_f_69(::uint64_t value);

  public:
  // optional int64 f_70 = 95;
  bool has_f_70() const;
  void clear_f_70() ;
  ::int64_t f_70() const;
  void set_f_70(::int64_t value);

  private:
  ::int64_t _internal_f_70() const;
  void _internal_set_f_70(::int64_t value);

  public:
  // optional int64 f_71 = 96;
  bool has_f_71() const;
  void clear_f_71() ;
  ::int64_t f_71() const;
  void set_f_71(::int64_t value);

  private:
  ::int64_t _internal_f_71() const;
  void _internal_set_f_71(::int64_t value);

  public:
  // optional int64 f_74 = 102;
  bool has_f_74() const;
  void clear_f_74() ;
  ::int64_t f_74() const;
  void set_f_74(::int64_t value);

  private:
  ::int64_t _internal_f_74() const;
  void _internal_set_f_74(::int64_t value);

  public:
  // optional float f_75 = 104;
  bool has_f_75() const;
  void clear_f_75() ;
  float f_75() const;
  void set_f_75(float value);

  private:
  float _internal_f_75() const;
  void _internal_set_f_75(float value);

  public:
  // optional int32 f_77 = 107;
  bool has_f_77() const;
  void clear_f_77() ;
  ::int32_t f_77() const;
  void set_f_77(::int32_t value);

  private:
  ::int32_t _internal_f_77() const;
  void _internal_set_f_77(::int32_t value);

  public:
  // optional int64 f_78 = 108;
  bool has_f_78() const;
  void clear_f_78() ;
  ::int64_t f_78() const;
  void set_f_78(::int64_t value);

  private:
  ::int64_t _internal_f_78() const;
  void _internal_set_f_78(::int64_t value);

  public:
  // optional int32 f_79 = 109;
  bool has_f_79() const;
  void clear_f_79() ;
  ::int32_t f_79() const;
  void set_f_79(::int32_t value);

  private:
  ::int32_t _internal_f_79() const;
  void _internal_set_f_79(::int32_t value);

  public:
  // optional bool f_67 = 92;
  bool has_f_67() const;
  void clear_f_67() ;
  bool f_67() const;
  void set_f_67(bool value);

  private:
  bool _internal_f_67() const;
  void _internal_set_f_67(bool value);

  public:
  // optional bool f_72 = 98;
  bool has_f_72() const;
  void clear_f_72() ;
  bool f_72() const;
  void set_f_72(bool value);

  private:
  bool _internal_f_72() const;
  void _internal_set_f_72(bool value);

  public:
  // optional bool f_87 = 120;
  bool has_f_87() const;
  void clear_f_87() ;
  bool f_87() const;
  void set_f_87(bool value);

  private:
  bool _internal_f_87() const;
  void _internal_set_f_87(bool value);

  public:
  // optional bool f_90 = 127;
  bool has_f_90() const;
  void clear_f_90() ;
  bool f_90() const;
  void set_f_90(bool value);

  private:
  bool _internal_f_90() const;
  void _internal_set_f_90(bool value);

  public:
  // optional int32 f_81 = 114;
  bool has_f_81() const;
  void clear_f_81() ;
  ::int32_t f_81() const;
  void set_f_81(::int32_t value);

  private:
  ::int32_t _internal_f_81() const;
  void _internal_set_f_81(::int32_t value);

  public:
  // optional int32 f_82 = 115;
  bool has_f_82() const;
  void clear_f_82() ;
  ::int32_t f_82() const;
  void set_f_82(::int32_t value);

  private:
  ::int32_t _internal_f_82() const;
  void _internal_set_f_82(::int32_t value);

  public:
  // optional int64 f_84 = 117;
  bool has_f_84() const;
  void clear_f_84() ;
  ::int64_t f_84() const;
  void set_f_84(::int64_t value);

  private:
  ::int64_t _internal_f_84() const;
  void _internal_set_f_84(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E76 f_83 = 116;
  bool has_f_83() const;
  void clear_f_83() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 f_83() const;
  void set_f_83(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 _internal_f_83() const;
  void _internal_set_f_83(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 value);

  public:
  // optional float f_85 = 118;
  bool has_f_85() const;
  void clear_f_85() ;
  float f_85() const;
  void set_f_85(float value);

  private:
  float _internal_f_85() const;
  void _internal_set_f_85(float value);

  public:
  // optional int64 f_89 = 125;
  bool has_f_89() const;
  void clear_f_89() ;
  ::int64_t f_89() const;
  void set_f_89(::int64_t value);

  private:
  ::int64_t _internal_f_89() const;
  void _internal_set_f_89(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E77 f_88 = 123;
  bool has_f_88() const;
  void clear_f_88() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 f_88() const;
  void set_f_88(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 value);

  private:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 _internal_f_88() const;
  void _internal_set_f_88(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 value);

  public:
  // optional int32 f_93 = 131;
  bool has_f_93() const;
  void clear_f_93() ;
  ::int32_t f_93() const;
  void set_f_93(::int32_t value);

  private:
  ::int32_t _internal_f_93() const;
  void _internal_set_f_93(::int32_t value);

  public:
  // optional int64 f_91 = 129;
  bool has_f_91() const;
  void clear_f_91() ;
  ::int64_t f_91() const;
  void set_f_91(::int64_t value);

  private:
  ::int64_t _internal_f_91() const;
  void _internal_set_f_91(::int64_t value);

  public:
  // optional int64 f_92 = 130;
  bool has_f_92() const;
  void clear_f_92() ;
  ::int64_t f_92() const;
  void set_f_92(::int64_t value);

  private:
  ::int64_t _internal_f_92() const;
  void _internal_set_f_92(::int64_t value);

  public:
  // optional int32 f_95 = 133;
  bool has_f_95() const;
  void clear_f_95() ;
  ::int32_t f_95() const;
  void set_f_95(::int32_t value);

  private:
  ::int32_t _internal_f_95() const;
  void _internal_set_f_95(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 98, 16,
      223, 19>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M50_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<3> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_14_;
    ::google::protobuf::RepeatedField<float> f_23_;
    ::google::protobuf::RepeatedField<::int32_t> f_45_;
    mutable ::google::protobuf::internal::CachedSize _f_45_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_63_;
    mutable ::google::protobuf::internal::CachedSize _f_63_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54 > f_135_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_13_;
    ::google::protobuf::internal::ArenaStringPtr f_19_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_26_;
    ::google::protobuf::internal::ArenaStringPtr f_33_;
    ::google::protobuf::internal::ArenaStringPtr f_38_;
    ::google::protobuf::internal::ArenaStringPtr f_41_;
    ::google::protobuf::internal::ArenaStringPtr f_43_;
    ::google::protobuf::internal::ArenaStringPtr f_47_;
    ::google::protobuf::internal::ArenaStringPtr f_48_;
    ::google::protobuf::internal::ArenaStringPtr f_49_;
    ::google::protobuf::internal::ArenaStringPtr f_55_;
    ::google::protobuf::internal::ArenaStringPtr f_56_;
    ::google::protobuf::internal::ArenaStringPtr f_62_;
    ::google::protobuf::internal::ArenaStringPtr f_73_;
    ::google::protobuf::internal::ArenaStringPtr f_76_;
    ::google::protobuf::internal::ArenaStringPtr f_80_;
    ::google::protobuf::internal::ArenaStringPtr f_86_;
    ::google::protobuf::internal::ArenaStringPtr f_94_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* f_133_;
    float f_1_;
    ::int32_t f_3_;
    ::int32_t f_4_;
    int f_5_;
    double f_7_;
    ::int32_t f_6_;
    ::int32_t f_8_;
    ::int64_t f_11_;
    ::int32_t f_10_;
    float f_12_;
    double f_15_;
    ::int64_t f_16_;
    ::uint32_t f_17_;
    ::uint32_t f_18_;
    ::int32_t f_21_;
    int f_22_;
    int f_25_;
    ::int32_t f_29_;
    ::int64_t f_27_;
    ::int64_t f_28_;
    ::int64_t f_30_;
    ::uint64_t f_32_;
    ::int32_t f_31_;
    int f_35_;
    ::int64_t f_37_;
    int f_36_;
    int f_39_;
    ::uint64_t f_42_;
    int f_40_;
    bool f_20_;
    bool f_34_;
    bool f_58_;
    bool f_66_;
    ::uint64_t f_44_;
    ::uint64_t f_46_;
    ::int64_t f_51_;
    int f_50_;
    int f_52_;
    float f_53_;
    ::uint32_t f_54_;
    float f_57_;
    int f_59_;
    int f_60_;
    int f_61_;
    ::int64_t f_64_;
    ::int64_t f_65_;
    ::int64_t f_68_;
    ::uint64_t f_69_;
    ::int64_t f_70_;
    ::int64_t f_71_;
    ::int64_t f_74_;
    float f_75_;
    ::int32_t f_77_;
    ::int64_t f_78_;
    ::int32_t f_79_;
    bool f_67_;
    bool f_72_;
    bool f_87_;
    bool f_90_;
    ::int32_t f_81_;
    ::int32_t f_82_;
    ::int64_t f_84_;
    int f_83_;
    float f_85_;
    ::int64_t f_89_;
    int f_88_;
    ::int32_t f_93_;
    ::int64_t f_91_;
    ::int64_t f_92_;
    ::int32_t f_95_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M47_M55 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55() : Message6_M1_M15_M23_M28_M42_M44_M47_M55(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M47_M55() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M47_M55(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55(const Message6_M1_M15_M23_M28_M42_M44_M47_M55& from) : Message6_M1_M15_M23_M28_M42_M44_M47_M55(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55(Message6_M1_M15_M23_M28_M42_M44_M47_M55&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47_M55(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55& operator=(const Message6_M1_M15_M23_M28_M42_M44_M47_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M47_M55& operator=(Message6_M1_M15_M23_M28_M42_M44_M47_M55&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M47_M55& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M47_M55* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M47_M55*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M47_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M47_M55& a, Message6_M1_M15_M23_M28_M42_M44_M47_M55& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M47_M55* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M47_M55* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M47_M55* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M47_M55>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M47_M55& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M47_M55& from) { Message6_M1_M15_M23_M28_M42_M44_M47_M55::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M47_M55* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M47_M55(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M47_M55(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M47_M55& from);
  Message6_M1_M15_M23_M28_M42_M44_M47_M55(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M47_M55&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47_M55(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M57 = Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int32_t));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // repeated int32 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* release_f_2();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& _internal_f_2() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M47_M55_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M8_M27 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M8.M27) */ {
 public:
  inline Message6_M5_M8_M27() : Message6_M5_M8_M27(nullptr) {}
  ~Message6_M5_M8_M27() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M8_M27(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M8_M27(const Message6_M5_M8_M27& from) : Message6_M5_M8_M27(nullptr, from) {}
  inline Message6_M5_M8_M27(Message6_M5_M8_M27&& from) noexcept
      : Message6_M5_M8_M27(nullptr, std::move(from)) {}
  inline Message6_M5_M8_M27& operator=(const Message6_M5_M8_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M8_M27& operator=(Message6_M5_M8_M27&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M8_M27& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M8_M27* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M8_M27*>(
        &_Message6_M5_M8_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(Message6_M5_M8_M27& a, Message6_M5_M8_M27& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M8_M27* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M8_M27* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M8_M27* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M8_M27>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M8_M27& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M8_M27& from) { Message6_M5_M8_M27::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M8_M27* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M8.M27"; }

 protected:
  explicit Message6_M5_M8_M27(::google::protobuf::Arena* arena);
  Message6_M5_M8_M27(::google::protobuf::Arena* arena, const Message6_M5_M8_M27& from);
  Message6_M5_M8_M27(::google::protobuf::Arena* arena, Message6_M5_M8_M27&& from) noexcept
      : Message6_M5_M8_M27(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M34 = Message6_M5_M8_M27_M34;
  using M36 = Message6_M5_M8_M27_M36;
  using E12 = Message6_M5_M8_M27_E12;
  static constexpr E12 E12_UNSPECIFIED = Message6_M5_M8_M27_E12_E12_UNSPECIFIED;
  static constexpr E12 E12_CONST_1 = Message6_M5_M8_M27_E12_E12_CONST_1;
  static constexpr E12 E12_CONST_2 = Message6_M5_M8_M27_E12_E12_CONST_2;
  static constexpr E12 E12_CONST_3 = Message6_M5_M8_M27_E12_E12_CONST_3;
  static constexpr E12 E12_CONST_4 = Message6_M5_M8_M27_E12_E12_CONST_4;
  static constexpr E12 E12_CONST_5 = Message6_M5_M8_M27_E12_E12_CONST_5;
  static inline bool E12_IsValid(int value) {
    return Message6_M5_M8_M27_E12_IsValid(value);
  }
  static constexpr E12 E12_MIN = Message6_M5_M8_M27_E12_E12_MIN;
  static constexpr E12 E12_MAX = Message6_M5_M8_M27_E12_E12_MAX;
  static constexpr int E12_ARRAYSIZE = Message6_M5_M8_M27_E12_E12_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E12_descriptor() {
    return Message6_M5_M8_M27_E12_descriptor();
  }
  template <typename T>
  static inline const std::string& E12_Name(T value) {
    return Message6_M5_M8_M27_E12_Name(value);
  }
  static inline bool E12_Parse(absl::string_view name, E12* value) {
    return Message6_M5_M8_M27_E12_Parse(name, value);
  }
  using E13 = Message6_M5_M8_M27_E13;
  static constexpr E13 E13_UNSPECIFIED = Message6_M5_M8_M27_E13_E13_UNSPECIFIED;
  static constexpr E13 E13_CONST_1 = Message6_M5_M8_M27_E13_E13_CONST_1;
  static constexpr E13 E13_CONST_2 = Message6_M5_M8_M27_E13_E13_CONST_2;
  static constexpr E13 E13_CONST_3 = Message6_M5_M8_M27_E13_E13_CONST_3;
  static constexpr E13 E13_CONST_4 = Message6_M5_M8_M27_E13_E13_CONST_4;
  static constexpr E13 E13_CONST_5 = Message6_M5_M8_M27_E13_E13_CONST_5;
  static inline bool E13_IsValid(int value) {
    return Message6_M5_M8_M27_E13_IsValid(value);
  }
  static constexpr E13 E13_MIN = Message6_M5_M8_M27_E13_E13_MIN;
  static constexpr E13 E13_MAX = Message6_M5_M8_M27_E13_E13_MAX;
  static constexpr int E13_ARRAYSIZE = Message6_M5_M8_M27_E13_E13_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E13_descriptor() {
    return Message6_M5_M8_M27_E13_descriptor();
  }
  template <typename T>
  static inline const std::string& E13_Name(T value) {
    return Message6_M5_M8_M27_E13_Name(value);
  }
  static inline bool E13_Parse(absl::string_view name, E13* value) {
    return Message6_M5_M8_M27_E13_Parse(name, value);
  }
  using E14 = Message6_M5_M8_M27_E14;
  static constexpr E14 E14_UNSPECIFIED = Message6_M5_M8_M27_E14_E14_UNSPECIFIED;
  static constexpr E14 E14_CONST_1 = Message6_M5_M8_M27_E14_E14_CONST_1;
  static constexpr E14 E14_CONST_2 = Message6_M5_M8_M27_E14_E14_CONST_2;
  static constexpr E14 E14_CONST_3 = Message6_M5_M8_M27_E14_E14_CONST_3;
  static constexpr E14 E14_CONST_4 = Message6_M5_M8_M27_E14_E14_CONST_4;
  static constexpr E14 E14_CONST_5 = Message6_M5_M8_M27_E14_E14_CONST_5;
  static inline bool E14_IsValid(int value) {
    return Message6_M5_M8_M27_E14_IsValid(value);
  }
  static constexpr E14 E14_MIN = Message6_M5_M8_M27_E14_E14_MIN;
  static constexpr E14 E14_MAX = Message6_M5_M8_M27_E14_E14_MAX;
  static constexpr int E14_ARRAYSIZE = Message6_M5_M8_M27_E14_E14_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E14_descriptor() {
    return Message6_M5_M8_M27_E14_descriptor();
  }
  template <typename T>
  static inline const std::string& E14_Name(T value) {
    return Message6_M5_M8_M27_E14_Name(value);
  }
  static inline bool E14_Parse(absl::string_view name, E14* value) {
    return Message6_M5_M8_M27_E14_Parse(name, value);
  }
  using E15 = Message6_M5_M8_M27_E15;
  static constexpr E15 E15_UNSPECIFIED = Message6_M5_M8_M27_E15_E15_UNSPECIFIED;
  static constexpr E15 E15_CONST_1 = Message6_M5_M8_M27_E15_E15_CONST_1;
  static constexpr E15 E15_CONST_2 = Message6_M5_M8_M27_E15_E15_CONST_2;
  static constexpr E15 E15_CONST_3 = Message6_M5_M8_M27_E15_E15_CONST_3;
  static constexpr E15 E15_CONST_4 = Message6_M5_M8_M27_E15_E15_CONST_4;
  static constexpr E15 E15_CONST_5 = Message6_M5_M8_M27_E15_E15_CONST_5;
  static inline bool E15_IsValid(int value) {
    return Message6_M5_M8_M27_E15_IsValid(value);
  }
  static constexpr E15 E15_MIN = Message6_M5_M8_M27_E15_E15_MIN;
  static constexpr E15 E15_MAX = Message6_M5_M8_M27_E15_E15_MAX;
  static constexpr int E15_ARRAYSIZE = Message6_M5_M8_M27_E15_E15_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E15_descriptor() {
    return Message6_M5_M8_M27_E15_descriptor();
  }
  template <typename T>
  static inline const std::string& E15_Name(T value) {
    return Message6_M5_M8_M27_E15_Name(value);
  }
  static inline bool E15_Parse(absl::string_view name, E15* value) {
    return Message6_M5_M8_M27_E15_Parse(name, value);
  }
  using E16 = Message6_M5_M8_M27_E16;
  static constexpr E16 E16_UNSPECIFIED = Message6_M5_M8_M27_E16_E16_UNSPECIFIED;
  static constexpr E16 E16_CONST_1 = Message6_M5_M8_M27_E16_E16_CONST_1;
  static constexpr E16 E16_CONST_2 = Message6_M5_M8_M27_E16_E16_CONST_2;
  static constexpr E16 E16_CONST_3 = Message6_M5_M8_M27_E16_E16_CONST_3;
  static constexpr E16 E16_CONST_4 = Message6_M5_M8_M27_E16_E16_CONST_4;
  static constexpr E16 E16_CONST_5 = Message6_M5_M8_M27_E16_E16_CONST_5;
  static inline bool E16_IsValid(int value) {
    return Message6_M5_M8_M27_E16_IsValid(value);
  }
  static constexpr E16 E16_MIN = Message6_M5_M8_M27_E16_E16_MIN;
  static constexpr E16 E16_MAX = Message6_M5_M8_M27_E16_E16_MAX;
  static constexpr int E16_ARRAYSIZE = Message6_M5_M8_M27_E16_E16_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E16_descriptor() {
    return Message6_M5_M8_M27_E16_descriptor();
  }
  template <typename T>
  static inline const std::string& E16_Name(T value) {
    return Message6_M5_M8_M27_E16_Name(value);
  }
  static inline bool E16_Parse(absl::string_view name, E16* value) {
    return Message6_M5_M8_M27_E16_Parse(name, value);
  }
  using E17 = Message6_M5_M8_M27_E17;
  static constexpr E17 E17_UNSPECIFIED = Message6_M5_M8_M27_E17_E17_UNSPECIFIED;
  static constexpr E17 E17_CONST_1 = Message6_M5_M8_M27_E17_E17_CONST_1;
  static constexpr E17 E17_CONST_2 = Message6_M5_M8_M27_E17_E17_CONST_2;
  static constexpr E17 E17_CONST_3 = Message6_M5_M8_M27_E17_E17_CONST_3;
  static constexpr E17 E17_CONST_4 = Message6_M5_M8_M27_E17_E17_CONST_4;
  static constexpr E17 E17_CONST_5 = Message6_M5_M8_M27_E17_E17_CONST_5;
  static inline bool E17_IsValid(int value) {
    return Message6_M5_M8_M27_E17_IsValid(value);
  }
  static constexpr E17 E17_MIN = Message6_M5_M8_M27_E17_E17_MIN;
  static constexpr E17 E17_MAX = Message6_M5_M8_M27_E17_E17_MAX;
  static constexpr int E17_ARRAYSIZE = Message6_M5_M8_M27_E17_E17_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E17_descriptor() {
    return Message6_M5_M8_M27_E17_descriptor();
  }
  template <typename T>
  static inline const std::string& E17_Name(T value) {
    return Message6_M5_M8_M27_E17_Name(value);
  }
  static inline bool E17_Parse(absl::string_view name, E17* value) {
    return Message6_M5_M8_M27_E17_Parse(name, value);
  }
  using E18 = Message6_M5_M8_M27_E18;
  static constexpr E18 E18_UNSPECIFIED = Message6_M5_M8_M27_E18_E18_UNSPECIFIED;
  static constexpr E18 E18_CONST_1 = Message6_M5_M8_M27_E18_E18_CONST_1;
  static constexpr E18 E18_CONST_2 = Message6_M5_M8_M27_E18_E18_CONST_2;
  static constexpr E18 E18_CONST_3 = Message6_M5_M8_M27_E18_E18_CONST_3;
  static constexpr E18 E18_CONST_4 = Message6_M5_M8_M27_E18_E18_CONST_4;
  static constexpr E18 E18_CONST_5 = Message6_M5_M8_M27_E18_E18_CONST_5;
  static inline bool E18_IsValid(int value) {
    return Message6_M5_M8_M27_E18_IsValid(value);
  }
  static constexpr E18 E18_MIN = Message6_M5_M8_M27_E18_E18_MIN;
  static constexpr E18 E18_MAX = Message6_M5_M8_M27_E18_E18_MAX;
  static constexpr int E18_ARRAYSIZE = Message6_M5_M8_M27_E18_E18_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E18_descriptor() {
    return Message6_M5_M8_M27_E18_descriptor();
  }
  template <typename T>
  static inline const std::string& E18_Name(T value) {
    return Message6_M5_M8_M27_E18_Name(value);
  }
  static inline bool E18_Parse(absl::string_view name, E18* value) {
    return Message6_M5_M8_M27_E18_Parse(name, value);
  }
  using E19 = Message6_M5_M8_M27_E19;
  static constexpr E19 E19_UNSPECIFIED = Message6_M5_M8_M27_E19_E19_UNSPECIFIED;
  static constexpr E19 E19_CONST_1 = Message6_M5_M8_M27_E19_E19_CONST_1;
  static constexpr E19 E19_CONST_2 = Message6_M5_M8_M27_E19_E19_CONST_2;
  static constexpr E19 E19_CONST_3 = Message6_M5_M8_M27_E19_E19_CONST_3;
  static constexpr E19 E19_CONST_4 = Message6_M5_M8_M27_E19_E19_CONST_4;
  static constexpr E19 E19_CONST_5 = Message6_M5_M8_M27_E19_E19_CONST_5;
  static inline bool E19_IsValid(int value) {
    return Message6_M5_M8_M27_E19_IsValid(value);
  }
  static constexpr E19 E19_MIN = Message6_M5_M8_M27_E19_E19_MIN;
  static constexpr E19 E19_MAX = Message6_M5_M8_M27_E19_E19_MAX;
  static constexpr int E19_ARRAYSIZE = Message6_M5_M8_M27_E19_E19_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E19_descriptor() {
    return Message6_M5_M8_M27_E19_descriptor();
  }
  template <typename T>
  static inline const std::string& E19_Name(T value) {
    return Message6_M5_M8_M27_E19_Name(value);
  }
  static inline bool E19_Parse(absl::string_view name, E19* value) {
    return Message6_M5_M8_M27_E19_Parse(name, value);
  }
  using E20 = Message6_M5_M8_M27_E20;
  static constexpr E20 E20_UNSPECIFIED = Message6_M5_M8_M27_E20_E20_UNSPECIFIED;
  static constexpr E20 E20_CONST_1 = Message6_M5_M8_M27_E20_E20_CONST_1;
  static constexpr E20 E20_CONST_2 = Message6_M5_M8_M27_E20_E20_CONST_2;
  static constexpr E20 E20_CONST_3 = Message6_M5_M8_M27_E20_E20_CONST_3;
  static constexpr E20 E20_CONST_4 = Message6_M5_M8_M27_E20_E20_CONST_4;
  static constexpr E20 E20_CONST_5 = Message6_M5_M8_M27_E20_E20_CONST_5;
  static inline bool E20_IsValid(int value) {
    return Message6_M5_M8_M27_E20_IsValid(value);
  }
  static constexpr E20 E20_MIN = Message6_M5_M8_M27_E20_E20_MIN;
  static constexpr E20 E20_MAX = Message6_M5_M8_M27_E20_E20_MAX;
  static constexpr int E20_ARRAYSIZE = Message6_M5_M8_M27_E20_E20_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E20_descriptor() {
    return Message6_M5_M8_M27_E20_descriptor();
  }
  template <typename T>
  static inline const std::string& E20_Name(T value) {
    return Message6_M5_M8_M27_E20_Name(value);
  }
  static inline bool E20_Parse(absl::string_view name, E20* value) {
    return Message6_M5_M8_M27_E20_Parse(name, value);
  }
  using E21 = Message6_M5_M8_M27_E21;
  static constexpr E21 E21_UNSPECIFIED = Message6_M5_M8_M27_E21_E21_UNSPECIFIED;
  static constexpr E21 E21_CONST_1 = Message6_M5_M8_M27_E21_E21_CONST_1;
  static constexpr E21 E21_CONST_2 = Message6_M5_M8_M27_E21_E21_CONST_2;
  static constexpr E21 E21_CONST_3 = Message6_M5_M8_M27_E21_E21_CONST_3;
  static constexpr E21 E21_CONST_4 = Message6_M5_M8_M27_E21_E21_CONST_4;
  static constexpr E21 E21_CONST_5 = Message6_M5_M8_M27_E21_E21_CONST_5;
  static inline bool E21_IsValid(int value) {
    return Message6_M5_M8_M27_E21_IsValid(value);
  }
  static constexpr E21 E21_MIN = Message6_M5_M8_M27_E21_E21_MIN;
  static constexpr E21 E21_MAX = Message6_M5_M8_M27_E21_E21_MAX;
  static constexpr int E21_ARRAYSIZE = Message6_M5_M8_M27_E21_E21_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E21_descriptor() {
    return Message6_M5_M8_M27_E21_descriptor();
  }
  template <typename T>
  static inline const std::string& E21_Name(T value) {
    return Message6_M5_M8_M27_E21_Name(value);
  }
  static inline bool E21_Parse(absl::string_view name, E21* value) {
    return Message6_M5_M8_M27_E21_Parse(name, value);
  }
  using E22 = Message6_M5_M8_M27_E22;
  static constexpr E22 E22_UNSPECIFIED = Message6_M5_M8_M27_E22_E22_UNSPECIFIED;
  static constexpr E22 E22_CONST_1 = Message6_M5_M8_M27_E22_E22_CONST_1;
  static constexpr E22 E22_CONST_2 = Message6_M5_M8_M27_E22_E22_CONST_2;
  static constexpr E22 E22_CONST_3 = Message6_M5_M8_M27_E22_E22_CONST_3;
  static constexpr E22 E22_CONST_4 = Message6_M5_M8_M27_E22_E22_CONST_4;
  static constexpr E22 E22_CONST_5 = Message6_M5_M8_M27_E22_E22_CONST_5;
  static inline bool E22_IsValid(int value) {
    return Message6_M5_M8_M27_E22_IsValid(value);
  }
  static constexpr E22 E22_MIN = Message6_M5_M8_M27_E22_E22_MIN;
  static constexpr E22 E22_MAX = Message6_M5_M8_M27_E22_E22_MAX;
  static constexpr int E22_ARRAYSIZE = Message6_M5_M8_M27_E22_E22_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E22_descriptor() {
    return Message6_M5_M8_M27_E22_descriptor();
  }
  template <typename T>
  static inline const std::string& E22_Name(T value) {
    return Message6_M5_M8_M27_E22_Name(value);
  }
  static inline bool E22_Parse(absl::string_view name, E22* value) {
    return Message6_M5_M8_M27_E22_Parse(name, value);
  }
  using E23 = Message6_M5_M8_M27_E23;
  static constexpr E23 E23_UNSPECIFIED = Message6_M5_M8_M27_E23_E23_UNSPECIFIED;
  static constexpr E23 E23_CONST_1 = Message6_M5_M8_M27_E23_E23_CONST_1;
  static constexpr E23 E23_CONST_2 = Message6_M5_M8_M27_E23_E23_CONST_2;
  static constexpr E23 E23_CONST_3 = Message6_M5_M8_M27_E23_E23_CONST_3;
  static constexpr E23 E23_CONST_4 = Message6_M5_M8_M27_E23_E23_CONST_4;
  static constexpr E23 E23_CONST_5 = Message6_M5_M8_M27_E23_E23_CONST_5;
  static inline bool E23_IsValid(int value) {
    return Message6_M5_M8_M27_E23_IsValid(value);
  }
  static constexpr E23 E23_MIN = Message6_M5_M8_M27_E23_E23_MIN;
  static constexpr E23 E23_MAX = Message6_M5_M8_M27_E23_E23_MAX;
  static constexpr int E23_ARRAYSIZE = Message6_M5_M8_M27_E23_E23_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E23_descriptor() {
    return Message6_M5_M8_M27_E23_descriptor();
  }
  template <typename T>
  static inline const std::string& E23_Name(T value) {
    return Message6_M5_M8_M27_E23_Name(value);
  }
  static inline bool E23_Parse(absl::string_view name, E23* value) {
    return Message6_M5_M8_M27_E23_Parse(name, value);
  }
  using E24 = Message6_M5_M8_M27_E24;
  static constexpr E24 E24_UNSPECIFIED = Message6_M5_M8_M27_E24_E24_UNSPECIFIED;
  static constexpr E24 E24_CONST_1 = Message6_M5_M8_M27_E24_E24_CONST_1;
  static constexpr E24 E24_CONST_2 = Message6_M5_M8_M27_E24_E24_CONST_2;
  static constexpr E24 E24_CONST_3 = Message6_M5_M8_M27_E24_E24_CONST_3;
  static constexpr E24 E24_CONST_4 = Message6_M5_M8_M27_E24_E24_CONST_4;
  static constexpr E24 E24_CONST_5 = Message6_M5_M8_M27_E24_E24_CONST_5;
  static inline bool E24_IsValid(int value) {
    return Message6_M5_M8_M27_E24_IsValid(value);
  }
  static constexpr E24 E24_MIN = Message6_M5_M8_M27_E24_E24_MIN;
  static constexpr E24 E24_MAX = Message6_M5_M8_M27_E24_E24_MAX;
  static constexpr int E24_ARRAYSIZE = Message6_M5_M8_M27_E24_E24_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E24_descriptor() {
    return Message6_M5_M8_M27_E24_descriptor();
  }
  template <typename T>
  static inline const std::string& E24_Name(T value) {
    return Message6_M5_M8_M27_E24_Name(value);
  }
  static inline bool E24_Parse(absl::string_view name, E24* value) {
    return Message6_M5_M8_M27_E24_Parse(name, value);
  }
  using E25 = Message6_M5_M8_M27_E25;
  static constexpr E25 E25_UNSPECIFIED = Message6_M5_M8_M27_E25_E25_UNSPECIFIED;
  static constexpr E25 E25_CONST_1 = Message6_M5_M8_M27_E25_E25_CONST_1;
  static constexpr E25 E25_CONST_2 = Message6_M5_M8_M27_E25_E25_CONST_2;
  static constexpr E25 E25_CONST_3 = Message6_M5_M8_M27_E25_E25_CONST_3;
  static constexpr E25 E25_CONST_4 = Message6_M5_M8_M27_E25_E25_CONST_4;
  static constexpr E25 E25_CONST_5 = Message6_M5_M8_M27_E25_E25_CONST_5;
  static inline bool E25_IsValid(int value) {
    return Message6_M5_M8_M27_E25_IsValid(value);
  }
  static constexpr E25 E25_MIN = Message6_M5_M8_M27_E25_E25_MIN;
  static constexpr E25 E25_MAX = Message6_M5_M8_M27_E25_E25_MAX;
  static constexpr int E25_ARRAYSIZE = Message6_M5_M8_M27_E25_E25_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E25_descriptor() {
    return Message6_M5_M8_M27_E25_descriptor();
  }
  template <typename T>
  static inline const std::string& E25_Name(T value) {
    return Message6_M5_M8_M27_E25_Name(value);
  }
  static inline bool E25_Parse(absl::string_view name, E25* value) {
    return Message6_M5_M8_M27_E25_Parse(name, value);
  }
  using E26 = Message6_M5_M8_M27_E26;
  static constexpr E26 E26_UNSPECIFIED = Message6_M5_M8_M27_E26_E26_UNSPECIFIED;
  static constexpr E26 E26_CONST_1 = Message6_M5_M8_M27_E26_E26_CONST_1;
  static constexpr E26 E26_CONST_2 = Message6_M5_M8_M27_E26_E26_CONST_2;
  static constexpr E26 E26_CONST_3 = Message6_M5_M8_M27_E26_E26_CONST_3;
  static constexpr E26 E26_CONST_4 = Message6_M5_M8_M27_E26_E26_CONST_4;
  static constexpr E26 E26_CONST_5 = Message6_M5_M8_M27_E26_E26_CONST_5;
  static inline bool E26_IsValid(int value) {
    return Message6_M5_M8_M27_E26_IsValid(value);
  }
  static constexpr E26 E26_MIN = Message6_M5_M8_M27_E26_E26_MIN;
  static constexpr E26 E26_MAX = Message6_M5_M8_M27_E26_E26_MAX;
  static constexpr int E26_ARRAYSIZE = Message6_M5_M8_M27_E26_E26_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E26_descriptor() {
    return Message6_M5_M8_M27_E26_descriptor();
  }
  template <typename T>
  static inline const std::string& E26_Name(T value) {
    return Message6_M5_M8_M27_E26_Name(value);
  }
  static inline bool E26_Parse(absl::string_view name, E26* value) {
    return Message6_M5_M8_M27_E26_Parse(name, value);
  }
  using E27 = Message6_M5_M8_M27_E27;
  static constexpr E27 E27_UNSPECIFIED = Message6_M5_M8_M27_E27_E27_UNSPECIFIED;
  static constexpr E27 E27_CONST_1 = Message6_M5_M8_M27_E27_E27_CONST_1;
  static constexpr E27 E27_CONST_2 = Message6_M5_M8_M27_E27_E27_CONST_2;
  static constexpr E27 E27_CONST_3 = Message6_M5_M8_M27_E27_E27_CONST_3;
  static constexpr E27 E27_CONST_4 = Message6_M5_M8_M27_E27_E27_CONST_4;
  static constexpr E27 E27_CONST_5 = Message6_M5_M8_M27_E27_E27_CONST_5;
  static inline bool E27_IsValid(int value) {
    return Message6_M5_M8_M27_E27_IsValid(value);
  }
  static constexpr E27 E27_MIN = Message6_M5_M8_M27_E27_E27_MIN;
  static constexpr E27 E27_MAX = Message6_M5_M8_M27_E27_E27_MAX;
  static constexpr int E27_ARRAYSIZE = Message6_M5_M8_M27_E27_E27_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E27_descriptor() {
    return Message6_M5_M8_M27_E27_descriptor();
  }
  template <typename T>
  static inline const std::string& E27_Name(T value) {
    return Message6_M5_M8_M27_E27_Name(value);
  }
  static inline bool E27_Parse(absl::string_view name, E27* value) {
    return Message6_M5_M8_M27_E27_Parse(name, value);
  }
  using E28 = Message6_M5_M8_M27_E28;
  static constexpr E28 E28_UNSPECIFIED = Message6_M5_M8_M27_E28_E28_UNSPECIFIED;
  static constexpr E28 E28_CONST_1 = Message6_M5_M8_M27_E28_E28_CONST_1;
  static constexpr E28 E28_CONST_2 = Message6_M5_M8_M27_E28_E28_CONST_2;
  static constexpr E28 E28_CONST_3 = Message6_M5_M8_M27_E28_E28_CONST_3;
  static constexpr E28 E28_CONST_4 = Message6_M5_M8_M27_E28_E28_CONST_4;
  static constexpr E28 E28_CONST_5 = Message6_M5_M8_M27_E28_E28_CONST_5;
  static inline bool E28_IsValid(int value) {
    return Message6_M5_M8_M27_E28_IsValid(value);
  }
  static constexpr E28 E28_MIN = Message6_M5_M8_M27_E28_E28_MIN;
  static constexpr E28 E28_MAX = Message6_M5_M8_M27_E28_E28_MAX;
  static constexpr int E28_ARRAYSIZE = Message6_M5_M8_M27_E28_E28_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E28_descriptor() {
    return Message6_M5_M8_M27_E28_descriptor();
  }
  template <typename T>
  static inline const std::string& E28_Name(T value) {
    return Message6_M5_M8_M27_E28_Name(value);
  }
  static inline bool E28_Parse(absl::string_view name, E28* value) {
    return Message6_M5_M8_M27_E28_Parse(name, value);
  }
  using E29 = Message6_M5_M8_M27_E29;
  static constexpr E29 E29_UNSPECIFIED = Message6_M5_M8_M27_E29_E29_UNSPECIFIED;
  static constexpr E29 E29_CONST_1 = Message6_M5_M8_M27_E29_E29_CONST_1;
  static constexpr E29 E29_CONST_2 = Message6_M5_M8_M27_E29_E29_CONST_2;
  static constexpr E29 E29_CONST_3 = Message6_M5_M8_M27_E29_E29_CONST_3;
  static constexpr E29 E29_CONST_4 = Message6_M5_M8_M27_E29_E29_CONST_4;
  static constexpr E29 E29_CONST_5 = Message6_M5_M8_M27_E29_E29_CONST_5;
  static inline bool E29_IsValid(int value) {
    return Message6_M5_M8_M27_E29_IsValid(value);
  }
  static constexpr E29 E29_MIN = Message6_M5_M8_M27_E29_E29_MIN;
  static constexpr E29 E29_MAX = Message6_M5_M8_M27_E29_E29_MAX;
  static constexpr int E29_ARRAYSIZE = Message6_M5_M8_M27_E29_E29_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E29_descriptor() {
    return Message6_M5_M8_M27_E29_descriptor();
  }
  template <typename T>
  static inline const std::string& E29_Name(T value) {
    return Message6_M5_M8_M27_E29_Name(value);
  }
  static inline bool E29_Parse(absl::string_view name, E29* value) {
    return Message6_M5_M8_M27_E29_Parse(name, value);
  }
  using E30 = Message6_M5_M8_M27_E30;
  static constexpr E30 E30_UNSPECIFIED = Message6_M5_M8_M27_E30_E30_UNSPECIFIED;
  static constexpr E30 E30_CONST_1 = Message6_M5_M8_M27_E30_E30_CONST_1;
  static constexpr E30 E30_CONST_2 = Message6_M5_M8_M27_E30_E30_CONST_2;
  static constexpr E30 E30_CONST_3 = Message6_M5_M8_M27_E30_E30_CONST_3;
  static constexpr E30 E30_CONST_4 = Message6_M5_M8_M27_E30_E30_CONST_4;
  static constexpr E30 E30_CONST_5 = Message6_M5_M8_M27_E30_E30_CONST_5;
  static inline bool E30_IsValid(int value) {
    return Message6_M5_M8_M27_E30_IsValid(value);
  }
  static constexpr E30 E30_MIN = Message6_M5_M8_M27_E30_E30_MIN;
  static constexpr E30 E30_MAX = Message6_M5_M8_M27_E30_E30_MAX;
  static constexpr int E30_ARRAYSIZE = Message6_M5_M8_M27_E30_E30_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E30_descriptor() {
    return Message6_M5_M8_M27_E30_descriptor();
  }
  template <typename T>
  static inline const std::string& E30_Name(T value) {
    return Message6_M5_M8_M27_E30_Name(value);
  }
  static inline bool E30_Parse(absl::string_view name, E30* value) {
    return Message6_M5_M8_M27_E30_Parse(name, value);
  }
  using E31 = Message6_M5_M8_M27_E31;
  static constexpr E31 E31_UNSPECIFIED = Message6_M5_M8_M27_E31_E31_UNSPECIFIED;
  static constexpr E31 E31_CONST_1 = Message6_M5_M8_M27_E31_E31_CONST_1;
  static constexpr E31 E31_CONST_2 = Message6_M5_M8_M27_E31_E31_CONST_2;
  static constexpr E31 E31_CONST_3 = Message6_M5_M8_M27_E31_E31_CONST_3;
  static constexpr E31 E31_CONST_4 = Message6_M5_M8_M27_E31_E31_CONST_4;
  static constexpr E31 E31_CONST_5 = Message6_M5_M8_M27_E31_E31_CONST_5;
  static inline bool E31_IsValid(int value) {
    return Message6_M5_M8_M27_E31_IsValid(value);
  }
  static constexpr E31 E31_MIN = Message6_M5_M8_M27_E31_E31_MIN;
  static constexpr E31 E31_MAX = Message6_M5_M8_M27_E31_E31_MAX;
  static constexpr int E31_ARRAYSIZE = Message6_M5_M8_M27_E31_E31_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E31_descriptor() {
    return Message6_M5_M8_M27_E31_descriptor();
  }
  template <typename T>
  static inline const std::string& E31_Name(T value) {
    return Message6_M5_M8_M27_E31_Name(value);
  }
  static inline bool E31_Parse(absl::string_view name, E31* value) {
    return Message6_M5_M8_M27_E31_Parse(name, value);
  }
  using E32 = Message6_M5_M8_M27_E32;
  static constexpr E32 E32_UNSPECIFIED = Message6_M5_M8_M27_E32_E32_UNSPECIFIED;
  static constexpr E32 E32_CONST_1 = Message6_M5_M8_M27_E32_E32_CONST_1;
  static constexpr E32 E32_CONST_2 = Message6_M5_M8_M27_E32_E32_CONST_2;
  static constexpr E32 E32_CONST_3 = Message6_M5_M8_M27_E32_E32_CONST_3;
  static constexpr E32 E32_CONST_4 = Message6_M5_M8_M27_E32_E32_CONST_4;
  static constexpr E32 E32_CONST_5 = Message6_M5_M8_M27_E32_E32_CONST_5;
  static inline bool E32_IsValid(int value) {
    return Message6_M5_M8_M27_E32_IsValid(value);
  }
  static constexpr E32 E32_MIN = Message6_M5_M8_M27_E32_E32_MIN;
  static constexpr E32 E32_MAX = Message6_M5_M8_M27_E32_E32_MAX;
  static constexpr int E32_ARRAYSIZE = Message6_M5_M8_M27_E32_E32_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E32_descriptor() {
    return Message6_M5_M8_M27_E32_descriptor();
  }
  template <typename T>
  static inline const std::string& E32_Name(T value) {
    return Message6_M5_M8_M27_E32_Name(value);
  }
  static inline bool E32_Parse(absl::string_view name, E32* value) {
    return Message6_M5_M8_M27_E32_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_156_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_156())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_30().data())), f_30().size() * sizeof(::int64_t)));
      for (int i = 0; i < f_237_size(); ++i) {
        mutable_f_237(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())), f_15().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())), f_17().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())), f_18().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())), f_20().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())), f_21().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())), f_29().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_37().c_str())), f_37().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())), f_38().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())), f_40().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())), f_44().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())), f_47().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())), f_48().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_51().c_str())), f_51().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())), f_54().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_72().c_str())), f_72().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())), f_73().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())), f_75().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())), f_78().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_83().c_str())), f_83().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())), f_86().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_89().c_str())), f_89().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_90().c_str())), f_90().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())), f_94().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())), f_95().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_97().c_str())), f_97().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_101().c_str())), f_101().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())), f_113().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_117().c_str())), f_117().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_121().c_str())), f_121().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_122().c_str())), f_122().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_125().c_str())), f_125().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())), f_131().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_142().c_str())), f_142().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_145().c_str())), f_145().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_148().c_str())), f_148().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_152().c_str())), f_152().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())), f_153().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())), f_157().size()));
      mutable_f_238()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_156_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_156()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_30().data())));
      sizes_list.push_back(f_30().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_144().data())));
      sizes_list.push_back(f_144().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_237().size());
      for (int i = 0; i < f_237_size(); ++i) {
        mutable_f_237(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      sizes_list.push_back(f_15().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      sizes_list.push_back(f_17().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      sizes_list.push_back(f_18().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      sizes_list.push_back(f_20().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      sizes_list.push_back(f_21().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      sizes_list.push_back(f_29().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_37().c_str())));
      sizes_list.push_back(f_37().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      sizes_list.push_back(f_38().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      sizes_list.push_back(f_40().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      sizes_list.push_back(f_44().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      sizes_list.push_back(f_47().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      sizes_list.push_back(f_48().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_51().c_str())));
      sizes_list.push_back(f_51().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
      sizes_list.push_back(f_54().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_72().c_str())));
      sizes_list.push_back(f_72().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      sizes_list.push_back(f_73().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      sizes_list.push_back(f_75().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      sizes_list.push_back(f_78().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_83().c_str())));
      sizes_list.push_back(f_83().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      sizes_list.push_back(f_86().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_89().c_str())));
      sizes_list.push_back(f_89().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_90().c_str())));
      sizes_list.push_back(f_90().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      sizes_list.push_back(f_94().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      sizes_list.push_back(f_95().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_97().c_str())));
      sizes_list.push_back(f_97().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_101().c_str())));
      sizes_list.push_back(f_101().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      sizes_list.push_back(f_113().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_117().c_str())));
      sizes_list.push_back(f_117().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_121().c_str())));
      sizes_list.push_back(f_121().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_122().c_str())));
      sizes_list.push_back(f_122().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_125().c_str())));
      sizes_list.push_back(f_125().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      sizes_list.push_back(f_131().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_142().c_str())));
      sizes_list.push_back(f_142().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_145().c_str())));
      sizes_list.push_back(f_145().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_148().c_str())));
      sizes_list.push_back(f_148().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_152().c_str())));
      sizes_list.push_back(f_152().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      sizes_list.push_back(f_153().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      sizes_list.push_back(f_157().size());
      mutable_f_238()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_156_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_30().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_144().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_237_size(); ++i) {
        mutable_f_237(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_37().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_51().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_72().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_83().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_89().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_90().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_97().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_101().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_117().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_121().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_122().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_125().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_142().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_145().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_148().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_152().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      mutable_f_238()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_156_);
      sizes.push_back(end_addr - start_addr + sizeof(f_156()));
      sizes.push_back(f_30().size() * sizeof(::int64_t));
      sizes.push_back(f_144().size() * sizeof(int));
      sizes.push_back(f_237().size());
      for (int i = 0; i < f_237_size(); ++i) {
        mutable_f_237(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
      sizes.push_back(f_6().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_11().size());
      sizes.push_back(f_12().size());
      sizes.push_back(f_15().size());
      sizes.push_back(f_17().size());
      sizes.push_back(f_18().size());
      sizes.push_back(f_20().size());
      sizes.push_back(f_21().size());
      sizes.push_back(f_29().size());
      sizes.push_back(f_37().size());
      sizes.push_back(f_38().size());
      sizes.push_back(f_40().size());
      sizes.push_back(f_44().size());
      sizes.push_back(f_46().size());
      sizes.push_back(f_47().size());
      sizes.push_back(f_48().size());
      sizes.push_back(f_51().size());
      sizes.push_back(f_54().size());
      sizes.push_back(f_72().size());
      sizes.push_back(f_73().size());
      sizes.push_back(f_75().size());
      sizes.push_back(f_78().size());
      sizes.push_back(f_83().size());
      sizes.push_back(f_86().size());
      sizes.push_back(f_89().size());
      sizes.push_back(f_90().size());
      sizes.push_back(f_94().size());
      sizes.push_back(f_95().size());
      sizes.push_back(f_97().size());
      sizes.push_back(f_101().size());
      sizes.push_back(f_113().size());
      sizes.push_back(f_117().size());
      sizes.push_back(f_121().size());
      sizes.push_back(f_122().size());
      sizes.push_back(f_125().size());
      sizes.push_back(f_131().size());
      sizes.push_back(f_142().size());
      sizes.push_back(f_145().size());
      sizes.push_back(f_148().size());
      sizes.push_back(f_152().size());
      sizes.push_back(f_153().size());
      sizes.push_back(f_157().size());
      mutable_f_238()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_156_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_30()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_30().data())));
      mutable_f_144()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_144().data())));
      size_t num_f_237_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_237_entries; ++i) {
        auto* new_msg = add_f_237();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_237(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_21(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_21().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_37(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_37().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_38().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_47(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_47().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_48(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_48().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_51(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_51().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_54(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_54().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_72(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_72().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_73(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_75(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_83(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_83().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_86(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_86().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_89(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_89().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_90(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_90().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_94().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_95(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_97(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_97().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_101(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_101().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_113(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_117(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_117().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_121(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_121().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_122(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_122().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_125(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_125().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_131(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_131().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_142(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_142().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_145(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_145().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_148(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_148().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_152(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_152().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_153(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_157(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      }
      idx = mutable_f_238()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_30()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_144()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_237_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_237_entries; ++i) {
        auto* new_msg = add_f_237();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_237(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_21(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_37(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_38(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_47(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_48(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_51(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_54(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_72(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_73(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_75(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_83(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_86(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_89(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_90(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_94(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_95(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_97(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_101(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_113(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_117(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_121(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_122(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_125(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_131(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_142(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_145(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_148(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_152(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_153(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_157(std::move(tmp_str));
        }
      }
      idx = mutable_f_238()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF30FieldNumber = 45,
    kF144FieldNumber = 219,
    kF237FieldNumber = 238,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF6FieldNumber = 8,
    kF7FieldNumber = 9,
    kF11FieldNumber = 16,
    kF12FieldNumber = 17,
    kF15FieldNumber = 23,
    kF17FieldNumber = 25,
    kF18FieldNumber = 26,
    kF20FieldNumber = 31,
    kF21FieldNumber = 33,
    kF29FieldNumber = 44,
    kF37FieldNumber = 55,
    kF38FieldNumber = 56,
    kF40FieldNumber = 58,
    kF44FieldNumber = 63,
    kF46FieldNumber = 68,
    kF47FieldNumber = 69,
    kF48FieldNumber = 70,
    kF51FieldNumber = 75,
    kF54FieldNumber = 79,
    kF72FieldNumber = 105,
    kF73FieldNumber = 107,
    kF75FieldNumber = 109,
    kF78FieldNumber = 113,
    kF83FieldNumber = 120,
    kF86FieldNumber = 126,
    kF89FieldNumber = 131,
    kF90FieldNumber = 132,
    kF94FieldNumber = 139,
    kF95FieldNumber = 140,
    kF97FieldNumber = 142,
    kF101FieldNumber = 148,
    kF113FieldNumber = 167,
    kF117FieldNumber = 173,
    kF121FieldNumber = 178,
    kF122FieldNumber = 180,
    kF125FieldNumber = 189,
    kF131FieldNumber = 199,
    kF142FieldNumber = 216,
    kF145FieldNumber = 220,
    kF148FieldNumber = 225,
    kF152FieldNumber = 229,
    kF153FieldNumber = 230,
    kF157FieldNumber = 237,
    kF238FieldNumber = 239,
    kF0FieldNumber = 1,
    kF5FieldNumber = 7,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF8FieldNumber = 10,
    kF9FieldNumber = 11,
    kF10FieldNumber = 13,
    kF13FieldNumber = 19,
    kF14FieldNumber = 21,
    kF16FieldNumber = 24,
    kF19FieldNumber = 28,
    kF22FieldNumber = 34,
    kF23FieldNumber = 35,
    kF24FieldNumber = 36,
    kF26FieldNumber = 39,
    kF27FieldNumber = 41,
    kF25FieldNumber = 37,
    kF31FieldNumber = 46,
    kF28FieldNumber = 42,
    kF32FieldNumber = 47,
    kF34FieldNumber = 50,
    kF33FieldNumber = 49,
    kF35FieldNumber = 53,
    kF36FieldNumber = 54,
    kF41FieldNumber = 59,
    kF42FieldNumber = 60,
    kF43FieldNumber = 61,
    kF49FieldNumber = 71,
    kF52FieldNumber = 77,
    kF53FieldNumber = 78,
    kF39FieldNumber = 57,
    kF45FieldNumber = 66,
    kF50FieldNumber = 72,
    kF81FieldNumber = 117,
    kF55FieldNumber = 80,
    kF56FieldNumber = 81,
    kF57FieldNumber = 82,
    kF58FieldNumber = 84,
    kF59FieldNumber = 86,
    kF60FieldNumber = 88,
    kF61FieldNumber = 89,
    kF62FieldNumber = 91,
    kF63FieldNumber = 92,
    kF64FieldNumber = 94,
    kF65FieldNumber = 95,
    kF66FieldNumber = 97,
    kF67FieldNumber = 98,
    kF68FieldNumber = 99,
    kF69FieldNumber = 101,
    kF70FieldNumber = 102,
    kF71FieldNumber = 104,
    kF74FieldNumber = 108,
    kF76FieldNumber = 110,
    kF77FieldNumber = 112,
    kF80FieldNumber = 116,
    kF79FieldNumber = 115,
    kF82FieldNumber = 118,
    kF84FieldNumber = 121,
    kF85FieldNumber = 123,
    kF87FieldNumber = 128,
    kF88FieldNumber = 129,
    kF91FieldNumber = 133,
    kF92FieldNumber = 135,
    kF93FieldNumber = 137,
    kF96FieldNumber = 141,
    kF98FieldNumber = 144,
    kF99FieldNumber = 145,
    kF100FieldNumber = 147,
    kF103FieldNumber = 150,
    kF102FieldNumber = 149,
    kF104FieldNumber = 152,
    kF106FieldNumber = 154,
    kF105FieldNumber = 153,
    kF107FieldNumber = 155,
    kF108FieldNumber = 157,
    kF109FieldNumber = 160,
    kF111FieldNumber = 162,
    kF110FieldNumber = 161,
    kF112FieldNumber = 166,
    kF114FieldNumber = 169,
    kF115FieldNumber = 170,
    kF116FieldNumber = 172,
    kF118FieldNumber = 175,
    kF120FieldNumber = 177,
    kF119FieldNumber = 176,
    kF123FieldNumber = 182,
    kF124FieldNumber = 186,
    kF127FieldNumber = 193,
    kF126FieldNumber = 192,
    kF128FieldNumber = 194,
    kF129FieldNumber = 196,
    kF130FieldNumber = 197,
    kF133FieldNumber = 202,
    kF132FieldNumber = 200,
    kF134FieldNumber = 203,
    kF135FieldNumber = 204,
    kF136FieldNumber = 206,
    kF137FieldNumber = 207,
    kF139FieldNumber = 211,
    kF138FieldNumber = 209,
    kF141FieldNumber = 214,
    kF140FieldNumber = 213,
    kF143FieldNumber = 218,
    kF147FieldNumber = 224,
    kF146FieldNumber = 223,
    kF149FieldNumber = 226,
    kF150FieldNumber = 227,
    kF151FieldNumber = 228,
    kF155FieldNumber = 234,
    kF154FieldNumber = 232,
    kF156FieldNumber = 236,
  };
  // repeated int64 f_30 = 45 [packed = true];
  int f_30_size() const;
  private:
  int _internal_f_30_size() const;

  public:
  void clear_f_30() ;
  ::int64_t f_30(int index) const;
  void set_f_30(int index, ::int64_t value);
  void add_f_30(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_30() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_30();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_30() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_30();

  public:
  // repeated .fleetbench.proto.Message6.M5.M8.M27.E30 f_144 = 219 [packed = true];
  int f_144_size() const;
  private:
  int _internal_f_144_size() const;

  public:
  void clear_f_144() ;
  public:
  ::fleetbench::proto::Message6_M5_M8_M27_E30 f_144(int index) const;
  void set_f_144(int index, ::fleetbench::proto::Message6_M5_M8_M27_E30 value);
  void add_f_144(::fleetbench::proto::Message6_M5_M8_M27_E30 value);
  const ::google::protobuf::RepeatedField<int>& f_144() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_144();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_144() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_144();

  public:
  // repeated .fleetbench.proto.Message6.M5.M8.M27.M34 f_237 = 238;
  int f_237_size() const;
  private:
  int _internal_f_237_size() const;

  public:
  void clear_f_237() ;
  ::fleetbench::proto::Message6_M5_M8_M27_M34* mutable_f_237(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>* mutable_f_237();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>& _internal_f_237() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>* _internal_mutable_f_237();
  public:
  const ::fleetbench::proto::Message6_M5_M8_M27_M34& f_237(int index) const;
  ::fleetbench::proto::Message6_M5_M8_M27_M34* add_f_237();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>& f_237() const;
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional string f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional bytes f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional string f_15 = 23;
  bool has_f_15() const;
  void clear_f_15() ;
  const std::string& f_15() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_15(Arg_&& arg, Args_... args);
  std::string* mutable_f_15();
  PROTOBUF_NODISCARD std::string* release_f_15();
  void set_allocated_f_15(std::string* value);

  private:
  const std::string& _internal_f_15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_15(
      const std::string& value);
  std::string* _internal_mutable_f_15();

  public:
  // optional string f_17 = 25;
  bool has_f_17() const;
  void clear_f_17() ;
  const std::string& f_17() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_17(Arg_&& arg, Args_... args);
  std::string* mutable_f_17();
  PROTOBUF_NODISCARD std::string* release_f_17();
  void set_allocated_f_17(std::string* value);

  private:
  const std::string& _internal_f_17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_17(
      const std::string& value);
  std::string* _internal_mutable_f_17();

  public:
  // optional bytes f_18 = 26;
  bool has_f_18() const;
  void clear_f_18() ;
  const std::string& f_18() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_18(Arg_&& arg, Args_... args);
  std::string* mutable_f_18();
  PROTOBUF_NODISCARD std::string* release_f_18();
  void set_allocated_f_18(std::string* value);

  private:
  const std::string& _internal_f_18() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_18(
      const std::string& value);
  std::string* _internal_mutable_f_18();

  public:
  // optional string f_20 = 31;
  bool has_f_20() const;
  void clear_f_20() ;
  const std::string& f_20() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_20(Arg_&& arg, Args_... args);
  std::string* mutable_f_20();
  PROTOBUF_NODISCARD std::string* release_f_20();
  void set_allocated_f_20(std::string* value);

  private:
  const std::string& _internal_f_20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_20(
      const std::string& value);
  std::string* _internal_mutable_f_20();

  public:
  // optional bytes f_21 = 33;
  bool has_f_21() const;
  void clear_f_21() ;
  const std::string& f_21() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_21(Arg_&& arg, Args_... args);
  std::string* mutable_f_21();
  PROTOBUF_NODISCARD std::string* release_f_21();
  void set_allocated_f_21(std::string* value);

  private:
  const std::string& _internal_f_21() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_21(
      const std::string& value);
  std::string* _internal_mutable_f_21();

  public:
  // optional bytes f_29 = 44;
  bool has_f_29() const;
  void clear_f_29() ;
  const std::string& f_29() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_29(Arg_&& arg, Args_... args);
  std::string* mutable_f_29();
  PROTOBUF_NODISCARD std::string* release_f_29();
  void set_allocated_f_29(std::string* value);

  private:
  const std::string& _internal_f_29() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_29(
      const std::string& value);
  std::string* _internal_mutable_f_29();

  public:
  // optional string f_37 = 55;
  bool has_f_37() const;
  void clear_f_37() ;
  const std::string& f_37() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_37(Arg_&& arg, Args_... args);
  std::string* mutable_f_37();
  PROTOBUF_NODISCARD std::string* release_f_37();
  void set_allocated_f_37(std::string* value);

  private:
  const std::string& _internal_f_37() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_37(
      const std::string& value);
  std::string* _internal_mutable_f_37();

  public:
  // optional bytes f_38 = 56;
  bool has_f_38() const;
  void clear_f_38() ;
  const std::string& f_38() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_38(Arg_&& arg, Args_... args);
  std::string* mutable_f_38();
  PROTOBUF_NODISCARD std::string* release_f_38();
  void set_allocated_f_38(std::string* value);

  private:
  const std::string& _internal_f_38() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_38(
      const std::string& value);
  std::string* _internal_mutable_f_38();

  public:
  // optional string f_40 = 58;
  bool has_f_40() const;
  void clear_f_40() ;
  const std::string& f_40() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_40(Arg_&& arg, Args_... args);
  std::string* mutable_f_40();
  PROTOBUF_NODISCARD std::string* release_f_40();
  void set_allocated_f_40(std::string* value);

  private:
  const std::string& _internal_f_40() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_40(
      const std::string& value);
  std::string* _internal_mutable_f_40();

  public:
  // optional string f_44 = 63;
  bool has_f_44() const;
  void clear_f_44() ;
  const std::string& f_44() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_44(Arg_&& arg, Args_... args);
  std::string* mutable_f_44();
  PROTOBUF_NODISCARD std::string* release_f_44();
  void set_allocated_f_44(std::string* value);

  private:
  const std::string& _internal_f_44() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_44(
      const std::string& value);
  std::string* _internal_mutable_f_44();

  public:
  // optional string f_46 = 68;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional string f_47 = 69;
  bool has_f_47() const;
  void clear_f_47() ;
  const std::string& f_47() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_47(Arg_&& arg, Args_... args);
  std::string* mutable_f_47();
  PROTOBUF_NODISCARD std::string* release_f_47();
  void set_allocated_f_47(std::string* value);

  private:
  const std::string& _internal_f_47() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_47(
      const std::string& value);
  std::string* _internal_mutable_f_47();

  public:
  // optional bytes f_48 = 70;
  bool has_f_48() const;
  void clear_f_48() ;
  const std::string& f_48() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_48(Arg_&& arg, Args_... args);
  std::string* mutable_f_48();
  PROTOBUF_NODISCARD std::string* release_f_48();
  void set_allocated_f_48(std::string* value);

  private:
  const std::string& _internal_f_48() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_48(
      const std::string& value);
  std::string* _internal_mutable_f_48();

  public:
  // optional string f_51 = 75;
  bool has_f_51() const;
  void clear_f_51() ;
  const std::string& f_51() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_51(Arg_&& arg, Args_... args);
  std::string* mutable_f_51();
  PROTOBUF_NODISCARD std::string* release_f_51();
  void set_allocated_f_51(std::string* value);

  private:
  const std::string& _internal_f_51() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_51(
      const std::string& value);
  std::string* _internal_mutable_f_51();

  public:
  // optional string f_54 = 79;
  bool has_f_54() const;
  void clear_f_54() ;
  const std::string& f_54() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_54(Arg_&& arg, Args_... args);
  std::string* mutable_f_54();
  PROTOBUF_NODISCARD std::string* release_f_54();
  void set_allocated_f_54(std::string* value);

  private:
  const std::string& _internal_f_54() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_54(
      const std::string& value);
  std::string* _internal_mutable_f_54();

  public:
  // optional string f_72 = 105;
  bool has_f_72() const;
  void clear_f_72() ;
  const std::string& f_72() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_72(Arg_&& arg, Args_... args);
  std::string* mutable_f_72();
  PROTOBUF_NODISCARD std::string* release_f_72();
  void set_allocated_f_72(std::string* value);

  private:
  const std::string& _internal_f_72() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_72(
      const std::string& value);
  std::string* _internal_mutable_f_72();

  public:
  // optional string f_73 = 107;
  bool has_f_73() const;
  void clear_f_73() ;
  const std::string& f_73() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_73(Arg_&& arg, Args_... args);
  std::string* mutable_f_73();
  PROTOBUF_NODISCARD std::string* release_f_73();
  void set_allocated_f_73(std::string* value);

  private:
  const std::string& _internal_f_73() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_73(
      const std::string& value);
  std::string* _internal_mutable_f_73();

  public:
  // optional bytes f_75 = 109;
  bool has_f_75() const;
  void clear_f_75() ;
  const std::string& f_75() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_75(Arg_&& arg, Args_... args);
  std::string* mutable_f_75();
  PROTOBUF_NODISCARD std::string* release_f_75();
  void set_allocated_f_75(std::string* value);

  private:
  const std::string& _internal_f_75() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_75(
      const std::string& value);
  std::string* _internal_mutable_f_75();

  public:
  // optional string f_78 = 113;
  bool has_f_78() const;
  void clear_f_78() ;
  const std::string& f_78() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_78(Arg_&& arg, Args_... args);
  std::string* mutable_f_78();
  PROTOBUF_NODISCARD std::string* release_f_78();
  void set_allocated_f_78(std::string* value);

  private:
  const std::string& _internal_f_78() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_78(
      const std::string& value);
  std::string* _internal_mutable_f_78();

  public:
  // optional string f_83 = 120;
  bool has_f_83() const;
  void clear_f_83() ;
  const std::string& f_83() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_83(Arg_&& arg, Args_... args);
  std::string* mutable_f_83();
  PROTOBUF_NODISCARD std::string* release_f_83();
  void set_allocated_f_83(std::string* value);

  private:
  const std::string& _internal_f_83() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_83(
      const std::string& value);
  std::string* _internal_mutable_f_83();

  public:
  // optional string f_86 = 126;
  bool has_f_86() const;
  void clear_f_86() ;
  const std::string& f_86() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_86(Arg_&& arg, Args_... args);
  std::string* mutable_f_86();
  PROTOBUF_NODISCARD std::string* release_f_86();
  void set_allocated_f_86(std::string* value);

  private:
  const std::string& _internal_f_86() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_86(
      const std::string& value);
  std::string* _internal_mutable_f_86();

  public:
  // optional bytes f_89 = 131;
  bool has_f_89() const;
  void clear_f_89() ;
  const std::string& f_89() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_89(Arg_&& arg, Args_... args);
  std::string* mutable_f_89();
  PROTOBUF_NODISCARD std::string* release_f_89();
  void set_allocated_f_89(std::string* value);

  private:
  const std::string& _internal_f_89() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_89(
      const std::string& value);
  std::string* _internal_mutable_f_89();

  public:
  // optional string f_90 = 132;
  bool has_f_90() const;
  void clear_f_90() ;
  const std::string& f_90() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_90(Arg_&& arg, Args_... args);
  std::string* mutable_f_90();
  PROTOBUF_NODISCARD std::string* release_f_90();
  void set_allocated_f_90(std::string* value);

  private:
  const std::string& _internal_f_90() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_90(
      const std::string& value);
  std::string* _internal_mutable_f_90();

  public:
  // optional bytes f_94 = 139;
  bool has_f_94() const;
  void clear_f_94() ;
  const std::string& f_94() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_94(Arg_&& arg, Args_... args);
  std::string* mutable_f_94();
  PROTOBUF_NODISCARD std::string* release_f_94();
  void set_allocated_f_94(std::string* value);

  private:
  const std::string& _internal_f_94() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_94(
      const std::string& value);
  std::string* _internal_mutable_f_94();

  public:
  // optional string f_95 = 140;
  bool has_f_95() const;
  void clear_f_95() ;
  const std::string& f_95() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_95(Arg_&& arg, Args_... args);
  std::string* mutable_f_95();
  PROTOBUF_NODISCARD std::string* release_f_95();
  void set_allocated_f_95(std::string* value);

  private:
  const std::string& _internal_f_95() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_95(
      const std::string& value);
  std::string* _internal_mutable_f_95();

  public:
  // optional string f_97 = 142;
  bool has_f_97() const;
  void clear_f_97() ;
  const std::string& f_97() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_97(Arg_&& arg, Args_... args);
  std::string* mutable_f_97();
  PROTOBUF_NODISCARD std::string* release_f_97();
  void set_allocated_f_97(std::string* value);

  private:
  const std::string& _internal_f_97() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_97(
      const std::string& value);
  std::string* _internal_mutable_f_97();

  public:
  // optional string f_101 = 148;
  bool has_f_101() const;
  void clear_f_101() ;
  const std::string& f_101() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_101(Arg_&& arg, Args_... args);
  std::string* mutable_f_101();
  PROTOBUF_NODISCARD std::string* release_f_101();
  void set_allocated_f_101(std::string* value);

  private:
  const std::string& _internal_f_101() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_101(
      const std::string& value);
  std::string* _internal_mutable_f_101();

  public:
  // optional string f_113 = 167;
  bool has_f_113() const;
  void clear_f_113() ;
  const std::string& f_113() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_113(Arg_&& arg, Args_... args);
  std::string* mutable_f_113();
  PROTOBUF_NODISCARD std::string* release_f_113();
  void set_allocated_f_113(std::string* value);

  private:
  const std::string& _internal_f_113() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_113(
      const std::string& value);
  std::string* _internal_mutable_f_113();

  public:
  // optional string f_117 = 173;
  bool has_f_117() const;
  void clear_f_117() ;
  const std::string& f_117() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_117(Arg_&& arg, Args_... args);
  std::string* mutable_f_117();
  PROTOBUF_NODISCARD std::string* release_f_117();
  void set_allocated_f_117(std::string* value);

  private:
  const std::string& _internal_f_117() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_117(
      const std::string& value);
  std::string* _internal_mutable_f_117();

  public:
  // optional string f_121 = 178;
  bool has_f_121() const;
  void clear_f_121() ;
  const std::string& f_121() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_121(Arg_&& arg, Args_... args);
  std::string* mutable_f_121();
  PROTOBUF_NODISCARD std::string* release_f_121();
  void set_allocated_f_121(std::string* value);

  private:
  const std::string& _internal_f_121() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_121(
      const std::string& value);
  std::string* _internal_mutable_f_121();

  public:
  // optional string f_122 = 180;
  bool has_f_122() const;
  void clear_f_122() ;
  const std::string& f_122() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_122(Arg_&& arg, Args_... args);
  std::string* mutable_f_122();
  PROTOBUF_NODISCARD std::string* release_f_122();
  void set_allocated_f_122(std::string* value);

  private:
  const std::string& _internal_f_122() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_122(
      const std::string& value);
  std::string* _internal_mutable_f_122();

  public:
  // optional string f_125 = 189;
  bool has_f_125() const;
  void clear_f_125() ;
  const std::string& f_125() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_125(Arg_&& arg, Args_... args);
  std::string* mutable_f_125();
  PROTOBUF_NODISCARD std::string* release_f_125();
  void set_allocated_f_125(std::string* value);

  private:
  const std::string& _internal_f_125() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_125(
      const std::string& value);
  std::string* _internal_mutable_f_125();

  public:
  // optional bytes f_131 = 199;
  bool has_f_131() const;
  void clear_f_131() ;
  const std::string& f_131() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_131(Arg_&& arg, Args_... args);
  std::string* mutable_f_131();
  PROTOBUF_NODISCARD std::string* release_f_131();
  void set_allocated_f_131(std::string* value);

  private:
  const std::string& _internal_f_131() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_131(
      const std::string& value);
  std::string* _internal_mutable_f_131();

  public:
  // optional string f_142 = 216;
  bool has_f_142() const;
  void clear_f_142() ;
  const std::string& f_142() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_142(Arg_&& arg, Args_... args);
  std::string* mutable_f_142();
  PROTOBUF_NODISCARD std::string* release_f_142();
  void set_allocated_f_142(std::string* value);

  private:
  const std::string& _internal_f_142() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_142(
      const std::string& value);
  std::string* _internal_mutable_f_142();

  public:
  // optional string f_145 = 220;
  bool has_f_145() const;
  void clear_f_145() ;
  const std::string& f_145() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_145(Arg_&& arg, Args_... args);
  std::string* mutable_f_145();
  PROTOBUF_NODISCARD std::string* release_f_145();
  void set_allocated_f_145(std::string* value);

  private:
  const std::string& _internal_f_145() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_145(
      const std::string& value);
  std::string* _internal_mutable_f_145();

  public:
  // optional string f_148 = 225;
  bool has_f_148() const;
  void clear_f_148() ;
  const std::string& f_148() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_148(Arg_&& arg, Args_... args);
  std::string* mutable_f_148();
  PROTOBUF_NODISCARD std::string* release_f_148();
  void set_allocated_f_148(std::string* value);

  private:
  const std::string& _internal_f_148() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_148(
      const std::string& value);
  std::string* _internal_mutable_f_148();

  public:
  // optional string f_152 = 229;
  bool has_f_152() const;
  void clear_f_152() ;
  const std::string& f_152() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_152(Arg_&& arg, Args_... args);
  std::string* mutable_f_152();
  PROTOBUF_NODISCARD std::string* release_f_152();
  void set_allocated_f_152(std::string* value);

  private:
  const std::string& _internal_f_152() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_152(
      const std::string& value);
  std::string* _internal_mutable_f_152();

  public:
  // optional string f_153 = 230;
  bool has_f_153() const;
  void clear_f_153() ;
  const std::string& f_153() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_153(Arg_&& arg, Args_... args);
  std::string* mutable_f_153();
  PROTOBUF_NODISCARD std::string* release_f_153();
  void set_allocated_f_153(std::string* value);

  private:
  const std::string& _internal_f_153() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_153(
      const std::string& value);
  std::string* _internal_mutable_f_153();

  public:
  // optional bytes f_157 = 237;
  bool has_f_157() const;
  void clear_f_157() ;
  const std::string& f_157() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_157(Arg_&& arg, Args_... args);
  std::string* mutable_f_157();
  PROTOBUF_NODISCARD std::string* release_f_157();
  void set_allocated_f_157(std::string* value);

  private:
  const std::string& _internal_f_157() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_157(
      const std::string& value);
  std::string* _internal_mutable_f_157();

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.M36 f_238 = 239;
  bool has_f_238() const;
  void clear_f_238() ;
  const ::fleetbench::proto::Message6_M5_M8_M27_M36& f_238() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M8_M27_M36* release_f_238();
  ::fleetbench::proto::Message6_M5_M8_M27_M36* mutable_f_238();
  void set_allocated_f_238(::fleetbench::proto::Message6_M5_M8_M27_M36* value);
  void unsafe_arena_set_allocated_f_238(::fleetbench::proto::Message6_M5_M8_M27_M36* value);
  ::fleetbench::proto::Message6_M5_M8_M27_M36* unsafe_arena_release_f_238();

  private:
  const ::fleetbench::proto::Message6_M5_M8_M27_M36& _internal_f_238() const;
  ::fleetbench::proto::Message6_M5_M8_M27_M36* _internal_mutable_f_238();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E12 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E12 f_5() const;
  void set_f_5(::fleetbench::proto::Message6_M5_M8_M27_E12 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E12 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message6_M5_M8_M27_E12 value);

  public:
  // optional int64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional int64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int32 f_8 = 10;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional float f_9 = 11;
  bool has_f_9() const;
  void clear_f_9() ;
  float f_9() const;
  void set_f_9(float value);

  private:
  float _internal_f_9() const;
  void _internal_set_f_9(float value);

  public:
  // optional int64 f_10 = 13;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int64_t f_10() const;
  void set_f_10(::int64_t value);

  private:
  ::int64_t _internal_f_10() const;
  void _internal_set_f_10(::int64_t value);

  public:
  // optional int64 f_13 = 19;
  bool has_f_13() const;
  void clear_f_13() ;
  ::int64_t f_13() const;
  void set_f_13(::int64_t value);

  private:
  ::int64_t _internal_f_13() const;
  void _internal_set_f_13(::int64_t value);

  public:
  // optional int32 f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int32_t f_14() const;
  void set_f_14(::int32_t value);

  private:
  ::int32_t _internal_f_14() const;
  void _internal_set_f_14(::int32_t value);

  public:
  // optional int32 f_16 = 24;
  bool has_f_16() const;
  void clear_f_16() ;
  ::int32_t f_16() const;
  void set_f_16(::int32_t value);

  private:
  ::int32_t _internal_f_16() const;
  void _internal_set_f_16(::int32_t value);

  public:
  // optional int64 f_19 = 28;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int64_t f_19() const;
  void set_f_19(::int64_t value);

  private:
  ::int64_t _internal_f_19() const;
  void _internal_set_f_19(::int64_t value);

  public:
  // optional int64 f_22 = 34;
  bool has_f_22() const;
  void clear_f_22() ;
  ::int64_t f_22() const;
  void set_f_22(::int64_t value);

  private:
  ::int64_t _internal_f_22() const;
  void _internal_set_f_22(::int64_t value);

  public:
  // optional int64 f_23 = 35;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int64_t f_23() const;
  void set_f_23(::int64_t value);

  private:
  ::int64_t _internal_f_23() const;
  void _internal_set_f_23(::int64_t value);

  public:
  // optional int64 f_24 = 36;
  bool has_f_24() const;
  void clear_f_24() ;
  ::int64_t f_24() const;
  void set_f_24(::int64_t value);

  private:
  ::int64_t _internal_f_24() const;
  void _internal_set_f_24(::int64_t value);

  public:
  // optional uint64 f_26 = 39;
  bool has_f_26() const;
  void clear_f_26() ;
  ::uint64_t f_26() const;
  void set_f_26(::uint64_t value);

  private:
  ::uint64_t _internal_f_26() const;
  void _internal_set_f_26(::uint64_t value);

  public:
  // optional fixed64 f_27 = 41;
  bool has_f_27() const;
  void clear_f_27() ;
  ::uint64_t f_27() const;
  void set_f_27(::uint64_t value);

  private:
  ::uint64_t _internal_f_27() const;
  void _internal_set_f_27(::uint64_t value);

  public:
  // optional int32 f_25 = 37;
  bool has_f_25() const;
  void clear_f_25() ;
  ::int32_t f_25() const;
  void set_f_25(::int32_t value);

  private:
  ::int32_t _internal_f_25() const;
  void _internal_set_f_25(::int32_t value);

  public:
  // optional int32 f_31 = 46;
  bool has_f_31() const;
  void clear_f_31() ;
  ::int32_t f_31() const;
  void set_f_31(::int32_t value);

  private:
  ::int32_t _internal_f_31() const;
  void _internal_set_f_31(::int32_t value);

  public:
  // optional int64 f_28 = 42;
  bool has_f_28() const;
  void clear_f_28() ;
  ::int64_t f_28() const;
  void set_f_28(::int64_t value);

  private:
  ::int64_t _internal_f_28() const;
  void _internal_set_f_28(::int64_t value);

  public:
  // optional int32 f_32 = 47;
  bool has_f_32() const;
  void clear_f_32() ;
  ::int32_t f_32() const;
  void set_f_32(::int32_t value);

  private:
  ::int32_t _internal_f_32() const;
  void _internal_set_f_32(::int32_t value);

  public:
  // optional uint32 f_34 = 50;
  bool has_f_34() const;
  void clear_f_34() ;
  ::uint32_t f_34() const;
  void set_f_34(::uint32_t value);

  private:
  ::uint32_t _internal_f_34() const;
  void _internal_set_f_34(::uint32_t value);

  public:
  // optional int64 f_33 = 49;
  bool has_f_33() const;
  void clear_f_33() ;
  ::int64_t f_33() const;
  void set_f_33(::int64_t value);

  private:
  ::int64_t _internal_f_33() const;
  void _internal_set_f_33(::int64_t value);

  public:
  // optional int64 f_35 = 53;
  bool has_f_35() const;
  void clear_f_35() ;
  ::int64_t f_35() const;
  void set_f_35(::int64_t value);

  private:
  ::int64_t _internal_f_35() const;
  void _internal_set_f_35(::int64_t value);

  public:
  // optional int64 f_36 = 54;
  bool has_f_36() const;
  void clear_f_36() ;
  ::int64_t f_36() const;
  void set_f_36(::int64_t value);

  private:
  ::int64_t _internal_f_36() const;
  void _internal_set_f_36(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E13 f_41 = 59;
  bool has_f_41() const;
  void clear_f_41() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E13 f_41() const;
  void set_f_41(::fleetbench::proto::Message6_M5_M8_M27_E13 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E13 _internal_f_41() const;
  void _internal_set_f_41(::fleetbench::proto::Message6_M5_M8_M27_E13 value);

  public:
  // optional int32 f_42 = 60;
  bool has_f_42() const;
  void clear_f_42() ;
  ::int32_t f_42() const;
  void set_f_42(::int32_t value);

  private:
  ::int32_t _internal_f_42() const;
  void _internal_set_f_42(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E14 f_43 = 61;
  bool has_f_43() const;
  void clear_f_43() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E14 f_43() const;
  void set_f_43(::fleetbench::proto::Message6_M5_M8_M27_E14 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E14 _internal_f_43() const;
  void _internal_set_f_43(::fleetbench::proto::Message6_M5_M8_M27_E14 value);

  public:
  // optional int32 f_49 = 71;
  bool has_f_49() const;
  void clear_f_49() ;
  ::int32_t f_49() const;
  void set_f_49(::int32_t value);

  private:
  ::int32_t _internal_f_49() const;
  void _internal_set_f_49(::int32_t value);

  public:
  // optional int32 f_52 = 77;
  bool has_f_52() const;
  void clear_f_52() ;
  ::int32_t f_52() const;
  void set_f_52(::int32_t value);

  private:
  ::int32_t _internal_f_52() const;
  void _internal_set_f_52(::int32_t value);

  public:
  // optional int32 f_53 = 78;
  bool has_f_53() const;
  void clear_f_53() ;
  ::int32_t f_53() const;
  void set_f_53(::int32_t value);

  private:
  ::int32_t _internal_f_53() const;
  void _internal_set_f_53(::int32_t value);

  public:
  // optional bool f_39 = 57;
  bool has_f_39() const;
  void clear_f_39() ;
  bool f_39() const;
  void set_f_39(bool value);

  private:
  bool _internal_f_39() const;
  void _internal_set_f_39(bool value);

  public:
  // optional bool f_45 = 66;
  bool has_f_45() const;
  void clear_f_45() ;
  bool f_45() const;
  void set_f_45(bool value);

  private:
  bool _internal_f_45() const;
  void _internal_set_f_45(bool value);

  public:
  // optional bool f_50 = 72;
  bool has_f_50() const;
  void clear_f_50() ;
  bool f_50() const;
  void set_f_50(bool value);

  private:
  bool _internal_f_50() const;
  void _internal_set_f_50(bool value);

  public:
  // optional bool f_81 = 117;
  bool has_f_81() const;
  void clear_f_81() ;
  bool f_81() const;
  void set_f_81(bool value);

  private:
  bool _internal_f_81() const;
  void _internal_set_f_81(bool value);

  public:
  // optional fixed32 f_55 = 80;
  bool has_f_55() const;
  void clear_f_55() ;
  ::uint32_t f_55() const;
  void set_f_55(::uint32_t value);

  private:
  ::uint32_t _internal_f_55() const;
  void _internal_set_f_55(::uint32_t value);

  public:
  // optional int64 f_56 = 81;
  bool has_f_56() const;
  void clear_f_56() ;
  ::int64_t f_56() const;
  void set_f_56(::int64_t value);

  private:
  ::int64_t _internal_f_56() const;
  void _internal_set_f_56(::int64_t value);

  public:
  // optional int64 f_57 = 82;
  bool has_f_57() const;
  void clear_f_57() ;
  ::int64_t f_57() const;
  void set_f_57(::int64_t value);

  private:
  ::int64_t _internal_f_57() const;
  void _internal_set_f_57(::int64_t value);

  public:
  // optional double f_58 = 84;
  bool has_f_58() const;
  void clear_f_58() ;
  double f_58() const;
  void set_f_58(double value);

  private:
  double _internal_f_58() const;
  void _internal_set_f_58(double value);

  public:
  // optional int64 f_59 = 86;
  bool has_f_59() const;
  void clear_f_59() ;
  ::int64_t f_59() const;
  void set_f_59(::int64_t value);

  private:
  ::int64_t _internal_f_59() const;
  void _internal_set_f_59(::int64_t value);

  public:
  // optional float f_60 = 88;
  bool has_f_60() const;
  void clear_f_60() ;
  float f_60() const;
  void set_f_60(float value);

  private:
  float _internal_f_60() const;
  void _internal_set_f_60(float value);

  public:
  // optional float f_61 = 89;
  bool has_f_61() const;
  void clear_f_61() ;
  float f_61() const;
  void set_f_61(float value);

  private:
  float _internal_f_61() const;
  void _internal_set_f_61(float value);

  public:
  // optional uint32 f_62 = 91;
  bool has_f_62() const;
  void clear_f_62() ;
  ::uint32_t f_62() const;
  void set_f_62(::uint32_t value);

  private:
  ::uint32_t _internal_f_62() const;
  void _internal_set_f_62(::uint32_t value);

  public:
  // optional int32 f_63 = 92;
  bool has_f_63() const;
  void clear_f_63() ;
  ::int32_t f_63() const;
  void set_f_63(::int32_t value);

  private:
  ::int32_t _internal_f_63() const;
  void _internal_set_f_63(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E15 f_64 = 94;
  bool has_f_64() const;
  void clear_f_64() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E15 f_64() const;
  void set_f_64(::fleetbench::proto::Message6_M5_M8_M27_E15 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E15 _internal_f_64() const;
  void _internal_set_f_64(::fleetbench::proto::Message6_M5_M8_M27_E15 value);

  public:
  // optional int32 f_65 = 95;
  bool has_f_65() const;
  void clear_f_65() ;
  ::int32_t f_65() const;
  void set_f_65(::int32_t value);

  private:
  ::int32_t _internal_f_65() const;
  void _internal_set_f_65(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E16 f_66 = 97;
  bool has_f_66() const;
  void clear_f_66() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E16 f_66() const;
  void set_f_66(::fleetbench::proto::Message6_M5_M8_M27_E16 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E16 _internal_f_66() const;
  void _internal_set_f_66(::fleetbench::proto::Message6_M5_M8_M27_E16 value);

  public:
  // optional float f_67 = 98;
  bool has_f_67() const;
  void clear_f_67() ;
  float f_67() const;
  void set_f_67(float value);

  private:
  float _internal_f_67() const;
  void _internal_set_f_67(float value);

  public:
  // optional int64 f_68 = 99;
  bool has_f_68() const;
  void clear_f_68() ;
  ::int64_t f_68() const;
  void set_f_68(::int64_t value);

  private:
  ::int64_t _internal_f_68() const;
  void _internal_set_f_68(::int64_t value);

  public:
  // optional float f_69 = 101;
  bool has_f_69() const;
  void clear_f_69() ;
  float f_69() const;
  void set_f_69(float value);

  private:
  float _internal_f_69() const;
  void _internal_set_f_69(float value);

  public:
  // optional int32 f_70 = 102;
  bool has_f_70() const;
  void clear_f_70() ;
  ::int32_t f_70() const;
  void set_f_70(::int32_t value);

  private:
  ::int32_t _internal_f_70() const;
  void _internal_set_f_70(::int32_t value);

  public:
  // optional uint64 f_71 = 104;
  bool has_f_71() const;
  void clear_f_71() ;
  ::uint64_t f_71() const;
  void set_f_71(::uint64_t value);

  private:
  ::uint64_t _internal_f_71() const;
  void _internal_set_f_71(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E17 f_74 = 108;
  bool has_f_74() const;
  void clear_f_74() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E17 f_74() const;
  void set_f_74(::fleetbench::proto::Message6_M5_M8_M27_E17 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E17 _internal_f_74() const;
  void _internal_set_f_74(::fleetbench::proto::Message6_M5_M8_M27_E17 value);

  public:
  // optional int32 f_76 = 110;
  bool has_f_76() const;
  void clear_f_76() ;
  ::int32_t f_76() const;
  void set_f_76(::int32_t value);

  private:
  ::int32_t _internal_f_76() const;
  void _internal_set_f_76(::int32_t value);

  public:
  // optional int32 f_77 = 112;
  bool has_f_77() const;
  void clear_f_77() ;
  ::int32_t f_77() const;
  void set_f_77(::int32_t value);

  private:
  ::int32_t _internal_f_77() const;
  void _internal_set_f_77(::int32_t value);

  public:
  // optional int32 f_80 = 116;
  bool has_f_80() const;
  void clear_f_80() ;
  ::int32_t f_80() const;
  void set_f_80(::int32_t value);

  private:
  ::int32_t _internal_f_80() const;
  void _internal_set_f_80(::int32_t value);

  public:
  // optional int64 f_79 = 115;
  bool has_f_79() const;
  void clear_f_79() ;
  ::int64_t f_79() const;
  void set_f_79(::int64_t value);

  private:
  ::int64_t _internal_f_79() const;
  void _internal_set_f_79(::int64_t value);

  public:
  // optional int32 f_82 = 118;
  bool has_f_82() const;
  void clear_f_82() ;
  ::int32_t f_82() const;
  void set_f_82(::int32_t value);

  private:
  ::int32_t _internal_f_82() const;
  void _internal_set_f_82(::int32_t value);

  public:
  // optional int32 f_84 = 121;
  bool has_f_84() const;
  void clear_f_84() ;
  ::int32_t f_84() const;
  void set_f_84(::int32_t value);

  private:
  ::int32_t _internal_f_84() const;
  void _internal_set_f_84(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E18 f_85 = 123;
  bool has_f_85() const;
  void clear_f_85() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E18 f_85() const;
  void set_f_85(::fleetbench::proto::Message6_M5_M8_M27_E18 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E18 _internal_f_85() const;
  void _internal_set_f_85(::fleetbench::proto::Message6_M5_M8_M27_E18 value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E19 f_87 = 128;
  bool has_f_87() const;
  void clear_f_87() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E19 f_87() const;
  void set_f_87(::fleetbench::proto::Message6_M5_M8_M27_E19 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E19 _internal_f_87() const;
  void _internal_set_f_87(::fleetbench::proto::Message6_M5_M8_M27_E19 value);

  public:
  // optional int32 f_88 = 129;
  bool has_f_88() const;
  void clear_f_88() ;
  ::int32_t f_88() const;
  void set_f_88(::int32_t value);

  private:
  ::int32_t _internal_f_88() const;
  void _internal_set_f_88(::int32_t value);

  public:
  // optional uint32 f_91 = 133;
  bool has_f_91() const;
  void clear_f_91() ;
  ::uint32_t f_91() const;
  void set_f_91(::uint32_t value);

  private:
  ::uint32_t _internal_f_91() const;
  void _internal_set_f_91(::uint32_t value);

  public:
  // optional int64 f_92 = 135;
  bool has_f_92() const;
  void clear_f_92() ;
  ::int64_t f_92() const;
  void set_f_92(::int64_t value);

  private:
  ::int64_t _internal_f_92() const;
  void _internal_set_f_92(::int64_t value);

  public:
  // optional int64 f_93 = 137;
  bool has_f_93() const;
  void clear_f_93() ;
  ::int64_t f_93() const;
  void set_f_93(::int64_t value);

  private:
  ::int64_t _internal_f_93() const;
  void _internal_set_f_93(::int64_t value);

  public:
  // optional int64 f_96 = 141;
  bool has_f_96() const;
  void clear_f_96() ;
  ::int64_t f_96() const;
  void set_f_96(::int64_t value);

  private:
  ::int64_t _internal_f_96() const;
  void _internal_set_f_96(::int64_t value);

  public:
  // optional int32 f_98 = 144;
  bool has_f_98() const;
  void clear_f_98() ;
  ::int32_t f_98() const;
  void set_f_98(::int32_t value);

  private:
  ::int32_t _internal_f_98() const;
  void _internal_set_f_98(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E20 f_99 = 145;
  bool has_f_99() const;
  void clear_f_99() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E20 f_99() const;
  void set_f_99(::fleetbench::proto::Message6_M5_M8_M27_E20 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E20 _internal_f_99() const;
  void _internal_set_f_99(::fleetbench::proto::Message6_M5_M8_M27_E20 value);

  public:
  // optional int64 f_100 = 147;
  bool has_f_100() const;
  void clear_f_100() ;
  ::int64_t f_100() const;
  void set_f_100(::int64_t value);

  private:
  ::int64_t _internal_f_100() const;
  void _internal_set_f_100(::int64_t value);

  public:
  // optional int64 f_103 = 150;
  bool has_f_103() const;
  void clear_f_103() ;
  ::int64_t f_103() const;
  void set_f_103(::int64_t value);

  private:
  ::int64_t _internal_f_103() const;
  void _internal_set_f_103(::int64_t value);

  public:
  // optional int32 f_102 = 149;
  bool has_f_102() const;
  void clear_f_102() ;
  ::int32_t f_102() const;
  void set_f_102(::int32_t value);

  private:
  ::int32_t _internal_f_102() const;
  void _internal_set_f_102(::int32_t value);

  public:
  // optional int32 f_104 = 152;
  bool has_f_104() const;
  void clear_f_104() ;
  ::int32_t f_104() const;
  void set_f_104(::int32_t value);

  private:
  ::int32_t _internal_f_104() const;
  void _internal_set_f_104(::int32_t value);

  public:
  // optional int64 f_106 = 154;
  bool has_f_106() const;
  void clear_f_106() ;
  ::int64_t f_106() const;
  void set_f_106(::int64_t value);

  private:
  ::int64_t _internal_f_106() const;
  void _internal_set_f_106(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E21 f_105 = 153;
  bool has_f_105() const;
  void clear_f_105() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E21 f_105() const;
  void set_f_105(::fleetbench::proto::Message6_M5_M8_M27_E21 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E21 _internal_f_105() const;
  void _internal_set_f_105(::fleetbench::proto::Message6_M5_M8_M27_E21 value);

  public:
  // optional int32 f_107 = 155;
  bool has_f_107() const;
  void clear_f_107() ;
  ::int32_t f_107() const;
  void set_f_107(::int32_t value);

  private:
  ::int32_t _internal_f_107() const;
  void _internal_set_f_107(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E22 f_108 = 157;
  bool has_f_108() const;
  void clear_f_108() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E22 f_108() const;
  void set_f_108(::fleetbench::proto::Message6_M5_M8_M27_E22 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E22 _internal_f_108() const;
  void _internal_set_f_108(::fleetbench::proto::Message6_M5_M8_M27_E22 value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E23 f_109 = 160;
  bool has_f_109() const;
  void clear_f_109() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E23 f_109() const;
  void set_f_109(::fleetbench::proto::Message6_M5_M8_M27_E23 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E23 _internal_f_109() const;
  void _internal_set_f_109(::fleetbench::proto::Message6_M5_M8_M27_E23 value);

  public:
  // optional int64 f_111 = 162;
  bool has_f_111() const;
  void clear_f_111() ;
  ::int64_t f_111() const;
  void set_f_111(::int64_t value);

  private:
  ::int64_t _internal_f_111() const;
  void _internal_set_f_111(::int64_t value);

  public:
  // optional int32 f_110 = 161;
  bool has_f_110() const;
  void clear_f_110() ;
  ::int32_t f_110() const;
  void set_f_110(::int32_t value);

  private:
  ::int32_t _internal_f_110() const;
  void _internal_set_f_110(::int32_t value);

  public:
  // optional float f_112 = 166;
  bool has_f_112() const;
  void clear_f_112() ;
  float f_112() const;
  void set_f_112(float value);

  private:
  float _internal_f_112() const;
  void _internal_set_f_112(float value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E24 f_114 = 169;
  bool has_f_114() const;
  void clear_f_114() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E24 f_114() const;
  void set_f_114(::fleetbench::proto::Message6_M5_M8_M27_E24 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E24 _internal_f_114() const;
  void _internal_set_f_114(::fleetbench::proto::Message6_M5_M8_M27_E24 value);

  public:
  // optional fixed32 f_115 = 170;
  bool has_f_115() const;
  void clear_f_115() ;
  ::uint32_t f_115() const;
  void set_f_115(::uint32_t value);

  private:
  ::uint32_t _internal_f_115() const;
  void _internal_set_f_115(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E25 f_116 = 172;
  bool has_f_116() const;
  void clear_f_116() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E25 f_116() const;
  void set_f_116(::fleetbench::proto::Message6_M5_M8_M27_E25 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E25 _internal_f_116() const;
  void _internal_set_f_116(::fleetbench::proto::Message6_M5_M8_M27_E25 value);

  public:
  // optional int32 f_118 = 175;
  bool has_f_118() const;
  void clear_f_118() ;
  ::int32_t f_118() const;
  void set_f_118(::int32_t value);

  private:
  ::int32_t _internal_f_118() const;
  void _internal_set_f_118(::int32_t value);

  public:
  // optional int64 f_120 = 177;
  bool has_f_120() const;
  void clear_f_120() ;
  ::int64_t f_120() const;
  void set_f_120(::int64_t value);

  private:
  ::int64_t _internal_f_120() const;
  void _internal_set_f_120(::int64_t value);

  public:
  // optional int32 f_119 = 176;
  bool has_f_119() const;
  void clear_f_119() ;
  ::int32_t f_119() const;
  void set_f_119(::int32_t value);

  private:
  ::int32_t _internal_f_119() const;
  void _internal_set_f_119(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E26 f_123 = 182;
  bool has_f_123() const;
  void clear_f_123() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E26 f_123() const;
  void set_f_123(::fleetbench::proto::Message6_M5_M8_M27_E26 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E26 _internal_f_123() const;
  void _internal_set_f_123(::fleetbench::proto::Message6_M5_M8_M27_E26 value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E27 f_124 = 186;
  bool has_f_124() const;
  void clear_f_124() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E27 f_124() const;
  void set_f_124(::fleetbench::proto::Message6_M5_M8_M27_E27 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E27 _internal_f_124() const;
  void _internal_set_f_124(::fleetbench::proto::Message6_M5_M8_M27_E27 value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E28 f_127 = 193;
  bool has_f_127() const;
  void clear_f_127() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E28 f_127() const;
  void set_f_127(::fleetbench::proto::Message6_M5_M8_M27_E28 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E28 _internal_f_127() const;
  void _internal_set_f_127(::fleetbench::proto::Message6_M5_M8_M27_E28 value);

  public:
  // optional double f_126 = 192;
  bool has_f_126() const;
  void clear_f_126() ;
  double f_126() const;
  void set_f_126(double value);

  private:
  double _internal_f_126() const;
  void _internal_set_f_126(double value);

  public:
  // optional int64 f_128 = 194;
  bool has_f_128() const;
  void clear_f_128() ;
  ::int64_t f_128() const;
  void set_f_128(::int64_t value);

  private:
  ::int64_t _internal_f_128() const;
  void _internal_set_f_128(::int64_t value);

  public:
  // optional int64 f_129 = 196;
  bool has_f_129() const;
  void clear_f_129() ;
  ::int64_t f_129() const;
  void set_f_129(::int64_t value);

  private:
  ::int64_t _internal_f_129() const;
  void _internal_set_f_129(::int64_t value);

  public:
  // optional int32 f_130 = 197;
  bool has_f_130() const;
  void clear_f_130() ;
  ::int32_t f_130() const;
  void set_f_130(::int32_t value);

  private:
  ::int32_t _internal_f_130() const;
  void _internal_set_f_130(::int32_t value);

  public:
  // optional int32 f_133 = 202;
  bool has_f_133() const;
  void clear_f_133() ;
  ::int32_t f_133() const;
  void set_f_133(::int32_t value);

  private:
  ::int32_t _internal_f_133() const;
  void _internal_set_f_133(::int32_t value);

  public:
  // optional int64 f_132 = 200;
  bool has_f_132() const;
  void clear_f_132() ;
  ::int64_t f_132() const;
  void set_f_132(::int64_t value);

  private:
  ::int64_t _internal_f_132() const;
  void _internal_set_f_132(::int64_t value);

  public:
  // optional int64 f_134 = 203;
  bool has_f_134() const;
  void clear_f_134() ;
  ::int64_t f_134() const;
  void set_f_134(::int64_t value);

  private:
  ::int64_t _internal_f_134() const;
  void _internal_set_f_134(::int64_t value);

  public:
  // optional int64 f_135 = 204;
  bool has_f_135() const;
  void clear_f_135() ;
  ::int64_t f_135() const;
  void set_f_135(::int64_t value);

  private:
  ::int64_t _internal_f_135() const;
  void _internal_set_f_135(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E29 f_136 = 206;
  bool has_f_136() const;
  void clear_f_136() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E29 f_136() const;
  void set_f_136(::fleetbench::proto::Message6_M5_M8_M27_E29 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E29 _internal_f_136() const;
  void _internal_set_f_136(::fleetbench::proto::Message6_M5_M8_M27_E29 value);

  public:
  // optional int32 f_137 = 207;
  bool has_f_137() const;
  void clear_f_137() ;
  ::int32_t f_137() const;
  void set_f_137(::int32_t value);

  private:
  ::int32_t _internal_f_137() const;
  void _internal_set_f_137(::int32_t value);

  public:
  // optional int64 f_139 = 211;
  bool has_f_139() const;
  void clear_f_139() ;
  ::int64_t f_139() const;
  void set_f_139(::int64_t value);

  private:
  ::int64_t _internal_f_139() const;
  void _internal_set_f_139(::int64_t value);

  public:
  // optional int32 f_138 = 209;
  bool has_f_138() const;
  void clear_f_138() ;
  ::int32_t f_138() const;
  void set_f_138(::int32_t value);

  private:
  ::int32_t _internal_f_138() const;
  void _internal_set_f_138(::int32_t value);

  public:
  // optional float f_141 = 214;
  bool has_f_141() const;
  void clear_f_141() ;
  float f_141() const;
  void set_f_141(float value);

  private:
  float _internal_f_141() const;
  void _internal_set_f_141(float value);

  public:
  // optional int64 f_140 = 213;
  bool has_f_140() const;
  void clear_f_140() ;
  ::int64_t f_140() const;
  void set_f_140(::int64_t value);

  private:
  ::int64_t _internal_f_140() const;
  void _internal_set_f_140(::int64_t value);

  public:
  // optional uint32 f_143 = 218;
  bool has_f_143() const;
  void clear_f_143() ;
  ::uint32_t f_143() const;
  void set_f_143(::uint32_t value);

  private:
  ::uint32_t _internal_f_143() const;
  void _internal_set_f_143(::uint32_t value);

  public:
  // optional float f_147 = 224;
  bool has_f_147() const;
  void clear_f_147() ;
  float f_147() const;
  void set_f_147(float value);

  private:
  float _internal_f_147() const;
  void _internal_set_f_147(float value);

  public:
  // optional int64 f_146 = 223;
  bool has_f_146() const;
  void clear_f_146() ;
  ::int64_t f_146() const;
  void set_f_146(::int64_t value);

  private:
  ::int64_t _internal_f_146() const;
  void _internal_set_f_146(::int64_t value);

  public:
  // optional int32 f_149 = 226;
  bool has_f_149() const;
  void clear_f_149() ;
  ::int32_t f_149() const;
  void set_f_149(::int32_t value);

  private:
  ::int32_t _internal_f_149() const;
  void _internal_set_f_149(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E31 f_150 = 227;
  bool has_f_150() const;
  void clear_f_150() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E31 f_150() const;
  void set_f_150(::fleetbench::proto::Message6_M5_M8_M27_E31 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E31 _internal_f_150() const;
  void _internal_set_f_150(::fleetbench::proto::Message6_M5_M8_M27_E31 value);

  public:
  // optional .fleetbench.proto.Message6.M5.M8.M27.E32 f_151 = 228;
  bool has_f_151() const;
  void clear_f_151() ;
  ::fleetbench::proto::Message6_M5_M8_M27_E32 f_151() const;
  void set_f_151(::fleetbench::proto::Message6_M5_M8_M27_E32 value);

  private:
  ::fleetbench::proto::Message6_M5_M8_M27_E32 _internal_f_151() const;
  void _internal_set_f_151(::fleetbench::proto::Message6_M5_M8_M27_E32 value);

  public:
  // optional bool f_155 = 234;
  bool has_f_155() const;
  void clear_f_155() ;
  bool f_155() const;
  void set_f_155(bool value);

  private:
  bool _internal_f_155() const;
  void _internal_set_f_155(bool value);

  public:
  // optional double f_154 = 232;
  bool has_f_154() const;
  void clear_f_154() ;
  double f_154() const;
  void set_f_154(double value);

  private:
  double _internal_f_154() const;
  void _internal_set_f_154(double value);

  public:
  // optional float f_156 = 236;
  bool has_f_156() const;
  void clear_f_156() ;
  float f_156() const;
  void set_f_156(float value);

  private:
  float _internal_f_156() const;
  void _internal_set_f_156(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M8.M27)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 160, 23,
      347, 31>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M8_M27_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<5> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_30_;
    mutable ::google::protobuf::internal::CachedSize _f_30_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> f_144_;
    mutable ::google::protobuf::internal::CachedSize _f_144_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M5_M8_M27_M34 > f_237_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_15_;
    ::google::protobuf::internal::ArenaStringPtr f_17_;
    ::google::protobuf::internal::ArenaStringPtr f_18_;
    ::google::protobuf::internal::ArenaStringPtr f_20_;
    ::google::protobuf::internal::ArenaStringPtr f_21_;
    ::google::protobuf::internal::ArenaStringPtr f_29_;
    ::google::protobuf::internal::ArenaStringPtr f_37_;
    ::google::protobuf::internal::ArenaStringPtr f_38_;
    ::google::protobuf::internal::ArenaStringPtr f_40_;
    ::google::protobuf::internal::ArenaStringPtr f_44_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::google::protobuf::internal::ArenaStringPtr f_47_;
    ::google::protobuf::internal::ArenaStringPtr f_48_;
    ::google::protobuf::internal::ArenaStringPtr f_51_;
    ::google::protobuf::internal::ArenaStringPtr f_54_;
    ::google::protobuf::internal::ArenaStringPtr f_72_;
    ::google::protobuf::internal::ArenaStringPtr f_73_;
    ::google::protobuf::internal::ArenaStringPtr f_75_;
    ::google::protobuf::internal::ArenaStringPtr f_78_;
    ::google::protobuf::internal::ArenaStringPtr f_83_;
    ::google::protobuf::internal::ArenaStringPtr f_86_;
    ::google::protobuf::internal::ArenaStringPtr f_89_;
    ::google::protobuf::internal::ArenaStringPtr f_90_;
    ::google::protobuf::internal::ArenaStringPtr f_94_;
    ::google::protobuf::internal::ArenaStringPtr f_95_;
    ::google::protobuf::internal::ArenaStringPtr f_97_;
    ::google::protobuf::internal::ArenaStringPtr f_101_;
    ::google::protobuf::internal::ArenaStringPtr f_113_;
    ::google::protobuf::internal::ArenaStringPtr f_117_;
    ::google::protobuf::internal::ArenaStringPtr f_121_;
    ::google::protobuf::internal::ArenaStringPtr f_122_;
    ::google::protobuf::internal::ArenaStringPtr f_125_;
    ::google::protobuf::internal::ArenaStringPtr f_131_;
    ::google::protobuf::internal::ArenaStringPtr f_142_;
    ::google::protobuf::internal::ArenaStringPtr f_145_;
    ::google::protobuf::internal::ArenaStringPtr f_148_;
    ::google::protobuf::internal::ArenaStringPtr f_152_;
    ::google::protobuf::internal::ArenaStringPtr f_153_;
    ::google::protobuf::internal::ArenaStringPtr f_157_;
    ::fleetbench::proto::Message6_M5_M8_M27_M36* f_238_;
    ::int32_t f_0_;
    int f_5_;
    ::int64_t f_3_;
    ::int64_t f_4_;
    ::int32_t f_8_;
    float f_9_;
    ::int64_t f_10_;
    ::int64_t f_13_;
    ::int32_t f_14_;
    ::int32_t f_16_;
    ::int64_t f_19_;
    ::int64_t f_22_;
    ::int64_t f_23_;
    ::int64_t f_24_;
    ::uint64_t f_26_;
    ::uint64_t f_27_;
    ::int32_t f_25_;
    ::int32_t f_31_;
    ::int64_t f_28_;
    ::int32_t f_32_;
    ::uint32_t f_34_;
    ::int64_t f_33_;
    ::int64_t f_35_;
    ::int64_t f_36_;
    int f_41_;
    ::int32_t f_42_;
    int f_43_;
    ::int32_t f_49_;
    ::int32_t f_52_;
    ::int32_t f_53_;
    bool f_39_;
    bool f_45_;
    bool f_50_;
    bool f_81_;
    ::uint32_t f_55_;
    ::int64_t f_56_;
    ::int64_t f_57_;
    double f_58_;
    ::int64_t f_59_;
    float f_60_;
    float f_61_;
    ::uint32_t f_62_;
    ::int32_t f_63_;
    int f_64_;
    ::int32_t f_65_;
    int f_66_;
    float f_67_;
    ::int64_t f_68_;
    float f_69_;
    ::int32_t f_70_;
    ::uint64_t f_71_;
    int f_74_;
    ::int32_t f_76_;
    ::int32_t f_77_;
    ::int32_t f_80_;
    ::int64_t f_79_;
    ::int32_t f_82_;
    ::int32_t f_84_;
    int f_85_;
    int f_87_;
    ::int32_t f_88_;
    ::uint32_t f_91_;
    ::int64_t f_92_;
    ::int64_t f_93_;
    ::int64_t f_96_;
    ::int32_t f_98_;
    int f_99_;
    ::int64_t f_100_;
    ::int64_t f_103_;
    ::int32_t f_102_;
    ::int32_t f_104_;
    ::int64_t f_106_;
    int f_105_;
    ::int32_t f_107_;
    int f_108_;
    int f_109_;
    ::int64_t f_111_;
    ::int32_t f_110_;
    float f_112_;
    int f_114_;
    ::uint32_t f_115_;
    int f_116_;
    ::int32_t f_118_;
    ::int64_t f_120_;
    ::int32_t f_119_;
    int f_123_;
    int f_124_;
    int f_127_;
    double f_126_;
    ::int64_t f_128_;
    ::int64_t f_129_;
    ::int32_t f_130_;
    ::int32_t f_133_;
    ::int64_t f_132_;
    ::int64_t f_134_;
    ::int64_t f_135_;
    int f_136_;
    ::int32_t f_137_;
    ::int64_t f_139_;
    ::int32_t f_138_;
    float f_141_;
    ::int64_t f_140_;
    ::uint32_t f_143_;
    float f_147_;
    ::int64_t f_146_;
    ::int32_t f_149_;
    int f_150_;
    int f_151_;
    bool f_155_;
    double f_154_;
    float f_156_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M67 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& f_2(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>& f_2() const;
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67 > f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13_M26 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13.M26) */ {
 public:
  inline Message6_M4_M13_M26() : Message6_M4_M13_M26(nullptr) {}
  ~Message6_M4_M13_M26() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13_M26(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13_M26(const Message6_M4_M13_M26& from) : Message6_M4_M13_M26(nullptr, from) {}
  inline Message6_M4_M13_M26(Message6_M4_M13_M26&& from) noexcept
      : Message6_M4_M13_M26(nullptr, std::move(from)) {}
  inline Message6_M4_M13_M26& operator=(const Message6_M4_M13_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13_M26& operator=(Message6_M4_M13_M26&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13_M26& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13_M26* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13_M26*>(
        &_Message6_M4_M13_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(Message6_M4_M13_M26& a, Message6_M4_M13_M26& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13_M26* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13_M26* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13_M26* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13_M26>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13_M26& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13_M26& from) { Message6_M4_M13_M26::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13_M26* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13.M26"; }

 protected:
  explicit Message6_M4_M13_M26(::google::protobuf::Arena* arena);
  Message6_M4_M13_M26(::google::protobuf::Arena* arena, const Message6_M4_M13_M26& from);
  Message6_M4_M13_M26(::google::protobuf::Arena* arena, Message6_M4_M13_M26&& from) noexcept
      : Message6_M4_M13_M26(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M31 = Message6_M4_M13_M26_M31;
  using M35 = Message6_M4_M13_M26_M35;
  using E10 = Message6_M4_M13_M26_E10;
  static constexpr E10 E10_UNSPECIFIED = Message6_M4_M13_M26_E10_E10_UNSPECIFIED;
  static constexpr E10 E10_CONST_1 = Message6_M4_M13_M26_E10_E10_CONST_1;
  static constexpr E10 E10_CONST_2 = Message6_M4_M13_M26_E10_E10_CONST_2;
  static constexpr E10 E10_CONST_3 = Message6_M4_M13_M26_E10_E10_CONST_3;
  static constexpr E10 E10_CONST_4 = Message6_M4_M13_M26_E10_E10_CONST_4;
  static constexpr E10 E10_CONST_5 = Message6_M4_M13_M26_E10_E10_CONST_5;
  static inline bool E10_IsValid(int value) {
    return Message6_M4_M13_M26_E10_IsValid(value);
  }
  static constexpr E10 E10_MIN = Message6_M4_M13_M26_E10_E10_MIN;
  static constexpr E10 E10_MAX = Message6_M4_M13_M26_E10_E10_MAX;
  static constexpr int E10_ARRAYSIZE = Message6_M4_M13_M26_E10_E10_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E10_descriptor() {
    return Message6_M4_M13_M26_E10_descriptor();
  }
  template <typename T>
  static inline const std::string& E10_Name(T value) {
    return Message6_M4_M13_M26_E10_Name(value);
  }
  static inline bool E10_Parse(absl::string_view name, E10* value) {
    return Message6_M4_M13_M26_E10_Parse(name, value);
  }
  using E11 = Message6_M4_M13_M26_E11;
  static constexpr E11 E11_UNSPECIFIED = Message6_M4_M13_M26_E11_E11_UNSPECIFIED;
  static constexpr E11 E11_CONST_1 = Message6_M4_M13_M26_E11_E11_CONST_1;
  static constexpr E11 E11_CONST_2 = Message6_M4_M13_M26_E11_E11_CONST_2;
  static constexpr E11 E11_CONST_3 = Message6_M4_M13_M26_E11_E11_CONST_3;
  static constexpr E11 E11_CONST_4 = Message6_M4_M13_M26_E11_E11_CONST_4;
  static constexpr E11 E11_CONST_5 = Message6_M4_M13_M26_E11_E11_CONST_5;
  static inline bool E11_IsValid(int value) {
    return Message6_M4_M13_M26_E11_IsValid(value);
  }
  static constexpr E11 E11_MIN = Message6_M4_M13_M26_E11_E11_MIN;
  static constexpr E11 E11_MAX = Message6_M4_M13_M26_E11_E11_MAX;
  static constexpr int E11_ARRAYSIZE = Message6_M4_M13_M26_E11_E11_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E11_descriptor() {
    return Message6_M4_M13_M26_E11_descriptor();
  }
  template <typename T>
  static inline const std::string& E11_Name(T value) {
    return Message6_M4_M13_M26_E11_Name(value);
  }
  static inline bool E11_Parse(absl::string_view name, E11* value) {
    return Message6_M4_M13_M26_E11_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_8()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_3().data())));
      sizes_list.push_back(f_3().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_3().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_8()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_3().size() * sizeof(int));
      sizes.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_8()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_3()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_3().data())));
      size_t num_f_12_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_3()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_12_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 8,
    kF12FieldNumber = 14,
    kF0FieldNumber = 1,
    kF8FieldNumber = 12,
    kF2FieldNumber = 5,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M4.M13.M26.E11 f_3 = 8 [packed = true];
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  public:
  ::fleetbench::proto::Message6_M4_M13_M26_E11 f_3(int index) const;
  void set_f_3(int index, ::fleetbench::proto::Message6_M4_M13_M26_E11 value);
  void add_f_3(::fleetbench::proto::Message6_M4_M13_M26_E11 value);
  const ::google::protobuf::RepeatedField<int>& f_3() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_3() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_3();

  public:
  // repeated .fleetbench.proto.Message6.M4.M13.M26.M35 f_12 = 14;
  int f_12_size() const;
  private:
  int _internal_f_12_size() const;

  public:
  void clear_f_12() ;
  ::fleetbench::proto::Message6_M4_M13_M26_M35* mutable_f_12(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>* mutable_f_12();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>& _internal_f_12() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>* _internal_mutable_f_12();
  public:
  const ::fleetbench::proto::Message6_M4_M13_M26_M35& f_12(int index) const;
  ::fleetbench::proto::Message6_M4_M13_M26_M35* add_f_12();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>& f_12() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M4.M13.M26.M31 f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message6_M4_M13_M26_M31& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M13_M26_M31* release_f_8();
  ::fleetbench::proto::Message6_M4_M13_M26_M31* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message6_M4_M13_M26_M31* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message6_M4_M13_M26_M31* value);
  ::fleetbench::proto::Message6_M4_M13_M26_M31* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message6_M4_M13_M26_M31& _internal_f_8() const;
  ::fleetbench::proto::Message6_M4_M13_M26_M31* _internal_mutable_f_8();

  public:
  // optional int64 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M13.M26.E10 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M13_M26_E10 f_1() const;
  void set_f_1(::fleetbench::proto::Message6_M4_M13_M26_E10 value);

  private:
  ::fleetbench::proto::Message6_M4_M13_M26_E10 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message6_M4_M13_M26_E10 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13.M26)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_M26_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_3_;
    mutable ::google::protobuf::internal::CachedSize _f_3_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M13_M26_M35 > f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M4_M13_M26_M31* f_8_;
    ::int64_t f_2_;
    int f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M3_M11 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M3.M11) */ {
 public:
  inline Message6_M3_M11() : Message6_M3_M11(nullptr) {}
  ~Message6_M3_M11() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M3_M11(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M3_M11(const Message6_M3_M11& from) : Message6_M3_M11(nullptr, from) {}
  inline Message6_M3_M11(Message6_M3_M11&& from) noexcept
      : Message6_M3_M11(nullptr, std::move(from)) {}
  inline Message6_M3_M11& operator=(const Message6_M3_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M3_M11& operator=(Message6_M3_M11&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M3_M11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M3_M11* internal_default_instance() {
    return reinterpret_cast<const Message6_M3_M11*>(
        &_Message6_M3_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Message6_M3_M11& a, Message6_M3_M11& b) { a.Swap(&b); }
  inline void Swap(Message6_M3_M11* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M3_M11* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M3_M11* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M3_M11>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M3_M11& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M3_M11& from) { Message6_M3_M11::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M3_M11* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M3.M11"; }

 protected:
  explicit Message6_M3_M11(::google::protobuf::Arena* arena);
  Message6_M3_M11(::google::protobuf::Arena* arena, const Message6_M3_M11& from);
  Message6_M3_M11(::google::protobuf::Arena* arena, Message6_M3_M11&& from) noexcept
      : Message6_M3_M11(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M22 = Message6_M3_M11_M22;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message6.M3.M11.M22 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M3_M11_M22& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M3_M11_M22* release_f_2();
  ::fleetbench::proto::Message6_M3_M11_M22* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22* value);
  ::fleetbench::proto::Message6_M3_M11_M22* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M3_M11_M22& _internal_f_2() const;
  ::fleetbench::proto::Message6_M3_M11_M22* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M3.M11)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M3_M11_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M3_M11_M22* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M2) */ {
 public:
  inline Message6_M2() : Message6_M2(nullptr) {}
  ~Message6_M2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M2(const Message6_M2& from) : Message6_M2(nullptr, from) {}
  inline Message6_M2(Message6_M2&& from) noexcept
      : Message6_M2(nullptr, std::move(from)) {}
  inline Message6_M2& operator=(const Message6_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M2& operator=(Message6_M2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M2* internal_default_instance() {
    return reinterpret_cast<const Message6_M2*>(
        &_Message6_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Message6_M2& a, Message6_M2& b) { a.Swap(&b); }
  inline void Swap(Message6_M2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M2& from) { Message6_M2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M2"; }

 protected:
  explicit Message6_M2(::google::protobuf::Arena* arena);
  Message6_M2(::google::protobuf::Arena* arena, const Message6_M2& from);
  Message6_M2(::google::protobuf::Arena* arena, Message6_M2&& from) noexcept
      : Message6_M2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M10 = Message6_M2_M10;
  using M12 = Message6_M2_M12;
  using M14 = Message6_M2_M14;
  using M16 = Message6_M2_M16;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_7_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_9_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_7_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_9_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF7FieldNumber = 9,
    kF9FieldNumber = 11,
    kF1FieldNumber = 6,
    kF6FieldNumber = 7,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message6.M2.M14 f_7 = 9;
  int f_7_size() const;
  private:
  int _internal_f_7_size() const;

  public:
  void clear_f_7() ;
  ::fleetbench::proto::Message6_M2_M14* mutable_f_7(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>* mutable_f_7();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>& _internal_f_7() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>* _internal_mutable_f_7();
  public:
  const ::fleetbench::proto::Message6_M2_M14& f_7(int index) const;
  ::fleetbench::proto::Message6_M2_M14* add_f_7();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>& f_7() const;
  // repeated .fleetbench.proto.Message6.M2.M16 f_9 = 11;
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::fleetbench::proto::Message6_M2_M16* mutable_f_9(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>& _internal_f_9() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>* _internal_mutable_f_9();
  public:
  const ::fleetbench::proto::Message6_M2_M16& f_9(int index) const;
  ::fleetbench::proto::Message6_M2_M16* add_f_9();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>& f_9() const;
  // optional .fleetbench.proto.Message6.M2.M10 f_1 = 6;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M2_M10& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M2_M10* release_f_1();
  ::fleetbench::proto::Message6_M2_M10* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M2_M10* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M2_M10* value);
  ::fleetbench::proto::Message6_M2_M10* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M2_M10& _internal_f_1() const;
  ::fleetbench::proto::Message6_M2_M10* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message6.M2.M12 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message6_M2_M12& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M2_M12* release_f_6();
  ::fleetbench::proto::Message6_M2_M12* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message6_M2_M12* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message6_M2_M12* value);
  ::fleetbench::proto::Message6_M2_M12* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message6_M2_M12& _internal_f_6() const;
  ::fleetbench::proto::Message6_M2_M12* _internal_mutable_f_6();

  public:
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M2_M14 > f_7_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M2_M16 > f_9_;
    ::fleetbench::proto::Message6_M2_M10* f_1_;
    ::fleetbench::proto::Message6_M2_M12* f_6_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44_M47 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44_M47() : Message6_M1_M15_M23_M28_M42_M44_M47(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44_M47() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44_M47(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44_M47(const Message6_M1_M15_M23_M28_M42_M44_M47& from) : Message6_M1_M15_M23_M28_M42_M44_M47(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47(Message6_M1_M15_M23_M28_M42_M44_M47&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44_M47& operator=(const Message6_M1_M15_M23_M28_M42_M44_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44_M47& operator=(Message6_M1_M15_M23_M28_M42_M44_M47&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44_M47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44_M47* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44_M47*>(
        &_Message6_M1_M15_M23_M28_M42_M44_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44_M47& a, Message6_M1_M15_M23_M28_M42_M44_M47& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44_M47* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44_M47* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44_M47* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44_M47>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44_M47& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44_M47& from) { Message6_M1_M15_M23_M28_M42_M44_M47::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44_M47* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44_M47(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44_M47(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44_M47& from);
  Message6_M1_M15_M23_M28_M42_M44_M47(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44_M47&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44_M47(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M55 = Message6_M1_M15_M23_M28_M42_M44_M47_M55;
  using E63 = Message6_M1_M15_M23_M28_M42_M44_M47_E63;
  static constexpr E63 E63_UNSPECIFIED = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_UNSPECIFIED;
  static constexpr E63 E63_CONST_1 = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_1;
  static constexpr E63 E63_CONST_2 = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_2;
  static constexpr E63 E63_CONST_3 = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_3;
  static constexpr E63 E63_CONST_4 = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_4;
  static constexpr E63 E63_CONST_5 = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_CONST_5;
  static inline bool E63_IsValid(int value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_E63_IsValid(value);
  }
  static constexpr E63 E63_MIN = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_MIN;
  static constexpr E63 E63_MAX = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_MAX;
  static constexpr int E63_ARRAYSIZE = Message6_M1_M15_M23_M28_M42_M44_M47_E63_E63_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E63_descriptor() {
    return Message6_M1_M15_M23_M28_M42_M44_M47_E63_descriptor();
  }
  template <typename T>
  static inline const std::string& E63_Name(T value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_E63_Name(value);
  }
  static inline bool E63_Parse(absl::string_view name, E63* value) {
    return Message6_M1_M15_M23_M28_M42_M44_M47_E63_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(int));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.E63 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 value);
  void add_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* release_f_1();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55& _internal_f_1() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_M47_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5_M8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5.M8) */ {
 public:
  inline Message6_M5_M8() : Message6_M5_M8(nullptr) {}
  ~Message6_M5_M8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5_M8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5_M8(const Message6_M5_M8& from) : Message6_M5_M8(nullptr, from) {}
  inline Message6_M5_M8(Message6_M5_M8&& from) noexcept
      : Message6_M5_M8(nullptr, std::move(from)) {}
  inline Message6_M5_M8& operator=(const Message6_M5_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5_M8& operator=(Message6_M5_M8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5_M8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5_M8* internal_default_instance() {
    return reinterpret_cast<const Message6_M5_M8*>(
        &_Message6_M5_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 65;
  friend void swap(Message6_M5_M8& a, Message6_M5_M8& b) { a.Swap(&b); }
  inline void Swap(Message6_M5_M8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5_M8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5_M8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5_M8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5_M8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5_M8& from) { Message6_M5_M8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5_M8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5.M8"; }

 protected:
  explicit Message6_M5_M8(::google::protobuf::Arena* arena);
  Message6_M5_M8(::google::protobuf::Arena* arena, const Message6_M5_M8& from);
  Message6_M5_M8(::google::protobuf::Arena* arena, Message6_M5_M8&& from) noexcept
      : Message6_M5_M8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M27 = Message6_M5_M8_M27;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message6.M5.M8.M27 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M5_M8_M27& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M8_M27* release_f_1();
  ::fleetbench::proto::Message6_M5_M8_M27* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M5_M8_M27* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M5_M8_M27* value);
  ::fleetbench::proto::Message6_M5_M8_M27* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M5_M8_M27& _internal_f_1() const;
  ::fleetbench::proto::Message6_M5_M8_M27* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5.M8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_M8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M5_M8_M27* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M66 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& f_1(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>& f_1() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66 > f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M13 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M13) */ {
 public:
  inline Message6_M4_M13() : Message6_M4_M13(nullptr) {}
  ~Message6_M4_M13() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M13(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M13(const Message6_M4_M13& from) : Message6_M4_M13(nullptr, from) {}
  inline Message6_M4_M13(Message6_M4_M13&& from) noexcept
      : Message6_M4_M13(nullptr, std::move(from)) {}
  inline Message6_M4_M13& operator=(const Message6_M4_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M13& operator=(Message6_M4_M13&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M13& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M13* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M13*>(
        &_Message6_M4_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(Message6_M4_M13& a, Message6_M4_M13& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M13* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M13* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M13* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M13>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M13& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M13& from) { Message6_M4_M13::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M13* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M13"; }

 protected:
  explicit Message6_M4_M13(::google::protobuf::Arena* arena);
  Message6_M4_M13(::google::protobuf::Arena* arena, const Message6_M4_M13& from);
  Message6_M4_M13(::google::protobuf::Arena* arena, Message6_M4_M13&& from) noexcept
      : Message6_M4_M13(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M24 = Message6_M4_M13_M24;
  using M26 = Message6_M4_M13_M26;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message6.M4.M13.M24 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M4_M13_M24& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M13_M24* release_f_1();
  ::fleetbench::proto::Message6_M4_M13_M24* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M4_M13_M24* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M13_M24* value);
  ::fleetbench::proto::Message6_M4_M13_M24* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M4_M13_M24& _internal_f_1() const;
  ::fleetbench::proto::Message6_M4_M13_M24* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message6.M4.M13.M26 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M13_M26& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M13_M26* release_f_2();
  ::fleetbench::proto::Message6_M4_M13_M26* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26* value);
  ::fleetbench::proto::Message6_M4_M13_M26* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M13_M26& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M13_M26* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M13)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M13_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M13_M24* f_1_;
    ::fleetbench::proto::Message6_M4_M13_M26* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M3) */ {
 public:
  inline Message6_M3() : Message6_M3(nullptr) {}
  ~Message6_M3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M3(const Message6_M3& from) : Message6_M3(nullptr, from) {}
  inline Message6_M3(Message6_M3&& from) noexcept
      : Message6_M3(nullptr, std::move(from)) {}
  inline Message6_M3& operator=(const Message6_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M3& operator=(Message6_M3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M3* internal_default_instance() {
    return reinterpret_cast<const Message6_M3*>(
        &_Message6_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Message6_M3& a, Message6_M3& b) { a.Swap(&b); }
  inline void Swap(Message6_M3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M3& from) { Message6_M3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M3"; }

 protected:
  explicit Message6_M3(::google::protobuf::Arena* arena);
  Message6_M3(::google::protobuf::Arena* arena, const Message6_M3& from);
  Message6_M3(::google::protobuf::Arena* arena, Message6_M3&& from) noexcept
      : Message6_M3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M11 = Message6_M3_M11;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())), f_0().size() * sizeof(::int32_t)));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int32_t));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int32_t));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_0().data())));
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // repeated int32 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int32_t f_0(int index) const;
  void set_f_0(int index, ::int32_t value);
  void add_f_0(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M3.M11 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M3_M11& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M3_M11* release_f_2();
  ::fleetbench::proto::Message6_M3_M11* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M3_M11* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11* value);
  ::fleetbench::proto::Message6_M3_M11* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M3_M11& _internal_f_2() const;
  ::fleetbench::proto::Message6_M3_M11* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::fleetbench::proto::Message6_M3_M11* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42_M44 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42_M44() : Message6_M1_M15_M23_M28_M42_M44(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42_M44() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42_M44(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42_M44(const Message6_M1_M15_M23_M28_M42_M44& from) : Message6_M1_M15_M23_M28_M42_M44(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42_M44(Message6_M1_M15_M23_M28_M42_M44&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42_M44& operator=(const Message6_M1_M15_M23_M28_M42_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42_M44& operator=(Message6_M1_M15_M23_M28_M42_M44&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42_M44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42_M44* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42_M44*>(
        &_Message6_M1_M15_M23_M28_M42_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message6_M1_M15_M23_M28_M42_M44& a, Message6_M1_M15_M23_M28_M42_M44& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42_M44* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42_M44* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42_M44* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42_M44>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42_M44& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42_M44& from) { Message6_M1_M15_M23_M28_M42_M44::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42_M44* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42_M44(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42_M44(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42_M44& from);
  Message6_M1_M15_M23_M28_M42_M44(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42_M44&& from) noexcept
      : Message6_M1_M15_M23_M28_M42_M44(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M47 = Message6_M1_M15_M23_M28_M42_M44_M47;
  using M50 = Message6_M1_M15_M23_M28_M42_M44_M50;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
    kF4FieldNumber = 5,
  };
  // repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47& f_3(int index) const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>& f_3() const;
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* release_f_4();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50& _internal_f_4() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* _internal_mutable_f_4();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_M44_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47 > f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M5) */ {
 public:
  inline Message6_M5() : Message6_M5(nullptr) {}
  ~Message6_M5() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M5(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M5(const Message6_M5& from) : Message6_M5(nullptr, from) {}
  inline Message6_M5(Message6_M5&& from) noexcept
      : Message6_M5(nullptr, std::move(from)) {}
  inline Message6_M5& operator=(const Message6_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M5& operator=(Message6_M5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M5* internal_default_instance() {
    return reinterpret_cast<const Message6_M5*>(
        &_Message6_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 68;
  friend void swap(Message6_M5& a, Message6_M5& b) { a.Swap(&b); }
  inline void Swap(Message6_M5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M5* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M5& from) { Message6_M5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M5"; }

 protected:
  explicit Message6_M5(::google::protobuf::Arena* arena);
  Message6_M5(::google::protobuf::Arena* arena, const Message6_M5& from);
  Message6_M5(::google::protobuf::Arena* arena, Message6_M5&& from) noexcept
      : Message6_M5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M8 = Message6_M5_M8;
  using M9 = Message6_M5_M9;
  using E4 = Message6_M5_E4;
  static constexpr E4 E4_UNSPECIFIED = Message6_M5_E4_E4_UNSPECIFIED;
  static constexpr E4 E4_CONST_1 = Message6_M5_E4_E4_CONST_1;
  static constexpr E4 E4_CONST_2 = Message6_M5_E4_E4_CONST_2;
  static constexpr E4 E4_CONST_3 = Message6_M5_E4_E4_CONST_3;
  static constexpr E4 E4_CONST_4 = Message6_M5_E4_E4_CONST_4;
  static constexpr E4 E4_CONST_5 = Message6_M5_E4_E4_CONST_5;
  static inline bool E4_IsValid(int value) {
    return Message6_M5_E4_IsValid(value);
  }
  static constexpr E4 E4_MIN = Message6_M5_E4_E4_MIN;
  static constexpr E4 E4_MAX = Message6_M5_E4_E4_MAX;
  static constexpr int E4_ARRAYSIZE = Message6_M5_E4_E4_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E4_descriptor() {
    return Message6_M5_E4_descriptor();
  }
  template <typename T>
  static inline const std::string& E4_Name(T value) {
    return Message6_M5_E4_Name(value);
  }
  static inline bool E4_Parse(absl::string_view name, E4* value) {
    return Message6_M5_E4_Parse(name, value);
  }
  using E5 = Message6_M5_E5;
  static constexpr E5 E5_UNSPECIFIED = Message6_M5_E5_E5_UNSPECIFIED;
  static constexpr E5 E5_CONST_1 = Message6_M5_E5_E5_CONST_1;
  static constexpr E5 E5_CONST_2 = Message6_M5_E5_E5_CONST_2;
  static constexpr E5 E5_CONST_3 = Message6_M5_E5_E5_CONST_3;
  static constexpr E5 E5_CONST_4 = Message6_M5_E5_E5_CONST_4;
  static constexpr E5 E5_CONST_5 = Message6_M5_E5_E5_CONST_5;
  static inline bool E5_IsValid(int value) {
    return Message6_M5_E5_IsValid(value);
  }
  static constexpr E5 E5_MIN = Message6_M5_E5_E5_MIN;
  static constexpr E5 E5_MAX = Message6_M5_E5_E5_MAX;
  static constexpr int E5_ARRAYSIZE = Message6_M5_E5_E5_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E5_descriptor() {
    return Message6_M5_E5_descriptor();
  }
  template <typename T>
  static inline const std::string& E5_Name(T value) {
    return Message6_M5_E5_Name(value);
  }
  static inline bool E5_Parse(absl::string_view name, E5* value) {
    return Message6_M5_E5_Parse(name, value);
  }
  using E6 = Message6_M5_E6;
  static constexpr E6 E6_UNSPECIFIED = Message6_M5_E6_E6_UNSPECIFIED;
  static constexpr E6 E6_CONST_1 = Message6_M5_E6_E6_CONST_1;
  static constexpr E6 E6_CONST_2 = Message6_M5_E6_E6_CONST_2;
  static constexpr E6 E6_CONST_3 = Message6_M5_E6_E6_CONST_3;
  static constexpr E6 E6_CONST_4 = Message6_M5_E6_E6_CONST_4;
  static constexpr E6 E6_CONST_5 = Message6_M5_E6_E6_CONST_5;
  static inline bool E6_IsValid(int value) {
    return Message6_M5_E6_IsValid(value);
  }
  static constexpr E6 E6_MIN = Message6_M5_E6_E6_MIN;
  static constexpr E6 E6_MAX = Message6_M5_E6_E6_MAX;
  static constexpr int E6_ARRAYSIZE = Message6_M5_E6_E6_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E6_descriptor() {
    return Message6_M5_E6_descriptor();
  }
  template <typename T>
  static inline const std::string& E6_Name(T value) {
    return Message6_M5_E6_Name(value);
  }
  static inline bool E6_Parse(absl::string_view name, E6* value) {
    return Message6_M5_E6_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_9())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_8().data())), f_8().size() * sizeof(::int64_t)));
      mutable_f_12()->generate_schema(schema);
      mutable_f_13()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_9()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_8().data())));
      sizes_list.push_back(f_8().size() * sizeof(::int64_t));
      mutable_f_12()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_13()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_8().data())));
      mutable_f_12()->generate_scatter_ptrs(ptrs);
      mutable_f_13()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      sizes.push_back(end_addr - start_addr + sizeof(f_9()));
      sizes.push_back(f_1().size() * sizeof(int));
      sizes.push_back(f_8().size() * sizeof(::int64_t));
      mutable_f_12()->generate_scatter_sizes(sizes);
      mutable_f_13()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_1().data())));
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_8().data())));
      idx = mutable_f_12()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_13()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      idx = mutable_f_12()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_13()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF8FieldNumber = 11,
    kF12FieldNumber = 13,
    kF13FieldNumber = 14,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF5FieldNumber = 8,
    kF4FieldNumber = 7,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF9FieldNumber = 12,
  };
  // repeated .fleetbench.proto.Message6.M5.E4 f_1 = 2 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  public:
  ::fleetbench::proto::Message6_M5_E4 f_1(int index) const;
  void set_f_1(int index, ::fleetbench::proto::Message6_M5_E4 value);
  void add_f_1(::fleetbench::proto::Message6_M5_E4 value);
  const ::google::protobuf::RepeatedField<int>& f_1() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_1();

  public:
  // repeated int64 f_8 = 11 [packed = true];
  int f_8_size() const;
  private:
  int _internal_f_8_size() const;

  public:
  void clear_f_8() ;
  ::int64_t f_8(int index) const;
  void set_f_8(int index, ::int64_t value);
  void add_f_8(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_8() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_8();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_8() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message6.M5.M8 f_12 = 13;
  bool has_f_12() const;
  void clear_f_12() ;
  const ::fleetbench::proto::Message6_M5_M8& f_12() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M8* release_f_12();
  ::fleetbench::proto::Message6_M5_M8* mutable_f_12();
  void set_allocated_f_12(::fleetbench::proto::Message6_M5_M8* value);
  void unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message6_M5_M8* value);
  ::fleetbench::proto::Message6_M5_M8* unsafe_arena_release_f_12();

  private:
  const ::fleetbench::proto::Message6_M5_M8& _internal_f_12() const;
  ::fleetbench::proto::Message6_M5_M8* _internal_mutable_f_12();

  public:
  // optional .fleetbench.proto.Message6.M5.M9 f_13 = 14;
  bool has_f_13() const;
  void clear_f_13() ;
  const ::fleetbench::proto::Message6_M5_M9& f_13() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M5_M9* release_f_13();
  ::fleetbench::proto::Message6_M5_M9* mutable_f_13();
  void set_allocated_f_13(::fleetbench::proto::Message6_M5_M9* value);
  void unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message6_M5_M9* value);
  ::fleetbench::proto::Message6_M5_M9* unsafe_arena_release_f_13();

  private:
  const ::fleetbench::proto::Message6_M5_M9& _internal_f_13() const;
  ::fleetbench::proto::Message6_M5_M9* _internal_mutable_f_13();

  public:
  // optional uint32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M5.E5 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message6_M5_E5 f_2() const;
  void set_f_2(::fleetbench::proto::Message6_M5_E5 value);

  private:
  ::fleetbench::proto::Message6_M5_E5 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message6_M5_E5 value);

  public:
  // optional int32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional double f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  double f_7() const;
  void set_f_7(double value);

  private:
  double _internal_f_7() const;
  void _internal_set_f_7(double value);

  public:
  // optional .fleetbench.proto.Message6.M5.E6 f_9 = 12;
  bool has_f_9() const;
  void clear_f_9() ;
  ::fleetbench::proto::Message6_M5_E6 f_9() const;
  void set_f_9(::fleetbench::proto::Message6_M5_E6 value);

  private:
  ::fleetbench::proto::Message6_M5_E6 _internal_f_9() const;
  void _internal_set_f_9(::fleetbench::proto::Message6_M5_E6 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 5,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_8_;
    mutable ::google::protobuf::internal::CachedSize _f_8_cached_byte_size_;
    ::fleetbench::proto::Message6_M5_M8* f_12_;
    ::fleetbench::proto::Message6_M5_M9* f_13_;
    ::uint32_t f_0_;
    int f_2_;
    ::int32_t f_3_;
    ::int32_t f_5_;
    ::int64_t f_4_;
    ::int64_t f_6_;
    double f_7_;
    int f_9_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M65 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* release_f_1();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& _internal_f_1() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28_M42 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28.M42) */ {
 public:
  inline Message6_M1_M15_M23_M28_M42() : Message6_M1_M15_M23_M28_M42(nullptr) {}
  ~Message6_M1_M15_M23_M28_M42() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28_M42(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28_M42(const Message6_M1_M15_M23_M28_M42& from) : Message6_M1_M15_M23_M28_M42(nullptr, from) {}
  inline Message6_M1_M15_M23_M28_M42(Message6_M1_M15_M23_M28_M42&& from) noexcept
      : Message6_M1_M15_M23_M28_M42(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28_M42& operator=(const Message6_M1_M15_M23_M28_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28_M42& operator=(Message6_M1_M15_M23_M28_M42&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28_M42& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28_M42* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28_M42*>(
        &_Message6_M1_M15_M23_M28_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Message6_M1_M15_M23_M28_M42& a, Message6_M1_M15_M23_M28_M42& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28_M42* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28_M42* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28_M42* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28_M42>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28_M42& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28_M42& from) { Message6_M1_M15_M23_M28_M42::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28_M42* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28.M42"; }

 protected:
  explicit Message6_M1_M15_M23_M28_M42(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28_M42(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28_M42& from);
  Message6_M1_M15_M23_M28_M42(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28_M42&& from) noexcept
      : Message6_M1_M15_M23_M28_M42(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M44 = Message6_M1_M15_M23_M28_M42_M44;
  using M45 = Message6_M1_M15_M23_M28_M42_M45;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* release_f_2();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44& _internal_f_2() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* release_f_3();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45& _internal_f_3() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28.M42)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_M42_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* f_2_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M64 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64;
  using E82 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82;
  static constexpr E82 E82_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_UNSPECIFIED;
  static constexpr E82 E82_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_1;
  static constexpr E82 E82_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_2;
  static constexpr E82 E82_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_3;
  static constexpr E82 E82_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_4;
  static constexpr E82 E82_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_CONST_5;
  static inline bool E82_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_IsValid(value);
  }
  static constexpr E82 E82_MIN = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_MIN;
  static constexpr E82 E82_MAX = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_MAX;
  static constexpr int E82_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_E82_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E82_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_descriptor();
  }
  template <typename T>
  static inline const std::string& E82_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_Name(value);
  }
  static inline bool E82_Parse(absl::string_view name, E82* value) {
    return Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* release_f_1();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& _internal_f_1() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.E82 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 f_0() const;
  void set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23_M28 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23.M28) */ {
 public:
  inline Message6_M1_M15_M23_M28() : Message6_M1_M15_M23_M28(nullptr) {}
  ~Message6_M1_M15_M23_M28() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23_M28(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23_M28(const Message6_M1_M15_M23_M28& from) : Message6_M1_M15_M23_M28(nullptr, from) {}
  inline Message6_M1_M15_M23_M28(Message6_M1_M15_M23_M28&& from) noexcept
      : Message6_M1_M15_M23_M28(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23_M28& operator=(const Message6_M1_M15_M23_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23_M28& operator=(Message6_M1_M15_M23_M28&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23_M28& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23_M28* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23_M28*>(
        &_Message6_M1_M15_M23_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message6_M1_M15_M23_M28& a, Message6_M1_M15_M23_M28& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23_M28* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23_M28* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23_M28* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23_M28>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23_M28& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23_M28& from) { Message6_M1_M15_M23_M28::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23_M28* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23.M28"; }

 protected:
  explicit Message6_M1_M15_M23_M28(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23_M28(::google::protobuf::Arena* arena, const Message6_M1_M15_M23_M28& from);
  Message6_M1_M15_M23_M28(::google::protobuf::Arena* arena, Message6_M1_M15_M23_M28&& from) noexcept
      : Message6_M1_M15_M23_M28(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M42 = Message6_M1_M15_M23_M28_M42;
  using M43 = Message6_M1_M15_M23_M28_M43;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
  };
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* release_f_3();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42& _internal_f_3() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* release_f_4();
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M43* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M43* value);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43& _internal_f_4() const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* _internal_mutable_f_4();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23.M28)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_M28_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* f_3_;
    ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M63 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* release_f_2();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15_M23 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15.M23) */ {
 public:
  inline Message6_M1_M15_M23() : Message6_M1_M15_M23(nullptr) {}
  ~Message6_M1_M15_M23() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15_M23(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15_M23(const Message6_M1_M15_M23& from) : Message6_M1_M15_M23(nullptr, from) {}
  inline Message6_M1_M15_M23(Message6_M1_M15_M23&& from) noexcept
      : Message6_M1_M15_M23(nullptr, std::move(from)) {}
  inline Message6_M1_M15_M23& operator=(const Message6_M1_M15_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15_M23& operator=(Message6_M1_M15_M23&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15_M23& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15_M23* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15_M23*>(
        &_Message6_M1_M15_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Message6_M1_M15_M23& a, Message6_M1_M15_M23& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15_M23* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15_M23* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15_M23* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15_M23>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15_M23& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15_M23& from) { Message6_M1_M15_M23::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15_M23* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15.M23"; }

 protected:
  explicit Message6_M1_M15_M23(::google::protobuf::Arena* arena);
  Message6_M1_M15_M23(::google::protobuf::Arena* arena, const Message6_M1_M15_M23& from);
  Message6_M1_M15_M23(::google::protobuf::Arena* arena, Message6_M1_M15_M23&& from) noexcept
      : Message6_M1_M15_M23(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M28 = Message6_M1_M15_M23_M28;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message6.M1.M15.M23.M28 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M1_M15_M23_M28* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message6_M1_M15_M23_M28& f_1(int index) const;
  ::fleetbench::proto::Message6_M1_M15_M23_M28* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>& f_1() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15.M23)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_M23_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1_M15_M23_M28 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M61 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61;
  using M62 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      mutable_f_10()->generate_schema(schema);
      mutable_f_11()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      mutable_f_10()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      mutable_f_10()->generate_scatter_ptrs(ptrs);
      mutable_f_11()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_3().size());
      mutable_f_10()->generate_scatter_sizes(sizes);
      mutable_f_11()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      idx = mutable_f_10()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      idx = mutable_f_10()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 7,
    kF10FieldNumber = 11,
    kF11FieldNumber = 13,
    kF0FieldNumber = 2,
    kF2FieldNumber = 6,
    kF1FieldNumber = 5,
    kF5FieldNumber = 9,
    kF4FieldNumber = 8,
    kF6FieldNumber = 10,
  };
  // optional string f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61 f_10 = 11;
  bool has_f_10() const;
  void clear_f_10() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& f_10() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* release_f_10();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* mutable_f_10();
  void set_allocated_f_10(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* value);
  void unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* unsafe_arena_release_f_10();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& _internal_f_10() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* _internal_mutable_f_10();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62 f_11 = 13;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* release_f_11();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& _internal_f_11() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* _internal_mutable_f_11();

  public:
  // optional fixed64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int64 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional bool f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional int32 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      87, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* f_10_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* f_11_;
    ::uint64_t f_0_;
    ::int64_t f_2_;
    bool f_1_;
    ::int32_t f_5_;
    ::int64_t f_4_;
    ::int64_t f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1_M15 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1.M15) */ {
 public:
  inline Message6_M1_M15() : Message6_M1_M15(nullptr) {}
  ~Message6_M1_M15() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1_M15(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1_M15(const Message6_M1_M15& from) : Message6_M1_M15(nullptr, from) {}
  inline Message6_M1_M15(Message6_M1_M15&& from) noexcept
      : Message6_M1_M15(nullptr, std::move(from)) {}
  inline Message6_M1_M15& operator=(const Message6_M1_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1_M15& operator=(Message6_M1_M15&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1_M15& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1_M15* internal_default_instance() {
    return reinterpret_cast<const Message6_M1_M15*>(
        &_Message6_M1_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Message6_M1_M15& a, Message6_M1_M15& b) { a.Swap(&b); }
  inline void Swap(Message6_M1_M15* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1_M15* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1_M15* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1_M15>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1_M15& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1_M15& from) { Message6_M1_M15::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1_M15* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1.M15"; }

 protected:
  explicit Message6_M1_M15(::google::protobuf::Arena* arena);
  Message6_M1_M15(::google::protobuf::Arena* arena, const Message6_M1_M15& from);
  Message6_M1_M15(::google::protobuf::Arena* arena, Message6_M1_M15&& from) noexcept
      : Message6_M1_M15(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M21 = Message6_M1_M15_M21;
  using M23 = Message6_M1_M15_M23;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_4()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 6,
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional bytes f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M21 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message6_M1_M15_M21& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M21* release_f_4();
  ::fleetbench::proto::Message6_M1_M15_M21* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M21* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M21* value);
  ::fleetbench::proto::Message6_M1_M15_M21* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M21& _internal_f_4() const;
  ::fleetbench::proto::Message6_M1_M15_M21* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message6.M1.M15.M23 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message6_M1_M15_M23& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M15_M23* release_f_5();
  ::fleetbench::proto::Message6_M1_M15_M23* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message6_M1_M15_M23* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message6_M1_M15_M23* value);
  ::fleetbench::proto::Message6_M1_M15_M23* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message6_M1_M15_M23& _internal_f_5() const;
  ::fleetbench::proto::Message6_M1_M15_M23* _internal_mutable_f_5();

  public:
  // optional uint64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1.M15)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_M15_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message6_M1_M15_M21* f_4_;
    ::fleetbench::proto::Message6_M1_M15_M23* f_5_;
    ::uint64_t f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M60 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF3FieldNumber = 5,
  };
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* release_f_3();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& _internal_f_3() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      75, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M1) */ {
 public:
  inline Message6_M1() : Message6_M1(nullptr) {}
  ~Message6_M1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M1(const Message6_M1& from) : Message6_M1(nullptr, from) {}
  inline Message6_M1(Message6_M1&& from) noexcept
      : Message6_M1(nullptr, std::move(from)) {}
  inline Message6_M1& operator=(const Message6_M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M1& operator=(Message6_M1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M1* internal_default_instance() {
    return reinterpret_cast<const Message6_M1*>(
        &_Message6_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Message6_M1& a, Message6_M1& b) { a.Swap(&b); }
  inline void Swap(Message6_M1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M1& from) { Message6_M1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M1"; }

 protected:
  explicit Message6_M1(::google::protobuf::Arena* arena);
  Message6_M1(::google::protobuf::Arena* arena, const Message6_M1& from);
  Message6_M1(::google::protobuf::Arena* arena, Message6_M1&& from) noexcept
      : Message6_M1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M15 = Message6_M1_M15;
  using M17 = Message6_M1_M17;
  using E3 = Message6_M1_E3;
  static constexpr E3 E3_UNSPECIFIED = Message6_M1_E3_E3_UNSPECIFIED;
  static constexpr E3 E3_CONST_1 = Message6_M1_E3_E3_CONST_1;
  static constexpr E3 E3_CONST_2 = Message6_M1_E3_E3_CONST_2;
  static constexpr E3 E3_CONST_3 = Message6_M1_E3_E3_CONST_3;
  static constexpr E3 E3_CONST_4 = Message6_M1_E3_E3_CONST_4;
  static constexpr E3 E3_CONST_5 = Message6_M1_E3_E3_CONST_5;
  static inline bool E3_IsValid(int value) {
    return Message6_M1_E3_IsValid(value);
  }
  static constexpr E3 E3_MIN = Message6_M1_E3_E3_MIN;
  static constexpr E3 E3_MAX = Message6_M1_E3_E3_MAX;
  static constexpr int E3_ARRAYSIZE = Message6_M1_E3_E3_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E3_descriptor() {
    return Message6_M1_E3_descriptor();
  }
  template <typename T>
  static inline const std::string& E3_Name(T value) {
    return Message6_M1_E3_Name(value);
  }
  static inline bool E3_Parse(absl::string_view name, E3* value) {
    return Message6_M1_E3_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_schema(schema);
      }
      mutable_f_10()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_10()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_10()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_10()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_9_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_10()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_9_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_10()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF9FieldNumber = 10,
    kF10FieldNumber = 12,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
    kF2FieldNumber = 4,
    kF5FieldNumber = 9,
    kF4FieldNumber = 8,
  };
  // repeated .fleetbench.proto.Message6.M1.M15 f_9 = 10;
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::fleetbench::proto::Message6_M1_M15* mutable_f_9(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>& _internal_f_9() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>* _internal_mutable_f_9();
  public:
  const ::fleetbench::proto::Message6_M1_M15& f_9(int index) const;
  ::fleetbench::proto::Message6_M1_M15* add_f_9();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>& f_9() const;
  // optional .fleetbench.proto.Message6.M1.M17 f_10 = 12;
  bool has_f_10() const;
  void clear_f_10() ;
  const ::fleetbench::proto::Message6_M1_M17& f_10() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M1_M17* release_f_10();
  ::fleetbench::proto::Message6_M1_M17* mutable_f_10();
  void set_allocated_f_10(::fleetbench::proto::Message6_M1_M17* value);
  void unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message6_M1_M17* value);
  ::fleetbench::proto::Message6_M1_M17* unsafe_arena_release_f_10();

  private:
  const ::fleetbench::proto::Message6_M1_M17& _internal_f_10() const;
  ::fleetbench::proto::Message6_M1_M17* _internal_mutable_f_10();

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional int64 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M1.E3 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message6_M1_E3 f_5() const;
  void set_f_5(::fleetbench::proto::Message6_M1_E3 value);

  private:
  ::fleetbench::proto::Message6_M1_E3 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message6_M1_E3 value);

  public:
  // optional uint64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1_M15 > f_9_;
    ::fleetbench::proto::Message6_M1_M17* f_10_;
    float f_0_;
    ::int32_t f_1_;
    ::int64_t f_3_;
    ::int32_t f_2_;
    int f_5_;
    ::uint64_t f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56() : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M58 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58;
  using M59 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 6,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& f_2(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>& f_2() const;
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* release_f_3();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& _internal_f_3() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58 > f_2_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48_M51 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51() : Message6_M4_M6_M18_M29_M41_M46_M48_M51(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48_M51() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48_M51(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51(const Message6_M4_M6_M18_M29_M41_M46_M48_M51& from) : Message6_M4_M6_M18_M29_M41_M46_M48_M51(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51(Message6_M4_M6_M18_M29_M41_M46_M48_M51&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48_M51& operator=(Message6_M4_M6_M18_M29_M41_M46_M48_M51&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48_M51& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48_M51* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48_M51*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51& a, Message6_M4_M6_M18_M29_M41_M46_M48_M51& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48_M51* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48_M51* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48_M51>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48_M51& from) { Message6_M4_M6_M18_M29_M41_M46_M48_M51::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48_M51* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48_M51(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48_M51& from);
  Message6_M4_M6_M18_M29_M41_M46_M48_M51(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48_M51&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48_M51(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M56 = Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& f_1(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>& f_1() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_M51_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46_M48 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46_M48() : Message6_M4_M6_M18_M29_M41_M46_M48(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46_M48() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46_M48(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46_M48(const Message6_M4_M6_M18_M29_M41_M46_M48& from) : Message6_M4_M6_M18_M29_M41_M46_M48(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48(Message6_M4_M6_M18_M29_M41_M46_M48&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46_M48& operator=(const Message6_M4_M6_M18_M29_M41_M46_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46_M48& operator=(Message6_M4_M6_M18_M29_M41_M46_M48&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46_M48& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46_M48* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46_M48*>(
        &_Message6_M4_M6_M18_M29_M41_M46_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46_M48& a, Message6_M4_M6_M18_M29_M41_M46_M48& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46_M48* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46_M48* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46_M48* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46_M48>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46_M48& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46_M48& from) { Message6_M4_M6_M18_M29_M41_M46_M48::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46_M48* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46_M48(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46_M48(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46_M48& from);
  Message6_M4_M6_M18_M29_M41_M46_M48(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46_M48&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46_M48(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M51 = Message6_M4_M6_M18_M29_M41_M46_M48_M51;
  using M53 = Message6_M4_M6_M18_M29_M41_M46_M48_M53;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* release_f_1();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51& _internal_f_1() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* release_f_2();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_M48_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* f_1_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41_M46 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41_M46() : Message6_M4_M6_M18_M29_M41_M46(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41_M46() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41_M46(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41_M46(const Message6_M4_M6_M18_M29_M41_M46& from) : Message6_M4_M6_M18_M29_M41_M46(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41_M46(Message6_M4_M6_M18_M29_M41_M46&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41_M46& operator=(const Message6_M4_M6_M18_M29_M41_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41_M46& operator=(Message6_M4_M6_M18_M29_M41_M46&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41_M46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41_M46* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41_M46*>(
        &_Message6_M4_M6_M18_M29_M41_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Message6_M4_M6_M18_M29_M41_M46& a, Message6_M4_M6_M18_M29_M41_M46& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41_M46* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41_M46* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41_M46* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41_M46>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41_M46& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41_M46& from) { Message6_M4_M6_M18_M29_M41_M46::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41_M46* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41_M46(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41_M46(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41_M46& from);
  Message6_M4_M6_M18_M29_M41_M46(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41_M46&& from) noexcept
      : Message6_M4_M6_M18_M29_M41_M46(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M48 = Message6_M4_M6_M18_M29_M41_M46_M48;
  using E50 = Message6_M4_M6_M18_M29_M41_M46_E50;
  static constexpr E50 E50_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E50_E50_UNSPECIFIED;
  static constexpr E50 E50_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_1;
  static constexpr E50 E50_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_2;
  static constexpr E50 E50_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_3;
  static constexpr E50 E50_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_4;
  static constexpr E50 E50_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E50_E50_CONST_5;
  static inline bool E50_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E50_IsValid(value);
  }
  static constexpr E50 E50_MIN = Message6_M4_M6_M18_M29_M41_M46_E50_E50_MIN;
  static constexpr E50 E50_MAX = Message6_M4_M6_M18_M29_M41_M46_E50_E50_MAX;
  static constexpr int E50_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E50_E50_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E50_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E50_descriptor();
  }
  template <typename T>
  static inline const std::string& E50_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E50_Name(value);
  }
  static inline bool E50_Parse(absl::string_view name, E50* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E50_Parse(name, value);
  }
  using E51 = Message6_M4_M6_M18_M29_M41_M46_E51;
  static constexpr E51 E51_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E51_E51_UNSPECIFIED;
  static constexpr E51 E51_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_1;
  static constexpr E51 E51_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_2;
  static constexpr E51 E51_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_3;
  static constexpr E51 E51_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_4;
  static constexpr E51 E51_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E51_E51_CONST_5;
  static inline bool E51_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E51_IsValid(value);
  }
  static constexpr E51 E51_MIN = Message6_M4_M6_M18_M29_M41_M46_E51_E51_MIN;
  static constexpr E51 E51_MAX = Message6_M4_M6_M18_M29_M41_M46_E51_E51_MAX;
  static constexpr int E51_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E51_E51_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E51_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E51_descriptor();
  }
  template <typename T>
  static inline const std::string& E51_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E51_Name(value);
  }
  static inline bool E51_Parse(absl::string_view name, E51* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E51_Parse(name, value);
  }
  using E52 = Message6_M4_M6_M18_M29_M41_M46_E52;
  static constexpr E52 E52_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E52_E52_UNSPECIFIED;
  static constexpr E52 E52_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_1;
  static constexpr E52 E52_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_2;
  static constexpr E52 E52_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_3;
  static constexpr E52 E52_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_4;
  static constexpr E52 E52_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E52_E52_CONST_5;
  static inline bool E52_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E52_IsValid(value);
  }
  static constexpr E52 E52_MIN = Message6_M4_M6_M18_M29_M41_M46_E52_E52_MIN;
  static constexpr E52 E52_MAX = Message6_M4_M6_M18_M29_M41_M46_E52_E52_MAX;
  static constexpr int E52_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E52_E52_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E52_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E52_descriptor();
  }
  template <typename T>
  static inline const std::string& E52_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E52_Name(value);
  }
  static inline bool E52_Parse(absl::string_view name, E52* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E52_Parse(name, value);
  }
  using E53 = Message6_M4_M6_M18_M29_M41_M46_E53;
  static constexpr E53 E53_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E53_E53_UNSPECIFIED;
  static constexpr E53 E53_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_1;
  static constexpr E53 E53_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_2;
  static constexpr E53 E53_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_3;
  static constexpr E53 E53_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_4;
  static constexpr E53 E53_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E53_E53_CONST_5;
  static inline bool E53_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E53_IsValid(value);
  }
  static constexpr E53 E53_MIN = Message6_M4_M6_M18_M29_M41_M46_E53_E53_MIN;
  static constexpr E53 E53_MAX = Message6_M4_M6_M18_M29_M41_M46_E53_E53_MAX;
  static constexpr int E53_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E53_E53_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E53_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E53_descriptor();
  }
  template <typename T>
  static inline const std::string& E53_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E53_Name(value);
  }
  static inline bool E53_Parse(absl::string_view name, E53* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E53_Parse(name, value);
  }
  using E54 = Message6_M4_M6_M18_M29_M41_M46_E54;
  static constexpr E54 E54_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E54_E54_UNSPECIFIED;
  static constexpr E54 E54_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_1;
  static constexpr E54 E54_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_2;
  static constexpr E54 E54_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_3;
  static constexpr E54 E54_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_4;
  static constexpr E54 E54_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E54_E54_CONST_5;
  static inline bool E54_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E54_IsValid(value);
  }
  static constexpr E54 E54_MIN = Message6_M4_M6_M18_M29_M41_M46_E54_E54_MIN;
  static constexpr E54 E54_MAX = Message6_M4_M6_M18_M29_M41_M46_E54_E54_MAX;
  static constexpr int E54_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E54_E54_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E54_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E54_descriptor();
  }
  template <typename T>
  static inline const std::string& E54_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E54_Name(value);
  }
  static inline bool E54_Parse(absl::string_view name, E54* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E54_Parse(name, value);
  }
  using E55 = Message6_M4_M6_M18_M29_M41_M46_E55;
  static constexpr E55 E55_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E55_E55_UNSPECIFIED;
  static constexpr E55 E55_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_1;
  static constexpr E55 E55_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_2;
  static constexpr E55 E55_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_3;
  static constexpr E55 E55_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_4;
  static constexpr E55 E55_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E55_E55_CONST_5;
  static inline bool E55_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E55_IsValid(value);
  }
  static constexpr E55 E55_MIN = Message6_M4_M6_M18_M29_M41_M46_E55_E55_MIN;
  static constexpr E55 E55_MAX = Message6_M4_M6_M18_M29_M41_M46_E55_E55_MAX;
  static constexpr int E55_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E55_E55_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E55_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E55_descriptor();
  }
  template <typename T>
  static inline const std::string& E55_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E55_Name(value);
  }
  static inline bool E55_Parse(absl::string_view name, E55* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E55_Parse(name, value);
  }
  using E56 = Message6_M4_M6_M18_M29_M41_M46_E56;
  static constexpr E56 E56_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E56_E56_UNSPECIFIED;
  static constexpr E56 E56_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_1;
  static constexpr E56 E56_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_2;
  static constexpr E56 E56_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_3;
  static constexpr E56 E56_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_4;
  static constexpr E56 E56_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E56_E56_CONST_5;
  static inline bool E56_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E56_IsValid(value);
  }
  static constexpr E56 E56_MIN = Message6_M4_M6_M18_M29_M41_M46_E56_E56_MIN;
  static constexpr E56 E56_MAX = Message6_M4_M6_M18_M29_M41_M46_E56_E56_MAX;
  static constexpr int E56_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E56_E56_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E56_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E56_descriptor();
  }
  template <typename T>
  static inline const std::string& E56_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E56_Name(value);
  }
  static inline bool E56_Parse(absl::string_view name, E56* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E56_Parse(name, value);
  }
  using E57 = Message6_M4_M6_M18_M29_M41_M46_E57;
  static constexpr E57 E57_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E57_E57_UNSPECIFIED;
  static constexpr E57 E57_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_1;
  static constexpr E57 E57_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_2;
  static constexpr E57 E57_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_3;
  static constexpr E57 E57_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_4;
  static constexpr E57 E57_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E57_E57_CONST_5;
  static inline bool E57_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E57_IsValid(value);
  }
  static constexpr E57 E57_MIN = Message6_M4_M6_M18_M29_M41_M46_E57_E57_MIN;
  static constexpr E57 E57_MAX = Message6_M4_M6_M18_M29_M41_M46_E57_E57_MAX;
  static constexpr int E57_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E57_E57_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E57_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E57_descriptor();
  }
  template <typename T>
  static inline const std::string& E57_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E57_Name(value);
  }
  static inline bool E57_Parse(absl::string_view name, E57* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E57_Parse(name, value);
  }
  using E58 = Message6_M4_M6_M18_M29_M41_M46_E58;
  static constexpr E58 E58_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E58_E58_UNSPECIFIED;
  static constexpr E58 E58_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_1;
  static constexpr E58 E58_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_2;
  static constexpr E58 E58_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_3;
  static constexpr E58 E58_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_4;
  static constexpr E58 E58_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E58_E58_CONST_5;
  static inline bool E58_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E58_IsValid(value);
  }
  static constexpr E58 E58_MIN = Message6_M4_M6_M18_M29_M41_M46_E58_E58_MIN;
  static constexpr E58 E58_MAX = Message6_M4_M6_M18_M29_M41_M46_E58_E58_MAX;
  static constexpr int E58_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E58_E58_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E58_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E58_descriptor();
  }
  template <typename T>
  static inline const std::string& E58_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E58_Name(value);
  }
  static inline bool E58_Parse(absl::string_view name, E58* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E58_Parse(name, value);
  }
  using E59 = Message6_M4_M6_M18_M29_M41_M46_E59;
  static constexpr E59 E59_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E59_E59_UNSPECIFIED;
  static constexpr E59 E59_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_1;
  static constexpr E59 E59_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_2;
  static constexpr E59 E59_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_3;
  static constexpr E59 E59_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_4;
  static constexpr E59 E59_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E59_E59_CONST_5;
  static inline bool E59_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E59_IsValid(value);
  }
  static constexpr E59 E59_MIN = Message6_M4_M6_M18_M29_M41_M46_E59_E59_MIN;
  static constexpr E59 E59_MAX = Message6_M4_M6_M18_M29_M41_M46_E59_E59_MAX;
  static constexpr int E59_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E59_E59_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E59_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E59_descriptor();
  }
  template <typename T>
  static inline const std::string& E59_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E59_Name(value);
  }
  static inline bool E59_Parse(absl::string_view name, E59* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E59_Parse(name, value);
  }
  using E60 = Message6_M4_M6_M18_M29_M41_M46_E60;
  static constexpr E60 E60_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E60_E60_UNSPECIFIED;
  static constexpr E60 E60_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_1;
  static constexpr E60 E60_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_2;
  static constexpr E60 E60_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_3;
  static constexpr E60 E60_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_4;
  static constexpr E60 E60_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E60_E60_CONST_5;
  static inline bool E60_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E60_IsValid(value);
  }
  static constexpr E60 E60_MIN = Message6_M4_M6_M18_M29_M41_M46_E60_E60_MIN;
  static constexpr E60 E60_MAX = Message6_M4_M6_M18_M29_M41_M46_E60_E60_MAX;
  static constexpr int E60_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E60_E60_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E60_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E60_descriptor();
  }
  template <typename T>
  static inline const std::string& E60_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E60_Name(value);
  }
  static inline bool E60_Parse(absl::string_view name, E60* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E60_Parse(name, value);
  }
  using E61 = Message6_M4_M6_M18_M29_M41_M46_E61;
  static constexpr E61 E61_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E61_E61_UNSPECIFIED;
  static constexpr E61 E61_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_1;
  static constexpr E61 E61_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_2;
  static constexpr E61 E61_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_3;
  static constexpr E61 E61_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_4;
  static constexpr E61 E61_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E61_E61_CONST_5;
  static inline bool E61_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E61_IsValid(value);
  }
  static constexpr E61 E61_MIN = Message6_M4_M6_M18_M29_M41_M46_E61_E61_MIN;
  static constexpr E61 E61_MAX = Message6_M4_M6_M18_M29_M41_M46_E61_E61_MAX;
  static constexpr int E61_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E61_E61_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E61_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E61_descriptor();
  }
  template <typename T>
  static inline const std::string& E61_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E61_Name(value);
  }
  static inline bool E61_Parse(absl::string_view name, E61* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E61_Parse(name, value);
  }
  using E62 = Message6_M4_M6_M18_M29_M41_M46_E62;
  static constexpr E62 E62_UNSPECIFIED = Message6_M4_M6_M18_M29_M41_M46_E62_E62_UNSPECIFIED;
  static constexpr E62 E62_CONST_1 = Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_1;
  static constexpr E62 E62_CONST_2 = Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_2;
  static constexpr E62 E62_CONST_3 = Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_3;
  static constexpr E62 E62_CONST_4 = Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_4;
  static constexpr E62 E62_CONST_5 = Message6_M4_M6_M18_M29_M41_M46_E62_E62_CONST_5;
  static inline bool E62_IsValid(int value) {
    return Message6_M4_M6_M18_M29_M41_M46_E62_IsValid(value);
  }
  static constexpr E62 E62_MIN = Message6_M4_M6_M18_M29_M41_M46_E62_E62_MIN;
  static constexpr E62 E62_MAX = Message6_M4_M6_M18_M29_M41_M46_E62_E62_MAX;
  static constexpr int E62_ARRAYSIZE = Message6_M4_M6_M18_M29_M41_M46_E62_E62_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E62_descriptor() {
    return Message6_M4_M6_M18_M29_M41_M46_E62_descriptor();
  }
  template <typename T>
  static inline const std::string& E62_Name(T value) {
    return Message6_M4_M6_M18_M29_M41_M46_E62_Name(value);
  }
  static inline bool E62_Parse(absl::string_view name, E62* value) {
    return Message6_M4_M6_M18_M29_M41_M46_E62_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_64_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_64())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())), f_1().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_51().data())), f_51().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())), f_15().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())), f_20().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())), f_22().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())), f_31().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())), f_33().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35().c_str())), f_35().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())), f_52().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())), f_56().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_63().c_str())), f_63().size()));
      mutable_f_93()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_64_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_64()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_51().data())));
      sizes_list.push_back(f_51().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      sizes_list.push_back(f_15().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      sizes_list.push_back(f_20().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      sizes_list.push_back(f_22().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      sizes_list.push_back(f_31().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      sizes_list.push_back(f_33().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35().c_str())));
      sizes_list.push_back(f_35().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      sizes_list.push_back(f_52().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      sizes_list.push_back(f_56().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_63().c_str())));
      sizes_list.push_back(f_63().size());
      mutable_f_93()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_64_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_51().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_63().c_str())));
      mutable_f_93()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_64_);
      sizes.push_back(end_addr - start_addr + sizeof(f_64()));
      sizes.push_back(f_0().size() * sizeof(int));
      sizes.push_back(f_1().size() * sizeof(::int32_t));
      sizes.push_back(f_51().size() * sizeof(::int64_t));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_12().size());
      sizes.push_back(f_15().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_20().size());
      sizes.push_back(f_22().size());
      sizes.push_back(f_31().size());
      sizes.push_back(f_33().size());
      sizes.push_back(f_35().size());
      sizes.push_back(f_46().size());
      sizes.push_back(f_52().size());
      sizes.push_back(f_56().size());
      sizes.push_back(f_63().size());
      mutable_f_93()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_64_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      mutable_f_51()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_51().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_20().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_33().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_35(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_35().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_56(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_56().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_63(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_63().c_str())));
      }
      idx = mutable_f_93()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_51()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_20(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_33(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_35(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_56(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_63(std::move(tmp_str));
        }
      }
      idx = mutable_f_93()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF51FieldNumber = 76,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
    kF12FieldNumber = 19,
    kF15FieldNumber = 22,
    kF16FieldNumber = 23,
    kF20FieldNumber = 29,
    kF22FieldNumber = 32,
    kF31FieldNumber = 43,
    kF33FieldNumber = 47,
    kF35FieldNumber = 50,
    kF46FieldNumber = 69,
    kF52FieldNumber = 77,
    kF56FieldNumber = 84,
    kF63FieldNumber = 92,
    kF93FieldNumber = 95,
    kF5FieldNumber = 8,
    kF7FieldNumber = 11,
    kF6FieldNumber = 10,
    kF8FieldNumber = 12,
    kF9FieldNumber = 14,
    kF11FieldNumber = 18,
    kF10FieldNumber = 17,
    kF13FieldNumber = 20,
    kF14FieldNumber = 21,
    kF17FieldNumber = 24,
    kF18FieldNumber = 26,
    kF19FieldNumber = 27,
    kF21FieldNumber = 30,
    kF24FieldNumber = 34,
    kF23FieldNumber = 33,
    kF27FieldNumber = 37,
    kF25FieldNumber = 35,
    kF28FieldNumber = 39,
    kF29FieldNumber = 40,
    kF30FieldNumber = 42,
    kF32FieldNumber = 45,
    kF26FieldNumber = 36,
    kF41FieldNumber = 60,
    kF34FieldNumber = 49,
    kF37FieldNumber = 53,
    kF38FieldNumber = 55,
    kF36FieldNumber = 52,
    kF40FieldNumber = 59,
    kF39FieldNumber = 56,
    kF43FieldNumber = 64,
    kF44FieldNumber = 65,
    kF42FieldNumber = 63,
    kF47FieldNumber = 70,
    kF45FieldNumber = 68,
    kF49FieldNumber = 73,
    kF50FieldNumber = 75,
    kF48FieldNumber = 71,
    kF54FieldNumber = 79,
    kF53FieldNumber = 78,
    kF55FieldNumber = 81,
    kF57FieldNumber = 85,
    kF59FieldNumber = 87,
    kF58FieldNumber = 86,
    kF60FieldNumber = 88,
    kF61FieldNumber = 90,
    kF62FieldNumber = 91,
    kF64FieldNumber = 93,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E50 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 value);
  void add_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // repeated int32 f_1 = 3 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int32_t f_1(int index) const;
  void set_f_1(int index, ::int32_t value);
  void add_f_1(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_1();

  public:
  // repeated int64 f_51 = 76 [packed = true];
  int f_51_size() const;
  private:
  int _internal_f_51_size() const;

  public:
  void clear_f_51() ;
  ::int64_t f_51(int index) const;
  void set_f_51(int index, ::int64_t value);
  void add_f_51(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_51() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_51();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_51() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_51();

  public:
  // optional string f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional string f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional bytes f_12 = 19;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional string f_15 = 22;
  bool has_f_15() const;
  void clear_f_15() ;
  const std::string& f_15() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_15(Arg_&& arg, Args_... args);
  std::string* mutable_f_15();
  PROTOBUF_NODISCARD std::string* release_f_15();
  void set_allocated_f_15(std::string* value);

  private:
  const std::string& _internal_f_15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_15(
      const std::string& value);
  std::string* _internal_mutable_f_15();

  public:
  // optional bytes f_16 = 23;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_20 = 29;
  bool has_f_20() const;
  void clear_f_20() ;
  const std::string& f_20() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_20(Arg_&& arg, Args_... args);
  std::string* mutable_f_20();
  PROTOBUF_NODISCARD std::string* release_f_20();
  void set_allocated_f_20(std::string* value);

  private:
  const std::string& _internal_f_20() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_20(
      const std::string& value);
  std::string* _internal_mutable_f_20();

  public:
  // optional bytes f_22 = 32;
  bool has_f_22() const;
  void clear_f_22() ;
  const std::string& f_22() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_22(Arg_&& arg, Args_... args);
  std::string* mutable_f_22();
  PROTOBUF_NODISCARD std::string* release_f_22();
  void set_allocated_f_22(std::string* value);

  private:
  const std::string& _internal_f_22() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_22(
      const std::string& value);
  std::string* _internal_mutable_f_22();

  public:
  // optional string f_31 = 43;
  bool has_f_31() const;
  void clear_f_31() ;
  const std::string& f_31() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_31(Arg_&& arg, Args_... args);
  std::string* mutable_f_31();
  PROTOBUF_NODISCARD std::string* release_f_31();
  void set_allocated_f_31(std::string* value);

  private:
  const std::string& _internal_f_31() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_31(
      const std::string& value);
  std::string* _internal_mutable_f_31();

  public:
  // optional string f_33 = 47;
  bool has_f_33() const;
  void clear_f_33() ;
  const std::string& f_33() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_33(Arg_&& arg, Args_... args);
  std::string* mutable_f_33();
  PROTOBUF_NODISCARD std::string* release_f_33();
  void set_allocated_f_33(std::string* value);

  private:
  const std::string& _internal_f_33() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_33(
      const std::string& value);
  std::string* _internal_mutable_f_33();

  public:
  // optional string f_35 = 50;
  bool has_f_35() const;
  void clear_f_35() ;
  const std::string& f_35() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_35(Arg_&& arg, Args_... args);
  std::string* mutable_f_35();
  PROTOBUF_NODISCARD std::string* release_f_35();
  void set_allocated_f_35(std::string* value);

  private:
  const std::string& _internal_f_35() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_35(
      const std::string& value);
  std::string* _internal_mutable_f_35();

  public:
  // optional string f_46 = 69;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional bytes f_52 = 77;
  bool has_f_52() const;
  void clear_f_52() ;
  const std::string& f_52() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_52(Arg_&& arg, Args_... args);
  std::string* mutable_f_52();
  PROTOBUF_NODISCARD std::string* release_f_52();
  void set_allocated_f_52(std::string* value);

  private:
  const std::string& _internal_f_52() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_52(
      const std::string& value);
  std::string* _internal_mutable_f_52();

  public:
  // optional string f_56 = 84;
  bool has_f_56() const;
  void clear_f_56() ;
  const std::string& f_56() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_56(Arg_&& arg, Args_... args);
  std::string* mutable_f_56();
  PROTOBUF_NODISCARD std::string* release_f_56();
  void set_allocated_f_56(std::string* value);

  private:
  const std::string& _internal_f_56() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_56(
      const std::string& value);
  std::string* _internal_mutable_f_56();

  public:
  // optional string f_63 = 92;
  bool has_f_63() const;
  void clear_f_63() ;
  const std::string& f_63() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_63(Arg_&& arg, Args_... args);
  std::string* mutable_f_63();
  PROTOBUF_NODISCARD std::string* release_f_63();
  void set_allocated_f_63(std::string* value);

  private:
  const std::string& _internal_f_63() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_63(
      const std::string& value);
  std::string* _internal_mutable_f_63();

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48 f_93 = 95;
  bool has_f_93() const;
  void clear_f_93() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48& f_93() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* release_f_93();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* mutable_f_93();
  void set_allocated_f_93(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* value);
  void unsafe_arena_set_allocated_f_93(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* unsafe_arena_release_f_93();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48& _internal_f_93() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* _internal_mutable_f_93();

  public:
  // optional int64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional uint64 f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  ::uint64_t f_7() const;
  void set_f_7(::uint64_t value);

  private:
  ::uint64_t _internal_f_7() const;
  void _internal_set_f_7(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E51 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 f_6() const;
  void set_f_6(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E52 f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 f_8() const;
  void set_f_8(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 value);

  public:
  // optional int32 f_9 = 14;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int32_t f_9() const;
  void set_f_9(::int32_t value);

  private:
  ::int32_t _internal_f_9() const;
  void _internal_set_f_9(::int32_t value);

  public:
  // optional uint32 f_11 = 18;
  bool has_f_11() const;
  void clear_f_11() ;
  ::uint32_t f_11() const;
  void set_f_11(::uint32_t value);

  private:
  ::uint32_t _internal_f_11() const;
  void _internal_set_f_11(::uint32_t value);

  public:
  // optional uint64 f_10 = 17;
  bool has_f_10() const;
  void clear_f_10() ;
  ::uint64_t f_10() const;
  void set_f_10(::uint64_t value);

  private:
  ::uint64_t _internal_f_10() const;
  void _internal_set_f_10(::uint64_t value);

  public:
  // optional int64 f_13 = 20;
  bool has_f_13() const;
  void clear_f_13() ;
  ::int64_t f_13() const;
  void set_f_13(::int64_t value);

  private:
  ::int64_t _internal_f_13() const;
  void _internal_set_f_13(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E53 f_14 = 21;
  bool has_f_14() const;
  void clear_f_14() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 f_14() const;
  void set_f_14(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 _internal_f_14() const;
  void _internal_set_f_14(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E54 f_17 = 24;
  bool has_f_17() const;
  void clear_f_17() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 f_17() const;
  void set_f_17(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 _internal_f_17() const;
  void _internal_set_f_17(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 value);

  public:
  // optional float f_18 = 26;
  bool has_f_18() const;
  void clear_f_18() ;
  float f_18() const;
  void set_f_18(float value);

  private:
  float _internal_f_18() const;
  void _internal_set_f_18(float value);

  public:
  // optional float f_19 = 27;
  bool has_f_19() const;
  void clear_f_19() ;
  float f_19() const;
  void set_f_19(float value);

  private:
  float _internal_f_19() const;
  void _internal_set_f_19(float value);

  public:
  // optional float f_21 = 30;
  bool has_f_21() const;
  void clear_f_21() ;
  float f_21() const;
  void set_f_21(float value);

  private:
  float _internal_f_21() const;
  void _internal_set_f_21(float value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E55 f_24 = 34;
  bool has_f_24() const;
  void clear_f_24() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 f_24() const;
  void set_f_24(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 _internal_f_24() const;
  void _internal_set_f_24(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 value);

  public:
  // optional int64 f_23 = 33;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int64_t f_23() const;
  void set_f_23(::int64_t value);

  private:
  ::int64_t _internal_f_23() const;
  void _internal_set_f_23(::int64_t value);

  public:
  // optional int64 f_27 = 37;
  bool has_f_27() const;
  void clear_f_27() ;
  ::int64_t f_27() const;
  void set_f_27(::int64_t value);

  private:
  ::int64_t _internal_f_27() const;
  void _internal_set_f_27(::int64_t value);

  public:
  // optional float f_25 = 35;
  bool has_f_25() const;
  void clear_f_25() ;
  float f_25() const;
  void set_f_25(float value);

  private:
  float _internal_f_25() const;
  void _internal_set_f_25(float value);

  public:
  // optional int32 f_28 = 39;
  bool has_f_28() const;
  void clear_f_28() ;
  ::int32_t f_28() const;
  void set_f_28(::int32_t value);

  private:
  ::int32_t _internal_f_28() const;
  void _internal_set_f_28(::int32_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E56 f_29 = 40;
  bool has_f_29() const;
  void clear_f_29() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 f_29() const;
  void set_f_29(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 _internal_f_29() const;
  void _internal_set_f_29(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E57 f_30 = 42;
  bool has_f_30() const;
  void clear_f_30() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 f_30() const;
  void set_f_30(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 _internal_f_30() const;
  void _internal_set_f_30(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 value);

  public:
  // optional float f_32 = 45;
  bool has_f_32() const;
  void clear_f_32() ;
  float f_32() const;
  void set_f_32(float value);

  private:
  float _internal_f_32() const;
  void _internal_set_f_32(float value);

  public:
  // optional bool f_26 = 36;
  bool has_f_26() const;
  void clear_f_26() ;
  bool f_26() const;
  void set_f_26(bool value);

  private:
  bool _internal_f_26() const;
  void _internal_set_f_26(bool value);

  public:
  // optional bool f_41 = 60;
  bool has_f_41() const;
  void clear_f_41() ;
  bool f_41() const;
  void set_f_41(bool value);

  private:
  bool _internal_f_41() const;
  void _internal_set_f_41(bool value);

  public:
  // optional int64 f_34 = 49;
  bool has_f_34() const;
  void clear_f_34() ;
  ::int64_t f_34() const;
  void set_f_34(::int64_t value);

  private:
  ::int64_t _internal_f_34() const;
  void _internal_set_f_34(::int64_t value);

  public:
  // optional double f_37 = 53;
  bool has_f_37() const;
  void clear_f_37() ;
  double f_37() const;
  void set_f_37(double value);

  private:
  double _internal_f_37() const;
  void _internal_set_f_37(double value);

  public:
  // optional uint64 f_38 = 55;
  bool has_f_38() const;
  void clear_f_38() ;
  ::uint64_t f_38() const;
  void set_f_38(::uint64_t value);

  private:
  ::uint64_t _internal_f_38() const;
  void _internal_set_f_38(::uint64_t value);

  public:
  // optional fixed32 f_36 = 52;
  bool has_f_36() const;
  void clear_f_36() ;
  ::uint32_t f_36() const;
  void set_f_36(::uint32_t value);

  private:
  ::uint32_t _internal_f_36() const;
  void _internal_set_f_36(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E58 f_40 = 59;
  bool has_f_40() const;
  void clear_f_40() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 f_40() const;
  void set_f_40(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 _internal_f_40() const;
  void _internal_set_f_40(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 value);

  public:
  // optional double f_39 = 56;
  bool has_f_39() const;
  void clear_f_39() ;
  double f_39() const;
  void set_f_39(double value);

  private:
  double _internal_f_39() const;
  void _internal_set_f_39(double value);

  public:
  // optional int64 f_43 = 64;
  bool has_f_43() const;
  void clear_f_43() ;
  ::int64_t f_43() const;
  void set_f_43(::int64_t value);

  private:
  ::int64_t _internal_f_43() const;
  void _internal_set_f_43(::int64_t value);

  public:
  // optional int64 f_44 = 65;
  bool has_f_44() const;
  void clear_f_44() ;
  ::int64_t f_44() const;
  void set_f_44(::int64_t value);

  private:
  ::int64_t _internal_f_44() const;
  void _internal_set_f_44(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E59 f_42 = 63;
  bool has_f_42() const;
  void clear_f_42() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 f_42() const;
  void set_f_42(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 _internal_f_42() const;
  void _internal_set_f_42(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 value);

  public:
  // optional float f_47 = 70;
  bool has_f_47() const;
  void clear_f_47() ;
  float f_47() const;
  void set_f_47(float value);

  private:
  float _internal_f_47() const;
  void _internal_set_f_47(float value);

  public:
  // optional int64 f_45 = 68;
  bool has_f_45() const;
  void clear_f_45() ;
  ::int64_t f_45() const;
  void set_f_45(::int64_t value);

  private:
  ::int64_t _internal_f_45() const;
  void _internal_set_f_45(::int64_t value);

  public:
  // optional uint64 f_49 = 73;
  bool has_f_49() const;
  void clear_f_49() ;
  ::uint64_t f_49() const;
  void set_f_49(::uint64_t value);

  private:
  ::uint64_t _internal_f_49() const;
  void _internal_set_f_49(::uint64_t value);

  public:
  // optional int64 f_50 = 75;
  bool has_f_50() const;
  void clear_f_50() ;
  ::int64_t f_50() const;
  void set_f_50(::int64_t value);

  private:
  ::int64_t _internal_f_50() const;
  void _internal_set_f_50(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E60 f_48 = 71;
  bool has_f_48() const;
  void clear_f_48() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 f_48() const;
  void set_f_48(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 _internal_f_48() const;
  void _internal_set_f_48(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E61 f_54 = 79;
  bool has_f_54() const;
  void clear_f_54() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 f_54() const;
  void set_f_54(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 _internal_f_54() const;
  void _internal_set_f_54(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 value);

  public:
  // optional int64 f_53 = 78;
  bool has_f_53() const;
  void clear_f_53() ;
  ::int64_t f_53() const;
  void set_f_53(::int64_t value);

  private:
  ::int64_t _internal_f_53() const;
  void _internal_set_f_53(::int64_t value);

  public:
  // optional double f_55 = 81;
  bool has_f_55() const;
  void clear_f_55() ;
  double f_55() const;
  void set_f_55(double value);

  private:
  double _internal_f_55() const;
  void _internal_set_f_55(double value);

  public:
  // optional int64 f_57 = 85;
  bool has_f_57() const;
  void clear_f_57() ;
  ::int64_t f_57() const;
  void set_f_57(::int64_t value);

  private:
  ::int64_t _internal_f_57() const;
  void _internal_set_f_57(::int64_t value);

  public:
  // optional int64 f_59 = 87;
  bool has_f_59() const;
  void clear_f_59() ;
  ::int64_t f_59() const;
  void set_f_59(::int64_t value);

  private:
  ::int64_t _internal_f_59() const;
  void _internal_set_f_59(::int64_t value);

  public:
  // optional fixed32 f_58 = 86;
  bool has_f_58() const;
  void clear_f_58() ;
  ::uint32_t f_58() const;
  void set_f_58(::uint32_t value);

  private:
  ::uint32_t _internal_f_58() const;
  void _internal_set_f_58(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E62 f_60 = 88;
  bool has_f_60() const;
  void clear_f_60() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 f_60() const;
  void set_f_60(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 value);

  private:
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 _internal_f_60() const;
  void _internal_set_f_60(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 value);

  public:
  // optional int64 f_61 = 90;
  bool has_f_61() const;
  void clear_f_61() ;
  ::int64_t f_61() const;
  void set_f_61(::int64_t value);

  private:
  ::int64_t _internal_f_61() const;
  void _internal_set_f_61(::int64_t value);

  public:
  // optional fixed64 f_62 = 91;
  bool has_f_62() const;
  void clear_f_62() ;
  ::uint64_t f_62() const;
  void set_f_62(::uint64_t value);

  private:
  ::uint64_t _internal_f_62() const;
  void _internal_set_f_62(::uint64_t value);

  public:
  // optional int64 f_64 = 93;
  bool has_f_64() const;
  void clear_f_64() ;
  ::int64_t f_64() const;
  void set_f_64(::int64_t value);

  private:
  ::int64_t _internal_f_64() const;
  void _internal_set_f_64(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 66, 14,
      161, 13>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_M46_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_51_;
    mutable ::google::protobuf::internal::CachedSize _f_51_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_15_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_20_;
    ::google::protobuf::internal::ArenaStringPtr f_22_;
    ::google::protobuf::internal::ArenaStringPtr f_31_;
    ::google::protobuf::internal::ArenaStringPtr f_33_;
    ::google::protobuf::internal::ArenaStringPtr f_35_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::google::protobuf::internal::ArenaStringPtr f_52_;
    ::google::protobuf::internal::ArenaStringPtr f_56_;
    ::google::protobuf::internal::ArenaStringPtr f_63_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* f_93_;
    ::int64_t f_5_;
    ::uint64_t f_7_;
    int f_6_;
    int f_8_;
    ::int32_t f_9_;
    ::uint32_t f_11_;
    ::uint64_t f_10_;
    ::int64_t f_13_;
    int f_14_;
    int f_17_;
    float f_18_;
    float f_19_;
    float f_21_;
    int f_24_;
    ::int64_t f_23_;
    ::int64_t f_27_;
    float f_25_;
    ::int32_t f_28_;
    int f_29_;
    int f_30_;
    float f_32_;
    bool f_26_;
    bool f_41_;
    ::int64_t f_34_;
    double f_37_;
    ::uint64_t f_38_;
    ::uint32_t f_36_;
    int f_40_;
    double f_39_;
    ::int64_t f_43_;
    ::int64_t f_44_;
    int f_42_;
    float f_47_;
    ::int64_t f_45_;
    ::uint64_t f_49_;
    ::int64_t f_50_;
    int f_48_;
    int f_54_;
    ::int64_t f_53_;
    double f_55_;
    ::int64_t f_57_;
    ::int64_t f_59_;
    ::uint32_t f_58_;
    int f_60_;
    ::int64_t f_61_;
    ::uint64_t f_62_;
    ::int64_t f_64_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29_M41 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29.M41) */ {
 public:
  inline Message6_M4_M6_M18_M29_M41() : Message6_M4_M6_M18_M29_M41(nullptr) {}
  ~Message6_M4_M6_M18_M29_M41() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29_M41(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29_M41(const Message6_M4_M6_M18_M29_M41& from) : Message6_M4_M6_M18_M29_M41(nullptr, from) {}
  inline Message6_M4_M6_M18_M29_M41(Message6_M4_M6_M18_M29_M41&& from) noexcept
      : Message6_M4_M6_M18_M29_M41(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29_M41& operator=(const Message6_M4_M6_M18_M29_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29_M41& operator=(Message6_M4_M6_M18_M29_M41&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29_M41& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29_M41* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29_M41*>(
        &_Message6_M4_M6_M18_M29_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Message6_M4_M6_M18_M29_M41& a, Message6_M4_M6_M18_M29_M41& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29_M41* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29_M41* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29_M41* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29_M41>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29_M41& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29_M41& from) { Message6_M4_M6_M18_M29_M41::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29_M41* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29.M41"; }

 protected:
  explicit Message6_M4_M6_M18_M29_M41(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29_M41(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29_M41& from);
  Message6_M4_M6_M18_M29_M41(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29_M41&& from) noexcept
      : Message6_M4_M6_M18_M29_M41(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M46 = Message6_M4_M6_M18_M29_M41_M46;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* release_f_2();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29.M41)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_M41_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18_M29 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18.M29) */ {
 public:
  inline Message6_M4_M6_M18_M29() : Message6_M4_M6_M18_M29(nullptr) {}
  ~Message6_M4_M6_M18_M29() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18_M29(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18_M29(const Message6_M4_M6_M18_M29& from) : Message6_M4_M6_M18_M29(nullptr, from) {}
  inline Message6_M4_M6_M18_M29(Message6_M4_M6_M18_M29&& from) noexcept
      : Message6_M4_M6_M18_M29(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18_M29& operator=(const Message6_M4_M6_M18_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18_M29& operator=(Message6_M4_M6_M18_M29&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18_M29& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18_M29* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18_M29*>(
        &_Message6_M4_M6_M18_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Message6_M4_M6_M18_M29& a, Message6_M4_M6_M18_M29& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18_M29* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18_M29* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18_M29* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18_M29>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18_M29& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18_M29& from) { Message6_M4_M6_M18_M29::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18_M29* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18.M29"; }

 protected:
  explicit Message6_M4_M6_M18_M29(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18_M29(::google::protobuf::Arena* arena, const Message6_M4_M6_M18_M29& from);
  Message6_M4_M6_M18_M29(::google::protobuf::Arena* arena, Message6_M4_M6_M18_M29&& from) noexcept
      : Message6_M4_M6_M18_M29(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M38 = Message6_M4_M6_M18_M29_M38;
  using M41 = Message6_M4_M6_M18_M29_M41;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41 f_3 = 5;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41& f_3(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>& f_3() const;
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29.M38 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* release_f_2();
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M38* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M38* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18.M29)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_M29_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M18_M29_M41 > f_3_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6_M18 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6.M18) */ {
 public:
  inline Message6_M4_M6_M18() : Message6_M4_M6_M18(nullptr) {}
  ~Message6_M4_M6_M18() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6_M18(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6_M18(const Message6_M4_M6_M18& from) : Message6_M4_M6_M18(nullptr, from) {}
  inline Message6_M4_M6_M18(Message6_M4_M6_M18&& from) noexcept
      : Message6_M4_M6_M18(nullptr, std::move(from)) {}
  inline Message6_M4_M6_M18& operator=(const Message6_M4_M6_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6_M18& operator=(Message6_M4_M6_M18&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6_M18& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6_M18* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6_M18*>(
        &_Message6_M4_M6_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(Message6_M4_M6_M18& a, Message6_M4_M6_M18& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6_M18* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6_M18* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6_M18* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6_M18>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6_M18& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6_M18& from) { Message6_M4_M6_M18::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6_M18* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6.M18"; }

 protected:
  explicit Message6_M4_M6_M18(::google::protobuf::Arena* arena);
  Message6_M4_M6_M18(::google::protobuf::Arena* arena, const Message6_M4_M6_M18& from);
  Message6_M4_M6_M18(::google::protobuf::Arena* arena, Message6_M4_M6_M18&& from) noexcept
      : Message6_M4_M6_M18(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M29 = Message6_M4_M6_M18_M29;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message6.M4.M6.M18.M29 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message6_M4_M6_M18_M29& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18_M29* release_f_1();
  ::fleetbench::proto::Message6_M4_M6_M18_M29* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29* value);
  ::fleetbench::proto::Message6_M4_M6_M18_M29* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18_M29& _internal_f_1() const;
  ::fleetbench::proto::Message6_M4_M6_M18_M29* _internal_mutable_f_1();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6.M18)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_M18_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message6_M4_M6_M18_M29* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4_M6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4.M6) */ {
 public:
  inline Message6_M4_M6() : Message6_M4_M6(nullptr) {}
  ~Message6_M4_M6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4_M6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4_M6(const Message6_M4_M6& from) : Message6_M4_M6(nullptr, from) {}
  inline Message6_M4_M6(Message6_M4_M6&& from) noexcept
      : Message6_M4_M6(nullptr, std::move(from)) {}
  inline Message6_M4_M6& operator=(const Message6_M4_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4_M6& operator=(Message6_M4_M6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4_M6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4_M6* internal_default_instance() {
    return reinterpret_cast<const Message6_M4_M6*>(
        &_Message6_M4_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(Message6_M4_M6& a, Message6_M4_M6& b) { a.Swap(&b); }
  inline void Swap(Message6_M4_M6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4_M6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4_M6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4_M6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4_M6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4_M6& from) { Message6_M4_M6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4_M6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4.M6"; }

 protected:
  explicit Message6_M4_M6(::google::protobuf::Arena* arena);
  Message6_M4_M6(::google::protobuf::Arena* arena, const Message6_M4_M6& from);
  Message6_M4_M6(::google::protobuf::Arena* arena, Message6_M4_M6&& from) noexcept
      : Message6_M4_M6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M18 = Message6_M4_M6_M18;
  using M25 = Message6_M4_M6_M25;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message6.M4.M6.M25 f_3 = 5;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message6_M4_M6_M25* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message6_M4_M6_M25& f_3(int index) const;
  ::fleetbench::proto::Message6_M4_M6_M25* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>& f_3() const;
  // optional .fleetbench.proto.Message6.M4.M6.M18 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message6_M4_M6_M18& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6_M18* release_f_2();
  ::fleetbench::proto::Message6_M4_M6_M18* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18* value);
  ::fleetbench::proto::Message6_M4_M6_M18* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message6_M4_M6_M18& _internal_f_2() const;
  ::fleetbench::proto::Message6_M4_M6_M18* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4.M6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_M6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M4_M6_M25 > f_3_;
    ::fleetbench::proto::Message6_M4_M6_M18* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6_M4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6.M4) */ {
 public:
  inline Message6_M4() : Message6_M4(nullptr) {}
  ~Message6_M4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6_M4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6_M4(const Message6_M4& from) : Message6_M4(nullptr, from) {}
  inline Message6_M4(Message6_M4&& from) noexcept
      : Message6_M4(nullptr, std::move(from)) {}
  inline Message6_M4& operator=(const Message6_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6_M4& operator=(Message6_M4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6_M4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6_M4* internal_default_instance() {
    return reinterpret_cast<const Message6_M4*>(
        &_Message6_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(Message6_M4& a, Message6_M4& b) { a.Swap(&b); }
  inline void Swap(Message6_M4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6_M4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6_M4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6_M4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6_M4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6_M4& from) { Message6_M4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6_M4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6.M4"; }

 protected:
  explicit Message6_M4(::google::protobuf::Arena* arena);
  Message6_M4(::google::protobuf::Arena* arena, const Message6_M4& from);
  Message6_M4(::google::protobuf::Arena* arena, Message6_M4&& from) noexcept
      : Message6_M4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M6 = Message6_M4_M6;
  using M7 = Message6_M4_M7;
  using M13 = Message6_M4_M13;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      mutable_f_8()->generate_schema(schema);
      mutable_f_9()->generate_schema(schema);
      mutable_f_11()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_9()->generate_scatter_ptrs(ptrs);
      mutable_f_11()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_1().size());
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_9()->generate_scatter_sizes(sizes);
      mutable_f_11()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 5,
    kF8FieldNumber = 9,
    kF9FieldNumber = 11,
    kF11FieldNumber = 13,
    kF0FieldNumber = 4,
    kF2FieldNumber = 6,
    kF4FieldNumber = 8,
    kF3FieldNumber = 7,
  };
  // optional string f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message6.M4.M6 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message6_M4_M6& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M6* release_f_8();
  ::fleetbench::proto::Message6_M4_M6* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message6_M4_M6* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message6_M4_M6* value);
  ::fleetbench::proto::Message6_M4_M6* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message6_M4_M6& _internal_f_8() const;
  ::fleetbench::proto::Message6_M4_M6* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message6.M4.M7 f_9 = 11;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message6_M4_M7& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M7* release_f_9();
  ::fleetbench::proto::Message6_M4_M7* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message6_M4_M7* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message6_M4_M7* value);
  ::fleetbench::proto::Message6_M4_M7* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message6_M4_M7& _internal_f_9() const;
  ::fleetbench::proto::Message6_M4_M7* _internal_mutable_f_9();

  public:
  // optional .fleetbench.proto.Message6.M4.M13 f_11 = 13;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message6_M4_M13& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4_M13* release_f_11();
  ::fleetbench::proto::Message6_M4_M13* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message6_M4_M13* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message6_M4_M13* value);
  ::fleetbench::proto::Message6_M4_M13* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message6_M4_M13& _internal_f_11() const;
  ::fleetbench::proto::Message6_M4_M13* _internal_mutable_f_11();

  public:
  // optional uint32 f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional uint32 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint32_t f_2() const;
  void set_f_2(::uint32_t value);

  private:
  ::uint32_t _internal_f_2() const;
  void _internal_set_f_2(::uint32_t value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int32 f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6.M4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 3,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_M4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::fleetbench::proto::Message6_M4_M6* f_8_;
    ::fleetbench::proto::Message6_M4_M7* f_9_;
    ::fleetbench::proto::Message6_M4_M13* f_11_;
    ::uint32_t f_0_;
    ::uint32_t f_2_;
    ::int64_t f_4_;
    ::int32_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};
// -------------------------------------------------------------------

class Message6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message6) */ {
 public:
  inline Message6() : Message6(nullptr) {}
  ~Message6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message6(const Message6& from) : Message6(nullptr, from) {}
  inline Message6(Message6&& from) noexcept
      : Message6(nullptr, std::move(from)) {}
  inline Message6& operator=(const Message6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message6& operator=(Message6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message6* internal_default_instance() {
    return reinterpret_cast<const Message6*>(
        &_Message6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 69;
  friend void swap(Message6& a, Message6& b) { a.Swap(&b); }
  inline void Swap(Message6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message6& from) { Message6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message6"; }

 protected:
  explicit Message6(::google::protobuf::Arena* arena);
  Message6(::google::protobuf::Arena* arena, const Message6& from);
  Message6(::google::protobuf::Arena* arena, Message6&& from) noexcept
      : Message6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M1 = Message6_M1;
  using M2 = Message6_M2;
  using M3 = Message6_M3;
  using M4 = Message6_M4;
  using M5 = Message6_M5;
  using E1 = Message6_E1;
  static constexpr E1 E1_UNSPECIFIED = Message6_E1_E1_UNSPECIFIED;
  static constexpr E1 E1_CONST_1 = Message6_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 = Message6_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 = Message6_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 = Message6_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 = Message6_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return Message6_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN = Message6_E1_E1_MIN;
  static constexpr E1 E1_MAX = Message6_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE = Message6_E1_E1_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E1_descriptor() {
    return Message6_E1_descriptor();
  }
  template <typename T>
  static inline const std::string& E1_Name(T value) {
    return Message6_E1_Name(value);
  }
  static inline bool E1_Parse(absl::string_view name, E1* value) {
    return Message6_E1_Parse(name, value);
  }
  using E2 = Message6_E2;
  static constexpr E2 E2_UNSPECIFIED = Message6_E2_E2_UNSPECIFIED;
  static constexpr E2 E2_CONST_1 = Message6_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 = Message6_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 = Message6_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 = Message6_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 = Message6_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return Message6_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN = Message6_E2_E2_MIN;
  static constexpr E2 E2_MAX = Message6_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE = Message6_E2_E2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E2_descriptor() {
    return Message6_E2_descriptor();
  }
  template <typename T>
  static inline const std::string& E2_Name(T value) {
    return Message6_E2_Name(value);
  }
  static inline bool E2_Parse(absl::string_view name, E2* value) {
    return Message6_E2_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      for (int i = 0; i < f_14_size(); ++i) {
        mutable_f_14(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_schema(schema);
      }
      mutable_f_21()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_14().size());
      for (int i = 0; i < f_14_size(); ++i) {
        mutable_f_14(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_16().size());
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_23().size());
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_21()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_14_size(); ++i) {
        mutable_f_14(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_21()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_14().size());
      for (int i = 0; i < f_14_size(); ++i) {
        mutable_f_14(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_16().size());
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_23().size());
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_21()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_14_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_14_entries; ++i) {
        auto* new_msg = add_f_14();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_14(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_16_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_16_entries; ++i) {
        auto* new_msg = add_f_16();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_16(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_18_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_23_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_23_entries; ++i) {
        auto* new_msg = add_f_23();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_23(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_21()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_14_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_14_entries; ++i) {
        auto* new_msg = add_f_14();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_14(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_16_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_16_entries; ++i) {
        auto* new_msg = add_f_16();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_16(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_18_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_23_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_23_entries; ++i) {
        auto* new_msg = add_f_23();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_23(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_21()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF14FieldNumber = 16,
    kF16FieldNumber = 18,
    kF18FieldNumber = 21,
    kF23FieldNumber = 25,
    kF21FieldNumber = 23,
    kF1FieldNumber = 6,
    kF0FieldNumber = 4,
    kF3FieldNumber = 9,
    kF2FieldNumber = 8,
    kF5FieldNumber = 14,
    kF4FieldNumber = 11,
  };
  // repeated .fleetbench.proto.Message6.M1 f_14 = 16;
  int f_14_size() const;
  private:
  int _internal_f_14_size() const;

  public:
  void clear_f_14() ;
  ::fleetbench::proto::Message6_M1* mutable_f_14(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>* mutable_f_14();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>& _internal_f_14() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>* _internal_mutable_f_14();
  public:
  const ::fleetbench::proto::Message6_M1& f_14(int index) const;
  ::fleetbench::proto::Message6_M1* add_f_14();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>& f_14() const;
  // repeated .fleetbench.proto.Message6.M2 f_16 = 18;
  int f_16_size() const;
  private:
  int _internal_f_16_size() const;

  public:
  void clear_f_16() ;
  ::fleetbench::proto::Message6_M2* mutable_f_16(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>* mutable_f_16();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>& _internal_f_16() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>* _internal_mutable_f_16();
  public:
  const ::fleetbench::proto::Message6_M2& f_16(int index) const;
  ::fleetbench::proto::Message6_M2* add_f_16();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>& f_16() const;
  // repeated .fleetbench.proto.Message6.M3 f_18 = 21;
  int f_18_size() const;
  private:
  int _internal_f_18_size() const;

  public:
  void clear_f_18() ;
  ::fleetbench::proto::Message6_M3* mutable_f_18(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>* mutable_f_18();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>& _internal_f_18() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>* _internal_mutable_f_18();
  public:
  const ::fleetbench::proto::Message6_M3& f_18(int index) const;
  ::fleetbench::proto::Message6_M3* add_f_18();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>& f_18() const;
  // repeated .fleetbench.proto.Message6.M5 f_23 = 25;
  int f_23_size() const;
  private:
  int _internal_f_23_size() const;

  public:
  void clear_f_23() ;
  ::fleetbench::proto::Message6_M5* mutable_f_23(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>* mutable_f_23();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>& _internal_f_23() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>* _internal_mutable_f_23();
  public:
  const ::fleetbench::proto::Message6_M5& f_23(int index) const;
  ::fleetbench::proto::Message6_M5* add_f_23();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>& f_23() const;
  // optional .fleetbench.proto.Message6.M4 f_21 = 23;
  bool has_f_21() const;
  void clear_f_21() ;
  const ::fleetbench::proto::Message6_M4& f_21() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message6_M4* release_f_21();
  ::fleetbench::proto::Message6_M4* mutable_f_21();
  void set_allocated_f_21(::fleetbench::proto::Message6_M4* value);
  void unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message6_M4* value);
  ::fleetbench::proto::Message6_M4* unsafe_arena_release_f_21();

  private:
  const ::fleetbench::proto::Message6_M4& _internal_f_21() const;
  ::fleetbench::proto::Message6_M4* _internal_mutable_f_21();

  public:
  // optional int64 f_1 = 6;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional bool f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional .fleetbench.proto.Message6.E1 f_3 = 9;
  bool has_f_3() const;
  void clear_f_3() ;
  ::fleetbench::proto::Message6_E1 f_3() const;
  void set_f_3(::fleetbench::proto::Message6_E1 value);

  private:
  ::fleetbench::proto::Message6_E1 _internal_f_3() const;
  void _internal_set_f_3(::fleetbench::proto::Message6_E1 value);

  public:
  // optional int64 f_2 = 8;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int64 f_5 = 14;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional .fleetbench.proto.Message6.E2 f_4 = 11;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message6_E2 f_4() const;
  void set_f_4(::fleetbench::proto::Message6_E2 value);

  private:
  ::fleetbench::proto::Message6_E2 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message6_E2 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 7,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M1 > f_14_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M2 > f_16_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M3 > f_18_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message6_M5 > f_23_;
    ::fleetbench::proto::Message6_M4* f_21_;
    ::int64_t f_1_;
    bool f_0_;
    int f_3_;
    ::int64_t f_2_;
    ::int64_t f_5_;
    int f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage6_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message6_M1_M15_M21

// optional string f_0 = 2;
inline bool Message6_M1_M15_M21::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M21::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M21::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M21::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_0)
}
inline std::string* Message6_M1_M15_M21::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M21.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M21::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M21::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M21::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M21::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M21.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M21::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M21.f_0)
}

// optional float f_1 = 4;
inline bool Message6_M1_M15_M21::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M21::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message6_M1_M15_M21::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M21::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_1)
}
inline float Message6_M1_M15_M21::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M1_M15_M21::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated int64 f_2 = 7 [packed = true];
inline int Message6_M1_M15_M21::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M1_M15_M21::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M1_M15_M21::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int64_t Message6_M1_M15_M21::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_2)
  return _internal_f_2().Get(index);
}
inline void Message6_M1_M15_M21::set_f_2(int index, ::int64_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_2)
}
inline void Message6_M1_M15_M21::add_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M21.f_2)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M1_M15_M21::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M21.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M21::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M21.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M1_M15_M21::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M21::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional fixed32 f_3 = 8;
inline bool Message6_M1_M15_M21::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M21::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Message6_M1_M15_M21::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M21::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_3)
}
inline ::uint32_t Message6_M1_M15_M21::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M21::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 9;
inline bool Message6_M1_M15_M21::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M21::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M15_M21::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M21::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_4)
}
inline std::string* Message6_M1_M15_M21::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M21.f_4)
  return _s;
}
inline const std::string& Message6_M1_M15_M21::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M1_M15_M21::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M21::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M21::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M21.f_4)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M21::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M21.f_4)
}

// optional string f_5 = 12;
inline bool Message6_M1_M15_M21::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M21::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M1_M15_M21::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M21.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M21::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M21.f_5)
}
inline std::string* Message6_M1_M15_M21::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M21.f_5)
  return _s;
}
inline const std::string& Message6_M1_M15_M21::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message6_M1_M15_M21::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M21::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M21::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M21.f_5)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M21::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M21.f_5)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57

// optional string f_0 = 1;
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_0)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_0)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.E80 f_1 = 2;
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_1)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>(_impl_.f_1_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_IsValid(value));
  _impl_.f_1_ = value;
}

// repeated int64 f_2 = 3 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_2)
  return _internal_f_2().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::set_f_2(int index, ::int64_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_2)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::add_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_2)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional int64 f_3 = 5;
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57.f_3)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M47_M55

// repeated int32 f_0 = 2 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M47_M55::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M47_M55::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M47_M55::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_0)
  return _internal_f_0().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_0)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M1_M15_M23_M28_M42_M44_M47_M55::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M47_M55::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M1_M15_M23_M28_M42_M44_M47_M55::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M47_M55::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.M57 f_2 = 3;
inline bool Message6_M1_M15_M23_M28_M42_M44_M47_M55::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& Message6_M1_M15_M23_M28_M42_M44_M47_M55::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57& Message6_M1_M15_M23_M28_M42_M44_M47_M55::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_2)
  return _internal_f_2();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_2)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* Message6_M1_M15_M23_M28_M42_M44_M47_M55::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* Message6_M1_M15_M23_M28_M42_M44_M47_M55::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* Message6_M1_M15_M23_M28_M42_M44_M47_M55::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* Message6_M1_M15_M23_M28_M42_M44_M47_M55::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_2)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47_M55::set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55.f_2)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M47

// repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.E63 f_0 = 1 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M47::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M47::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 Message6_M1_M15_M23_M28_M42_M44_M47::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_0)
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63>(_internal_f_0().Get(index));
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::set_f_0(int index, ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 value) {
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_0)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::add_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63 value) {
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M1_M15_M23_M28_M42_M44_M47::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message6_M1_M15_M23_M28_M42_M44_M47::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M1_M15_M23_M28_M42_M44_M47::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message6_M1_M15_M23_M28_M42_M44_M47::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.M55 f_1 = 2;
inline bool Message6_M1_M15_M23_M28_M42_M44_M47::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55& Message6_M1_M15_M23_M28_M42_M44_M47::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M44_M47_M55_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55& Message6_M1_M15_M23_M28_M42_M44_M47::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_1)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* Message6_M1_M15_M23_M28_M42_M44_M47::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* Message6_M1_M15_M23_M28_M42_M44_M47::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* Message6_M1_M15_M23_M28_M42_M44_M47::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* Message6_M1_M15_M23_M28_M42_M44_M47::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_1)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M47::set_allocated_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47.f_1)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M50_M52

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.E78 f_0 = 1;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_0)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>(_impl_.f_0_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.E79 f_1 = 2;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_1)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>(_impl_.f_1_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_IsValid(value));
  _impl_.f_1_ = value;
}

// optional string f_2 = 3;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_2)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_2)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_2)
}

// optional fixed32 f_3 = 4;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_3)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 5;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_4)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_4)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_4)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_4)
}

// optional string f_5 = 7;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M52::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_5)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_5)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50_M52::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_5)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M52::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52.f_5)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M50_M54

// optional uint64 f_0 = 2;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50_M54::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M54::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50_M54::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M54::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54.f_0)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50_M54::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50_M54::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44_M50

// optional string f_0 = 1;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_0)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_0)
}

// optional float f_1 = 3;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_1)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 5;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_2)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_2)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_2)
}

// optional int32 f_3 = 7;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_3)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 8;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_4)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E64 f_5 = 9;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 Message6_M1_M15_M23_M28_M42_M44_M50::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_5)
  return _internal_f_5();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_5)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64>(_impl_.f_5_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64_IsValid(value));
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 10;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_6)
  return _internal_f_6();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_6)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional double f_7 = 11;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double Message6_M1_M15_M23_M28_M42_M44_M50::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_7)
  return _internal_f_7();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_7(double value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_7)
}
inline double Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_7(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional int32 f_8 = 13;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_8)
  return _internal_f_8();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_8)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional bytes f_9 = 17;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_9)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_9)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_9)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_9)
}

// optional int32 f_10 = 18;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_10)
  return _internal_f_10();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_10(::int32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_10)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional int64 f_11 = 19;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_11)
  return _internal_f_11();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_11(::int64_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_11)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_11(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 20;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_12() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_12)
  return _internal_f_12();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_12)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional bytes f_13 = 21;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_13() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_13)
  return _internal_f_13();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_13(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_13_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_13)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_13)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_13(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_13_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_13_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_13)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_13_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_13_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_13(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_13_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_13_.IsDefault()) {
          _impl_.f_13_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_13)
}

// repeated bytes f_14 = 22;
inline int Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_14_size() const {
  return _internal_f_14().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M50::f_14_size() const {
  return _internal_f_14_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_.Clear();
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_14()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_14(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
  return _internal_f_14().Get(index);
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_14(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
  return _internal_mutable_f_14()->Mutable(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_14(int index, const std::string& value) {
  _internal_mutable_f_14()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_14(int index, std::string&& value) {
  _internal_mutable_f_14()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_14(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_14()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_14(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_14()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_14(int index, absl::string_view value) {
  _internal_mutable_f_14()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_14()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_14()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_14()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_14()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_14(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_14()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message6_M1_M15_M23_M28_M42_M44_M50::f_14() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
  return _internal_f_14();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_14)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_14();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_14_;
}

// optional double f_15 = 25;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_15() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline double Message6_M1_M15_M23_M28_M42_M44_M50::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_15)
  return _internal_f_15();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_15(double value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_15)
}
inline double Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_15(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional int64 f_16 = 26;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_16() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_16)
  return _internal_f_16();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_16(::int64_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_16)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_16(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional fixed32 f_17 = 27;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_17() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_17)
  return _internal_f_17();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_17(::uint32_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_17)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_17(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional uint32 f_18 = 29;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_18() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_18)
  return _internal_f_18();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_18(::uint32_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_18)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_18(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional bytes f_19 = 30;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_19() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_19)
  return _internal_f_19();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_19(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_19_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_19)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_19() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_19();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_19)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_19(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_19_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_19_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_19)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_19_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_19_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_19(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_19_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_19_.IsDefault()) {
          _impl_.f_19_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_19)
}

// optional bool f_20 = 33;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_20() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = false;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_20)
  return _internal_f_20();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_20(bool value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_20)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_20(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional int32 f_21 = 34;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_21() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_21)
  return _internal_f_21();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_21(::int32_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_21)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_21(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E65 f_22 = 35;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_22() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 Message6_M1_M15_M23_M28_M42_M44_M50::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_22)
  return _internal_f_22();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_22(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_22)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65>(_impl_.f_22_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_22(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65_IsValid(value));
  _impl_.f_22_ = value;
}

// repeated float f_23 = 36 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_23_size() const {
  return _internal_f_23().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M50::f_23_size() const {
  return _internal_f_23_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.Clear();
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_23(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_23)
  return _internal_f_23().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_23(int index, float value) {
  _internal_mutable_f_23()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_23)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_23(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_23()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_23)
}
inline const ::google::protobuf::RepeatedField<float>& Message6_M1_M15_M23_M28_M42_M44_M50::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_23)
  return _internal_f_23();
}
inline ::google::protobuf::RepeatedField<float>* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_23()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_23)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_23();
}
inline const ::google::protobuf::RepeatedField<float>&
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline ::google::protobuf::RepeatedField<float>* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_23_;
}

// optional string f_24 = 37;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_24)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_24)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_24)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_24)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E66 f_25 = 38;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 Message6_M1_M15_M23_M28_M42_M44_M50::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_25)
  return _internal_f_25();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_25(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_25)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66>(_impl_.f_25_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_25(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66_IsValid(value));
  _impl_.f_25_ = value;
}

// optional string f_26 = 40;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_26() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_26)
  return _internal_f_26();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_26(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_26_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_26)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_26() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_26();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_26)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_26(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_26_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_26_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_26)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_26_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_26_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_26(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_26_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_26_.IsDefault()) {
          _impl_.f_26_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_26)
}

// optional int64 f_27 = 41;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_27)
  return _internal_f_27();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_27(::int64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_27)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_27(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional int64 f_28 = 42;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_28)
  return _internal_f_28();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_28(::int64_t value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_28)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_28(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional int32 f_29 = 43;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_29() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_29)
  return _internal_f_29();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_29(::int32_t value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_29)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_29(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = value;
}

// optional int64 f_30 = 44;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_30)
  return _internal_f_30();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_30(::int64_t value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_30)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_30(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional int32 f_31 = 45;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_31)
  return _internal_f_31();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_31(::int32_t value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_31)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_31(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional uint64 f_32 = 46;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_32)
  return _internal_f_32();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_32(::uint64_t value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_32)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_32(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional string f_33 = 47;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_33() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_33() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_33)
  return _internal_f_33();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_33(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_33_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_33)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_33() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_33();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_33)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_33(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_33_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_33_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_33)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_33_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_33_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_33(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_33_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_33_.IsDefault()) {
          _impl_.f_33_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_33)
}

// optional bool f_34 = 48;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = false;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_34)
  return _internal_f_34();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_34(bool value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_34)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_34(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E67 f_35 = 49;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 Message6_M1_M15_M23_M28_M42_M44_M50::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_35)
  return _internal_f_35();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_35(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_35)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67>(_impl_.f_35_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_35(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67_IsValid(value));
  _impl_.f_35_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E68 f_36 = 50;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 Message6_M1_M15_M23_M28_M42_M44_M50::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_36)
  return _internal_f_36();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_36(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_36)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68>(_impl_.f_36_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_36(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68_IsValid(value));
  _impl_.f_36_ = value;
}

// optional int64 f_37 = 51;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_37)
  return _internal_f_37();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_37(::int64_t value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_37)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_37(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional string f_38 = 53;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_38() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_38() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_38)
  return _internal_f_38();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_38(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_38_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_38)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_38() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_38();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_38)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_38(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_38_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_38_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_38)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_38_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_38_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_38(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_38_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_38_.IsDefault()) {
          _impl_.f_38_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_38)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E69 f_39 = 54;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 Message6_M1_M15_M23_M28_M42_M44_M50::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_39)
  return _internal_f_39();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_39(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_39)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69>(_impl_.f_39_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_39(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69_IsValid(value));
  _impl_.f_39_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E70 f_40 = 55;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 Message6_M1_M15_M23_M28_M42_M44_M50::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_40)
  return _internal_f_40();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_40(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_40)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70>(_impl_.f_40_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_40(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70_IsValid(value));
  _impl_.f_40_ = value;
}

// optional bytes f_41 = 57;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_41() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_41() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_41)
  return _internal_f_41();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_41(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_41_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_41)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_41() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_41();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_41)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_41(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_41_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_41_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_41)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_41_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_41_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_41(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_41_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_41_.IsDefault()) {
          _impl_.f_41_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_41)
}

// optional uint64 f_42 = 59;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_42)
  return _internal_f_42();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_42(::uint64_t value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_42)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_42(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// optional string f_43 = 60;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_43() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_43() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_43)
  return _internal_f_43();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_43(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_43_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_43)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_43() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_43();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_43)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_43(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_43_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_43_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_43)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_43_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_43_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_43(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_43_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_43_.IsDefault()) {
          _impl_.f_43_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_43)
}

// optional fixed64 f_44 = 61;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_44() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_44)
  return _internal_f_44();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_44(::uint64_t value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_44)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_44(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// repeated int32 f_45 = 63 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_45_size() const {
  return _internal_f_45().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M50::f_45_size() const {
  return _internal_f_45_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_.Clear();
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_45(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_45)
  return _internal_f_45().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_45(int index, ::int32_t value) {
  _internal_mutable_f_45()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_45)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_45(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_45()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_45)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M1_M15_M23_M28_M42_M44_M50::f_45() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_45)
  return _internal_f_45();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_45()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_45)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_45();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_45() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_45_;
}

// optional fixed64 f_46 = 64;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_46() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_46() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_46)
  return _internal_f_46();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_46(::uint64_t value) {
  _internal_set_f_46(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_46)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_46(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_ = value;
}

// optional string f_47 = 65;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_47() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_47() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_47)
  return _internal_f_47();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_47(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_47_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_47)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_47() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_47();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_47)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_47(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_47_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_47_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_47)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_47_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_47_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_47(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_47_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_47_.IsDefault()) {
          _impl_.f_47_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_47)
}

// optional bytes f_48 = 66;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_48() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_48() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_48)
  return _internal_f_48();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_48(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_48_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_48)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_48() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_48();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_48)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_48(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_48_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_48_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_48)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_48_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_48_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_48(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_48_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_48_.IsDefault()) {
          _impl_.f_48_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_48)
}

// optional string f_49 = 67;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_49() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_49() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_49)
  return _internal_f_49();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_49(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_49_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_49)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_49() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_49();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_49)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_49(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_49_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_49_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_49)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_49_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_49_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_49(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_49_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_49_.IsDefault()) {
          _impl_.f_49_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_49)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E71 f_50 = 68;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_50() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 Message6_M1_M15_M23_M28_M42_M44_M50::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_50)
  return _internal_f_50();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_50(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_50)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71>(_impl_.f_50_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_50(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71_IsValid(value));
  _impl_.f_50_ = value;
}

// optional int64 f_51 = 69;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_51() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_51)
  return _internal_f_51();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_51(::int64_t value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_51)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_51(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E72 f_52 = 70;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_52() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 Message6_M1_M15_M23_M28_M42_M44_M50::f_52() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_52)
  return _internal_f_52();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_52(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 value) {
  _internal_set_f_52(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_52)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72>(_impl_.f_52_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_52(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72_IsValid(value));
  _impl_.f_52_ = value;
}

// optional float f_53 = 71;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_53() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_53() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_53)
  return _internal_f_53();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_53(float value) {
  _internal_set_f_53(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_53)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_53(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = value;
}

// optional uint32 f_54 = 72;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_54() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0u;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_54)
  return _internal_f_54();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_54(::uint32_t value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_54)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_54(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = value;
}

// optional string f_55 = 73;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_55() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_55() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_55)
  return _internal_f_55();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_55(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_55_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_55)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_55() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_55();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_55)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_55(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_55_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_55_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_55)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_55_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_55_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_55(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_55_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_55_.IsDefault()) {
          _impl_.f_55_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_55)
}

// optional string f_56 = 74;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_56() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_56() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_56)
  return _internal_f_56();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_56(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_56_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_56)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_56() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_56();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_56)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_56(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_56_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.f_56_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_56)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.f_56_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_56_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_56(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.f_56_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_56_.IsDefault()) {
          _impl_.f_56_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_56)
}

// optional float f_57 = 75;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_57() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = 0;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_57)
  return _internal_f_57();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_57(float value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_57)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_57(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional bool f_58 = 76;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_58() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = false;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_58)
  return _internal_f_58();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_58(bool value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_58)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_58(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E73 f_59 = 78;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_59() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = 0;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 Message6_M1_M15_M23_M28_M42_M44_M50::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_59)
  return _internal_f_59();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_59(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_59)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73>(_impl_.f_59_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_59(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73_IsValid(value));
  _impl_.f_59_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E74 f_60 = 79;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_60() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 Message6_M1_M15_M23_M28_M42_M44_M50::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_60)
  return _internal_f_60();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_60(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_60)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74>(_impl_.f_60_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_60(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74_IsValid(value));
  _impl_.f_60_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E75 f_61 = 81;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_61() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 Message6_M1_M15_M23_M28_M42_M44_M50::f_61() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_61)
  return _internal_f_61();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_61(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 value) {
  _internal_set_f_61(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_61)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75>(_impl_.f_61_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_61(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75_IsValid(value));
  _impl_.f_61_ = value;
}

// optional string f_62 = 83;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_62() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_62() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_62)
  return _internal_f_62();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_62(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_62_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_62)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_62() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_62();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_62)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_62(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_62_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.f_62_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_62)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.f_62_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_62_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_62(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.f_62_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_62_.IsDefault()) {
          _impl_.f_62_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_62)
}

// repeated int32 f_63 = 85 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_63_size() const {
  return _internal_f_63().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M50::f_63_size() const {
  return _internal_f_63_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_.Clear();
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_63(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_63)
  return _internal_f_63().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_63(int index, ::int32_t value) {
  _internal_mutable_f_63()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_63)
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::add_f_63(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_63()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_63)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M1_M15_M23_M28_M42_M44_M50::f_63() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_63)
  return _internal_f_63();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_63()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_63)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_63();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_63() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_63_;
}

// optional int64 f_64 = 87;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_64)
  return _internal_f_64();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_64(::int64_t value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_64)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_64_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = value;
}

// optional int64 f_65 = 88;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_65() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_65() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_65)
  return _internal_f_65();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_65(::int64_t value) {
  _internal_set_f_65(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_65)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_65_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_65(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = value;
}

// optional bool f_66 = 89;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_66() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = false;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_66)
  return _internal_f_66();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_66(bool value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_66)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_66_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_66(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = value;
}

// optional bool f_67 = 92;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_67() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = false;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_67() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_67)
  return _internal_f_67();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_67(bool value) {
  _internal_set_f_67(value);
  _impl_._has_bits_[2] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_67)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_67(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = value;
}

// optional int64 f_68 = 93;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_68)
  return _internal_f_68();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_68(::int64_t value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_68)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_68_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_68(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = value;
}

// optional uint64 f_69 = 94;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_69() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_69() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_69)
  return _internal_f_69();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_69(::uint64_t value) {
  _internal_set_f_69(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_69)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_69(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = value;
}

// optional int64 f_70 = 95;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_70() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_70() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_70)
  return _internal_f_70();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_70(::int64_t value) {
  _internal_set_f_70(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_70)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_70(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = value;
}

// optional int64 f_71 = 96;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_71() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_71() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_71)
  return _internal_f_71();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_71(::int64_t value) {
  _internal_set_f_71(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_71)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_71(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = value;
}

// optional bool f_72 = 98;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_72() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = false;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_72() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_72)
  return _internal_f_72();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_72(bool value) {
  _internal_set_f_72(value);
  _impl_._has_bits_[2] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_72)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_72(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = value;
}

// optional string f_73 = 100;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_73() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_73() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_73)
  return _internal_f_73();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_73(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_73_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_73)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_73() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_73();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_73)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_73() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_73_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_73(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_73_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.f_73_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_73)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.f_73_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_73_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_73(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.f_73_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_73_.IsDefault()) {
          _impl_.f_73_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_73)
}

// optional int64 f_74 = 102;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_74() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_74() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_74)
  return _internal_f_74();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_74(::int64_t value) {
  _internal_set_f_74(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_74)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_74_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_74(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = value;
}

// optional float f_75 = 104;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_75() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = 0;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_75() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_75)
  return _internal_f_75();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_75(float value) {
  _internal_set_f_75(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_75)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_75(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = value;
}

// optional string f_76 = 105;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_76() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_76() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_76)
  return _internal_f_76();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_76(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_76_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_76)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_76() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_76();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_76)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_76(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_76_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.f_76_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_76)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.f_76_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_76_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_76(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.f_76_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_76_.IsDefault()) {
          _impl_.f_76_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_76)
}

// optional int32 f_77 = 107;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_77() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = 0;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_77() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_77)
  return _internal_f_77();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_77(::int32_t value) {
  _internal_set_f_77(value);
  _impl_._has_bits_[2] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_77)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_77(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = value;
}

// optional int64 f_78 = 108;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_78() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_78() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_78)
  return _internal_f_78();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_78(::int64_t value) {
  _internal_set_f_78(value);
  _impl_._has_bits_[2] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_78)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_78_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_78(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_ = value;
}

// optional int32 f_79 = 109;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_79() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_79() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = 0;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_79() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_79)
  return _internal_f_79();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_79(::int32_t value) {
  _internal_set_f_79(value);
  _impl_._has_bits_[2] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_79)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_79() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_79_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_79(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = value;
}

// optional string f_80 = 112;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_80() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_80() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_80)
  return _internal_f_80();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_80(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_80_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_80)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_80() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_80();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_80)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_80() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_80_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_80(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_80_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.f_80_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_80)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.f_80_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_80_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_80(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.f_80_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_80_.IsDefault()) {
          _impl_.f_80_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_80)
}

// optional int32 f_81 = 114;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_81() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_81() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = 0;
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_81() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_81)
  return _internal_f_81();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_81(::int32_t value) {
  _internal_set_f_81(value);
  _impl_._has_bits_[2] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_81)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_81() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_81_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_81(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = value;
}

// optional int32 f_82 = 115;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_82() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_82() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = 0;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_82() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_82)
  return _internal_f_82();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_82(::int32_t value) {
  _internal_set_f_82(value);
  _impl_._has_bits_[2] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_82)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_82() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_82_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_82(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E76 f_83 = 116;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_83() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = 0;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 Message6_M1_M15_M23_M28_M42_M44_M50::f_83() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_83)
  return _internal_f_83();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_83(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 value) {
  _internal_set_f_83(value);
  _impl_._has_bits_[2] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_83)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_83() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76>(_impl_.f_83_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_83(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76_IsValid(value));
  _impl_.f_83_ = value;
}

// optional int64 f_84 = 117;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_84() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_84() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_84)
  return _internal_f_84();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_84(::int64_t value) {
  _internal_set_f_84(value);
  _impl_._has_bits_[2] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_84)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_84() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_84_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_84(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = value;
}

// optional float f_85 = 118;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_85() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = 0;
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::f_85() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_85)
  return _internal_f_85();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_85(float value) {
  _internal_set_f_85(value);
  _impl_._has_bits_[2] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_85)
}
inline float Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_85() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_85_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_85(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = value;
}

// optional string f_86 = 119;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_86() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_86() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_86)
  return _internal_f_86();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_86(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_86_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_86)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_86() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_86();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_86)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_86() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_86_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_86(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_86_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.f_86_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_86)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.f_86_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_86_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_86(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.f_86_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_86_.IsDefault()) {
          _impl_.f_86_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_86)
}

// optional bool f_87 = 120;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_87() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = false;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_87() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_87)
  return _internal_f_87();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_87(bool value) {
  _internal_set_f_87(value);
  _impl_._has_bits_[2] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_87)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_87() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_87_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_87(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.E77 f_88 = 123;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_88() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_88() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 Message6_M1_M15_M23_M28_M42_M44_M50::f_88() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_88)
  return _internal_f_88();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_88(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 value) {
  _internal_set_f_88(value);
  _impl_._has_bits_[2] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_88)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_88() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77>(_impl_.f_88_);
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_88(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77_IsValid(value));
  _impl_.f_88_ = value;
}

// optional int64 f_89 = 125;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_89() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_89() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_89)
  return _internal_f_89();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_89(::int64_t value) {
  _internal_set_f_89(value);
  _impl_._has_bits_[2] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_89)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_89() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_89_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_89(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = value;
}

// optional bool f_90 = 127;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_90() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = false;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::f_90() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_90)
  return _internal_f_90();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_90(bool value) {
  _internal_set_f_90(value);
  _impl_._has_bits_[2] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_90)
}
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_90() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_90_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_90(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = value;
}

// optional int64 f_91 = 129;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_91() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_91() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_91)
  return _internal_f_91();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_91(::int64_t value) {
  _internal_set_f_91(value);
  _impl_._has_bits_[2] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_91)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_91() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_91_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_91(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = value;
}

// optional int64 f_92 = 130;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_92() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::f_92() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_92)
  return _internal_f_92();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_92(::int64_t value) {
  _internal_set_f_92(value);
  _impl_._has_bits_[2] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_92)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_92() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_92_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_92(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = value;
}

// optional int32 f_93 = 131;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_93() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_93() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_93)
  return _internal_f_93();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_93(::int32_t value) {
  _internal_set_f_93(value);
  _impl_._has_bits_[2] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_93)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_93_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_93(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = value;
}

// optional string f_94 = 132;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_94() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::f_94() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_94)
  return _internal_f_94();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_94(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_94_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_94)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_94() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_94();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_94)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_94() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_94_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_94(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_94_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.f_94_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_94)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.f_94_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_94_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_94(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.f_94_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_94_.IsDefault()) {
          _impl_.f_94_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_94)
}

// optional int32 f_95 = 133;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_95() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_ = 0;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::f_95() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_95)
  return _internal_f_95();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_f_95(::int32_t value) {
  _internal_set_f_95(value);
  _impl_._has_bits_[2] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_95)
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_95() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_95_;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::_internal_set_f_95(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M52 f_133 = 135;
inline bool Message6_M1_M15_M23_M28_M42_M44_M50::has_f_133() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_133_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_133_ != nullptr) _impl_.f_133_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52& Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_133() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* p = _impl_.f_133_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M44_M50_M52_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52& Message6_M1_M15_M23_M28_M42_M44_M50::f_133() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_133)
  return _internal_f_133();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::unsafe_arena_set_allocated_f_133(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_133_);
  }
  _impl_.f_133_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_133)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* Message6_M1_M15_M23_M28_M42_M44_M50::release_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* released = _impl_.f_133_;
  _impl_.f_133_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* Message6_M1_M15_M23_M28_M42_M44_M50::unsafe_arena_release_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_133)

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* temp = _impl_.f_133_;
  _impl_.f_133_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_133_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52>(GetArena());
    _impl_.f_133_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52*>(p);
  }
  return _impl_.f_133_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_133() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00400000u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* _msg = _internal_mutable_f_133();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_133)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::set_allocated_f_133(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_133_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }

  _impl_.f_133_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_133)
}

// repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.M54 f_135 = 137;
inline int Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_135_size() const {
  return _internal_f_135().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44_M50::f_135_size() const {
  return _internal_f_135_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44_M50::clear_f_135() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_135_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_135(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_135)
  return _internal_mutable_f_135()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>* Message6_M1_M15_M23_M28_M42_M44_M50::mutable_f_135()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_135)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_135();
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54& Message6_M1_M15_M23_M28_M42_M44_M50::f_135(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_135)
  return _internal_f_135().Get(index);
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54* Message6_M1_M15_M23_M28_M42_M44_M50::add_f_135() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54* _add = _internal_mutable_f_135()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_135)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>& Message6_M1_M15_M23_M28_M42_M44_M50::f_135() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50.f_135)
  return _internal_f_135();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>&
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_f_135() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_135_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M54>*
Message6_M1_M15_M23_M28_M42_M44_M50::_internal_mutable_f_135() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_135_;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M44

// optional string f_0 = 3;
inline bool Message6_M1_M15_M23_M28_M42_M44::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M44::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_0)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M44::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M44::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M44::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M44::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_0)
}

// repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M47 f_3 = 4;
inline int Message6_M1_M15_M23_M28_M42_M44::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message6_M1_M15_M23_M28_M42_M44::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message6_M1_M15_M23_M28_M42_M44::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47* Message6_M1_M15_M23_M28_M42_M44::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>* Message6_M1_M15_M23_M28_M42_M44::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47& Message6_M1_M15_M23_M28_M42_M44::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47* Message6_M1_M15_M23_M28_M42_M44::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>& Message6_M1_M15_M23_M28_M42_M44::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>&
Message6_M1_M15_M23_M28_M42_M44::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47>*
Message6_M1_M15_M23_M28_M42_M44::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.M50 f_4 = 5;
inline bool Message6_M1_M15_M23_M28_M42_M44::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M44::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50& Message6_M1_M15_M23_M28_M42_M44::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M44_M50_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50& Message6_M1_M15_M23_M28_M42_M44::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15_M23_M28_M42_M44::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_4)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* Message6_M1_M15_M23_M28_M42_M44::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* Message6_M1_M15_M23_M28_M42_M44::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* Message6_M1_M15_M23_M28_M42_M44::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* Message6_M1_M15_M23_M28_M42_M44::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_4)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42_M44::set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44.f_4)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M45_M49

// optional fixed32 f_0 = 1;
inline bool Message6_M1_M15_M23_M28_M42_M45_M49::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45_M49::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M45_M49::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15_M23_M28_M42_M45_M49::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49.f_0)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M42_M45_M49::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M1_M15_M23_M28_M42_M45_M49::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42_M45

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E45 f_0 = 1;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 Message6_M1_M15_M23_M28_M42_M45::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_0)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 Message6_M1_M15_M23_M28_M42_M45::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45>(_impl_.f_0_);
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_0(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45_IsValid(value));
  _impl_.f_0_ = value;
}

// optional string f_1 = 2;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M45::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M45::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_1)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_1)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M45::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_1)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E46 f_2 = 4;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 Message6_M1_M15_M23_M28_M42_M45::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_2)
  return _internal_f_2();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_2)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 Message6_M1_M15_M23_M28_M42_M45::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46>(_impl_.f_2_);
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46_IsValid(value));
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 5;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M45::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_3)
}
inline ::int64_t Message6_M1_M15_M23_M28_M42_M45::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E47 f_4 = 7;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 Message6_M1_M15_M23_M28_M42_M45::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_4)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 Message6_M1_M15_M23_M28_M42_M45::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47>(_impl_.f_4_);
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47_IsValid(value));
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E48 f_5 = 8;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 Message6_M1_M15_M23_M28_M42_M45::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_5)
  return _internal_f_5();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_5)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 Message6_M1_M15_M23_M28_M42_M45::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48>(_impl_.f_5_);
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_5(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48_IsValid(value));
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.E49 f_6 = 9;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 Message6_M1_M15_M23_M28_M42_M45::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_6)
  return _internal_f_6();
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_6(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_6)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 Message6_M1_M15_M23_M28_M42_M45::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49>(_impl_.f_6_);
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_6(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49_IsValid(value));
  _impl_.f_6_ = value;
}

// optional string f_7 = 10;
inline bool Message6_M1_M15_M23_M28_M42_M45::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M45::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42_M45::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_7)
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_7)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42_M45::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message6_M1_M15_M23_M28_M42_M45::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42_M45::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_7)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_7)
}

// repeated int32 f_8 = 12 [packed = true];
inline int Message6_M1_M15_M23_M28_M42_M45::_internal_f_8_size() const {
  return _internal_f_8().size();
}
inline int Message6_M1_M15_M23_M28_M42_M45::f_8_size() const {
  return _internal_f_8_size();
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.Clear();
}
inline ::int32_t Message6_M1_M15_M23_M28_M42_M45::f_8(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_8)
  return _internal_f_8().Get(index);
}
inline void Message6_M1_M15_M23_M28_M42_M45::set_f_8(int index, ::int32_t value) {
  _internal_mutable_f_8()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_8)
}
inline void Message6_M1_M15_M23_M28_M42_M45::add_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_8()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_8)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M1_M15_M23_M28_M42_M45::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_8)
  return _internal_f_8();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M45::mutable_f_8()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_8)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_8();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M1_M15_M23_M28_M42_M45::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M1_M15_M23_M28_M42_M45::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_8_;
}

// repeated .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.M49 f_12 = 13;
inline int Message6_M1_M15_M23_M28_M42_M45::_internal_f_12_size() const {
  return _internal_f_12().size();
}
inline int Message6_M1_M15_M23_M28_M42_M45::f_12_size() const {
  return _internal_f_12_size();
}
inline void Message6_M1_M15_M23_M28_M42_M45::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49* Message6_M1_M15_M23_M28_M42_M45::mutable_f_12(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_12)
  return _internal_mutable_f_12()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>* Message6_M1_M15_M23_M28_M42_M45::mutable_f_12()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_12)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_12();
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49& Message6_M1_M15_M23_M28_M42_M45::f_12(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_12)
  return _internal_f_12().Get(index);
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49* Message6_M1_M15_M23_M28_M42_M45::add_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49* _add = _internal_mutable_f_12()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_12)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>& Message6_M1_M15_M23_M28_M42_M45::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45.f_12)
  return _internal_f_12();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>&
Message6_M1_M15_M23_M28_M42_M45::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_M49>*
Message6_M1_M15_M23_M28_M42_M45::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_12_;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M42

// optional string f_0 = 2;
inline bool Message6_M1_M15_M23_M28_M42::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M42::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M42::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M42::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_0)
}
inline std::string* Message6_M1_M15_M23_M28_M42::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M42::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23_M28_M42::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M42::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M42::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_0)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M44 f_2 = 3;
inline bool Message6_M1_M15_M23_M28_M42::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44& Message6_M1_M15_M23_M28_M42::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M44_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44& Message6_M1_M15_M23_M28_M42::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_2)
  return _internal_f_2();
}
inline void Message6_M1_M15_M23_M28_M42::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_2)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* Message6_M1_M15_M23_M28_M42::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* Message6_M1_M15_M23_M28_M42::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* Message6_M1_M15_M23_M28_M42::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* Message6_M1_M15_M23_M28_M42::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_2)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42::set_allocated_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_2)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42.M45 f_3 = 4;
inline bool Message6_M1_M15_M23_M28_M42::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28_M42::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45& Message6_M1_M15_M23_M28_M42::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_M45_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45& Message6_M1_M15_M23_M28_M42::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M42::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_3)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* Message6_M1_M15_M23_M28_M42::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* Message6_M1_M15_M23_M28_M42::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_3)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* Message6_M1_M15_M23_M28_M42::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* Message6_M1_M15_M23_M28_M42::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_3)
  return _msg;
}
inline void Message6_M1_M15_M23_M28_M42::set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M42.f_3)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28_M43

// optional fixed32 f_0 = 3;
inline bool Message6_M1_M15_M23_M28_M43::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_0)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E38 f_1 = 4;
inline bool Message6_M1_M15_M23_M28_M43::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 Message6_M1_M15_M23_M28_M43::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_1)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 Message6_M1_M15_M23_M28_M43::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38>(_impl_.f_1_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_1(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38_IsValid(value));
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E39 f_2 = 5;
inline bool Message6_M1_M15_M23_M28_M43::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 Message6_M1_M15_M23_M28_M43::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_2)
  return _internal_f_2();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_2)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 Message6_M1_M15_M23_M28_M43::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39>(_impl_.f_2_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_2(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39_IsValid(value));
  _impl_.f_2_ = value;
}

// optional fixed32 f_3 = 6;
inline bool Message6_M1_M15_M23_M28_M43::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_3)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message6_M1_M15_M23_M28_M43::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_4)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional string f_5 = 9;
inline bool Message6_M1_M15_M23_M28_M43::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_5)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_5)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_5)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_5)
}

// repeated int64 f_6 = 12 [packed = true];
inline int Message6_M1_M15_M23_M28_M43::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message6_M1_M15_M23_M28_M43::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_6(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_6)
  return _internal_f_6().Get(index);
}
inline void Message6_M1_M15_M23_M28_M43::set_f_6(int index, ::int64_t value) {
  _internal_mutable_f_6()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_6)
}
inline void Message6_M1_M15_M23_M28_M43::add_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_6()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_6)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M1_M15_M23_M28_M43::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_6)
  return _internal_f_6();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M23_M28_M43::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M1_M15_M23_M28_M43::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// optional string f_7 = 13;
inline bool Message6_M1_M15_M23_M28_M43::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_7)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_7)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_7)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_7)
}

// optional uint32 f_8 = 14;
inline bool Message6_M1_M15_M23_M28_M43::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_8)
  return _internal_f_8();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_8(::uint32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_8)
}
inline ::uint32_t Message6_M1_M15_M23_M28_M43::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_8(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional string f_9 = 15;
inline bool Message6_M1_M15_M23_M28_M43::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_9)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_9)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_9)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_9)
}

// optional int32 f_10 = 16;
inline bool Message6_M1_M15_M23_M28_M43::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_10)
  return _internal_f_10();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_10(::int32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_10)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional float f_11 = 17;
inline bool Message6_M1_M15_M23_M28_M43::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float Message6_M1_M15_M23_M28_M43::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_11)
  return _internal_f_11();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_11(float value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_11)
}
inline float Message6_M1_M15_M23_M28_M43::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_11(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 18;
inline bool Message6_M1_M15_M23_M28_M43::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float Message6_M1_M15_M23_M28_M43::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_12)
  return _internal_f_12();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_12)
}
inline float Message6_M1_M15_M23_M28_M43::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional fixed64 f_13 = 20;
inline bool Message6_M1_M15_M23_M28_M43::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M43::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_13)
  return _internal_f_13();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_13(::uint64_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_13)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M43::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_13(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional string f_14 = 21;
inline bool Message6_M1_M15_M23_M28_M43::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_14() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_14)
  return _internal_f_14();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_14(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_14_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_14)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_14)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_14(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_14_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_14_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_14)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_14_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_14_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_14(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_14_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_14_.IsDefault()) {
          _impl_.f_14_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_14)
}

// optional string f_15 = 22;
inline bool Message6_M1_M15_M23_M28_M43::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_15)
  return _internal_f_15();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_15(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_15_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_15)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_15)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_15(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_15_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_15_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_15)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_15_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_15_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_15(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_15_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_15_.IsDefault()) {
          _impl_.f_15_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_15)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E40 f_16 = 24;
inline bool Message6_M1_M15_M23_M28_M43::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 Message6_M1_M15_M23_M28_M43::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_16)
  return _internal_f_16();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_16(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_16)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 Message6_M1_M15_M23_M28_M43::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40>(_impl_.f_16_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_16(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40_IsValid(value));
  _impl_.f_16_ = value;
}

// optional int32 f_17 = 25;
inline bool Message6_M1_M15_M23_M28_M43::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_17)
  return _internal_f_17();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_17(::int32_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_17)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_17(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E41 f_18 = 26;
inline bool Message6_M1_M15_M23_M28_M43::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 Message6_M1_M15_M23_M28_M43::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_18)
  return _internal_f_18();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_18(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_18)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 Message6_M1_M15_M23_M28_M43::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41>(_impl_.f_18_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_18(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41_IsValid(value));
  _impl_.f_18_ = value;
}

// optional int32 f_19 = 27;
inline bool Message6_M1_M15_M23_M28_M43::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_19)
  return _internal_f_19();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_19(::int32_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_19)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional string f_20 = 28;
inline bool Message6_M1_M15_M23_M28_M43::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_20() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_20)
  return _internal_f_20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_20(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_20_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_20)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_20)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_20(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_20_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_20_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_20)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_20_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_20_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_20(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_20_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_20_.IsDefault()) {
          _impl_.f_20_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_20)
}

// optional bool f_21 = 30;
inline bool Message6_M1_M15_M23_M28_M43::has_f_21() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool Message6_M1_M15_M23_M28_M43::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_21)
  return _internal_f_21();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_21(bool value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_21)
}
inline bool Message6_M1_M15_M23_M28_M43::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_21(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional string f_22 = 32;
inline bool Message6_M1_M15_M23_M28_M43::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_22)
  return _internal_f_22();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_22(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_22_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_22)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_22)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_22(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_22_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_22_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_22)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_22_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_22_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_22(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_22_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_22_.IsDefault()) {
          _impl_.f_22_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_22)
}

// optional bytes f_23 = 33;
inline bool Message6_M1_M15_M23_M28_M43::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_23)
  return _internal_f_23();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_23(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_23_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_23)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_23)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_23(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_23_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_23_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_23)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_23_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_23_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_23(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_23_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_23_.IsDefault()) {
          _impl_.f_23_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_23)
}

// optional uint64 f_24 = 34;
inline bool Message6_M1_M15_M23_M28_M43::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::uint64_t Message6_M1_M15_M23_M28_M43::f_24() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_24)
  return _internal_f_24();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_24(::uint64_t value) {
  _internal_set_f_24(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_24)
}
inline ::uint64_t Message6_M1_M15_M23_M28_M43::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_24(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = value;
}

// optional bool f_25 = 35;
inline bool Message6_M1_M15_M23_M28_M43::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool Message6_M1_M15_M23_M28_M43::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_25)
  return _internal_f_25();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_25(bool value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_25)
}
inline bool Message6_M1_M15_M23_M28_M43::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_25(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E42 f_26 = 37;
inline bool Message6_M1_M15_M23_M28_M43::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 Message6_M1_M15_M23_M28_M43::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_26)
  return _internal_f_26();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_26(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_26)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 Message6_M1_M15_M23_M28_M43::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42>(_impl_.f_26_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_26(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42_IsValid(value));
  _impl_.f_26_ = value;
}

// optional int64 f_27 = 38;
inline bool Message6_M1_M15_M23_M28_M43::has_f_27() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_27)
  return _internal_f_27();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_27(::int64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_27)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_27(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional double f_28 = 40;
inline bool Message6_M1_M15_M23_M28_M43::has_f_28() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double Message6_M1_M15_M23_M28_M43::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_28)
  return _internal_f_28();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_28(double value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_28)
}
inline double Message6_M1_M15_M23_M28_M43::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_28(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E43 f_29 = 41;
inline bool Message6_M1_M15_M23_M28_M43::has_f_29() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 Message6_M1_M15_M23_M28_M43::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_29)
  return _internal_f_29();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_29(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_29)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 Message6_M1_M15_M23_M28_M43::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43>(_impl_.f_29_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_29(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43_IsValid(value));
  _impl_.f_29_ = value;
}

// optional float f_30 = 42;
inline bool Message6_M1_M15_M23_M28_M43::has_f_30() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float Message6_M1_M15_M23_M28_M43::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_30)
  return _internal_f_30();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_30(float value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_30)
}
inline float Message6_M1_M15_M23_M28_M43::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_30(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional int32 f_31 = 45;
inline bool Message6_M1_M15_M23_M28_M43::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_31)
  return _internal_f_31();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_31(::int32_t value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_31)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_31(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional string f_32 = 46;
inline bool Message6_M1_M15_M23_M28_M43::has_f_32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_32() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_32)
  return _internal_f_32();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_32(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_32_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_32)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_32() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_32();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_32)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_32(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_32_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_32_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_32)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_32_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_32_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_32(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_32_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_32_.IsDefault()) {
          _impl_.f_32_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_32)
}

// optional int32 f_33 = 49;
inline bool Message6_M1_M15_M23_M28_M43::has_f_33() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_33)
  return _internal_f_33();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_33(::int32_t value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_33)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_33(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional string f_34 = 50;
inline bool Message6_M1_M15_M23_M28_M43::has_f_34() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_34() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_34)
  return _internal_f_34();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_34(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_34_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_34)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_34() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_34();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_34)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_34(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_34_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_34_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_34)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_34_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_34_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_34(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_34_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_34_.IsDefault()) {
          _impl_.f_34_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_34)
}

// optional bool f_35 = 52;
inline bool Message6_M1_M15_M23_M28_M43::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool Message6_M1_M15_M23_M28_M43::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_35)
  return _internal_f_35();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_35(bool value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_35)
}
inline bool Message6_M1_M15_M23_M28_M43::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_35(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = value;
}

// optional bool f_36 = 54;
inline bool Message6_M1_M15_M23_M28_M43::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool Message6_M1_M15_M23_M28_M43::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_36)
  return _internal_f_36();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_36(bool value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_36)
}
inline bool Message6_M1_M15_M23_M28_M43::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_36(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional int64 f_37 = 57;
inline bool Message6_M1_M15_M23_M28_M43::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_37)
  return _internal_f_37();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_37(::int64_t value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_37)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_37(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional string f_38 = 59;
inline bool Message6_M1_M15_M23_M28_M43::has_f_38() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_38() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_38)
  return _internal_f_38();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_38(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_38_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_38)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_38() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_38();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_38)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_38(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_38_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_38_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_38)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_38_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_38_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_38(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_38_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_38_.IsDefault()) {
          _impl_.f_38_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_38)
}

// optional int32 f_39 = 60;
inline bool Message6_M1_M15_M23_M28_M43::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_39)
  return _internal_f_39();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_39(::int32_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_39)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_39(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional int64 f_40 = 61;
inline bool Message6_M1_M15_M23_M28_M43::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_40)
  return _internal_f_40();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_40(::int64_t value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_40)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_40(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = value;
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43.E44 f_41 = 62;
inline bool Message6_M1_M15_M23_M28_M43::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 Message6_M1_M15_M23_M28_M43::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_41)
  return _internal_f_41();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_41(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_41)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 Message6_M1_M15_M23_M28_M43::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44>(_impl_.f_41_);
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_41(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44_IsValid(value));
  _impl_.f_41_ = value;
}

// optional int64 f_42 = 63;
inline bool Message6_M1_M15_M23_M28_M43::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_42)
  return _internal_f_42();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_42(::int64_t value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_42)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_42(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// optional float f_43 = 65;
inline bool Message6_M1_M15_M23_M28_M43::has_f_43() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline float Message6_M1_M15_M23_M28_M43::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_43)
  return _internal_f_43();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_43(float value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_43)
}
inline float Message6_M1_M15_M23_M28_M43::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_43(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = value;
}

// optional int64 f_44 = 66;
inline bool Message6_M1_M15_M23_M28_M43::has_f_44() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_44)
  return _internal_f_44();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_44(::int64_t value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_44)
}
inline ::int64_t Message6_M1_M15_M23_M28_M43::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_44(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// optional int32 f_45 = 67;
inline bool Message6_M1_M15_M23_M28_M43::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_45)
  return _internal_f_45();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_45(::int32_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_45)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_45(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional string f_46 = 68;
inline bool Message6_M1_M15_M23_M28_M43::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28_M43::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_46_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_46)
}
inline std::string* Message6_M1_M15_M23_M28_M43::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_46)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28_M43::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28_M43::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_46)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28_M43::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_46)
}

// optional bool f_47 = 70;
inline bool Message6_M1_M15_M23_M28_M43::has_f_47() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = false;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline bool Message6_M1_M15_M23_M28_M43::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_47)
  return _internal_f_47();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_47(bool value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_47)
}
inline bool Message6_M1_M15_M23_M28_M43::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_47(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = value;
}

// optional int32 f_48 = 71;
inline bool Message6_M1_M15_M23_M28_M43::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28_M43::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_48)
  return _internal_f_48();
}
inline void Message6_M1_M15_M23_M28_M43::set_f_48(::int32_t value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.M43.f_48)
}
inline ::int32_t Message6_M1_M15_M23_M28_M43::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message6_M1_M15_M23_M28_M43::_internal_set_f_48(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23_M28

// optional string f_0 = 3;
inline bool Message6_M1_M15_M23_M28::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23_M28::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23_M28::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23_M28::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.M28.f_0)
}
inline std::string* Message6_M1_M15_M23_M28::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23_M28::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23_M28::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23_M28::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23_M28::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23_M28::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.f_0)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M42 f_3 = 4;
inline bool Message6_M1_M15_M23_M28::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42& Message6_M1_M15_M23_M28::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M42_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M42& Message6_M1_M15_M23_M28::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M15_M23_M28::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.f_3)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* Message6_M1_M15_M23_M28::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* Message6_M1_M15_M23_M28::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* Message6_M1_M15_M23_M28::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M42>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* Message6_M1_M15_M23_M28::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M42* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.f_3)
  return _msg;
}
inline void Message6_M1_M15_M23_M28::set_allocated_f_3(::fleetbench::proto::Message6_M1_M15_M23_M28_M42* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M42*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.f_3)
}

// optional .fleetbench.proto.Message6.M1.M15.M23.M28.M43 f_4 = 5;
inline bool Message6_M1_M15_M23_M28::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message6_M1_M15_M23_M28::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43& Message6_M1_M15_M23_M28::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43&>(::fleetbench::proto::_Message6_M1_M15_M23_M28_M43_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28_M43& Message6_M1_M15_M23_M28::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.M28.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15_M23_M28::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M43* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.f_4)
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* Message6_M1_M15_M23_M28::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* Message6_M1_M15_M23_M28::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.M28.f_4)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* Message6_M1_M15_M23_M28::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23_M28_M43>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* Message6_M1_M15_M23_M28::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23_M28_M43* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.M28.f_4)
  return _msg;
}
inline void Message6_M1_M15_M23_M28::set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M23_M28_M43* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23_M28_M43*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.M28.f_4)
}

// -------------------------------------------------------------------

// Message6_M1_M15_M23

// optional bytes f_0 = 1;
inline bool Message6_M1_M15_M23::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15_M23::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15_M23::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15_M23::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.M23.f_0)
}
inline std::string* Message6_M1_M15_M23::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.f_0)
  return _s;
}
inline const std::string& Message6_M1_M15_M23::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M1_M15_M23::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15_M23::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15_M23::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.M23.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15_M23::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.M23.f_0)
}

// repeated .fleetbench.proto.Message6.M1.M15.M23.M28 f_1 = 3;
inline int Message6_M1_M15_M23::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M1_M15_M23::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M1_M15_M23::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28* Message6_M1_M15_M23::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.M23.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>* Message6_M1_M15_M23::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M15.M23.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message6_M1_M15_M23_M28& Message6_M1_M15_M23::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.M23.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message6_M1_M15_M23_M28* Message6_M1_M15_M23::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1_M15_M23_M28* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M15.M23.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>& Message6_M1_M15_M23::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M15.M23.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>&
Message6_M1_M15_M23::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15_M23_M28>*
Message6_M1_M15_M23::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message6_M1_M15

// optional int32 f_0 = 1;
inline bool Message6_M1_M15::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M15::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message6_M1_M15::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.f_0)
  return _internal_f_0();
}
inline void Message6_M1_M15::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.f_0)
}
inline ::int32_t Message6_M1_M15::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M1_M15::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint64 f_1 = 3;
inline bool Message6_M1_M15::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M15::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message6_M1_M15::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M15::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.f_1)
}
inline ::uint64_t Message6_M1_M15::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M1_M15::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bytes f_2 = 4;
inline bool Message6_M1_M15::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M15::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M15::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M15::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M15.f_2)
}
inline std::string* Message6_M1_M15::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.f_2)
  return _s;
}
inline const std::string& Message6_M1_M15::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M1_M15::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M1_M15::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M1_M15::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M15::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.f_2)
}

// optional .fleetbench.proto.Message6.M1.M15.M21 f_4 = 5;
inline bool Message6_M1_M15::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message6_M1_M15::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M21& Message6_M1_M15::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M21* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M21&>(::fleetbench::proto::_Message6_M1_M15_M21_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M21& Message6_M1_M15::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.f_4)
  return _internal_f_4();
}
inline void Message6_M1_M15::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M21* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M21*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.f_4)
}
inline ::fleetbench::proto::Message6_M1_M15_M21* Message6_M1_M15::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M21* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M21* Message6_M1_M15::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M21* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M21* Message6_M1_M15::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M21>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M21*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message6_M1_M15_M21* Message6_M1_M15::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M1_M15_M21* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.f_4)
  return _msg;
}
inline void Message6_M1_M15::set_allocated_f_4(::fleetbench::proto::Message6_M1_M15_M21* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M21*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.f_4)
}

// optional .fleetbench.proto.Message6.M1.M15.M23 f_5 = 6;
inline bool Message6_M1_M15::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message6_M1_M15::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M1_M15_M23& Message6_M1_M15::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M15_M23* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M15_M23&>(::fleetbench::proto::_Message6_M1_M15_M23_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M15_M23& Message6_M1_M15::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M15.f_5)
  return _internal_f_5();
}
inline void Message6_M1_M15::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message6_M1_M15_M23* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.M15.f_5)
}
inline ::fleetbench::proto::Message6_M1_M15_M23* Message6_M1_M15::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M15_M23* Message6_M1_M15::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M15.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M15_M23* Message6_M1_M15::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M15_M23>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message6_M1_M15_M23* Message6_M1_M15::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M1_M15_M23* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M15.f_5)
  return _msg;
}
inline void Message6_M1_M15::set_allocated_f_5(::fleetbench::proto::Message6_M1_M15_M23* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M15_M23*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M15.f_5)
}

// -------------------------------------------------------------------

// Message6_M1_M17

// repeated int64 f_0 = 1 [packed = true];
inline int Message6_M1_M17::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M1_M17::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M1_M17::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int64_t Message6_M1_M17::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_0)
  return _internal_f_0().Get(index);
}
inline void Message6_M1_M17::set_f_0(int index, ::int64_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_0)
}
inline void Message6_M1_M17::add_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M17.f_0)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M1_M17::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M17.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M17::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M17.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M1_M17::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M17::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional int64 f_1 = 4;
inline bool Message6_M1_M17::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6_M1_M17::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_1)
  return _internal_f_1();
}
inline void Message6_M1_M17::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_1)
}
inline ::int64_t Message6_M1_M17::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M1_M17::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated float f_2 = 6 [packed = true];
inline int Message6_M1_M17::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M1_M17::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M1_M17::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline float Message6_M1_M17::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_2)
  return _internal_f_2().Get(index);
}
inline void Message6_M1_M17::set_f_2(int index, float value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_2)
}
inline void Message6_M1_M17::add_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M17.f_2)
}
inline const ::google::protobuf::RepeatedField<float>& Message6_M1_M17::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M17.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<float>* Message6_M1_M17::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M17.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<float>&
Message6_M1_M17::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<float>* Message6_M1_M17::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional bool f_3 = 7;
inline bool Message6_M1_M17::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Message6_M1_M17::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_3)
  return _internal_f_3();
}
inline void Message6_M1_M17::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_3)
}
inline bool Message6_M1_M17::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1_M17::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 8;
inline bool Message6_M1_M17::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M1_M17::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M17::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_4)
}
inline std::string* Message6_M1_M17::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M17.f_4)
  return _s;
}
inline const std::string& Message6_M1_M17::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M1_M17::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M1_M17::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M1_M17::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M17.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M17::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M17.f_4)
}

// repeated int64 f_5 = 9 [packed = true];
inline int Message6_M1_M17::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message6_M1_M17::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message6_M1_M17::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::int64_t Message6_M1_M17::f_5(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_5)
  return _internal_f_5().Get(index);
}
inline void Message6_M1_M17::set_f_5(int index, ::int64_t value) {
  _internal_mutable_f_5()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_5)
}
inline void Message6_M1_M17::add_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_5()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M17.f_5)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M1_M17::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M17.f_5)
  return _internal_f_5();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M17::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M17.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M1_M17::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M1_M17::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// optional int64 f_6 = 11;
inline bool Message6_M1_M17::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message6_M1_M17::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_6)
  return _internal_f_6();
}
inline void Message6_M1_M17::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_6)
}
inline ::int64_t Message6_M1_M17::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message6_M1_M17::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional string f_7 = 12;
inline bool Message6_M1_M17::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M1_M17::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M17::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_7)
}
inline std::string* Message6_M1_M17::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M17.f_7)
  return _s;
}
inline const std::string& Message6_M1_M17::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message6_M1_M17::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message6_M1_M17::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message6_M1_M17::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M17.f_7)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M17::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M17.f_7)
}

// optional .fleetbench.proto.Message6.M1.M17.E7 f_8 = 13;
inline bool Message6_M1_M17::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message6_M1_M17_E7 Message6_M1_M17::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_8)
  return _internal_f_8();
}
inline void Message6_M1_M17::set_f_8(::fleetbench::proto::Message6_M1_M17_E7 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_8)
}
inline ::fleetbench::proto::Message6_M1_M17_E7 Message6_M1_M17::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M17_E7>(_impl_.f_8_);
}
inline void Message6_M1_M17::_internal_set_f_8(::fleetbench::proto::Message6_M1_M17_E7 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M17_E7_IsValid(value));
  _impl_.f_8_ = value;
}

// optional string f_9 = 14;
inline bool Message6_M1_M17::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M1_M17::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M17::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_9)
}
inline std::string* Message6_M1_M17::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M17.f_9)
  return _s;
}
inline const std::string& Message6_M1_M17::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message6_M1_M17::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message6_M1_M17::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message6_M1_M17::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M17.f_9)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M17::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M17.f_9)
}

// optional int32 f_10 = 15;
inline bool Message6_M1_M17::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Message6_M1_M17::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_10)
  return _internal_f_10();
}
inline void Message6_M1_M17::set_f_10(::int32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_10)
}
inline ::int32_t Message6_M1_M17::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M1_M17::_internal_set_f_10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional int32 f_11 = 16;
inline bool Message6_M1_M17::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Message6_M1_M17::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_11)
  return _internal_f_11();
}
inline void Message6_M1_M17::set_f_11(::int32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_11)
}
inline ::int32_t Message6_M1_M17::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message6_M1_M17::_internal_set_f_11(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional string f_12 = 18;
inline bool Message6_M1_M17::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M1_M17::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M1_M17::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_12)
}
inline std::string* Message6_M1_M17::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.M17.f_12)
  return _s;
}
inline const std::string& Message6_M1_M17::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message6_M1_M17::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message6_M1_M17::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message6_M1_M17::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.M17.f_12)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M1_M17::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.M17.f_12)
}

// optional float f_13 = 19;
inline bool Message6_M1_M17::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float Message6_M1_M17::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_13)
  return _internal_f_13();
}
inline void Message6_M1_M17::set_f_13(float value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_13)
}
inline float Message6_M1_M17::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message6_M1_M17::_internal_set_f_13(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int64 f_14 = 21;
inline bool Message6_M1_M17::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Message6_M1_M17::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_14)
  return _internal_f_14();
}
inline void Message6_M1_M17::set_f_14(::int64_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_14)
}
inline ::int64_t Message6_M1_M17::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message6_M1_M17::_internal_set_f_14(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// repeated uint64 f_15 = 22 [packed = true];
inline int Message6_M1_M17::_internal_f_15_size() const {
  return _internal_f_15().size();
}
inline int Message6_M1_M17::f_15_size() const {
  return _internal_f_15_size();
}
inline void Message6_M1_M17::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.Clear();
}
inline ::uint64_t Message6_M1_M17::f_15(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_15)
  return _internal_f_15().Get(index);
}
inline void Message6_M1_M17::set_f_15(int index, ::uint64_t value) {
  _internal_mutable_f_15()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_15)
}
inline void Message6_M1_M17::add_f_15(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_15()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.M17.f_15)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& Message6_M1_M17::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.M17.f_15)
  return _internal_f_15();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message6_M1_M17::mutable_f_15()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.M17.f_15)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_15();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
Message6_M1_M17::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message6_M1_M17::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_15_;
}

// optional .fleetbench.proto.Message6.M1.M17.E8 f_16 = 24;
inline bool Message6_M1_M17::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M1_M17::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message6_M1_M17_E8 Message6_M1_M17::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.M17.f_16)
  return _internal_f_16();
}
inline void Message6_M1_M17::set_f_16(::fleetbench::proto::Message6_M1_M17_E8 value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.M17.f_16)
}
inline ::fleetbench::proto::Message6_M1_M17_E8 Message6_M1_M17::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_M17_E8>(_impl_.f_16_);
}
inline void Message6_M1_M17::_internal_set_f_16(::fleetbench::proto::Message6_M1_M17_E8 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_M17_E8_IsValid(value));
  _impl_.f_16_ = value;
}

// -------------------------------------------------------------------

// Message6_M1

// optional float f_0 = 2;
inline bool Message6_M1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message6_M1::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_0)
  return _internal_f_0();
}
inline void Message6_M1::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_0)
}
inline float Message6_M1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M1::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message6_M1::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message6_M1::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_1)
  return _internal_f_1();
}
inline void Message6_M1::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_1)
}
inline ::int32_t Message6_M1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M1::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 4;
inline bool Message6_M1::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M1::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message6_M1::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_2)
  return _internal_f_2();
}
inline void Message6_M1::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_2)
}
inline ::int32_t Message6_M1::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M1::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 6;
inline bool Message6_M1::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M1::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message6_M1::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_3)
  return _internal_f_3();
}
inline void Message6_M1::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_3)
}
inline ::int64_t Message6_M1::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M1::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional uint64 f_4 = 8;
inline bool Message6_M1::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M1::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Message6_M1::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_4)
  return _internal_f_4();
}
inline void Message6_M1::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_4)
}
inline ::uint64_t Message6_M1::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M1::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message6.M1.E3 f_5 = 9;
inline bool Message6_M1::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M1::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message6_M1_E3 Message6_M1::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_5)
  return _internal_f_5();
}
inline void Message6_M1::set_f_5(::fleetbench::proto::Message6_M1_E3 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M1.f_5)
}
inline ::fleetbench::proto::Message6_M1_E3 Message6_M1::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M1_E3>(_impl_.f_5_);
}
inline void Message6_M1::_internal_set_f_5(::fleetbench::proto::Message6_M1_E3 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M1_E3_IsValid(value));
  _impl_.f_5_ = value;
}

// repeated .fleetbench.proto.Message6.M1.M15 f_9 = 10;
inline int Message6_M1::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message6_M1::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message6_M1::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::fleetbench::proto::Message6_M1_M15* Message6_M1::mutable_f_9(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.f_9)
  return _internal_mutable_f_9()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>* Message6_M1::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M1.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::fleetbench::proto::Message6_M1_M15& Message6_M1::f_9(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_9)
  return _internal_f_9().Get(index);
}
inline ::fleetbench::proto::Message6_M1_M15* Message6_M1::add_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1_M15* _add = _internal_mutable_f_9()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M1.f_9)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>& Message6_M1::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M1.f_9)
  return _internal_f_9();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>&
Message6_M1::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1_M15>*
Message6_M1::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// optional .fleetbench.proto.Message6.M1.M17 f_10 = 12;
inline bool Message6_M1::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_10_ != nullptr);
  return value;
}
inline void Message6_M1::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ != nullptr) _impl_.f_10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M1_M17& Message6_M1::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M1_M17* p = _impl_.f_10_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M1_M17&>(::fleetbench::proto::_Message6_M1_M17_default_instance_);
}
inline const ::fleetbench::proto::Message6_M1_M17& Message6_M1::f_10() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M1.f_10)
  return _internal_f_10();
}
inline void Message6_M1::unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message6_M1_M17* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_10_);
  }
  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M17*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M1.f_10)
}
inline ::fleetbench::proto::Message6_M1_M17* Message6_M1::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M17* released = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M1_M17* Message6_M1::unsafe_arena_release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M1.f_10)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M1_M17* temp = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M1_M17* Message6_M1::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M1_M17>(GetArena());
    _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M17*>(p);
  }
  return _impl_.f_10_;
}
inline ::fleetbench::proto::Message6_M1_M17* Message6_M1::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M1_M17* _msg = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M1.f_10)
  return _msg;
}
inline void Message6_M1::set_allocated_f_10(::fleetbench::proto::Message6_M1_M17* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_10_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M1_M17*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M1.f_10)
}

// -------------------------------------------------------------------

// Message6_M2_M10_M19

// optional bytes f_0 = 3;
inline bool Message6_M2_M10_M19::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M2_M10_M19::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M2_M10_M19::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.M19.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M2_M10_M19::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.M19.f_0)
}
inline std::string* Message6_M2_M10_M19::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.M10.M19.f_0)
  return _s;
}
inline const std::string& Message6_M2_M10_M19::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M2_M10_M19::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M2_M10_M19::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M2_M10_M19::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M2.M10.M19.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M2_M10_M19::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M2.M10.M19.f_0)
}

// -------------------------------------------------------------------

// Message6_M2_M10

// optional double f_0 = 1;
inline bool Message6_M2_M10::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M2_M10::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Message6_M2_M10::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_0)
  return _internal_f_0();
}
inline void Message6_M2_M10::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.f_0)
}
inline double Message6_M2_M10::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M2_M10::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message6_M2_M10::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M2_M10::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message6_M2_M10::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_1)
  return _internal_f_1();
}
inline void Message6_M2_M10::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.f_1)
}
inline ::int32_t Message6_M2_M10::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M2_M10::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated int32 f_2 = 3 [packed = true];
inline int Message6_M2_M10::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M2_M10::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M2_M10::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int32_t Message6_M2_M10::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_2)
  return _internal_f_2().Get(index);
}
inline void Message6_M2_M10::set_f_2(int index, ::int32_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.f_2)
}
inline void Message6_M2_M10::add_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M2.M10.f_2)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M2_M10::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M2.M10.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M2_M10::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M2.M10.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M2_M10::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M2_M10::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional bool f_3 = 4;
inline bool Message6_M2_M10::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M2_M10::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message6_M2_M10::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_3)
  return _internal_f_3();
}
inline void Message6_M2_M10::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.f_3)
}
inline bool Message6_M2_M10::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M2_M10::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 7;
inline bool Message6_M2_M10::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M2_M10::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M2_M10::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M2_M10::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M10.f_4)
}
inline std::string* Message6_M2_M10::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.M10.f_4)
  return _s;
}
inline const std::string& Message6_M2_M10::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M2_M10::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M2_M10::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M2_M10::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M2.M10.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M2_M10::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M2.M10.f_4)
}

// repeated .fleetbench.proto.Message6.M2.M10.M19 f_7 = 8;
inline int Message6_M2_M10::_internal_f_7_size() const {
  return _internal_f_7().size();
}
inline int Message6_M2_M10::f_7_size() const {
  return _internal_f_7_size();
}
inline void Message6_M2_M10::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.Clear();
}
inline ::fleetbench::proto::Message6_M2_M10_M19* Message6_M2_M10::mutable_f_7(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.M10.f_7)
  return _internal_mutable_f_7()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>* Message6_M2_M10::mutable_f_7()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M2.M10.f_7)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_7();
}
inline const ::fleetbench::proto::Message6_M2_M10_M19& Message6_M2_M10::f_7(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M10.f_7)
  return _internal_f_7().Get(index);
}
inline ::fleetbench::proto::Message6_M2_M10_M19* Message6_M2_M10::add_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M2_M10_M19* _add = _internal_mutable_f_7()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M2.M10.f_7)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>& Message6_M2_M10::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M2.M10.f_7)
  return _internal_f_7();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>&
Message6_M2_M10::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M10_M19>*
Message6_M2_M10::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_7_;
}

// -------------------------------------------------------------------

// Message6_M2_M12

// optional int64 f_0 = 1;
inline bool Message6_M2_M12::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M2_M12::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message6_M2_M12::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M12.f_0)
  return _internal_f_0();
}
inline void Message6_M2_M12::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M12.f_0)
}
inline ::int64_t Message6_M2_M12::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M2_M12::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message6_M2_M12::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M2_M12::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message6_M2_M12::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M12.f_1)
  return _internal_f_1();
}
inline void Message6_M2_M12::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M12.f_1)
}
inline ::int32_t Message6_M2_M12::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M2_M12::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message6_M2_M14

// repeated uint64 f_0 = 2 [packed = true];
inline int Message6_M2_M14::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M2_M14::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M2_M14::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::uint64_t Message6_M2_M14::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M14.f_0)
  return _internal_f_0().Get(index);
}
inline void Message6_M2_M14::set_f_0(int index, ::uint64_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M14.f_0)
}
inline void Message6_M2_M14::add_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M2.M14.f_0)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& Message6_M2_M14::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M2.M14.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message6_M2_M14::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M2.M14.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
Message6_M2_M14::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* Message6_M2_M14::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message6_M2_M16

// optional int32 f_0 = 1;
inline bool Message6_M2_M16::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M2_M16::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message6_M2_M16::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M16.f_0)
  return _internal_f_0();
}
inline void Message6_M2_M16::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M16.f_0)
}
inline ::int32_t Message6_M2_M16::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M2_M16::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message6_M2_M16::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M2_M16::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message6_M2_M16::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M16.f_1)
  return _internal_f_1();
}
inline void Message6_M2_M16::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M16.f_1)
}
inline ::int64_t Message6_M2_M16::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M2_M16::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message6_M2_M16::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M2_M16::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M2_M16::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.M16.f_2)
  return _internal_f_2();
}
inline void Message6_M2_M16::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.M16.f_2)
}
inline ::int64_t Message6_M2_M16::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M2_M16::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message6_M2

// optional uint64 f_0 = 1;
inline bool Message6_M2::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M2::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message6_M2::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.f_0)
  return _internal_f_0();
}
inline void Message6_M2::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M2.f_0)
}
inline ::uint64_t Message6_M2::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M2::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M2.M10 f_1 = 6;
inline bool Message6_M2::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M2::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M2_M10& Message6_M2::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M2_M10* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M2_M10&>(::fleetbench::proto::_Message6_M2_M10_default_instance_);
}
inline const ::fleetbench::proto::Message6_M2_M10& Message6_M2::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.f_1)
  return _internal_f_1();
}
inline void Message6_M2::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M2_M10* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M10*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M2.f_1)
}
inline ::fleetbench::proto::Message6_M2_M10* Message6_M2::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M2_M10* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M2_M10* Message6_M2::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M2.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M2_M10* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M2_M10* Message6_M2::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M2_M10>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M10*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M2_M10* Message6_M2::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M2_M10* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.f_1)
  return _msg;
}
inline void Message6_M2::set_allocated_f_1(::fleetbench::proto::Message6_M2_M10* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M10*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M2.f_1)
}

// optional .fleetbench.proto.Message6.M2.M12 f_6 = 7;
inline bool Message6_M2::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message6_M2::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M2_M12& Message6_M2::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M2_M12* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M2_M12&>(::fleetbench::proto::_Message6_M2_M12_default_instance_);
}
inline const ::fleetbench::proto::Message6_M2_M12& Message6_M2::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.f_6)
  return _internal_f_6();
}
inline void Message6_M2::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message6_M2_M12* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M12*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M2.f_6)
}
inline ::fleetbench::proto::Message6_M2_M12* Message6_M2::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M2_M12* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M2_M12* Message6_M2::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M2.f_6)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M2_M12* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M2_M12* Message6_M2::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M2_M12>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M12*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message6_M2_M12* Message6_M2::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M2_M12* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.f_6)
  return _msg;
}
inline void Message6_M2::set_allocated_f_6(::fleetbench::proto::Message6_M2_M12* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message6_M2_M12*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M2.f_6)
}

// repeated .fleetbench.proto.Message6.M2.M14 f_7 = 9;
inline int Message6_M2::_internal_f_7_size() const {
  return _internal_f_7().size();
}
inline int Message6_M2::f_7_size() const {
  return _internal_f_7_size();
}
inline void Message6_M2::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.Clear();
}
inline ::fleetbench::proto::Message6_M2_M14* Message6_M2::mutable_f_7(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.f_7)
  return _internal_mutable_f_7()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>* Message6_M2::mutable_f_7()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M2.f_7)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_7();
}
inline const ::fleetbench::proto::Message6_M2_M14& Message6_M2::f_7(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.f_7)
  return _internal_f_7().Get(index);
}
inline ::fleetbench::proto::Message6_M2_M14* Message6_M2::add_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M2_M14* _add = _internal_mutable_f_7()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M2.f_7)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>& Message6_M2::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M2.f_7)
  return _internal_f_7();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>&
Message6_M2::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M14>*
Message6_M2::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_7_;
}

// repeated .fleetbench.proto.Message6.M2.M16 f_9 = 11;
inline int Message6_M2::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message6_M2::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message6_M2::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::fleetbench::proto::Message6_M2_M16* Message6_M2::mutable_f_9(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M2.f_9)
  return _internal_mutable_f_9()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>* Message6_M2::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M2.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::fleetbench::proto::Message6_M2_M16& Message6_M2::f_9(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M2.f_9)
  return _internal_f_9().Get(index);
}
inline ::fleetbench::proto::Message6_M2_M16* Message6_M2::add_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M2_M16* _add = _internal_mutable_f_9()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M2.f_9)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>& Message6_M2::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M2.f_9)
  return _internal_f_9();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>&
Message6_M2::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2_M16>*
Message6_M2::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// -------------------------------------------------------------------

// Message6_M3_M11_M22_M32

// optional .fleetbench.proto.Message6.M3.M11.M22.M32.E33 f_0 = 1;
inline bool Message6_M3_M11_M22_M32::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32_E33 Message6_M3_M11_M22_M32::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_0)
  return _internal_f_0();
}
inline void Message6_M3_M11_M22_M32::set_f_0(::fleetbench::proto::Message6_M3_M11_M22_M32_E33 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_0)
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32_E33 Message6_M3_M11_M22_M32::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M3_M11_M22_M32_E33>(_impl_.f_0_);
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_0(::fleetbench::proto::Message6_M3_M11_M22_M32_E33 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M3_M11_M22_M32_E33_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message6_M3_M11_M22_M32::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message6_M3_M11_M22_M32::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_1)
  return _internal_f_1();
}
inline void Message6_M3_M11_M22_M32::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_1)
}
inline ::int32_t Message6_M3_M11_M22_M32::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 5;
inline bool Message6_M3_M11_M22_M32::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M3_M11_M22_M32::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M3_M11_M22_M32::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_2)
}
inline std::string* Message6_M3_M11_M22_M32::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M3.M11.M22.M32.f_2)
  return _s;
}
inline const std::string& Message6_M3_M11_M22_M32::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M3_M11_M22_M32::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M3_M11_M22_M32::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M3.M11.M22.M32.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M3_M11_M22_M32::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M3.M11.M22.M32.f_2)
}

// optional uint64 f_3 = 7;
inline bool Message6_M3_M11_M22_M32::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message6_M3_M11_M22_M32::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_3)
  return _internal_f_3();
}
inline void Message6_M3_M11_M22_M32::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_3)
}
inline ::uint64_t Message6_M3_M11_M22_M32::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 8;
inline bool Message6_M3_M11_M22_M32::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6_M3_M11_M22_M32::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_4)
  return _internal_f_4();
}
inline void Message6_M3_M11_M22_M32::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_4)
}
inline ::int64_t Message6_M3_M11_M22_M32::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 10;
inline bool Message6_M3_M11_M22_M32::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M3_M11_M22_M32::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message6_M3_M11_M22_M32::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.M32.f_5)
  return _internal_f_5();
}
inline void Message6_M3_M11_M22_M32::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.M32.f_5)
}
inline ::int64_t Message6_M3_M11_M22_M32::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M3_M11_M22_M32::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// -------------------------------------------------------------------

// Message6_M3_M11_M22

// optional string f_0 = 2;
inline bool Message6_M3_M11_M22::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M3_M11_M22::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M3_M11_M22::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M3_M11_M22::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.M22.f_0)
}
inline std::string* Message6_M3_M11_M22::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M3.M11.M22.f_0)
  return _s;
}
inline const std::string& Message6_M3_M11_M22::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M3_M11_M22::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M3_M11_M22::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M3_M11_M22::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M3.M11.M22.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M3_M11_M22::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M3.M11.M22.f_0)
}

// optional .fleetbench.proto.Message6.M3.M11.M22.M32 f_2 = 3;
inline bool Message6_M3_M11_M22::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M3_M11_M22::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M3_M11_M22_M32& Message6_M3_M11_M22::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M3_M11_M22_M32* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M3_M11_M22_M32&>(::fleetbench::proto::_Message6_M3_M11_M22_M32_default_instance_);
}
inline const ::fleetbench::proto::Message6_M3_M11_M22_M32& Message6_M3_M11_M22::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.M22.f_2)
  return _internal_f_2();
}
inline void Message6_M3_M11_M22::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22_M32* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22_M32*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M3.M11.M22.f_2)
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32* Message6_M3_M11_M22::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M3_M11_M22_M32* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32* Message6_M3_M11_M22::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M3.M11.M22.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M3_M11_M22_M32* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32* Message6_M3_M11_M22::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M3_M11_M22_M32>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22_M32*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M3_M11_M22_M32* Message6_M3_M11_M22::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M3_M11_M22_M32* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M3.M11.M22.f_2)
  return _msg;
}
inline void Message6_M3_M11_M22::set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22_M32* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22_M32*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M3.M11.M22.f_2)
}

// -------------------------------------------------------------------

// Message6_M3_M11

// optional bool f_0 = 2;
inline bool Message6_M3_M11::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M3_M11::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message6_M3_M11::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.f_0)
  return _internal_f_0();
}
inline void Message6_M3_M11::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.M11.f_0)
}
inline bool Message6_M3_M11::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M3_M11::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M3.M11.M22 f_2 = 3;
inline bool Message6_M3_M11::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M3_M11::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M3_M11_M22& Message6_M3_M11::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M3_M11_M22* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M3_M11_M22&>(::fleetbench::proto::_Message6_M3_M11_M22_default_instance_);
}
inline const ::fleetbench::proto::Message6_M3_M11_M22& Message6_M3_M11::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.M11.f_2)
  return _internal_f_2();
}
inline void Message6_M3_M11::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M3.M11.f_2)
}
inline ::fleetbench::proto::Message6_M3_M11_M22* Message6_M3_M11::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M3_M11_M22* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M3_M11_M22* Message6_M3_M11::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M3.M11.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M3_M11_M22* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M3_M11_M22* Message6_M3_M11::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M3_M11_M22>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M3_M11_M22* Message6_M3_M11::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M3_M11_M22* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M3.M11.f_2)
  return _msg;
}
inline void Message6_M3_M11::set_allocated_f_2(::fleetbench::proto::Message6_M3_M11_M22* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11_M22*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M3.M11.f_2)
}

// -------------------------------------------------------------------

// Message6_M3

// repeated int32 f_0 = 2 [packed = true];
inline int Message6_M3::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M3::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M3::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int32_t Message6_M3::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.f_0)
  return _internal_f_0().Get(index);
}
inline void Message6_M3::set_f_0(int index, ::int32_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M3.f_0)
}
inline void Message6_M3::add_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M3.f_0)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M3::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M3.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M3::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M3.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M3::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M3::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message6.M3.M11 f_2 = 3;
inline bool Message6_M3::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M3::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M3_M11& Message6_M3::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M3_M11* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M3_M11&>(::fleetbench::proto::_Message6_M3_M11_default_instance_);
}
inline const ::fleetbench::proto::Message6_M3_M11& Message6_M3::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M3.f_2)
  return _internal_f_2();
}
inline void Message6_M3::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M3_M11* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M3.f_2)
}
inline ::fleetbench::proto::Message6_M3_M11* Message6_M3::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M3_M11* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M3_M11* Message6_M3::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M3.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M3_M11* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M3_M11* Message6_M3::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M3_M11>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M3_M11* Message6_M3::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M3_M11* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M3.f_2)
  return _msg;
}
inline void Message6_M3::set_allocated_f_2(::fleetbench::proto::Message6_M3_M11* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M3_M11*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M3.f_2)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M38

// optional bytes f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M38::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M38::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M38::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M38.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M38::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M38.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M38::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M38.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M38::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M38::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M38::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M38::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M38.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M38::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M38.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68

// optional string f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69

// optional string f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67

// optional bytes f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_0)
}

// repeated int64 f_1 = 3 [packed = true];
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_1)
  return _internal_f_1().Get(index);
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::set_f_1(int index, ::int64_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_1)
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::add_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_1)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M68 f_3 = 4;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_3)
  return _internal_f_3();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_3)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_3)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M68*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_3)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.M69 f_4 = 6;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_4)
  return _internal_f_4();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_4)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_4)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_4)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67::set_allocated_f_4(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67_M69*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67.f_4)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66

// optional bool f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_0)
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.M67 f_2 = 4;
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>&
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66_M67>*
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65

// optional int32 f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_0)
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.M66 f_1 = 2;
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>&
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_M66>*
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64

// optional bytes f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_0)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.M65 f_1 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_1)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64::set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_M65*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64.f_1)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.E82 f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_0)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>(_impl_.f_0_);
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::_internal_set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.M64 f_1 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_1)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63::set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_M64*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63.f_1)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61

// optional int64 f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_0)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.M63 f_2 = 4;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_2)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_2)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61::set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61.f_2)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62

// optional string f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60

// optional fixed64 f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_0)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bool f_1 = 5;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_1)
}
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 6;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_2)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional string f_3 = 7;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_3)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_3)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_3)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_3)
}

// optional int64 f_4 = 8;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_4)
  return _internal_f_4();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_4)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 9;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_5)
  return _internal_f_5();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_5)
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 10;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_6)
  return _internal_f_6();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_6)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M61 f_10 = 11;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_10_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ != nullptr) _impl_.f_10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* p = _impl_.f_10_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_10() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_10)
  return _internal_f_10();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_10_);
  }
  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_10)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* released = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::unsafe_arena_release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_10)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* temp = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61>(GetArena());
    _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61*>(p);
  }
  return _impl_.f_10_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* _msg = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_10)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_allocated_f_10(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_10_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_10)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.M62 f_11 = 13;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_11)
  return _internal_f_11();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_11)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_11)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_11)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60::set_allocated_f_11(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M62*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60.f_11)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58

// optional string f_0 = 3;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_0)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.M60 f_3 = 5;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_3)
  return _internal_f_3();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_3)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_3)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58::set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58.f_3)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.E81 f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_0)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>(_impl_.f_0_);
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_1)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_2)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 5;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_3)
  return _internal_f_3();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_3)
}
inline float Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_4)
  return _internal_f_4();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_4)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional uint32 f_5 = 8;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_5)
  return _internal_f_5();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_5(::uint32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_5)
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_5(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 9;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_6)
  return _internal_f_6();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_6)
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional int64 f_7 = 10;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_7)
  return _internal_f_7();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_7)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional string f_8 = 11;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_8)
  return _internal_f_8();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_f_8(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_8)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_8)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_set_f_8(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_8_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_8_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_8)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_8_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_8_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59::set_allocated_f_8(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_8_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_8_.IsDefault()) {
          _impl_.f_8_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59.f_8)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56

// optional int64 f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_0)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M58 f_2 = 3;
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>&
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58>*
Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.M59 f_3 = 6;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59& Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_3)
  return _internal_f_3();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_3)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_3)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56::set_allocated_f_3(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56.f_3)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M51

// optional string f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M51::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M51::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M51::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_0)
}

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.M56 f_1 = 3;
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46_M48_M51::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M51::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* Message6_M4_M6_M18_M29_M41_M46_M48_M51::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>* Message6_M4_M6_M18_M29_M41_M46_M48_M51::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56& Message6_M4_M6_M18_M29_M41_M46_M48_M51::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* Message6_M4_M6_M18_M29_M41_M46_M48_M51::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>& Message6_M4_M6_M18_M29_M41_M46_M48_M51::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>&
Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56>*
Message6_M4_M6_M18_M29_M41_M46_M48_M51::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48_M53

// optional string f_0 = 3;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48_M53::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M53::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M53::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48_M53::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M53::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48_M53::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M53::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M53::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48_M53::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48_M53::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46_M48

// optional string f_0 = 1;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46_M48::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_0)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46_M48::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46_M48::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_0)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M51 f_1 = 2;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51& Message6_M4_M6_M18_M29_M41_M46_M48::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M51_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51& Message6_M4_M6_M18_M29_M41_M46_M48::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* Message6_M4_M6_M18_M29_M41_M46_M48::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* Message6_M4_M6_M18_M29_M41_M46_M48::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* Message6_M4_M6_M18_M29_M41_M46_M48::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* Message6_M4_M6_M18_M29_M41_M46_M48::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_1)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_1)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.M53 f_2 = 3;
inline bool Message6_M4_M6_M18_M29_M41_M46_M48::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53& Message6_M4_M6_M18_M29_M41_M46_M48::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_M53_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53& Message6_M4_M6_M18_M29_M41_M46_M48::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_2)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* Message6_M4_M6_M18_M29_M41_M46_M48::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* Message6_M4_M6_M18_M29_M41_M46_M48::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_2)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* Message6_M4_M6_M18_M29_M41_M46_M48::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* Message6_M4_M6_M18_M29_M41_M46_M48::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_2)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46_M48::set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M53*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48.f_2)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41_M46

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E50 f_0 = 2 [packed = true];
inline int Message6_M4_M6_M18_M29_M41_M46::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 Message6_M4_M6_M18_M29_M41_M46::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_0)
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50>(_internal_f_0().Get(index));
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_0(int index, ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 value) {
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_0)
}
inline void Message6_M4_M6_M18_M29_M41_M46::add_f_0(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50 value) {
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M4_M6_M18_M29_M41_M46::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message6_M4_M6_M18_M29_M41_M46::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M4_M6_M18_M29_M41_M46::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// repeated int32 f_1 = 3 [packed = true];
inline int Message6_M4_M6_M18_M29_M41_M46::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_1)
  return _internal_f_1().Get(index);
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_1(int index, ::int32_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_1)
}
inline void Message6_M4_M6_M18_M29_M41_M46::add_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_1)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M4_M6_M18_M29_M41_M46::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M4_M6_M18_M29_M41_M46::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M4_M6_M18_M29_M41_M46::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional string f_2 = 5;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_2)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_2)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_2)
}

// optional string f_3 = 6;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_3)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_3)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_3)
}

// optional string f_4 = 7;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_4)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_4)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_4)
}

// optional int64 f_5 = 8;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_5)
  return _internal_f_5();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_5)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E51 f_6 = 10;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 Message6_M4_M6_M18_M29_M41_M46::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_6)
  return _internal_f_6();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_6(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_6)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 Message6_M4_M6_M18_M29_M41_M46::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51>(_impl_.f_6_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_6(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51_IsValid(value));
  _impl_.f_6_ = value;
}

// optional uint64 f_7 = 11;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_7)
  return _internal_f_7();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_7(::uint64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_7)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_7(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E52 f_8 = 12;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 Message6_M4_M6_M18_M29_M41_M46::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_8)
  return _internal_f_8();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_8(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_8)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 Message6_M4_M6_M18_M29_M41_M46::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52>(_impl_.f_8_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_8(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52_IsValid(value));
  _impl_.f_8_ = value;
}

// optional int32 f_9 = 14;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_9)
  return _internal_f_9();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_9(::int32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_9)
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional uint64 f_10 = 17;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_10)
  return _internal_f_10();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_10(::uint64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_10)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_10(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional uint32 f_11 = 18;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_11)
  return _internal_f_11();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_11(::uint32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_11)
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_11(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional bytes f_12 = 19;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_12)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_12)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_12)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_12)
}

// optional int64 f_13 = 20;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_13)
  return _internal_f_13();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_13(::int64_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_13)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_13(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E53 f_14 = 21;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 Message6_M4_M6_M18_M29_M41_M46::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_14)
  return _internal_f_14();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_14(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_14)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 Message6_M4_M6_M18_M29_M41_M46::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53>(_impl_.f_14_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_14(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53_IsValid(value));
  _impl_.f_14_ = value;
}

// optional string f_15 = 22;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_15)
  return _internal_f_15();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_15(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_15_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_15)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_15)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_15(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_15_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_15_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_15)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_15_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_15_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_15(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_15_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_15_.IsDefault()) {
          _impl_.f_15_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_15)
}

// optional bytes f_16 = 23;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_16_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_16)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_16)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_16)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_16)
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E54 f_17 = 24;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 Message6_M4_M6_M18_M29_M41_M46::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_17)
  return _internal_f_17();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_17(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_17)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 Message6_M4_M6_M18_M29_M41_M46::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54>(_impl_.f_17_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_17(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54_IsValid(value));
  _impl_.f_17_ = value;
}

// optional float f_18 = 26;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_18)
  return _internal_f_18();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_18(float value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_18)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_18(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional float f_19 = 27;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_19)
  return _internal_f_19();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_19(float value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_19)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_19(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional string f_20 = 29;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_20() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_20)
  return _internal_f_20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_20(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_20_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_20)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_20)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_20(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_20_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_20_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_20)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_20_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_20_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_20(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_20_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_20_.IsDefault()) {
          _impl_.f_20_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_20)
}

// optional float f_21 = 30;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_21)
  return _internal_f_21();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_21(float value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_21)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_21(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional bytes f_22 = 32;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_22)
  return _internal_f_22();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_22(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_22_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_22)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_22)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_22(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_22_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_22_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_22)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_22_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_22_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_22(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_22_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_22_.IsDefault()) {
          _impl_.f_22_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_22)
}

// optional int64 f_23 = 33;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_23)
  return _internal_f_23();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_23(::int64_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_23)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_23(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E55 f_24 = 34;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 Message6_M4_M6_M18_M29_M41_M46::f_24() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_24)
  return _internal_f_24();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_24(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 value) {
  _internal_set_f_24(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_24)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 Message6_M4_M6_M18_M29_M41_M46::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55>(_impl_.f_24_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_24(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55_IsValid(value));
  _impl_.f_24_ = value;
}

// optional float f_25 = 35;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_25)
  return _internal_f_25();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_25(float value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_25)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_25(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional bool f_26 = 36;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool Message6_M4_M6_M18_M29_M41_M46::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_26)
  return _internal_f_26();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_26(bool value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_26)
}
inline bool Message6_M4_M6_M18_M29_M41_M46::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_26(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional int64 f_27 = 37;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_27() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_27)
  return _internal_f_27();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_27(::int64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_27)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_27(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional int32 f_28 = 39;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_28)
  return _internal_f_28();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_28(::int32_t value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_28)
}
inline ::int32_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_28(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E56 f_29 = 40;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_29() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 Message6_M4_M6_M18_M29_M41_M46::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_29)
  return _internal_f_29();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_29(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_29)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 Message6_M4_M6_M18_M29_M41_M46::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56>(_impl_.f_29_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_29(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56_IsValid(value));
  _impl_.f_29_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E57 f_30 = 42;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 Message6_M4_M6_M18_M29_M41_M46::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_30)
  return _internal_f_30();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_30(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_30)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 Message6_M4_M6_M18_M29_M41_M46::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57>(_impl_.f_30_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_30(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57_IsValid(value));
  _impl_.f_30_ = value;
}

// optional string f_31 = 43;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_31() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_31)
  return _internal_f_31();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_31(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_31_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_31)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_31)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_31(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_31_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_31_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_31)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_31_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_31_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_31(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_31_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_31_.IsDefault()) {
          _impl_.f_31_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_31)
}

// optional float f_32 = 45;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_32)
  return _internal_f_32();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_32(float value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_32)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_32(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional string f_33 = 47;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_33() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_33() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_33)
  return _internal_f_33();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_33(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_33_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_33)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_33() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_33();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_33)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_33(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_33_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_33_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_33)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_33_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_33_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_33(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_33_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_33_.IsDefault()) {
          _impl_.f_33_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_33)
}

// optional int64 f_34 = 49;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_34)
  return _internal_f_34();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_34(::int64_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_34)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_34(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional string f_35 = 50;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_35() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_35() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_35)
  return _internal_f_35();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_35(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_35_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_35)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_35() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_35();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_35)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_35(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_35_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_35_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_35)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_35_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_35_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_35(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_35_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_35_.IsDefault()) {
          _impl_.f_35_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_35)
}

// optional fixed32 f_36 = 52;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_36)
  return _internal_f_36();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_36(::uint32_t value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_36)
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_36(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional double f_37 = 53;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline double Message6_M4_M6_M18_M29_M41_M46::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_37)
  return _internal_f_37();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_37(double value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_37)
}
inline double Message6_M4_M6_M18_M29_M41_M46::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_37(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional uint64 f_38 = 55;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_38() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_38)
  return _internal_f_38();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_38(::uint64_t value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_38)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_38(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = value;
}

// optional double f_39 = 56;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline double Message6_M4_M6_M18_M29_M41_M46::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_39)
  return _internal_f_39();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_39(double value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_39)
}
inline double Message6_M4_M6_M18_M29_M41_M46::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_39(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E58 f_40 = 59;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 Message6_M4_M6_M18_M29_M41_M46::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_40)
  return _internal_f_40();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_40(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_40)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 Message6_M4_M6_M18_M29_M41_M46::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58>(_impl_.f_40_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_40(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58_IsValid(value));
  _impl_.f_40_ = value;
}

// optional bool f_41 = 60;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = false;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline bool Message6_M4_M6_M18_M29_M41_M46::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_41)
  return _internal_f_41();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_41(bool value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_41)
}
inline bool Message6_M4_M6_M18_M29_M41_M46::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_41(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E59 f_42 = 63;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 Message6_M4_M6_M18_M29_M41_M46::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_42)
  return _internal_f_42();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_42(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_42)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 Message6_M4_M6_M18_M29_M41_M46::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59>(_impl_.f_42_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_42(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59_IsValid(value));
  _impl_.f_42_ = value;
}

// optional int64 f_43 = 64;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_43() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_43)
  return _internal_f_43();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_43(::int64_t value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_43)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_43(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = value;
}

// optional int64 f_44 = 65;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_44() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_44)
  return _internal_f_44();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_44(::int64_t value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_44)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_44(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// optional int64 f_45 = 68;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_45)
  return _internal_f_45();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_45(::int64_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_45)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_45(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional string f_46 = 69;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_46_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_46)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_46)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_46)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_46)
}

// optional float f_47 = 70;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_47() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline float Message6_M4_M6_M18_M29_M41_M46::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_47)
  return _internal_f_47();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_47(float value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_47)
}
inline float Message6_M4_M6_M18_M29_M41_M46::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_47(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E60 f_48 = 71;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 Message6_M4_M6_M18_M29_M41_M46::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_48)
  return _internal_f_48();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_48(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_48)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 Message6_M4_M6_M18_M29_M41_M46::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60>(_impl_.f_48_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_48(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60_IsValid(value));
  _impl_.f_48_ = value;
}

// optional uint64 f_49 = 73;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_49() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::f_49() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_49)
  return _internal_f_49();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_49(::uint64_t value) {
  _internal_set_f_49(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_49)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_49(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = value;
}

// optional int64 f_50 = 75;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_50() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_50)
  return _internal_f_50();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_50(::int64_t value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_50)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_50(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = value;
}

// repeated int64 f_51 = 76 [packed = true];
inline int Message6_M4_M6_M18_M29_M41_M46::_internal_f_51_size() const {
  return _internal_f_51().size();
}
inline int Message6_M4_M6_M18_M29_M41_M46::f_51_size() const {
  return _internal_f_51_size();
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_.Clear();
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_51(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_51)
  return _internal_f_51().Get(index);
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_51(int index, ::int64_t value) {
  _internal_mutable_f_51()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_51)
}
inline void Message6_M4_M6_M18_M29_M41_M46::add_f_51(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_51()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_51)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M4_M6_M18_M29_M41_M46::f_51() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_51)
  return _internal_f_51();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M4_M6_M18_M29_M41_M46::mutable_f_51()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_51)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_51();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M4_M6_M18_M29_M41_M46::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_51() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_51_;
}

// optional bytes f_52 = 77;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_52() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_52() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_52)
  return _internal_f_52();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_52(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_52_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_52)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_52() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_52();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_52)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_52(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_52_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_52_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_52)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_52_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_52_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_52(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_52_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_52_.IsDefault()) {
          _impl_.f_52_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_52)
}

// optional int64 f_53 = 78;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_53() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_53() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_53)
  return _internal_f_53();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_53(::int64_t value) {
  _internal_set_f_53(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_53)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_53(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E61 f_54 = 79;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_54() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 Message6_M4_M6_M18_M29_M41_M46::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_54)
  return _internal_f_54();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_54(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_54)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 Message6_M4_M6_M18_M29_M41_M46::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61>(_impl_.f_54_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_54(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61_IsValid(value));
  _impl_.f_54_ = value;
}

// optional double f_55 = 81;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_55() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline double Message6_M4_M6_M18_M29_M41_M46::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_55)
  return _internal_f_55();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_55(double value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_55)
}
inline double Message6_M4_M6_M18_M29_M41_M46::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_55(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// optional string f_56 = 84;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_56() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_56() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_56)
  return _internal_f_56();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_56(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_56_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_56)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_56() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_56();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_56)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_56(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_56_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_56_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_56)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_56_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_56_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_56(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_56_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_56_.IsDefault()) {
          _impl_.f_56_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_56)
}

// optional int64 f_57 = 85;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_57() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_57)
  return _internal_f_57();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_57(::int64_t value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_57)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_57(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional fixed32 f_58 = 86;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_58() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = 0u;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_58)
  return _internal_f_58();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_58(::uint32_t value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_58)
}
inline ::uint32_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_58(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional int64 f_59 = 87;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_59() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_59)
  return _internal_f_59();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_59(::int64_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_59)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_59(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.E62 f_60 = 88;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_60() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 Message6_M4_M6_M18_M29_M41_M46::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_60)
  return _internal_f_60();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_60(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_60)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 Message6_M4_M6_M18_M29_M41_M46::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62>(_impl_.f_60_);
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_60(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62_IsValid(value));
  _impl_.f_60_ = value;
}

// optional int64 f_61 = 90;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_61() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_61() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_61)
  return _internal_f_61();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_61(::int64_t value) {
  _internal_set_f_61(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_61)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_61(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = value;
}

// optional fixed64 f_62 = 91;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_62() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_62)
  return _internal_f_62();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_62(::uint64_t value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_62)
}
inline ::uint64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_62(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = value;
}

// optional string f_63 = 92;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_63() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::f_63() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_63)
  return _internal_f_63();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M18_M29_M41_M46::set_f_63(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_63_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_63)
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::mutable_f_63() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_63();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_63)
  return _s;
}
inline const std::string& Message6_M4_M6_M18_M29_M41_M46::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_.Get();
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_63(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_63_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_63_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M18_M29_M41_M46::release_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_63)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_63_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_63_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_63(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_63_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_63_.IsDefault()) {
          _impl_.f_63_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_63)
}

// optional int64 f_64 = 93;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_64() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_64)
  return _internal_f_64();
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_f_64(::int64_t value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_64)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41_M46::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_64_;
}
inline void Message6_M4_M6_M18_M29_M41_M46::_internal_set_f_64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.M48 f_93 = 95;
inline bool Message6_M4_M6_M18_M29_M41_M46::has_f_93() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_93_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41_M46::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_93_ != nullptr) _impl_.f_93_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48& Message6_M4_M6_M18_M29_M41_M46::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* p = _impl_.f_93_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_M48_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48& Message6_M4_M6_M18_M29_M41_M46::f_93() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_93)
  return _internal_f_93();
}
inline void Message6_M4_M6_M18_M29_M41_M46::unsafe_arena_set_allocated_f_93(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_93_);
  }
  _impl_.f_93_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_93)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* Message6_M4_M6_M18_M29_M41_M46::release_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* released = _impl_.f_93_;
  _impl_.f_93_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* Message6_M4_M6_M18_M29_M41_M46::unsafe_arena_release_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_93)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* temp = _impl_.f_93_;
  _impl_.f_93_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* Message6_M4_M6_M18_M29_M41_M46::_internal_mutable_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_93_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48>(GetArena());
    _impl_.f_93_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48*>(p);
  }
  return _impl_.f_93_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* Message6_M4_M6_M18_M29_M41_M46::mutable_f_93() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* _msg = _internal_mutable_f_93();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_93)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41_M46::set_allocated_f_93(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_93_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.f_93_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46.f_93)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29_M41

// optional int64 f_0 = 2;
inline bool Message6_M4_M6_M18_M29_M41::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29_M41::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6_M18_M29_M41::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29_M41::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_0)
}
inline ::int64_t Message6_M4_M6_M18_M29_M41::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29_M41::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M41.M46 f_2 = 4;
inline bool Message6_M4_M6_M18_M29_M41::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29_M41::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46& Message6_M4_M6_M18_M29_M41::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M41_M46_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46& Message6_M4_M6_M18_M29_M41::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29_M41::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_2)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* Message6_M4_M6_M18_M29_M41::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* Message6_M4_M6_M18_M29_M41::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* Message6_M4_M6_M18_M29_M41::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* Message6_M4_M6_M18_M29_M41::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_2)
  return _msg;
}
inline void Message6_M4_M6_M18_M29_M41::set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.M41.f_2)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18_M29

// optional int64 f_0 = 2;
inline bool Message6_M4_M6_M18_M29::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18_M29::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6_M18_M29::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18_M29::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.M29.f_0)
}
inline ::int64_t Message6_M4_M6_M18_M29::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18_M29::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29.M38 f_2 = 3;
inline bool Message6_M4_M6_M18_M29::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18_M29::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38& Message6_M4_M6_M18_M29::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_M38_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M38& Message6_M4_M6_M18_M29::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M18_M29::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M38* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M38*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.f_2)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* Message6_M4_M6_M18_M29::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* Message6_M4_M6_M18_M29::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.M29.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* Message6_M4_M6_M18_M29::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29_M38>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M38*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* Message6_M4_M6_M18_M29::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M38* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.f_2)
  return _msg;
}
inline void Message6_M4_M6_M18_M29::set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18_M29_M38* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29_M38*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.M29.f_2)
}

// repeated .fleetbench.proto.Message6.M4.M6.M18.M29.M41 f_3 = 5;
inline int Message6_M4_M6_M18_M29::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message6_M4_M6_M18_M29::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message6_M4_M6_M18_M29::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41* Message6_M4_M6_M18_M29::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.M29.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>* Message6_M4_M6_M18_M29::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M18.M29.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29_M41& Message6_M4_M6_M18_M29::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.M29.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29_M41* Message6_M4_M6_M18_M29::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M18_M29_M41* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M18.M29.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>& Message6_M4_M6_M18_M29::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M18.M29.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>&
Message6_M4_M6_M18_M29::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M18_M29_M41>*
Message6_M4_M6_M18_M29::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message6_M4_M6_M18

// optional fixed64 f_0 = 1;
inline bool Message6_M4_M6_M18::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M18::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message6_M4_M6_M18::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M18::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M18.f_0)
}
inline ::uint64_t Message6_M4_M6_M18::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M18::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18.M29 f_1 = 3;
inline bool Message6_M4_M6_M18::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M18::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29& Message6_M4_M6_M18::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18_M29* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18_M29&>(::fleetbench::proto::_Message6_M4_M6_M18_M29_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18_M29& Message6_M4_M6_M18::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M18.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M18::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M18.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29* Message6_M4_M6_M18::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29* Message6_M4_M6_M18::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M18.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29* Message6_M4_M6_M18::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18_M29>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18_M29* Message6_M4_M6_M18::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18_M29* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M18.f_1)
  return _msg;
}
inline void Message6_M4_M6_M18::set_allocated_f_1(::fleetbench::proto::Message6_M4_M6_M18_M29* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18_M29*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M18.f_1)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M25_M30

// optional bytes f_0 = 1;
inline bool Message6_M4_M6_M25_M30::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M25_M30::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M25_M30::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.M30.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M25_M30::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.M30.f_0)
}
inline std::string* Message6_M4_M6_M25_M30::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M25.M30.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M25_M30::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M25_M30::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M25_M30::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M25_M30::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M25.M30.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M25_M30::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M25.M30.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M6_M25_M33

// optional fixed32 f_0 = 2;
inline bool Message6_M4_M6_M25_M33::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M25_M33::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message6_M4_M6_M25_M33::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.M33.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6_M25_M33::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.M33.f_0)
}
inline ::uint32_t Message6_M4_M6_M25_M33::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6_M25_M33::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M25.M33.E34 f_1 = 4;
inline bool Message6_M4_M6_M25_M33::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M25_M33::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M33_E34 Message6_M4_M6_M25_M33::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.M33.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M25_M33::set_f_1(::fleetbench::proto::Message6_M4_M6_M25_M33_E34 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.M33.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M33_E34 Message6_M4_M6_M25_M33::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M25_M33_E34>(_impl_.f_1_);
}
inline void Message6_M4_M6_M25_M33::_internal_set_f_1(::fleetbench::proto::Message6_M4_M6_M25_M33_E34 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M25_M33_E34_IsValid(value));
  _impl_.f_1_ = value;
}

// optional fixed64 f_2 = 6;
inline bool Message6_M4_M6_M25_M33::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M6_M25_M33::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message6_M4_M6_M25_M33::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.M33.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M25_M33::set_f_2(::uint64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.M33.f_2)
}
inline ::uint64_t Message6_M4_M6_M25_M33::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4_M6_M25_M33::_internal_set_f_2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message6_M4_M6_M25

// optional bytes f_0 = 1;
inline bool Message6_M4_M6_M25::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M6_M25::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M6_M25::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M25::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.f_0)
}
inline std::string* Message6_M4_M6_M25::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M25.f_0)
  return _s;
}
inline const std::string& Message6_M4_M6_M25::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M6_M25::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M25::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M25::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M25.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M25::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M25.f_0)
}

// optional .fleetbench.proto.Message6.M4.M6.M25.E9 f_1 = 2;
inline bool Message6_M4_M6_M25::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4_M6_M25::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message6_M4_M6_M25_E9 Message6_M4_M6_M25::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M6_M25::set_f_1(::fleetbench::proto::Message6_M4_M6_M25_E9 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.f_1)
}
inline ::fleetbench::proto::Message6_M4_M6_M25_E9 Message6_M4_M6_M25::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M6_M25_E9>(_impl_.f_1_);
}
inline void Message6_M4_M6_M25::_internal_set_f_1(::fleetbench::proto::Message6_M4_M6_M25_E9 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M6_M25_E9_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 3;
inline bool Message6_M4_M6_M25::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M6_M25::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message6_M4_M6_M25::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6_M25::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.f_2)
}
inline ::int64_t Message6_M4_M6_M25::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4_M6_M25::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional uint32 f_3 = 4;
inline bool Message6_M4_M6_M25::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4_M6_M25::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message6_M4_M6_M25::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_3)
  return _internal_f_3();
}
inline void Message6_M4_M6_M25::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.f_3)
}
inline ::uint32_t Message6_M4_M6_M25::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M4_M6_M25::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 5;
inline bool Message6_M4_M6_M25::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6_M25::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M4_M6_M25::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M6_M25::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.M25.f_4)
}
inline std::string* Message6_M4_M6_M25::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M25.f_4)
  return _s;
}
inline const std::string& Message6_M4_M6_M25::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message6_M4_M6_M25::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message6_M4_M6_M25::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message6_M4_M6_M25::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M25.f_4)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M6_M25::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M25.f_4)
}

// optional .fleetbench.proto.Message6.M4.M6.M25.M30 f_5 = 6;
inline bool Message6_M4_M6_M25::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message6_M4_M6_M25::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M25_M30& Message6_M4_M6_M25::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M25_M30* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M25_M30&>(::fleetbench::proto::_Message6_M4_M6_M25_M30_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M25_M30& Message6_M4_M6_M25::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_5)
  return _internal_f_5();
}
inline void Message6_M4_M6_M25::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message6_M4_M6_M25_M30* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M25_M30*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.M25.f_5)
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M30* Message6_M4_M6_M25::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M25_M30* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M30* Message6_M4_M6_M25::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.M25.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M25_M30* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M30* Message6_M4_M6_M25::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M25_M30>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M25_M30*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M30* Message6_M4_M6_M25::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M4_M6_M25_M30* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M25.f_5)
  return _msg;
}
inline void Message6_M4_M6_M25::set_allocated_f_5(::fleetbench::proto::Message6_M4_M6_M25_M30* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M25_M30*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.M25.f_5)
}

// repeated .fleetbench.proto.Message6.M4.M6.M25.M33 f_6 = 8;
inline int Message6_M4_M6_M25::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message6_M4_M6_M25::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message6_M4_M6_M25::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M33* Message6_M4_M6_M25::mutable_f_6(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.M25.f_6)
  return _internal_mutable_f_6()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>* Message6_M4_M6_M25::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.M25.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::fleetbench::proto::Message6_M4_M6_M25_M33& Message6_M4_M6_M25::f_6(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.M25.f_6)
  return _internal_f_6().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M25_M33* Message6_M4_M6_M25::add_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M25_M33* _add = _internal_mutable_f_6()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.M25.f_6)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>& Message6_M4_M6_M25::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.M25.f_6)
  return _internal_f_6();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>&
Message6_M4_M6_M25::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25_M33>*
Message6_M4_M6_M25::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// -------------------------------------------------------------------

// Message6_M4_M6

// optional int64 f_0 = 2;
inline bool Message6_M4_M6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M6::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M6.f_0)
}
inline ::int64_t Message6_M4_M6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M6::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6.M18 f_2 = 3;
inline bool Message6_M4_M6::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M6::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M6_M18& Message6_M4_M6::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6_M18* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6_M18&>(::fleetbench::proto::_Message6_M4_M6_M18_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6_M18& Message6_M4_M6::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M6::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M6.f_2)
}
inline ::fleetbench::proto::Message6_M4_M6_M18* Message6_M4_M6::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6_M18* Message6_M4_M6::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M6.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6_M18* Message6_M4_M6::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6_M18>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M6_M18* Message6_M4_M6::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M6_M18* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.f_2)
  return _msg;
}
inline void Message6_M4_M6::set_allocated_f_2(::fleetbench::proto::Message6_M4_M6_M18* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6_M18*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M6.f_2)
}

// repeated .fleetbench.proto.Message6.M4.M6.M25 f_3 = 5;
inline int Message6_M4_M6::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message6_M4_M6::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message6_M4_M6::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M6_M25* Message6_M4_M6::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M6.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>* Message6_M4_M6::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M6.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message6_M4_M6_M25& Message6_M4_M6::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M6.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M6_M25* Message6_M4_M6::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M6_M25* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M6.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>& Message6_M4_M6::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M6.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>&
Message6_M4_M6::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M6_M25>*
Message6_M4_M6::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message6_M4_M7

// optional int32 f_0 = 1;
inline bool Message6_M4_M7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message6_M4_M7::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M7.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M7::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M7.f_0)
}
inline ::int32_t Message6_M4_M7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M7::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M4_M13_M24

// optional int64 f_0 = 1;
inline bool Message6_M4_M13_M24::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M13_M24::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message6_M4_M13_M24::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M24.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M13_M24::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M24.f_0)
}
inline ::int64_t Message6_M4_M13_M24::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M13_M24::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M4_M13_M26_M31_M40

// optional string f_0 = 1;
inline bool Message6_M4_M13_M26_M31_M40::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M13_M26_M31_M40::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M13_M26_M31_M40::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M31.M40.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M13_M26_M31_M40::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.M31.M40.f_0)
}
inline std::string* Message6_M4_M13_M26_M31_M40::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.M31.M40.f_0)
  return _s;
}
inline const std::string& Message6_M4_M13_M26_M31_M40::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M13_M26_M31_M40::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M13_M26_M31_M40::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M13_M26_M31_M40::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.M26.M31.M40.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M13_M26_M31_M40::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.M26.M31.M40.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M13_M26_M31

// optional int32 f_0 = 1;
inline bool Message6_M4_M13_M26_M31::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M13_M26_M31::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message6_M4_M13_M26_M31::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M31.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M13_M26_M31::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.M31.f_0)
}
inline ::int32_t Message6_M4_M13_M26_M31::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M13_M26_M31::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message6.M4.M13.M26.M31.M40 f_1 = 3;
inline int Message6_M4_M13_M26_M31::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M4_M13_M26_M31::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M4_M13_M26_M31::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31_M40* Message6_M4_M13_M26_M31::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.M31.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>* Message6_M4_M13_M26_M31::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M13.M26.M31.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M31_M40& Message6_M4_M13_M26_M31::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M31.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31_M40* Message6_M4_M13_M26_M31::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M13_M26_M31_M40* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M13.M26.M31.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>& Message6_M4_M13_M26_M31::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M13.M26.M31.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>&
Message6_M4_M13_M26_M31::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M31_M40>*
Message6_M4_M13_M26_M31::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message6_M4_M13_M26_M35_M39

// optional string f_0 = 1;
inline bool Message6_M4_M13_M26_M35_M39::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M13_M26_M35_M39::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M13_M26_M35_M39::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M35.M39.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M13_M26_M35_M39::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.M35.M39.f_0)
}
inline std::string* Message6_M4_M13_M26_M35_M39::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.M35.M39.f_0)
  return _s;
}
inline const std::string& Message6_M4_M13_M26_M35_M39::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M13_M26_M35_M39::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M13_M26_M35_M39::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M13_M26_M35_M39::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.M26.M35.M39.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M13_M26_M35_M39::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.M26.M35.M39.f_0)
}

// -------------------------------------------------------------------

// Message6_M4_M13_M26_M35

// optional int64 f_0 = 2;
inline bool Message6_M4_M13_M26_M35::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M4_M13_M26_M35::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6_M4_M13_M26_M35::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M35.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M13_M26_M35::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.M35.f_0)
}
inline ::int64_t Message6_M4_M13_M26_M35::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M13_M26_M35::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M13.M26.M35.M39 f_2 = 3;
inline bool Message6_M4_M13_M26_M35::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M13_M26_M35::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39& Message6_M4_M13_M26_M35::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39&>(::fleetbench::proto::_Message6_M4_M13_M26_M35_M39_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M35_M39& Message6_M4_M13_M26_M35::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.M35.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M13_M26_M35::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26_M35_M39* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M35_M39*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M13.M26.M35.f_2)
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* Message6_M4_M13_M26_M35::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* Message6_M4_M13_M26_M35::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.M26.M35.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* Message6_M4_M13_M26_M35::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M13_M26_M35_M39>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M35_M39*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* Message6_M4_M13_M26_M35::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M26_M35_M39* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.M35.f_2)
  return _msg;
}
inline void Message6_M4_M13_M26_M35::set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26_M35_M39* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M35_M39*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.M26.M35.f_2)
}

// -------------------------------------------------------------------

// Message6_M4_M13_M26

// optional string f_0 = 1;
inline bool Message6_M4_M13_M26::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4_M13_M26::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4_M13_M26::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4_M13_M26::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.f_0)
}
inline std::string* Message6_M4_M13_M26::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.f_0)
  return _s;
}
inline const std::string& Message6_M4_M13_M26::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M4_M13_M26::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M4_M13_M26::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M4_M13_M26::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.M26.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4_M13_M26::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.M26.f_0)
}

// optional .fleetbench.proto.Message6.M4.M13.M26.E10 f_1 = 2;
inline bool Message6_M4_M13_M26::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M4_M13_M26::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_E10 Message6_M4_M13_M26::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M13_M26::set_f_1(::fleetbench::proto::Message6_M4_M13_M26_E10 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.f_1)
}
inline ::fleetbench::proto::Message6_M4_M13_M26_E10 Message6_M4_M13_M26::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M4_M13_M26_E10>(_impl_.f_1_);
}
inline void Message6_M4_M13_M26::_internal_set_f_1(::fleetbench::proto::Message6_M4_M13_M26_E10 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M4_M13_M26_E10_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 5;
inline bool Message6_M4_M13_M26::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M13_M26::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message6_M4_M13_M26::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M13_M26::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.f_2)
}
inline ::int64_t Message6_M4_M13_M26::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4_M13_M26::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// repeated .fleetbench.proto.Message6.M4.M13.M26.E11 f_3 = 8 [packed = true];
inline int Message6_M4_M13_M26::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message6_M4_M13_M26::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message6_M4_M13_M26::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M13_M26_E11 Message6_M4_M13_M26::f_3(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_3)
  return static_cast<::fleetbench::proto::Message6_M4_M13_M26_E11>(_internal_f_3().Get(index));
}
inline void Message6_M4_M13_M26::set_f_3(int index, ::fleetbench::proto::Message6_M4_M13_M26_E11 value) {
  assert(::fleetbench::proto::Message6_M4_M13_M26_E11_IsValid(value));
  _internal_mutable_f_3()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.M26.f_3)
}
inline void Message6_M4_M13_M26::add_f_3(::fleetbench::proto::Message6_M4_M13_M26_E11 value) {
  assert(::fleetbench::proto::Message6_M4_M13_M26_E11_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_3()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M13.M26.f_3)
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M4_M13_M26::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M13.M26.f_3)
  return _internal_f_3();
}
inline ::google::protobuf::RepeatedField<int>* Message6_M4_M13_M26::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M13.M26.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M4_M13_M26::_internal_f_3()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedField<int>* Message6_M4_M13_M26::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message6.M4.M13.M26.M31 f_8 = 12;
inline bool Message6_M4_M13_M26::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message6_M4_M13_M26::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M31& Message6_M4_M13_M26::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M13_M26_M31* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M13_M26_M31&>(::fleetbench::proto::_Message6_M4_M13_M26_M31_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M31& Message6_M4_M13_M26::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_8)
  return _internal_f_8();
}
inline void Message6_M4_M13_M26::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message6_M4_M13_M26_M31* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M31*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M13.M26.f_8)
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31* Message6_M4_M13_M26::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26_M31* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31* Message6_M4_M13_M26::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.M26.f_8)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26_M31* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31* Message6_M4_M13_M26::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M13_M26_M31>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M31*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M31* Message6_M4_M13_M26::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26_M31* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.f_8)
  return _msg;
}
inline void Message6_M4_M13_M26::set_allocated_f_8(::fleetbench::proto::Message6_M4_M13_M26_M31* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26_M31*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.M26.f_8)
}

// repeated .fleetbench.proto.Message6.M4.M13.M26.M35 f_12 = 14;
inline int Message6_M4_M13_M26::_internal_f_12_size() const {
  return _internal_f_12().size();
}
inline int Message6_M4_M13_M26::f_12_size() const {
  return _internal_f_12_size();
}
inline void Message6_M4_M13_M26::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.Clear();
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35* Message6_M4_M13_M26::mutable_f_12(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.M26.f_12)
  return _internal_mutable_f_12()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>* Message6_M4_M13_M26::mutable_f_12()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M4.M13.M26.f_12)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_12();
}
inline const ::fleetbench::proto::Message6_M4_M13_M26_M35& Message6_M4_M13_M26::f_12(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.M26.f_12)
  return _internal_f_12().Get(index);
}
inline ::fleetbench::proto::Message6_M4_M13_M26_M35* Message6_M4_M13_M26::add_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M4_M13_M26_M35* _add = _internal_mutable_f_12()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M4.M13.M26.f_12)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>& Message6_M4_M13_M26::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M4.M13.M26.f_12)
  return _internal_f_12();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>&
Message6_M4_M13_M26::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M4_M13_M26_M35>*
Message6_M4_M13_M26::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_12_;
}

// -------------------------------------------------------------------

// Message6_M4_M13

// optional int64 f_0 = 1;
inline bool Message6_M4_M13::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M4_M13::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message6_M4_M13::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.f_0)
  return _internal_f_0();
}
inline void Message6_M4_M13::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.M13.f_0)
}
inline ::int64_t Message6_M4_M13::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4_M13::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M4.M13.M24 f_1 = 2;
inline bool Message6_M4_M13::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M4_M13::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4_M13_M24& Message6_M4_M13::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M13_M24* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M13_M24&>(::fleetbench::proto::_Message6_M4_M13_M24_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M13_M24& Message6_M4_M13::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.f_1)
  return _internal_f_1();
}
inline void Message6_M4_M13::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M4_M13_M24* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M24*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M13.f_1)
}
inline ::fleetbench::proto::Message6_M4_M13_M24* Message6_M4_M13::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M24* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M13_M24* Message6_M4_M13::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M24* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M13_M24* Message6_M4_M13::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M13_M24>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M24*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M4_M13_M24* Message6_M4_M13::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4_M13_M24* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.f_1)
  return _msg;
}
inline void Message6_M4_M13::set_allocated_f_1(::fleetbench::proto::Message6_M4_M13_M24* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M24*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.f_1)
}

// optional .fleetbench.proto.Message6.M4.M13.M26 f_2 = 3;
inline bool Message6_M4_M13::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message6_M4_M13::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M13_M26& Message6_M4_M13::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M13_M26* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M13_M26&>(::fleetbench::proto::_Message6_M4_M13_M26_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M13_M26& Message6_M4_M13::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.M13.f_2)
  return _internal_f_2();
}
inline void Message6_M4_M13::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.M13.f_2)
}
inline ::fleetbench::proto::Message6_M4_M13_M26* Message6_M4_M13::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M13_M26* Message6_M4_M13::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.M13.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M13_M26* Message6_M4_M13::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M13_M26>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message6_M4_M13_M26* Message6_M4_M13::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M13_M26* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.M13.f_2)
  return _msg;
}
inline void Message6_M4_M13::set_allocated_f_2(::fleetbench::proto::Message6_M4_M13_M26* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13_M26*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.M13.f_2)
}

// -------------------------------------------------------------------

// Message6_M4

// optional uint32 f_0 = 4;
inline bool Message6_M4::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Message6_M4::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_0)
  return _internal_f_0();
}
inline void Message6_M4::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.f_0)
}
inline ::uint32_t Message6_M4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M4::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 5;
inline bool Message6_M4::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M4::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M4::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M4::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.f_1)
}
inline std::string* Message6_M4::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.f_1)
  return _s;
}
inline const std::string& Message6_M4::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message6_M4::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message6_M4::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message6_M4::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M4::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.f_1)
}

// optional uint32 f_2 = 6;
inline bool Message6_M4::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M4::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message6_M4::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_2)
  return _internal_f_2();
}
inline void Message6_M4::set_f_2(::uint32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.f_2)
}
inline ::uint32_t Message6_M4::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M4::_internal_set_f_2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 7;
inline bool Message6_M4::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M4::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Message6_M4::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_3)
  return _internal_f_3();
}
inline void Message6_M4::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.f_3)
}
inline ::int32_t Message6_M4::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M4::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 8;
inline bool Message6_M4::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M4::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message6_M4::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_4)
  return _internal_f_4();
}
inline void Message6_M4::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M4.f_4)
}
inline ::int64_t Message6_M4::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M4::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message6.M4.M6 f_8 = 9;
inline bool Message6_M4::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message6_M4::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M4_M6& Message6_M4::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M6* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M6&>(::fleetbench::proto::_Message6_M4_M6_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M6& Message6_M4::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_8)
  return _internal_f_8();
}
inline void Message6_M4::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message6_M4_M6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.f_8)
}
inline ::fleetbench::proto::Message6_M4_M6* Message6_M4::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M6* Message6_M4::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.f_8)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M4_M6* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M6* Message6_M4::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M6>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message6_M4_M6* Message6_M4::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M4_M6* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.f_8)
  return _msg;
}
inline void Message6_M4::set_allocated_f_8(::fleetbench::proto::Message6_M4_M6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M6*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.f_8)
}

// optional .fleetbench.proto.Message6.M4.M7 f_9 = 11;
inline bool Message6_M4::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message6_M4::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message6_M4_M7& Message6_M4::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M7* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M7&>(::fleetbench::proto::_Message6_M4_M7_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M7& Message6_M4::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_9)
  return _internal_f_9();
}
inline void Message6_M4::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message6_M4_M7* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M7*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.f_9)
}
inline ::fleetbench::proto::Message6_M4_M7* Message6_M4::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M7* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M7* Message6_M4::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.f_9)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message6_M4_M7* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M7* Message6_M4::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M7>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M7*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message6_M4_M7* Message6_M4::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message6_M4_M7* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.f_9)
  return _msg;
}
inline void Message6_M4::set_allocated_f_9(::fleetbench::proto::Message6_M4_M7* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M7*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.f_9)
}

// optional .fleetbench.proto.Message6.M4.M13 f_11 = 13;
inline bool Message6_M4::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message6_M4::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message6_M4_M13& Message6_M4::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4_M13* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4_M13&>(::fleetbench::proto::_Message6_M4_M13_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4_M13& Message6_M4::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M4.f_11)
  return _internal_f_11();
}
inline void Message6_M4::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message6_M4_M13* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M4.f_11)
}
inline ::fleetbench::proto::Message6_M4_M13* Message6_M4::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message6_M4_M13* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4_M13* Message6_M4::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M4.f_11)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message6_M4_M13* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4_M13* Message6_M4::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4_M13>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message6_M4_M13* Message6_M4::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message6_M4_M13* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M4.f_11)
  return _msg;
}
inline void Message6_M4::set_allocated_f_11(::fleetbench::proto::Message6_M4_M13* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message6_M4_M13*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M4.f_11)
}

// -------------------------------------------------------------------

// Message6_M5_M8_M27_M34

// optional .fleetbench.proto.Message6.M5.M8.M27.M34.E35 f_0 = 2;
inline bool Message6_M5_M8_M27_M34::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M34::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34_E35 Message6_M5_M8_M27_M34::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M34.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M8_M27_M34::set_f_0(::fleetbench::proto::Message6_M5_M8_M27_M34_E35 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M34.f_0)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34_E35 Message6_M5_M8_M27_M34::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_M34_E35>(_impl_.f_0_);
}
inline void Message6_M5_M8_M27_M34::_internal_set_f_0(::fleetbench::proto::Message6_M5_M8_M27_M34_E35 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_M34_E35_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message6_M5_M8_M27_M34::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M34::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message6_M5_M8_M27_M34::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M34.f_1)
  return _internal_f_1();
}
inline void Message6_M5_M8_M27_M34::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M34.f_1)
}
inline ::int32_t Message6_M5_M8_M27_M34::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6_M5_M8_M27_M34::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message6_M5_M8_M27_M34::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M34::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M5_M8_M27_M34::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M34.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M34::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M34.f_2)
}
inline std::string* Message6_M5_M8_M27_M34::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M34.f_2)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M34::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M5_M8_M27_M34::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M34::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M34::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M34.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M34::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M34.f_2)
}

// optional string f_3 = 6;
inline bool Message6_M5_M8_M27_M34::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M34::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M5_M8_M27_M34::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M34.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M34::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M34.f_3)
}
inline std::string* Message6_M5_M8_M27_M34::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M34.f_3)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M34::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message6_M5_M8_M27_M34::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M34::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M34::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M34.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M34::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M34.f_3)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.M34.E36 f_4 = 7;
inline bool Message6_M5_M8_M27_M34::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M34::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34_E36 Message6_M5_M8_M27_M34::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M34.f_4)
  return _internal_f_4();
}
inline void Message6_M5_M8_M27_M34::set_f_4(::fleetbench::proto::Message6_M5_M8_M27_M34_E36 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M34.f_4)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34_E36 Message6_M5_M8_M27_M34::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_M34_E36>(_impl_.f_4_);
}
inline void Message6_M5_M8_M27_M34::_internal_set_f_4(::fleetbench::proto::Message6_M5_M8_M27_M34_E36 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_M34_E36_IsValid(value));
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message6_M5_M8_M27_M36_M37

// optional int32 f_0 = 2;
inline bool Message6_M5_M8_M27_M36_M37::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36_M37::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message6_M5_M8_M27_M36_M37::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.M37.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M8_M27_M36_M37::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.M37.f_0)
}
inline ::int32_t Message6_M5_M8_M27_M36_M37::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5_M8_M27_M36_M37::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M5_M8_M27_M36

// optional string f_0 = 1;
inline bool Message6_M5_M8_M27_M36::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M5_M8_M27_M36::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M36::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_0)
}
inline std::string* Message6_M5_M8_M27_M36::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_0)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M36::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_0)
}

// repeated int32 f_1 = 2 [packed = true];
inline int Message6_M5_M8_M27_M36::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M5_M8_M27_M36::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M5_M8_M27_M36::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int32_t Message6_M5_M8_M27_M36::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_1)
  return _internal_f_1().Get(index);
}
inline void Message6_M5_M8_M27_M36::set_f_1(int index, ::int32_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_1)
}
inline void Message6_M5_M8_M27_M36::add_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.M8.M27.M36.f_1)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message6_M5_M8_M27_M36::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.M8.M27.M36.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M5_M8_M27_M36::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.M8.M27.M36.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message6_M5_M8_M27_M36::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message6_M5_M8_M27_M36::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional int32 f_2 = 3;
inline bool Message6_M5_M8_M27_M36::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Message6_M5_M8_M27_M36::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_2)
  return _internal_f_2();
}
inline void Message6_M5_M8_M27_M36::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_2)
}
inline ::int32_t Message6_M5_M8_M27_M36::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional string f_3 = 5;
inline bool Message6_M5_M8_M27_M36::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M5_M8_M27_M36::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M36::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_3)
}
inline std::string* Message6_M5_M8_M27_M36::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_3)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M36::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_3)
}

// optional int64 f_4 = 6;
inline bool Message6_M5_M8_M27_M36::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_4)
  return _internal_f_4();
}
inline void Message6_M5_M8_M27_M36::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_4)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 8;
inline bool Message6_M5_M8_M27_M36::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_5)
  return _internal_f_5();
}
inline void Message6_M5_M8_M27_M36::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_5)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional bytes f_6 = 9;
inline bool Message6_M5_M8_M27_M36::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M5_M8_M27_M36::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M36::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_6)
}
inline std::string* Message6_M5_M8_M27_M36::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_6)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M36::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_6)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_6)
}

// optional int64 f_7 = 12;
inline bool Message6_M5_M8_M27_M36::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_7)
  return _internal_f_7();
}
inline void Message6_M5_M8_M27_M36::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_7)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.M36.E37 f_8 = 13;
inline bool Message6_M5_M8_M27_M36::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_E37 Message6_M5_M8_M27_M36::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_8)
  return _internal_f_8();
}
inline void Message6_M5_M8_M27_M36::set_f_8(::fleetbench::proto::Message6_M5_M8_M27_M36_E37 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_8)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_E37 Message6_M5_M8_M27_M36::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_M36_E37>(_impl_.f_8_);
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_8(::fleetbench::proto::Message6_M5_M8_M27_M36_E37 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_M36_E37_IsValid(value));
  _impl_.f_8_ = value;
}

// optional int64 f_9 = 14;
inline bool Message6_M5_M8_M27_M36::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_9)
  return _internal_f_9();
}
inline void Message6_M5_M8_M27_M36::set_f_9(::int64_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_9)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_9(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional int64 f_10 = 15;
inline bool Message6_M5_M8_M27_M36::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_10)
  return _internal_f_10();
}
inline void Message6_M5_M8_M27_M36::set_f_10(::int64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_10)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_10(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 16;
inline bool Message6_M5_M8_M27_M36::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M5_M8_M27_M36::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M36::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_11)
}
inline std::string* Message6_M5_M8_M27_M36::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_11)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M36::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_11)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_11)
}

// optional int32 f_12 = 17;
inline bool Message6_M5_M8_M27_M36::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t Message6_M5_M8_M27_M36::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_12)
  return _internal_f_12();
}
inline void Message6_M5_M8_M27_M36::set_f_12(::int32_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_12)
}
inline ::int32_t Message6_M5_M8_M27_M36::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_12(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional int64 f_13 = 19;
inline bool Message6_M5_M8_M27_M36::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t Message6_M5_M8_M27_M36::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_13)
  return _internal_f_13();
}
inline void Message6_M5_M8_M27_M36::set_f_13(::int64_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_13)
}
inline ::int64_t Message6_M5_M8_M27_M36::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_13(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional double f_14 = 21;
inline bool Message6_M5_M8_M27_M36::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double Message6_M5_M8_M27_M36::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_14)
  return _internal_f_14();
}
inline void Message6_M5_M8_M27_M36::set_f_14(double value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_14)
}
inline double Message6_M5_M8_M27_M36::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_14(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional uint64 f_15 = 22;
inline bool Message6_M5_M8_M27_M36::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint64_t Message6_M5_M8_M27_M36::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_15)
  return _internal_f_15();
}
inline void Message6_M5_M8_M27_M36::set_f_15(::uint64_t value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_15)
}
inline ::uint64_t Message6_M5_M8_M27_M36::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_15(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional string f_16 = 23;
inline bool Message6_M5_M8_M27_M36::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message6_M5_M8_M27_M36::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27_M36::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.M36.f_16)
}
inline std::string* Message6_M5_M8_M27_M36::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_16)
  return _s;
}
inline const std::string& Message6_M5_M8_M27_M36::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message6_M5_M8_M27_M36::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27_M36::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_16)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_16)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.M36.M37 f_23 = 25;
inline bool Message6_M5_M8_M27_M36::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_23_ != nullptr);
  return value;
}
inline void Message6_M5_M8_M27_M36::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ != nullptr) _impl_.f_23_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37& Message6_M5_M8_M27_M36::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* p = _impl_.f_23_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37&>(::fleetbench::proto::_Message6_M5_M8_M27_M36_M37_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M8_M27_M36_M37& Message6_M5_M8_M27_M36::f_23() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.M36.f_23)
  return _internal_f_23();
}
inline void Message6_M5_M8_M27_M36::unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message6_M5_M8_M27_M36_M37* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_23_);
  }
  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36_M37*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_23)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* Message6_M5_M8_M27_M36::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* released = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* Message6_M5_M8_M27_M36::unsafe_arena_release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.M36.f_23)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* temp = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* Message6_M5_M8_M27_M36::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M8_M27_M36_M37>(GetArena());
    _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36_M37*>(p);
  }
  return _impl_.f_23_;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* Message6_M5_M8_M27_M36::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36_M37* _msg = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.M36.f_23)
  return _msg;
}
inline void Message6_M5_M8_M27_M36::set_allocated_f_23(::fleetbench::proto::Message6_M5_M8_M27_M36_M37* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_23_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36_M37*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.M36.f_23)
}

// -------------------------------------------------------------------

// Message6_M5_M8_M27

// optional int32 f_0 = 1;
inline bool Message6_M5_M8_M27::has_f_0() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::int32_t Message6_M5_M8_M27::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M8_M27::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_0)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5_M8_M27::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 2;
inline bool Message6_M5_M8_M27::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message6_M5_M8_M27::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_1)
}
inline std::string* Message6_M5_M8_M27::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_1)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_1)
}

// optional string f_2 = 3;
inline bool Message6_M5_M8_M27::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message6_M5_M8_M27::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_2)
}
inline std::string* Message6_M5_M8_M27::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_2)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_2)
}

// optional int64 f_3 = 5;
inline bool Message6_M5_M8_M27::has_f_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::int64_t Message6_M5_M8_M27::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_3)
  return _internal_f_3();
}
inline void Message6_M5_M8_M27::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_3)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M5_M8_M27::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 6;
inline bool Message6_M5_M8_M27::has_f_4() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::int64_t Message6_M5_M8_M27::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_4)
  return _internal_f_4();
}
inline void Message6_M5_M8_M27::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_4)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M5_M8_M27::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E12 f_5 = 7;
inline bool Message6_M5_M8_M27::has_f_5() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E12 Message6_M5_M8_M27::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_5)
  return _internal_f_5();
}
inline void Message6_M5_M8_M27::set_f_5(::fleetbench::proto::Message6_M5_M8_M27_E12 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_5)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E12 Message6_M5_M8_M27::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E12>(_impl_.f_5_);
}
inline void Message6_M5_M8_M27::_internal_set_f_5(::fleetbench::proto::Message6_M5_M8_M27_E12 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E12_IsValid(value));
  _impl_.f_5_ = value;
}

// optional string f_6 = 8;
inline bool Message6_M5_M8_M27::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message6_M5_M8_M27::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_6)
}
inline std::string* Message6_M5_M8_M27::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_6)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_6)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_6)
}

// optional string f_7 = 9;
inline bool Message6_M5_M8_M27::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message6_M5_M8_M27::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_7)
}
inline std::string* Message6_M5_M8_M27::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_7)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_7)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_7)
}

// optional int32 f_8 = 10;
inline bool Message6_M5_M8_M27::has_f_8() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int32_t Message6_M5_M8_M27::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_8)
  return _internal_f_8();
}
inline void Message6_M5_M8_M27::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_8)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message6_M5_M8_M27::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional float f_9 = 11;
inline bool Message6_M5_M8_M27::has_f_9() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline float Message6_M5_M8_M27::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_9)
  return _internal_f_9();
}
inline void Message6_M5_M8_M27::set_f_9(float value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_9)
}
inline float Message6_M5_M8_M27::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message6_M5_M8_M27::_internal_set_f_9(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional int64 f_10 = 13;
inline bool Message6_M5_M8_M27::has_f_10() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::int64_t Message6_M5_M8_M27::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_10)
  return _internal_f_10();
}
inline void Message6_M5_M8_M27::set_f_10(::int64_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_10)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message6_M5_M8_M27::_internal_set_f_10(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 16;
inline bool Message6_M5_M8_M27::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message6_M5_M8_M27::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_11)
}
inline std::string* Message6_M5_M8_M27::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_11)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_11)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_11)
}

// optional bytes f_12 = 17;
inline bool Message6_M5_M8_M27::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message6_M5_M8_M27::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_12_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_12)
}
inline std::string* Message6_M5_M8_M27::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_12)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_12)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_12)
}

// optional int64 f_13 = 19;
inline bool Message6_M5_M8_M27::has_f_13() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::int64_t Message6_M5_M8_M27::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_13)
  return _internal_f_13();
}
inline void Message6_M5_M8_M27::set_f_13(::int64_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_13)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message6_M5_M8_M27::_internal_set_f_13(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int32 f_14 = 21;
inline bool Message6_M5_M8_M27::has_f_14() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int32_t Message6_M5_M8_M27::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_14)
  return _internal_f_14();
}
inline void Message6_M5_M8_M27::set_f_14(::int32_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_14)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message6_M5_M8_M27::_internal_set_f_14(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional string f_15 = 23;
inline bool Message6_M5_M8_M27::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message6_M5_M8_M27::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_15)
  return _internal_f_15();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_15(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_15_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_15)
}
inline std::string* Message6_M5_M8_M27::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_15)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_15(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_15_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_15_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_15)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_15_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_15_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_15(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_15_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_15_.IsDefault()) {
          _impl_.f_15_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_15)
}

// optional int32 f_16 = 24;
inline bool Message6_M5_M8_M27::has_f_16() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = 0;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::int32_t Message6_M5_M8_M27::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_16)
  return _internal_f_16();
}
inline void Message6_M5_M8_M27::set_f_16(::int32_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_16)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message6_M5_M8_M27::_internal_set_f_16(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional string f_17 = 25;
inline bool Message6_M5_M8_M27::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message6_M5_M8_M27::f_17() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_17)
  return _internal_f_17();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_17(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_17_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_17)
}
inline std::string* Message6_M5_M8_M27::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_17)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_17(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_17_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_17_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_17)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_17_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_17_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_17(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_17_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_17_.IsDefault()) {
          _impl_.f_17_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_17)
}

// optional bytes f_18 = 26;
inline bool Message6_M5_M8_M27::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message6_M5_M8_M27::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_18)
  return _internal_f_18();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_18(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_18_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_18)
}
inline std::string* Message6_M5_M8_M27::mutable_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_18();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_18)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_18(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_18_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_18_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_18)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_18_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_18_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_18(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_18_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_18_.IsDefault()) {
          _impl_.f_18_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_18)
}

// optional int64 f_19 = 28;
inline bool Message6_M5_M8_M27::has_f_19() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_19)
  return _internal_f_19();
}
inline void Message6_M5_M8_M27::set_f_19(::int64_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_19)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message6_M5_M8_M27::_internal_set_f_19(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional string f_20 = 31;
inline bool Message6_M5_M8_M27::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message6_M5_M8_M27::f_20() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_20)
  return _internal_f_20();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_20(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_20_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_20)
}
inline std::string* Message6_M5_M8_M27::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_20)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_20(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_20_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_20_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_20)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_20_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_20_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_20(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_20_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_20_.IsDefault()) {
          _impl_.f_20_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_20)
}

// optional bytes f_21 = 33;
inline bool Message6_M5_M8_M27::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message6_M5_M8_M27::f_21() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_21)
  return _internal_f_21();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_21(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_21_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_21)
}
inline std::string* Message6_M5_M8_M27::mutable_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_21();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_21)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_21(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_21_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_21_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_21)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_21_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_21_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_21(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_21_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_21_.IsDefault()) {
          _impl_.f_21_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_21)
}

// optional int64 f_22 = 34;
inline bool Message6_M5_M8_M27::has_f_22() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_22)
  return _internal_f_22();
}
inline void Message6_M5_M8_M27::set_f_22(::int64_t value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_22)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message6_M5_M8_M27::_internal_set_f_22(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional int64 f_23 = 35;
inline bool Message6_M5_M8_M27::has_f_23() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_23)
  return _internal_f_23();
}
inline void Message6_M5_M8_M27::set_f_23(::int64_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_23)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message6_M5_M8_M27::_internal_set_f_23(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional int64 f_24 = 36;
inline bool Message6_M5_M8_M27::has_f_24() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_24() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_24)
  return _internal_f_24();
}
inline void Message6_M5_M8_M27::set_f_24(::int64_t value) {
  _internal_set_f_24(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_24)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_;
}
inline void Message6_M5_M8_M27::_internal_set_f_24(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_ = value;
}

// optional int32 f_25 = 37;
inline bool Message6_M5_M8_M27::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_25)
  return _internal_f_25();
}
inline void Message6_M5_M8_M27::set_f_25(::int32_t value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_25)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message6_M5_M8_M27::_internal_set_f_25(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional uint64 f_26 = 39;
inline bool Message6_M5_M8_M27::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::uint64_t Message6_M5_M8_M27::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_26)
  return _internal_f_26();
}
inline void Message6_M5_M8_M27::set_f_26(::uint64_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_26)
}
inline ::uint64_t Message6_M5_M8_M27::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message6_M5_M8_M27::_internal_set_f_26(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional fixed64 f_27 = 41;
inline bool Message6_M5_M8_M27::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::uint64_t Message6_M5_M8_M27::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_27)
  return _internal_f_27();
}
inline void Message6_M5_M8_M27::set_f_27(::uint64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_27)
}
inline ::uint64_t Message6_M5_M8_M27::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message6_M5_M8_M27::_internal_set_f_27(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional int64 f_28 = 42;
inline bool Message6_M5_M8_M27::has_f_28() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline ::int64_t Message6_M5_M8_M27::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_28)
  return _internal_f_28();
}
inline void Message6_M5_M8_M27::set_f_28(::int64_t value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_28)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message6_M5_M8_M27::_internal_set_f_28(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional bytes f_29 = 44;
inline bool Message6_M5_M8_M27::has_f_29() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message6_M5_M8_M27::f_29() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_29)
  return _internal_f_29();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_29(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_29_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_29)
}
inline std::string* Message6_M5_M8_M27::mutable_f_29() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_29();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_29)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_29(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_29_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_29_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_29)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_29_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_29_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_29(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_29_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_29_.IsDefault()) {
          _impl_.f_29_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_29)
}

// repeated int64 f_30 = 45 [packed = true];
inline int Message6_M5_M8_M27::_internal_f_30_size() const {
  return _internal_f_30().size();
}
inline int Message6_M5_M8_M27::f_30_size() const {
  return _internal_f_30_size();
}
inline void Message6_M5_M8_M27::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_.Clear();
}
inline ::int64_t Message6_M5_M8_M27::f_30(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_30)
  return _internal_f_30().Get(index);
}
inline void Message6_M5_M8_M27::set_f_30(int index, ::int64_t value) {
  _internal_mutable_f_30()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_30)
}
inline void Message6_M5_M8_M27::add_f_30(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_30()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.M8.M27.f_30)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M5_M8_M27::f_30() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.M8.M27.f_30)
  return _internal_f_30();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M5_M8_M27::mutable_f_30()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.M8.M27.f_30)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_30();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M5_M8_M27::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M5_M8_M27::_internal_mutable_f_30() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_30_;
}

// optional int32 f_31 = 46;
inline bool Message6_M5_M8_M27::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = 0;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_31)
  return _internal_f_31();
}
inline void Message6_M5_M8_M27::set_f_31(::int32_t value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_31)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message6_M5_M8_M27::_internal_set_f_31(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional int32 f_32 = 47;
inline bool Message6_M5_M8_M27::has_f_32() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline ::int32_t Message6_M5_M8_M27::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_32)
  return _internal_f_32();
}
inline void Message6_M5_M8_M27::set_f_32(::int32_t value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_32)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_;
}
inline void Message6_M5_M8_M27::_internal_set_f_32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = value;
}

// optional int64 f_33 = 49;
inline bool Message6_M5_M8_M27::has_f_33() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::int64_t Message6_M5_M8_M27::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_33)
  return _internal_f_33();
}
inline void Message6_M5_M8_M27::set_f_33(::int64_t value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_33)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message6_M5_M8_M27::_internal_set_f_33(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional uint32 f_34 = 50;
inline bool Message6_M5_M8_M27::has_f_34() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline ::uint32_t Message6_M5_M8_M27::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_34)
  return _internal_f_34();
}
inline void Message6_M5_M8_M27::set_f_34(::uint32_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_34)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message6_M5_M8_M27::_internal_set_f_34(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional int64 f_35 = 53;
inline bool Message6_M5_M8_M27::has_f_35() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline ::int64_t Message6_M5_M8_M27::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_35)
  return _internal_f_35();
}
inline void Message6_M5_M8_M27::set_f_35(::int64_t value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_35)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline void Message6_M5_M8_M27::_internal_set_f_35(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = value;
}

// optional int64 f_36 = 54;
inline bool Message6_M5_M8_M27::has_f_36() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::int64_t Message6_M5_M8_M27::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_36)
  return _internal_f_36();
}
inline void Message6_M5_M8_M27::set_f_36(::int64_t value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_36)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message6_M5_M8_M27::_internal_set_f_36(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional string f_37 = 55;
inline bool Message6_M5_M8_M27::has_f_37() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message6_M5_M8_M27::f_37() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_37)
  return _internal_f_37();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_37(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_37_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_37)
}
inline std::string* Message6_M5_M8_M27::mutable_f_37() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_37();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_37)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_37(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_37_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_37_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_37)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_37_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_37_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_37(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_37_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_37_.IsDefault()) {
          _impl_.f_37_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_37)
}

// optional bytes f_38 = 56;
inline bool Message6_M5_M8_M27::has_f_38() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message6_M5_M8_M27::f_38() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_38)
  return _internal_f_38();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_38(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_38_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_38)
}
inline std::string* Message6_M5_M8_M27::mutable_f_38() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_38();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_38)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_38(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_38_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_38_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_38)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_38_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_38_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_38(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_38_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_38_.IsDefault()) {
          _impl_.f_38_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_38)
}

// optional bool f_39 = 57;
inline bool Message6_M5_M8_M27::has_f_39() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = false;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline bool Message6_M5_M8_M27::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_39)
  return _internal_f_39();
}
inline void Message6_M5_M8_M27::set_f_39(bool value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[2] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_39)
}
inline bool Message6_M5_M8_M27::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message6_M5_M8_M27::_internal_set_f_39(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional string f_40 = 58;
inline bool Message6_M5_M8_M27::has_f_40() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message6_M5_M8_M27::f_40() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_40)
  return _internal_f_40();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_40(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_40_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_40)
}
inline std::string* Message6_M5_M8_M27::mutable_f_40() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_40();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_40)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_40(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_40_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_40_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_40)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_40_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_40_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_40(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_40_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_40_.IsDefault()) {
          _impl_.f_40_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_40)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E13 f_41 = 59;
inline bool Message6_M5_M8_M27::has_f_41() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = 0;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E13 Message6_M5_M8_M27::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_41)
  return _internal_f_41();
}
inline void Message6_M5_M8_M27::set_f_41(::fleetbench::proto::Message6_M5_M8_M27_E13 value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_41)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E13 Message6_M5_M8_M27::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E13>(_impl_.f_41_);
}
inline void Message6_M5_M8_M27::_internal_set_f_41(::fleetbench::proto::Message6_M5_M8_M27_E13 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E13_IsValid(value));
  _impl_.f_41_ = value;
}

// optional int32 f_42 = 60;
inline bool Message6_M5_M8_M27::has_f_42() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = 0;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::int32_t Message6_M5_M8_M27::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_42)
  return _internal_f_42();
}
inline void Message6_M5_M8_M27::set_f_42(::int32_t value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_42)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message6_M5_M8_M27::_internal_set_f_42(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E14 f_43 = 61;
inline bool Message6_M5_M8_M27::has_f_43() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = 0;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E14 Message6_M5_M8_M27::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_43)
  return _internal_f_43();
}
inline void Message6_M5_M8_M27::set_f_43(::fleetbench::proto::Message6_M5_M8_M27_E14 value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_43)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E14 Message6_M5_M8_M27::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E14>(_impl_.f_43_);
}
inline void Message6_M5_M8_M27::_internal_set_f_43(::fleetbench::proto::Message6_M5_M8_M27_E14 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E14_IsValid(value));
  _impl_.f_43_ = value;
}

// optional string f_44 = 63;
inline bool Message6_M5_M8_M27::has_f_44() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Message6_M5_M8_M27::f_44() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_44)
  return _internal_f_44();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_44(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_44_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_44)
}
inline std::string* Message6_M5_M8_M27::mutable_f_44() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_44();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_44)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_44(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_44_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.f_44_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_44)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.f_44_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_44_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_44(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.f_44_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_44_.IsDefault()) {
          _impl_.f_44_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_44)
}

// optional bool f_45 = 66;
inline bool Message6_M5_M8_M27::has_f_45() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = false;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline bool Message6_M5_M8_M27::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_45)
  return _internal_f_45();
}
inline void Message6_M5_M8_M27::set_f_45(bool value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[2] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_45)
}
inline bool Message6_M5_M8_M27::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message6_M5_M8_M27::_internal_set_f_45(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional string f_46 = 68;
inline bool Message6_M5_M8_M27::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Message6_M5_M8_M27::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_46_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_46)
}
inline std::string* Message6_M5_M8_M27::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_46)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_46)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_46)
}

// optional string f_47 = 69;
inline bool Message6_M5_M8_M27::has_f_47() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Message6_M5_M8_M27::f_47() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_47)
  return _internal_f_47();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_47(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_47_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_47)
}
inline std::string* Message6_M5_M8_M27::mutable_f_47() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_47();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_47)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_47(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_47_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.f_47_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_47)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.f_47_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_47_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_47(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.f_47_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_47_.IsDefault()) {
          _impl_.f_47_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_47)
}

// optional bytes f_48 = 70;
inline bool Message6_M5_M8_M27::has_f_48() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Message6_M5_M8_M27::f_48() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_48)
  return _internal_f_48();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_48(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_48_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_48)
}
inline std::string* Message6_M5_M8_M27::mutable_f_48() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_48();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_48)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_48(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_48_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.f_48_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_48)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.f_48_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_48_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_48(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.f_48_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_48_.IsDefault()) {
          _impl_.f_48_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_48)
}

// optional int32 f_49 = 71;
inline bool Message6_M5_M8_M27::has_f_49() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = 0;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline ::int32_t Message6_M5_M8_M27::f_49() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_49)
  return _internal_f_49();
}
inline void Message6_M5_M8_M27::set_f_49(::int32_t value) {
  _internal_set_f_49(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_49)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline void Message6_M5_M8_M27::_internal_set_f_49(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = value;
}

// optional bool f_50 = 72;
inline bool Message6_M5_M8_M27::has_f_50() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = false;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline bool Message6_M5_M8_M27::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_50)
  return _internal_f_50();
}
inline void Message6_M5_M8_M27::set_f_50(bool value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[2] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_50)
}
inline bool Message6_M5_M8_M27::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_;
}
inline void Message6_M5_M8_M27::_internal_set_f_50(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = value;
}

// optional string f_51 = 75;
inline bool Message6_M5_M8_M27::has_f_51() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Message6_M5_M8_M27::f_51() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_51)
  return _internal_f_51();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_51(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_51_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_51)
}
inline std::string* Message6_M5_M8_M27::mutable_f_51() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_51();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_51)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_51(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_51_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.f_51_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_51)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.f_51_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_51_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_51(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.f_51_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_51_.IsDefault()) {
          _impl_.f_51_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_51)
}

// optional int32 f_52 = 77;
inline bool Message6_M5_M8_M27::has_f_52() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = 0;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline ::int32_t Message6_M5_M8_M27::f_52() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_52)
  return _internal_f_52();
}
inline void Message6_M5_M8_M27::set_f_52(::int32_t value) {
  _internal_set_f_52(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_52)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_;
}
inline void Message6_M5_M8_M27::_internal_set_f_52(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = value;
}

// optional int32 f_53 = 78;
inline bool Message6_M5_M8_M27::has_f_53() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = 0;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline ::int32_t Message6_M5_M8_M27::f_53() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_53)
  return _internal_f_53();
}
inline void Message6_M5_M8_M27::set_f_53(::int32_t value) {
  _internal_set_f_53(value);
  _impl_._has_bits_[2] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_53)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_;
}
inline void Message6_M5_M8_M27::_internal_set_f_53(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = value;
}

// optional string f_54 = 79;
inline bool Message6_M5_M8_M27::has_f_54() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const std::string& Message6_M5_M8_M27::f_54() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_54)
  return _internal_f_54();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_54(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_54_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_54)
}
inline std::string* Message6_M5_M8_M27::mutable_f_54() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_54();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_54)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_54(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_54_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.f_54_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_54)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.f_54_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_54_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_54(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.f_54_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_54_.IsDefault()) {
          _impl_.f_54_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_54)
}

// optional fixed32 f_55 = 80;
inline bool Message6_M5_M8_M27::has_f_55() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = 0u;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline ::uint32_t Message6_M5_M8_M27::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_55)
  return _internal_f_55();
}
inline void Message6_M5_M8_M27::set_f_55(::uint32_t value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[2] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_55)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message6_M5_M8_M27::_internal_set_f_55(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// optional int64 f_56 = 81;
inline bool Message6_M5_M8_M27::has_f_56() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline ::int64_t Message6_M5_M8_M27::f_56() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_56)
  return _internal_f_56();
}
inline void Message6_M5_M8_M27::set_f_56(::int64_t value) {
  _internal_set_f_56(value);
  _impl_._has_bits_[2] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_56)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_;
}
inline void Message6_M5_M8_M27::_internal_set_f_56(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = value;
}

// optional int64 f_57 = 82;
inline bool Message6_M5_M8_M27::has_f_57() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline ::int64_t Message6_M5_M8_M27::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_57)
  return _internal_f_57();
}
inline void Message6_M5_M8_M27::set_f_57(::int64_t value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[2] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_57)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message6_M5_M8_M27::_internal_set_f_57(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional double f_58 = 84;
inline bool Message6_M5_M8_M27::has_f_58() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = 0;
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline double Message6_M5_M8_M27::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_58)
  return _internal_f_58();
}
inline void Message6_M5_M8_M27::set_f_58(double value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[2] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_58)
}
inline double Message6_M5_M8_M27::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message6_M5_M8_M27::_internal_set_f_58(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional int64 f_59 = 86;
inline bool Message6_M5_M8_M27::has_f_59() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline ::int64_t Message6_M5_M8_M27::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_59)
  return _internal_f_59();
}
inline void Message6_M5_M8_M27::set_f_59(::int64_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[2] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_59)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message6_M5_M8_M27::_internal_set_f_59(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// optional float f_60 = 88;
inline bool Message6_M5_M8_M27::has_f_60() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = 0;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline float Message6_M5_M8_M27::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_60)
  return _internal_f_60();
}
inline void Message6_M5_M8_M27::set_f_60(float value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[2] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_60)
}
inline float Message6_M5_M8_M27::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_60_;
}
inline void Message6_M5_M8_M27::_internal_set_f_60(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = value;
}

// optional float f_61 = 89;
inline bool Message6_M5_M8_M27::has_f_61() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = 0;
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline float Message6_M5_M8_M27::f_61() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_61)
  return _internal_f_61();
}
inline void Message6_M5_M8_M27::set_f_61(float value) {
  _internal_set_f_61(value);
  _impl_._has_bits_[2] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_61)
}
inline float Message6_M5_M8_M27::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_;
}
inline void Message6_M5_M8_M27::_internal_set_f_61(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_ = value;
}

// optional uint32 f_62 = 91;
inline bool Message6_M5_M8_M27::has_f_62() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = 0u;
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline ::uint32_t Message6_M5_M8_M27::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_62)
  return _internal_f_62();
}
inline void Message6_M5_M8_M27::set_f_62(::uint32_t value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[2] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_62)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_;
}
inline void Message6_M5_M8_M27::_internal_set_f_62(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = value;
}

// optional int32 f_63 = 92;
inline bool Message6_M5_M8_M27::has_f_63() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_63() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_63)
  return _internal_f_63();
}
inline void Message6_M5_M8_M27::set_f_63(::int32_t value) {
  _internal_set_f_63(value);
  _impl_._has_bits_[2] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_63)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_;
}
inline void Message6_M5_M8_M27::_internal_set_f_63(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E15 f_64 = 94;
inline bool Message6_M5_M8_M27::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E15 Message6_M5_M8_M27::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_64)
  return _internal_f_64();
}
inline void Message6_M5_M8_M27::set_f_64(::fleetbench::proto::Message6_M5_M8_M27_E15 value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_64)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E15 Message6_M5_M8_M27::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E15>(_impl_.f_64_);
}
inline void Message6_M5_M8_M27::_internal_set_f_64(::fleetbench::proto::Message6_M5_M8_M27_E15 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E15_IsValid(value));
  _impl_.f_64_ = value;
}

// optional int32 f_65 = 95;
inline bool Message6_M5_M8_M27::has_f_65() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = 0;
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_65() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_65)
  return _internal_f_65();
}
inline void Message6_M5_M8_M27::set_f_65(::int32_t value) {
  _internal_set_f_65(value);
  _impl_._has_bits_[2] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_65)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_65_;
}
inline void Message6_M5_M8_M27::_internal_set_f_65(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E16 f_66 = 97;
inline bool Message6_M5_M8_M27::has_f_66() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = 0;
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E16 Message6_M5_M8_M27::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_66)
  return _internal_f_66();
}
inline void Message6_M5_M8_M27::set_f_66(::fleetbench::proto::Message6_M5_M8_M27_E16 value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[2] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_66)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E16 Message6_M5_M8_M27::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E16>(_impl_.f_66_);
}
inline void Message6_M5_M8_M27::_internal_set_f_66(::fleetbench::proto::Message6_M5_M8_M27_E16 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E16_IsValid(value));
  _impl_.f_66_ = value;
}

// optional float f_67 = 98;
inline bool Message6_M5_M8_M27::has_f_67() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = 0;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline float Message6_M5_M8_M27::f_67() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_67)
  return _internal_f_67();
}
inline void Message6_M5_M8_M27::set_f_67(float value) {
  _internal_set_f_67(value);
  _impl_._has_bits_[2] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_67)
}
inline float Message6_M5_M8_M27::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_;
}
inline void Message6_M5_M8_M27::_internal_set_f_67(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = value;
}

// optional int64 f_68 = 99;
inline bool Message6_M5_M8_M27::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x20000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_68)
  return _internal_f_68();
}
inline void Message6_M5_M8_M27::set_f_68(::int64_t value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_68)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_68_;
}
inline void Message6_M5_M8_M27::_internal_set_f_68(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = value;
}

// optional float f_69 = 101;
inline bool Message6_M5_M8_M27::has_f_69() const {
  bool value = (_impl_._has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = 0;
  _impl_._has_bits_[2] &= ~0x40000000u;
}
inline float Message6_M5_M8_M27::f_69() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_69)
  return _internal_f_69();
}
inline void Message6_M5_M8_M27::set_f_69(float value) {
  _internal_set_f_69(value);
  _impl_._has_bits_[2] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_69)
}
inline float Message6_M5_M8_M27::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_;
}
inline void Message6_M5_M8_M27::_internal_set_f_69(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = value;
}

// optional int32 f_70 = 102;
inline bool Message6_M5_M8_M27::has_f_70() const {
  bool value = (_impl_._has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = 0;
  _impl_._has_bits_[2] &= ~0x80000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_70() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_70)
  return _internal_f_70();
}
inline void Message6_M5_M8_M27::set_f_70(::int32_t value) {
  _internal_set_f_70(value);
  _impl_._has_bits_[2] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_70)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_;
}
inline void Message6_M5_M8_M27::_internal_set_f_70(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = value;
}

// optional uint64 f_71 = 104;
inline bool Message6_M5_M8_M27::has_f_71() const {
  bool value = (_impl_._has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = ::uint64_t{0u};
  _impl_._has_bits_[3] &= ~0x00000001u;
}
inline ::uint64_t Message6_M5_M8_M27::f_71() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_71)
  return _internal_f_71();
}
inline void Message6_M5_M8_M27::set_f_71(::uint64_t value) {
  _internal_set_f_71(value);
  _impl_._has_bits_[3] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_71)
}
inline ::uint64_t Message6_M5_M8_M27::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_;
}
inline void Message6_M5_M8_M27::_internal_set_f_71(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = value;
}

// optional string f_72 = 105;
inline bool Message6_M5_M8_M27::has_f_72() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const std::string& Message6_M5_M8_M27::f_72() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_72)
  return _internal_f_72();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_72(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_72_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_72)
}
inline std::string* Message6_M5_M8_M27::mutable_f_72() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_72();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_72)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_72(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_72_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.f_72_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_72)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.f_72_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_72_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_72(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.f_72_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_72_.IsDefault()) {
          _impl_.f_72_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_72)
}

// optional string f_73 = 107;
inline bool Message6_M5_M8_M27::has_f_73() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const std::string& Message6_M5_M8_M27::f_73() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_73)
  return _internal_f_73();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_73(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_73_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_73)
}
inline std::string* Message6_M5_M8_M27::mutable_f_73() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_73();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_73)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_73() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_73_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_73(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_73_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.f_73_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_73)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.f_73_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_73_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_73(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.f_73_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_73_.IsDefault()) {
          _impl_.f_73_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_73)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E17 f_74 = 108;
inline bool Message6_M5_M8_M27::has_f_74() const {
  bool value = (_impl_._has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = 0;
  _impl_._has_bits_[3] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E17 Message6_M5_M8_M27::f_74() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_74)
  return _internal_f_74();
}
inline void Message6_M5_M8_M27::set_f_74(::fleetbench::proto::Message6_M5_M8_M27_E17 value) {
  _internal_set_f_74(value);
  _impl_._has_bits_[3] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_74)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E17 Message6_M5_M8_M27::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E17>(_impl_.f_74_);
}
inline void Message6_M5_M8_M27::_internal_set_f_74(::fleetbench::proto::Message6_M5_M8_M27_E17 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E17_IsValid(value));
  _impl_.f_74_ = value;
}

// optional bytes f_75 = 109;
inline bool Message6_M5_M8_M27::has_f_75() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const std::string& Message6_M5_M8_M27::f_75() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_75)
  return _internal_f_75();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_75(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_75_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_75)
}
inline std::string* Message6_M5_M8_M27::mutable_f_75() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_75();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_75)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_75(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_75_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  return _impl_.f_75_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_75)
  if ((_impl_._has_bits_[0] & 0x00800000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00800000u;
  auto* released = _impl_.f_75_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_75_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_75(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.f_75_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_75_.IsDefault()) {
          _impl_.f_75_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_75)
}

// optional int32 f_76 = 110;
inline bool Message6_M5_M8_M27::has_f_76() const {
  bool value = (_impl_._has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = 0;
  _impl_._has_bits_[3] &= ~0x00000004u;
}
inline ::int32_t Message6_M5_M8_M27::f_76() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_76)
  return _internal_f_76();
}
inline void Message6_M5_M8_M27::set_f_76(::int32_t value) {
  _internal_set_f_76(value);
  _impl_._has_bits_[3] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_76)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_;
}
inline void Message6_M5_M8_M27::_internal_set_f_76(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = value;
}

// optional int32 f_77 = 112;
inline bool Message6_M5_M8_M27::has_f_77() const {
  bool value = (_impl_._has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = 0;
  _impl_._has_bits_[3] &= ~0x00000008u;
}
inline ::int32_t Message6_M5_M8_M27::f_77() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_77)
  return _internal_f_77();
}
inline void Message6_M5_M8_M27::set_f_77(::int32_t value) {
  _internal_set_f_77(value);
  _impl_._has_bits_[3] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_77)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_;
}
inline void Message6_M5_M8_M27::_internal_set_f_77(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = value;
}

// optional string f_78 = 113;
inline bool Message6_M5_M8_M27::has_f_78() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const std::string& Message6_M5_M8_M27::f_78() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_78)
  return _internal_f_78();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_78(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_78_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_78)
}
inline std::string* Message6_M5_M8_M27::mutable_f_78() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_78();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_78)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_78_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_78(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_78_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  return _impl_.f_78_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_78)
  if ((_impl_._has_bits_[0] & 0x01000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x01000000u;
  auto* released = _impl_.f_78_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_78_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_78(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.f_78_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_78_.IsDefault()) {
          _impl_.f_78_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_78)
}

// optional int64 f_79 = 115;
inline bool Message6_M5_M8_M27::has_f_79() const {
  bool value = (_impl_._has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_79() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000020u;
}
inline ::int64_t Message6_M5_M8_M27::f_79() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_79)
  return _internal_f_79();
}
inline void Message6_M5_M8_M27::set_f_79(::int64_t value) {
  _internal_set_f_79(value);
  _impl_._has_bits_[3] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_79)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_79() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_79_;
}
inline void Message6_M5_M8_M27::_internal_set_f_79(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = value;
}

// optional int32 f_80 = 116;
inline bool Message6_M5_M8_M27::has_f_80() const {
  bool value = (_impl_._has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_ = 0;
  _impl_._has_bits_[3] &= ~0x00000010u;
}
inline ::int32_t Message6_M5_M8_M27::f_80() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_80)
  return _internal_f_80();
}
inline void Message6_M5_M8_M27::set_f_80(::int32_t value) {
  _internal_set_f_80(value);
  _impl_._has_bits_[3] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_80)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_80() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_80_;
}
inline void Message6_M5_M8_M27::_internal_set_f_80(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_ = value;
}

// optional bool f_81 = 117;
inline bool Message6_M5_M8_M27::has_f_81() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_81() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = false;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline bool Message6_M5_M8_M27::f_81() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_81)
  return _internal_f_81();
}
inline void Message6_M5_M8_M27::set_f_81(bool value) {
  _internal_set_f_81(value);
  _impl_._has_bits_[2] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_81)
}
inline bool Message6_M5_M8_M27::_internal_f_81() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_81_;
}
inline void Message6_M5_M8_M27::_internal_set_f_81(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = value;
}

// optional int32 f_82 = 118;
inline bool Message6_M5_M8_M27::has_f_82() const {
  bool value = (_impl_._has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_82() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = 0;
  _impl_._has_bits_[3] &= ~0x00000040u;
}
inline ::int32_t Message6_M5_M8_M27::f_82() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_82)
  return _internal_f_82();
}
inline void Message6_M5_M8_M27::set_f_82(::int32_t value) {
  _internal_set_f_82(value);
  _impl_._has_bits_[3] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_82)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_82() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_82_;
}
inline void Message6_M5_M8_M27::_internal_set_f_82(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_ = value;
}

// optional string f_83 = 120;
inline bool Message6_M5_M8_M27::has_f_83() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const std::string& Message6_M5_M8_M27::f_83() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_83)
  return _internal_f_83();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_83(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_83_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_83)
}
inline std::string* Message6_M5_M8_M27::mutable_f_83() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_83();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_83)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_83() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_83_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_83(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_83_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  return _impl_.f_83_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_83)
  if ((_impl_._has_bits_[0] & 0x02000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x02000000u;
  auto* released = _impl_.f_83_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_83_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_83(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.f_83_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_83_.IsDefault()) {
          _impl_.f_83_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_83)
}

// optional int32 f_84 = 121;
inline bool Message6_M5_M8_M27::has_f_84() const {
  bool value = (_impl_._has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = 0;
  _impl_._has_bits_[3] &= ~0x00000080u;
}
inline ::int32_t Message6_M5_M8_M27::f_84() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_84)
  return _internal_f_84();
}
inline void Message6_M5_M8_M27::set_f_84(::int32_t value) {
  _internal_set_f_84(value);
  _impl_._has_bits_[3] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_84)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_84() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_84_;
}
inline void Message6_M5_M8_M27::_internal_set_f_84(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E18 f_85 = 123;
inline bool Message6_M5_M8_M27::has_f_85() const {
  bool value = (_impl_._has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = 0;
  _impl_._has_bits_[3] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E18 Message6_M5_M8_M27::f_85() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_85)
  return _internal_f_85();
}
inline void Message6_M5_M8_M27::set_f_85(::fleetbench::proto::Message6_M5_M8_M27_E18 value) {
  _internal_set_f_85(value);
  _impl_._has_bits_[3] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_85)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E18 Message6_M5_M8_M27::_internal_f_85() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E18>(_impl_.f_85_);
}
inline void Message6_M5_M8_M27::_internal_set_f_85(::fleetbench::proto::Message6_M5_M8_M27_E18 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E18_IsValid(value));
  _impl_.f_85_ = value;
}

// optional string f_86 = 126;
inline bool Message6_M5_M8_M27::has_f_86() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const std::string& Message6_M5_M8_M27::f_86() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_86)
  return _internal_f_86();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_86(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_86_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_86)
}
inline std::string* Message6_M5_M8_M27::mutable_f_86() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_86();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_86)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_86() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_86_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_86(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_86_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  return _impl_.f_86_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_86)
  if ((_impl_._has_bits_[0] & 0x04000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x04000000u;
  auto* released = _impl_.f_86_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_86_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_86(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.f_86_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_86_.IsDefault()) {
          _impl_.f_86_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_86)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E19 f_87 = 128;
inline bool Message6_M5_M8_M27::has_f_87() const {
  bool value = (_impl_._has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_ = 0;
  _impl_._has_bits_[3] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E19 Message6_M5_M8_M27::f_87() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_87)
  return _internal_f_87();
}
inline void Message6_M5_M8_M27::set_f_87(::fleetbench::proto::Message6_M5_M8_M27_E19 value) {
  _internal_set_f_87(value);
  _impl_._has_bits_[3] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_87)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E19 Message6_M5_M8_M27::_internal_f_87() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E19>(_impl_.f_87_);
}
inline void Message6_M5_M8_M27::_internal_set_f_87(::fleetbench::proto::Message6_M5_M8_M27_E19 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E19_IsValid(value));
  _impl_.f_87_ = value;
}

// optional int32 f_88 = 129;
inline bool Message6_M5_M8_M27::has_f_88() const {
  bool value = (_impl_._has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_88() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = 0;
  _impl_._has_bits_[3] &= ~0x00000400u;
}
inline ::int32_t Message6_M5_M8_M27::f_88() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_88)
  return _internal_f_88();
}
inline void Message6_M5_M8_M27::set_f_88(::int32_t value) {
  _internal_set_f_88(value);
  _impl_._has_bits_[3] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_88)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_88() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_88_;
}
inline void Message6_M5_M8_M27::_internal_set_f_88(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = value;
}

// optional bytes f_89 = 131;
inline bool Message6_M5_M8_M27::has_f_89() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const std::string& Message6_M5_M8_M27::f_89() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_89)
  return _internal_f_89();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_89(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_89_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_89)
}
inline std::string* Message6_M5_M8_M27::mutable_f_89() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_89();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_89)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_89() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_89_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_89(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_89_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  return _impl_.f_89_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_89)
  if ((_impl_._has_bits_[0] & 0x08000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x08000000u;
  auto* released = _impl_.f_89_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_89_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_89(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.f_89_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_89_.IsDefault()) {
          _impl_.f_89_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_89)
}

// optional string f_90 = 132;
inline bool Message6_M5_M8_M27::has_f_90() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const std::string& Message6_M5_M8_M27::f_90() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_90)
  return _internal_f_90();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_90(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_90_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_90)
}
inline std::string* Message6_M5_M8_M27::mutable_f_90() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_90();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_90)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_90() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_90_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_90(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_90_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  return _impl_.f_90_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_90)
  if ((_impl_._has_bits_[0] & 0x10000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x10000000u;
  auto* released = _impl_.f_90_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_90_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_90(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.f_90_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_90_.IsDefault()) {
          _impl_.f_90_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_90)
}

// optional uint32 f_91 = 133;
inline bool Message6_M5_M8_M27::has_f_91() const {
  bool value = (_impl_._has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = 0u;
  _impl_._has_bits_[3] &= ~0x00000800u;
}
inline ::uint32_t Message6_M5_M8_M27::f_91() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_91)
  return _internal_f_91();
}
inline void Message6_M5_M8_M27::set_f_91(::uint32_t value) {
  _internal_set_f_91(value);
  _impl_._has_bits_[3] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_91)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_91() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_91_;
}
inline void Message6_M5_M8_M27::_internal_set_f_91(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = value;
}

// optional int64 f_92 = 135;
inline bool Message6_M5_M8_M27::has_f_92() const {
  bool value = (_impl_._has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00001000u;
}
inline ::int64_t Message6_M5_M8_M27::f_92() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_92)
  return _internal_f_92();
}
inline void Message6_M5_M8_M27::set_f_92(::int64_t value) {
  _internal_set_f_92(value);
  _impl_._has_bits_[3] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_92)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_92() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_92_;
}
inline void Message6_M5_M8_M27::_internal_set_f_92(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = value;
}

// optional int64 f_93 = 137;
inline bool Message6_M5_M8_M27::has_f_93() const {
  bool value = (_impl_._has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00002000u;
}
inline ::int64_t Message6_M5_M8_M27::f_93() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_93)
  return _internal_f_93();
}
inline void Message6_M5_M8_M27::set_f_93(::int64_t value) {
  _internal_set_f_93(value);
  _impl_._has_bits_[3] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_93)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_93_;
}
inline void Message6_M5_M8_M27::_internal_set_f_93(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = value;
}

// optional bytes f_94 = 139;
inline bool Message6_M5_M8_M27::has_f_94() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const std::string& Message6_M5_M8_M27::f_94() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_94)
  return _internal_f_94();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_94(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.f_94_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_94)
}
inline std::string* Message6_M5_M8_M27::mutable_f_94() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_94();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_94)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_94() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_94_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_94(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.f_94_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  return _impl_.f_94_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_94)
  if ((_impl_._has_bits_[0] & 0x20000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x20000000u;
  auto* released = _impl_.f_94_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_94_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_94(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.f_94_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_94_.IsDefault()) {
          _impl_.f_94_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_94)
}

// optional string f_95 = 140;
inline bool Message6_M5_M8_M27::has_f_95() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const std::string& Message6_M5_M8_M27::f_95() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_95)
  return _internal_f_95();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_95(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.f_95_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_95)
}
inline std::string* Message6_M5_M8_M27::mutable_f_95() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_95();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_95)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_95() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_95_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_95(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.f_95_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  return _impl_.f_95_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_95)
  if ((_impl_._has_bits_[0] & 0x40000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x40000000u;
  auto* released = _impl_.f_95_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_95_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_95(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.f_95_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_95_.IsDefault()) {
          _impl_.f_95_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_95)
}

// optional int64 f_96 = 141;
inline bool Message6_M5_M8_M27::has_f_96() const {
  bool value = (_impl_._has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00004000u;
}
inline ::int64_t Message6_M5_M8_M27::f_96() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_96)
  return _internal_f_96();
}
inline void Message6_M5_M8_M27::set_f_96(::int64_t value) {
  _internal_set_f_96(value);
  _impl_._has_bits_[3] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_96)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_96() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_96_;
}
inline void Message6_M5_M8_M27::_internal_set_f_96(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_ = value;
}

// optional string f_97 = 142;
inline bool Message6_M5_M8_M27::has_f_97() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const std::string& Message6_M5_M8_M27::f_97() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_97)
  return _internal_f_97();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_97(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.f_97_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_97)
}
inline std::string* Message6_M5_M8_M27::mutable_f_97() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_97();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_97)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_97() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_97_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_97(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.f_97_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  return _impl_.f_97_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_97)
  if ((_impl_._has_bits_[0] & 0x80000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x80000000u;
  auto* released = _impl_.f_97_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_97_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_97(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.f_97_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_97_.IsDefault()) {
          _impl_.f_97_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_97)
}

// optional int32 f_98 = 144;
inline bool Message6_M5_M8_M27::has_f_98() const {
  bool value = (_impl_._has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_98() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = 0;
  _impl_._has_bits_[3] &= ~0x00008000u;
}
inline ::int32_t Message6_M5_M8_M27::f_98() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_98)
  return _internal_f_98();
}
inline void Message6_M5_M8_M27::set_f_98(::int32_t value) {
  _internal_set_f_98(value);
  _impl_._has_bits_[3] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_98)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_98() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_98_;
}
inline void Message6_M5_M8_M27::_internal_set_f_98(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E20 f_99 = 145;
inline bool Message6_M5_M8_M27::has_f_99() const {
  bool value = (_impl_._has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_99() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = 0;
  _impl_._has_bits_[3] &= ~0x00010000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E20 Message6_M5_M8_M27::f_99() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_99)
  return _internal_f_99();
}
inline void Message6_M5_M8_M27::set_f_99(::fleetbench::proto::Message6_M5_M8_M27_E20 value) {
  _internal_set_f_99(value);
  _impl_._has_bits_[3] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_99)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E20 Message6_M5_M8_M27::_internal_f_99() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E20>(_impl_.f_99_);
}
inline void Message6_M5_M8_M27::_internal_set_f_99(::fleetbench::proto::Message6_M5_M8_M27_E20 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E20_IsValid(value));
  _impl_.f_99_ = value;
}

// optional int64 f_100 = 147;
inline bool Message6_M5_M8_M27::has_f_100() const {
  bool value = (_impl_._has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_100() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00020000u;
}
inline ::int64_t Message6_M5_M8_M27::f_100() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_100)
  return _internal_f_100();
}
inline void Message6_M5_M8_M27::set_f_100(::int64_t value) {
  _internal_set_f_100(value);
  _impl_._has_bits_[3] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_100)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_100() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_100_;
}
inline void Message6_M5_M8_M27::_internal_set_f_100(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = value;
}

// optional string f_101 = 148;
inline bool Message6_M5_M8_M27::has_f_101() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_101_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const std::string& Message6_M5_M8_M27::f_101() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_101)
  return _internal_f_101();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_101(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.f_101_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_101)
}
inline std::string* Message6_M5_M8_M27::mutable_f_101() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_101();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_101)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_101() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_101_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_101(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.f_101_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  return _impl_.f_101_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_101)
  if ((_impl_._has_bits_[1] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000001u;
  auto* released = _impl_.f_101_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_101_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_101(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.f_101_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_101_.IsDefault()) {
          _impl_.f_101_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_101)
}

// optional int32 f_102 = 149;
inline bool Message6_M5_M8_M27::has_f_102() const {
  bool value = (_impl_._has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_102() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = 0;
  _impl_._has_bits_[3] &= ~0x00080000u;
}
inline ::int32_t Message6_M5_M8_M27::f_102() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_102)
  return _internal_f_102();
}
inline void Message6_M5_M8_M27::set_f_102(::int32_t value) {
  _internal_set_f_102(value);
  _impl_._has_bits_[3] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_102)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_102() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_102_;
}
inline void Message6_M5_M8_M27::_internal_set_f_102(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = value;
}

// optional int64 f_103 = 150;
inline bool Message6_M5_M8_M27::has_f_103() const {
  bool value = (_impl_._has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00040000u;
}
inline ::int64_t Message6_M5_M8_M27::f_103() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_103)
  return _internal_f_103();
}
inline void Message6_M5_M8_M27::set_f_103(::int64_t value) {
  _internal_set_f_103(value);
  _impl_._has_bits_[3] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_103)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_103() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_103_;
}
inline void Message6_M5_M8_M27::_internal_set_f_103(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_ = value;
}

// optional int32 f_104 = 152;
inline bool Message6_M5_M8_M27::has_f_104() const {
  bool value = (_impl_._has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_104_ = 0;
  _impl_._has_bits_[3] &= ~0x00100000u;
}
inline ::int32_t Message6_M5_M8_M27::f_104() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_104)
  return _internal_f_104();
}
inline void Message6_M5_M8_M27::set_f_104(::int32_t value) {
  _internal_set_f_104(value);
  _impl_._has_bits_[3] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_104)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_104() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_104_;
}
inline void Message6_M5_M8_M27::_internal_set_f_104(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_104_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E21 f_105 = 153;
inline bool Message6_M5_M8_M27::has_f_105() const {
  bool value = (_impl_._has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_105() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = 0;
  _impl_._has_bits_[3] &= ~0x00400000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E21 Message6_M5_M8_M27::f_105() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_105)
  return _internal_f_105();
}
inline void Message6_M5_M8_M27::set_f_105(::fleetbench::proto::Message6_M5_M8_M27_E21 value) {
  _internal_set_f_105(value);
  _impl_._has_bits_[3] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_105)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E21 Message6_M5_M8_M27::_internal_f_105() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E21>(_impl_.f_105_);
}
inline void Message6_M5_M8_M27::_internal_set_f_105(::fleetbench::proto::Message6_M5_M8_M27_E21 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E21_IsValid(value));
  _impl_.f_105_ = value;
}

// optional int64 f_106 = 154;
inline bool Message6_M5_M8_M27::has_f_106() const {
  bool value = (_impl_._has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00200000u;
}
inline ::int64_t Message6_M5_M8_M27::f_106() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_106)
  return _internal_f_106();
}
inline void Message6_M5_M8_M27::set_f_106(::int64_t value) {
  _internal_set_f_106(value);
  _impl_._has_bits_[3] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_106)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_106() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_106_;
}
inline void Message6_M5_M8_M27::_internal_set_f_106(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_ = value;
}

// optional int32 f_107 = 155;
inline bool Message6_M5_M8_M27::has_f_107() const {
  bool value = (_impl_._has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_107() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = 0;
  _impl_._has_bits_[3] &= ~0x00800000u;
}
inline ::int32_t Message6_M5_M8_M27::f_107() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_107)
  return _internal_f_107();
}
inline void Message6_M5_M8_M27::set_f_107(::int32_t value) {
  _internal_set_f_107(value);
  _impl_._has_bits_[3] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_107)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_107() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_107_;
}
inline void Message6_M5_M8_M27::_internal_set_f_107(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E22 f_108 = 157;
inline bool Message6_M5_M8_M27::has_f_108() const {
  bool value = (_impl_._has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_ = 0;
  _impl_._has_bits_[3] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E22 Message6_M5_M8_M27::f_108() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_108)
  return _internal_f_108();
}
inline void Message6_M5_M8_M27::set_f_108(::fleetbench::proto::Message6_M5_M8_M27_E22 value) {
  _internal_set_f_108(value);
  _impl_._has_bits_[3] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_108)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E22 Message6_M5_M8_M27::_internal_f_108() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E22>(_impl_.f_108_);
}
inline void Message6_M5_M8_M27::_internal_set_f_108(::fleetbench::proto::Message6_M5_M8_M27_E22 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E22_IsValid(value));
  _impl_.f_108_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E23 f_109 = 160;
inline bool Message6_M5_M8_M27::has_f_109() const {
  bool value = (_impl_._has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_109_ = 0;
  _impl_._has_bits_[3] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E23 Message6_M5_M8_M27::f_109() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_109)
  return _internal_f_109();
}
inline void Message6_M5_M8_M27::set_f_109(::fleetbench::proto::Message6_M5_M8_M27_E23 value) {
  _internal_set_f_109(value);
  _impl_._has_bits_[3] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_109)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E23 Message6_M5_M8_M27::_internal_f_109() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E23>(_impl_.f_109_);
}
inline void Message6_M5_M8_M27::_internal_set_f_109(::fleetbench::proto::Message6_M5_M8_M27_E23 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E23_IsValid(value));
  _impl_.f_109_ = value;
}

// optional int32 f_110 = 161;
inline bool Message6_M5_M8_M27::has_f_110() const {
  bool value = (_impl_._has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_110() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = 0;
  _impl_._has_bits_[3] &= ~0x08000000u;
}
inline ::int32_t Message6_M5_M8_M27::f_110() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_110)
  return _internal_f_110();
}
inline void Message6_M5_M8_M27::set_f_110(::int32_t value) {
  _internal_set_f_110(value);
  _impl_._has_bits_[3] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_110)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_110() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_110_;
}
inline void Message6_M5_M8_M27::_internal_set_f_110(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = value;
}

// optional int64 f_111 = 162;
inline bool Message6_M5_M8_M27::has_f_111() const {
  bool value = (_impl_._has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x04000000u;
}
inline ::int64_t Message6_M5_M8_M27::f_111() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_111)
  return _internal_f_111();
}
inline void Message6_M5_M8_M27::set_f_111(::int64_t value) {
  _internal_set_f_111(value);
  _impl_._has_bits_[3] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_111)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_111() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_111_;
}
inline void Message6_M5_M8_M27::_internal_set_f_111(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = value;
}

// optional float f_112 = 166;
inline bool Message6_M5_M8_M27::has_f_112() const {
  bool value = (_impl_._has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_112() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = 0;
  _impl_._has_bits_[3] &= ~0x10000000u;
}
inline float Message6_M5_M8_M27::f_112() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_112)
  return _internal_f_112();
}
inline void Message6_M5_M8_M27::set_f_112(float value) {
  _internal_set_f_112(value);
  _impl_._has_bits_[3] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_112)
}
inline float Message6_M5_M8_M27::_internal_f_112() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_112_;
}
inline void Message6_M5_M8_M27::_internal_set_f_112(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = value;
}

// optional string f_113 = 167;
inline bool Message6_M5_M8_M27::has_f_113() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_113_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const std::string& Message6_M5_M8_M27::f_113() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_113)
  return _internal_f_113();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_113(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.f_113_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_113)
}
inline std::string* Message6_M5_M8_M27::mutable_f_113() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_113();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_113)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_113() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_113_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_113(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.f_113_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  return _impl_.f_113_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_113)
  if ((_impl_._has_bits_[1] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000002u;
  auto* released = _impl_.f_113_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_113_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_113(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.f_113_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_113_.IsDefault()) {
          _impl_.f_113_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_113)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E24 f_114 = 169;
inline bool Message6_M5_M8_M27::has_f_114() const {
  bool value = (_impl_._has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_114() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_114_ = 0;
  _impl_._has_bits_[3] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E24 Message6_M5_M8_M27::f_114() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_114)
  return _internal_f_114();
}
inline void Message6_M5_M8_M27::set_f_114(::fleetbench::proto::Message6_M5_M8_M27_E24 value) {
  _internal_set_f_114(value);
  _impl_._has_bits_[3] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_114)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E24 Message6_M5_M8_M27::_internal_f_114() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E24>(_impl_.f_114_);
}
inline void Message6_M5_M8_M27::_internal_set_f_114(::fleetbench::proto::Message6_M5_M8_M27_E24 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E24_IsValid(value));
  _impl_.f_114_ = value;
}

// optional fixed32 f_115 = 170;
inline bool Message6_M5_M8_M27::has_f_115() const {
  bool value = (_impl_._has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_115() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_115_ = 0u;
  _impl_._has_bits_[3] &= ~0x40000000u;
}
inline ::uint32_t Message6_M5_M8_M27::f_115() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_115)
  return _internal_f_115();
}
inline void Message6_M5_M8_M27::set_f_115(::uint32_t value) {
  _internal_set_f_115(value);
  _impl_._has_bits_[3] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_115)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_115() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_115_;
}
inline void Message6_M5_M8_M27::_internal_set_f_115(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_115_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E25 f_116 = 172;
inline bool Message6_M5_M8_M27::has_f_116() const {
  bool value = (_impl_._has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_116() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_116_ = 0;
  _impl_._has_bits_[3] &= ~0x80000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E25 Message6_M5_M8_M27::f_116() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_116)
  return _internal_f_116();
}
inline void Message6_M5_M8_M27::set_f_116(::fleetbench::proto::Message6_M5_M8_M27_E25 value) {
  _internal_set_f_116(value);
  _impl_._has_bits_[3] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_116)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E25 Message6_M5_M8_M27::_internal_f_116() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E25>(_impl_.f_116_);
}
inline void Message6_M5_M8_M27::_internal_set_f_116(::fleetbench::proto::Message6_M5_M8_M27_E25 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E25_IsValid(value));
  _impl_.f_116_ = value;
}

// optional string f_117 = 173;
inline bool Message6_M5_M8_M27::has_f_117() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_117_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline const std::string& Message6_M5_M8_M27::f_117() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_117)
  return _internal_f_117();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_117(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.f_117_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_117)
}
inline std::string* Message6_M5_M8_M27::mutable_f_117() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_117();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_117)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_117() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_117_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_117(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.f_117_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  return _impl_.f_117_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_117)
  if ((_impl_._has_bits_[1] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000004u;
  auto* released = _impl_.f_117_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_117_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_117(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  _impl_.f_117_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_117_.IsDefault()) {
          _impl_.f_117_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_117)
}

// optional int32 f_118 = 175;
inline bool Message6_M5_M8_M27::has_f_118() const {
  bool value = (_impl_._has_bits_[4] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_118() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_118_ = 0;
  _impl_._has_bits_[4] &= ~0x00000001u;
}
inline ::int32_t Message6_M5_M8_M27::f_118() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_118)
  return _internal_f_118();
}
inline void Message6_M5_M8_M27::set_f_118(::int32_t value) {
  _internal_set_f_118(value);
  _impl_._has_bits_[4] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_118)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_118() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_118_;
}
inline void Message6_M5_M8_M27::_internal_set_f_118(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_118_ = value;
}

// optional int32 f_119 = 176;
inline bool Message6_M5_M8_M27::has_f_119() const {
  bool value = (_impl_._has_bits_[4] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_119() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_119_ = 0;
  _impl_._has_bits_[4] &= ~0x00000004u;
}
inline ::int32_t Message6_M5_M8_M27::f_119() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_119)
  return _internal_f_119();
}
inline void Message6_M5_M8_M27::set_f_119(::int32_t value) {
  _internal_set_f_119(value);
  _impl_._has_bits_[4] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_119)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_119() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_119_;
}
inline void Message6_M5_M8_M27::_internal_set_f_119(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_119_ = value;
}

// optional int64 f_120 = 177;
inline bool Message6_M5_M8_M27::has_f_120() const {
  bool value = (_impl_._has_bits_[4] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_120() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_120_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000002u;
}
inline ::int64_t Message6_M5_M8_M27::f_120() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_120)
  return _internal_f_120();
}
inline void Message6_M5_M8_M27::set_f_120(::int64_t value) {
  _internal_set_f_120(value);
  _impl_._has_bits_[4] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_120)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_120() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_120_;
}
inline void Message6_M5_M8_M27::_internal_set_f_120(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_120_ = value;
}

// optional string f_121 = 178;
inline bool Message6_M5_M8_M27::has_f_121() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_121() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_121_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline const std::string& Message6_M5_M8_M27::f_121() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_121)
  return _internal_f_121();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_121(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.f_121_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_121)
}
inline std::string* Message6_M5_M8_M27::mutable_f_121() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_121();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_121)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_121() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_121_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_121(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.f_121_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_121() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  return _impl_.f_121_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_121() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_121)
  if ((_impl_._has_bits_[1] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000008u;
  auto* released = _impl_.f_121_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_121_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_121(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  _impl_.f_121_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_121_.IsDefault()) {
          _impl_.f_121_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_121)
}

// optional string f_122 = 180;
inline bool Message6_M5_M8_M27::has_f_122() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_122() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_122_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline const std::string& Message6_M5_M8_M27::f_122() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_122)
  return _internal_f_122();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_122(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.f_122_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_122)
}
inline std::string* Message6_M5_M8_M27::mutable_f_122() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_122();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_122)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_122() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_122_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_122(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.f_122_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_122() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  return _impl_.f_122_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_122() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_122)
  if ((_impl_._has_bits_[1] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000010u;
  auto* released = _impl_.f_122_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_122_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_122(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  _impl_.f_122_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_122_.IsDefault()) {
          _impl_.f_122_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_122)
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E26 f_123 = 182;
inline bool Message6_M5_M8_M27::has_f_123() const {
  bool value = (_impl_._has_bits_[4] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_123() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_123_ = 0;
  _impl_._has_bits_[4] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E26 Message6_M5_M8_M27::f_123() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_123)
  return _internal_f_123();
}
inline void Message6_M5_M8_M27::set_f_123(::fleetbench::proto::Message6_M5_M8_M27_E26 value) {
  _internal_set_f_123(value);
  _impl_._has_bits_[4] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_123)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E26 Message6_M5_M8_M27::_internal_f_123() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E26>(_impl_.f_123_);
}
inline void Message6_M5_M8_M27::_internal_set_f_123(::fleetbench::proto::Message6_M5_M8_M27_E26 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E26_IsValid(value));
  _impl_.f_123_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E27 f_124 = 186;
inline bool Message6_M5_M8_M27::has_f_124() const {
  bool value = (_impl_._has_bits_[4] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_124() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_124_ = 0;
  _impl_._has_bits_[4] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E27 Message6_M5_M8_M27::f_124() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_124)
  return _internal_f_124();
}
inline void Message6_M5_M8_M27::set_f_124(::fleetbench::proto::Message6_M5_M8_M27_E27 value) {
  _internal_set_f_124(value);
  _impl_._has_bits_[4] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_124)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E27 Message6_M5_M8_M27::_internal_f_124() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E27>(_impl_.f_124_);
}
inline void Message6_M5_M8_M27::_internal_set_f_124(::fleetbench::proto::Message6_M5_M8_M27_E27 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E27_IsValid(value));
  _impl_.f_124_ = value;
}

// optional string f_125 = 189;
inline bool Message6_M5_M8_M27::has_f_125() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_125() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_125_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline const std::string& Message6_M5_M8_M27::f_125() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_125)
  return _internal_f_125();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_125(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.f_125_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_125)
}
inline std::string* Message6_M5_M8_M27::mutable_f_125() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_125();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_125)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_125() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_125_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_125(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.f_125_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_125() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000020u;
  return _impl_.f_125_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_125() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_125)
  if ((_impl_._has_bits_[1] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000020u;
  auto* released = _impl_.f_125_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_125_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_125(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  _impl_.f_125_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_125_.IsDefault()) {
          _impl_.f_125_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_125)
}

// optional double f_126 = 192;
inline bool Message6_M5_M8_M27::has_f_126() const {
  bool value = (_impl_._has_bits_[4] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_126() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = 0;
  _impl_._has_bits_[4] &= ~0x00000040u;
}
inline double Message6_M5_M8_M27::f_126() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_126)
  return _internal_f_126();
}
inline void Message6_M5_M8_M27::set_f_126(double value) {
  _internal_set_f_126(value);
  _impl_._has_bits_[4] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_126)
}
inline double Message6_M5_M8_M27::_internal_f_126() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_126_;
}
inline void Message6_M5_M8_M27::_internal_set_f_126(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E28 f_127 = 193;
inline bool Message6_M5_M8_M27::has_f_127() const {
  bool value = (_impl_._has_bits_[4] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_127() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_127_ = 0;
  _impl_._has_bits_[4] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E28 Message6_M5_M8_M27::f_127() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_127)
  return _internal_f_127();
}
inline void Message6_M5_M8_M27::set_f_127(::fleetbench::proto::Message6_M5_M8_M27_E28 value) {
  _internal_set_f_127(value);
  _impl_._has_bits_[4] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_127)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E28 Message6_M5_M8_M27::_internal_f_127() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E28>(_impl_.f_127_);
}
inline void Message6_M5_M8_M27::_internal_set_f_127(::fleetbench::proto::Message6_M5_M8_M27_E28 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E28_IsValid(value));
  _impl_.f_127_ = value;
}

// optional int64 f_128 = 194;
inline bool Message6_M5_M8_M27::has_f_128() const {
  bool value = (_impl_._has_bits_[4] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_128() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_128_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000080u;
}
inline ::int64_t Message6_M5_M8_M27::f_128() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_128)
  return _internal_f_128();
}
inline void Message6_M5_M8_M27::set_f_128(::int64_t value) {
  _internal_set_f_128(value);
  _impl_._has_bits_[4] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_128)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_128() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_128_;
}
inline void Message6_M5_M8_M27::_internal_set_f_128(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_128_ = value;
}

// optional int64 f_129 = 196;
inline bool Message6_M5_M8_M27::has_f_129() const {
  bool value = (_impl_._has_bits_[4] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_129() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_129_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000100u;
}
inline ::int64_t Message6_M5_M8_M27::f_129() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_129)
  return _internal_f_129();
}
inline void Message6_M5_M8_M27::set_f_129(::int64_t value) {
  _internal_set_f_129(value);
  _impl_._has_bits_[4] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_129)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_129() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_129_;
}
inline void Message6_M5_M8_M27::_internal_set_f_129(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_129_ = value;
}

// optional int32 f_130 = 197;
inline bool Message6_M5_M8_M27::has_f_130() const {
  bool value = (_impl_._has_bits_[4] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_130() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = 0;
  _impl_._has_bits_[4] &= ~0x00000200u;
}
inline ::int32_t Message6_M5_M8_M27::f_130() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_130)
  return _internal_f_130();
}
inline void Message6_M5_M8_M27::set_f_130(::int32_t value) {
  _internal_set_f_130(value);
  _impl_._has_bits_[4] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_130)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_130() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_130_;
}
inline void Message6_M5_M8_M27::_internal_set_f_130(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = value;
}

// optional bytes f_131 = 199;
inline bool Message6_M5_M8_M27::has_f_131() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_131_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline const std::string& Message6_M5_M8_M27::f_131() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_131)
  return _internal_f_131();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_131(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.f_131_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_131)
}
inline std::string* Message6_M5_M8_M27::mutable_f_131() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_131();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_131)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_131() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_131_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_131(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.f_131_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000040u;
  return _impl_.f_131_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_131)
  if ((_impl_._has_bits_[1] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000040u;
  auto* released = _impl_.f_131_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_131_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_131(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  _impl_.f_131_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_131_.IsDefault()) {
          _impl_.f_131_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_131)
}

// optional int64 f_132 = 200;
inline bool Message6_M5_M8_M27::has_f_132() const {
  bool value = (_impl_._has_bits_[4] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_132() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000800u;
}
inline ::int64_t Message6_M5_M8_M27::f_132() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_132)
  return _internal_f_132();
}
inline void Message6_M5_M8_M27::set_f_132(::int64_t value) {
  _internal_set_f_132(value);
  _impl_._has_bits_[4] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_132)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_132() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_132_;
}
inline void Message6_M5_M8_M27::_internal_set_f_132(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = value;
}

// optional int32 f_133 = 202;
inline bool Message6_M5_M8_M27::has_f_133() const {
  bool value = (_impl_._has_bits_[4] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = 0;
  _impl_._has_bits_[4] &= ~0x00000400u;
}
inline ::int32_t Message6_M5_M8_M27::f_133() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_133)
  return _internal_f_133();
}
inline void Message6_M5_M8_M27::set_f_133(::int32_t value) {
  _internal_set_f_133(value);
  _impl_._has_bits_[4] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_133)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_133() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_133_;
}
inline void Message6_M5_M8_M27::_internal_set_f_133(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = value;
}

// optional int64 f_134 = 203;
inline bool Message6_M5_M8_M27::has_f_134() const {
  bool value = (_impl_._has_bits_[4] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_134() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_134_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00001000u;
}
inline ::int64_t Message6_M5_M8_M27::f_134() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_134)
  return _internal_f_134();
}
inline void Message6_M5_M8_M27::set_f_134(::int64_t value) {
  _internal_set_f_134(value);
  _impl_._has_bits_[4] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_134)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_134() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_134_;
}
inline void Message6_M5_M8_M27::_internal_set_f_134(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_134_ = value;
}

// optional int64 f_135 = 204;
inline bool Message6_M5_M8_M27::has_f_135() const {
  bool value = (_impl_._has_bits_[4] & 0x00002000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_135() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_135_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00002000u;
}
inline ::int64_t Message6_M5_M8_M27::f_135() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_135)
  return _internal_f_135();
}
inline void Message6_M5_M8_M27::set_f_135(::int64_t value) {
  _internal_set_f_135(value);
  _impl_._has_bits_[4] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_135)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_135() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_135_;
}
inline void Message6_M5_M8_M27::_internal_set_f_135(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_135_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E29 f_136 = 206;
inline bool Message6_M5_M8_M27::has_f_136() const {
  bool value = (_impl_._has_bits_[4] & 0x00004000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_136() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_136_ = 0;
  _impl_._has_bits_[4] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E29 Message6_M5_M8_M27::f_136() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_136)
  return _internal_f_136();
}
inline void Message6_M5_M8_M27::set_f_136(::fleetbench::proto::Message6_M5_M8_M27_E29 value) {
  _internal_set_f_136(value);
  _impl_._has_bits_[4] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_136)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E29 Message6_M5_M8_M27::_internal_f_136() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E29>(_impl_.f_136_);
}
inline void Message6_M5_M8_M27::_internal_set_f_136(::fleetbench::proto::Message6_M5_M8_M27_E29 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E29_IsValid(value));
  _impl_.f_136_ = value;
}

// optional int32 f_137 = 207;
inline bool Message6_M5_M8_M27::has_f_137() const {
  bool value = (_impl_._has_bits_[4] & 0x00008000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_137() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_137_ = 0;
  _impl_._has_bits_[4] &= ~0x00008000u;
}
inline ::int32_t Message6_M5_M8_M27::f_137() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_137)
  return _internal_f_137();
}
inline void Message6_M5_M8_M27::set_f_137(::int32_t value) {
  _internal_set_f_137(value);
  _impl_._has_bits_[4] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_137)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_137() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_137_;
}
inline void Message6_M5_M8_M27::_internal_set_f_137(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_137_ = value;
}

// optional int32 f_138 = 209;
inline bool Message6_M5_M8_M27::has_f_138() const {
  bool value = (_impl_._has_bits_[4] & 0x00020000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_138() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_138_ = 0;
  _impl_._has_bits_[4] &= ~0x00020000u;
}
inline ::int32_t Message6_M5_M8_M27::f_138() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_138)
  return _internal_f_138();
}
inline void Message6_M5_M8_M27::set_f_138(::int32_t value) {
  _internal_set_f_138(value);
  _impl_._has_bits_[4] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_138)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_138() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_138_;
}
inline void Message6_M5_M8_M27::_internal_set_f_138(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_138_ = value;
}

// optional int64 f_139 = 211;
inline bool Message6_M5_M8_M27::has_f_139() const {
  bool value = (_impl_._has_bits_[4] & 0x00010000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_139() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_139_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00010000u;
}
inline ::int64_t Message6_M5_M8_M27::f_139() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_139)
  return _internal_f_139();
}
inline void Message6_M5_M8_M27::set_f_139(::int64_t value) {
  _internal_set_f_139(value);
  _impl_._has_bits_[4] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_139)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_139() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_139_;
}
inline void Message6_M5_M8_M27::_internal_set_f_139(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_139_ = value;
}

// optional int64 f_140 = 213;
inline bool Message6_M5_M8_M27::has_f_140() const {
  bool value = (_impl_._has_bits_[4] & 0x00080000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_140() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_140_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00080000u;
}
inline ::int64_t Message6_M5_M8_M27::f_140() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_140)
  return _internal_f_140();
}
inline void Message6_M5_M8_M27::set_f_140(::int64_t value) {
  _internal_set_f_140(value);
  _impl_._has_bits_[4] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_140)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_140() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_140_;
}
inline void Message6_M5_M8_M27::_internal_set_f_140(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_140_ = value;
}

// optional float f_141 = 214;
inline bool Message6_M5_M8_M27::has_f_141() const {
  bool value = (_impl_._has_bits_[4] & 0x00040000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_141() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_141_ = 0;
  _impl_._has_bits_[4] &= ~0x00040000u;
}
inline float Message6_M5_M8_M27::f_141() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_141)
  return _internal_f_141();
}
inline void Message6_M5_M8_M27::set_f_141(float value) {
  _internal_set_f_141(value);
  _impl_._has_bits_[4] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_141)
}
inline float Message6_M5_M8_M27::_internal_f_141() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_141_;
}
inline void Message6_M5_M8_M27::_internal_set_f_141(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_141_ = value;
}

// optional string f_142 = 216;
inline bool Message6_M5_M8_M27::has_f_142() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_142() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_142_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline const std::string& Message6_M5_M8_M27::f_142() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_142)
  return _internal_f_142();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_142(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.f_142_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_142)
}
inline std::string* Message6_M5_M8_M27::mutable_f_142() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_142();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_142)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_142() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_142_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_142(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.f_142_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_142() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000080u;
  return _impl_.f_142_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_142() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_142)
  if ((_impl_._has_bits_[1] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000080u;
  auto* released = _impl_.f_142_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_142_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_142(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  _impl_.f_142_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_142_.IsDefault()) {
          _impl_.f_142_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_142)
}

// optional uint32 f_143 = 218;
inline bool Message6_M5_M8_M27::has_f_143() const {
  bool value = (_impl_._has_bits_[4] & 0x00100000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_143() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_143_ = 0u;
  _impl_._has_bits_[4] &= ~0x00100000u;
}
inline ::uint32_t Message6_M5_M8_M27::f_143() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_143)
  return _internal_f_143();
}
inline void Message6_M5_M8_M27::set_f_143(::uint32_t value) {
  _internal_set_f_143(value);
  _impl_._has_bits_[4] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_143)
}
inline ::uint32_t Message6_M5_M8_M27::_internal_f_143() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_143_;
}
inline void Message6_M5_M8_M27::_internal_set_f_143(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_143_ = value;
}

// repeated .fleetbench.proto.Message6.M5.M8.M27.E30 f_144 = 219 [packed = true];
inline int Message6_M5_M8_M27::_internal_f_144_size() const {
  return _internal_f_144().size();
}
inline int Message6_M5_M8_M27::f_144_size() const {
  return _internal_f_144_size();
}
inline void Message6_M5_M8_M27::clear_f_144() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_144_.Clear();
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E30 Message6_M5_M8_M27::f_144(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_144)
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E30>(_internal_f_144().Get(index));
}
inline void Message6_M5_M8_M27::set_f_144(int index, ::fleetbench::proto::Message6_M5_M8_M27_E30 value) {
  assert(::fleetbench::proto::Message6_M5_M8_M27_E30_IsValid(value));
  _internal_mutable_f_144()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_144)
}
inline void Message6_M5_M8_M27::add_f_144(::fleetbench::proto::Message6_M5_M8_M27_E30 value) {
  assert(::fleetbench::proto::Message6_M5_M8_M27_E30_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_144()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.M8.M27.f_144)
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M5_M8_M27::f_144() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.M8.M27.f_144)
  return _internal_f_144();
}
inline ::google::protobuf::RepeatedField<int>* Message6_M5_M8_M27::mutable_f_144()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.M8.M27.f_144)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_144();
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M5_M8_M27::_internal_f_144()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_144_;
}
inline ::google::protobuf::RepeatedField<int>* Message6_M5_M8_M27::_internal_mutable_f_144() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_144_;
}

// optional string f_145 = 220;
inline bool Message6_M5_M8_M27::has_f_145() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_145() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_145_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline const std::string& Message6_M5_M8_M27::f_145() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_145)
  return _internal_f_145();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_145(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.f_145_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_145)
}
inline std::string* Message6_M5_M8_M27::mutable_f_145() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_145();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_145)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_145() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_145_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_145(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.f_145_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_145() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000100u;
  return _impl_.f_145_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_145() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_145)
  if ((_impl_._has_bits_[1] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000100u;
  auto* released = _impl_.f_145_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_145_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_145(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  _impl_.f_145_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_145_.IsDefault()) {
          _impl_.f_145_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_145)
}

// optional int64 f_146 = 223;
inline bool Message6_M5_M8_M27::has_f_146() const {
  bool value = (_impl_._has_bits_[4] & 0x00400000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_146() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_146_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00400000u;
}
inline ::int64_t Message6_M5_M8_M27::f_146() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_146)
  return _internal_f_146();
}
inline void Message6_M5_M8_M27::set_f_146(::int64_t value) {
  _internal_set_f_146(value);
  _impl_._has_bits_[4] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_146)
}
inline ::int64_t Message6_M5_M8_M27::_internal_f_146() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_146_;
}
inline void Message6_M5_M8_M27::_internal_set_f_146(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_146_ = value;
}

// optional float f_147 = 224;
inline bool Message6_M5_M8_M27::has_f_147() const {
  bool value = (_impl_._has_bits_[4] & 0x00200000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_147() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_147_ = 0;
  _impl_._has_bits_[4] &= ~0x00200000u;
}
inline float Message6_M5_M8_M27::f_147() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_147)
  return _internal_f_147();
}
inline void Message6_M5_M8_M27::set_f_147(float value) {
  _internal_set_f_147(value);
  _impl_._has_bits_[4] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_147)
}
inline float Message6_M5_M8_M27::_internal_f_147() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_147_;
}
inline void Message6_M5_M8_M27::_internal_set_f_147(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_147_ = value;
}

// optional string f_148 = 225;
inline bool Message6_M5_M8_M27::has_f_148() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_148() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_148_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline const std::string& Message6_M5_M8_M27::f_148() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_148)
  return _internal_f_148();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_148(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.f_148_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_148)
}
inline std::string* Message6_M5_M8_M27::mutable_f_148() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_148();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_148)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_148() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_148_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_148(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.f_148_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_148() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000200u;
  return _impl_.f_148_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_148() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_148)
  if ((_impl_._has_bits_[1] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000200u;
  auto* released = _impl_.f_148_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_148_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_148(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  _impl_.f_148_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_148_.IsDefault()) {
          _impl_.f_148_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_148)
}

// optional int32 f_149 = 226;
inline bool Message6_M5_M8_M27::has_f_149() const {
  bool value = (_impl_._has_bits_[4] & 0x00800000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_149() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_149_ = 0;
  _impl_._has_bits_[4] &= ~0x00800000u;
}
inline ::int32_t Message6_M5_M8_M27::f_149() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_149)
  return _internal_f_149();
}
inline void Message6_M5_M8_M27::set_f_149(::int32_t value) {
  _internal_set_f_149(value);
  _impl_._has_bits_[4] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_149)
}
inline ::int32_t Message6_M5_M8_M27::_internal_f_149() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_149_;
}
inline void Message6_M5_M8_M27::_internal_set_f_149(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_149_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E31 f_150 = 227;
inline bool Message6_M5_M8_M27::has_f_150() const {
  bool value = (_impl_._has_bits_[4] & 0x01000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_150() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_150_ = 0;
  _impl_._has_bits_[4] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E31 Message6_M5_M8_M27::f_150() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_150)
  return _internal_f_150();
}
inline void Message6_M5_M8_M27::set_f_150(::fleetbench::proto::Message6_M5_M8_M27_E31 value) {
  _internal_set_f_150(value);
  _impl_._has_bits_[4] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_150)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E31 Message6_M5_M8_M27::_internal_f_150() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E31>(_impl_.f_150_);
}
inline void Message6_M5_M8_M27::_internal_set_f_150(::fleetbench::proto::Message6_M5_M8_M27_E31 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E31_IsValid(value));
  _impl_.f_150_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.E32 f_151 = 228;
inline bool Message6_M5_M8_M27::has_f_151() const {
  bool value = (_impl_._has_bits_[4] & 0x02000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_151() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_151_ = 0;
  _impl_._has_bits_[4] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E32 Message6_M5_M8_M27::f_151() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_151)
  return _internal_f_151();
}
inline void Message6_M5_M8_M27::set_f_151(::fleetbench::proto::Message6_M5_M8_M27_E32 value) {
  _internal_set_f_151(value);
  _impl_._has_bits_[4] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_151)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_E32 Message6_M5_M8_M27::_internal_f_151() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_M8_M27_E32>(_impl_.f_151_);
}
inline void Message6_M5_M8_M27::_internal_set_f_151(::fleetbench::proto::Message6_M5_M8_M27_E32 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_M8_M27_E32_IsValid(value));
  _impl_.f_151_ = value;
}

// optional string f_152 = 229;
inline bool Message6_M5_M8_M27::has_f_152() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_152() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_152_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline const std::string& Message6_M5_M8_M27::f_152() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_152)
  return _internal_f_152();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_152(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.f_152_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_152)
}
inline std::string* Message6_M5_M8_M27::mutable_f_152() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_152();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_152)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_152() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_152_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_152(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.f_152_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_152() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000400u;
  return _impl_.f_152_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_152() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_152)
  if ((_impl_._has_bits_[1] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000400u;
  auto* released = _impl_.f_152_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_152_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_152(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  _impl_.f_152_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_152_.IsDefault()) {
          _impl_.f_152_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_152)
}

// optional string f_153 = 230;
inline bool Message6_M5_M8_M27::has_f_153() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_153_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline const std::string& Message6_M5_M8_M27::f_153() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_153)
  return _internal_f_153();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_153(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.f_153_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_153)
}
inline std::string* Message6_M5_M8_M27::mutable_f_153() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_153();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_153)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_153() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_153_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_153(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.f_153_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000800u;
  return _impl_.f_153_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_153)
  if ((_impl_._has_bits_[1] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000800u;
  auto* released = _impl_.f_153_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_153_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_153(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  _impl_.f_153_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_153_.IsDefault()) {
          _impl_.f_153_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_153)
}

// optional double f_154 = 232;
inline bool Message6_M5_M8_M27::has_f_154() const {
  bool value = (_impl_._has_bits_[4] & 0x08000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_154() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_154_ = 0;
  _impl_._has_bits_[4] &= ~0x08000000u;
}
inline double Message6_M5_M8_M27::f_154() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_154)
  return _internal_f_154();
}
inline void Message6_M5_M8_M27::set_f_154(double value) {
  _internal_set_f_154(value);
  _impl_._has_bits_[4] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_154)
}
inline double Message6_M5_M8_M27::_internal_f_154() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_154_;
}
inline void Message6_M5_M8_M27::_internal_set_f_154(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_154_ = value;
}

// optional bool f_155 = 234;
inline bool Message6_M5_M8_M27::has_f_155() const {
  bool value = (_impl_._has_bits_[4] & 0x04000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_155() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_155_ = false;
  _impl_._has_bits_[4] &= ~0x04000000u;
}
inline bool Message6_M5_M8_M27::f_155() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_155)
  return _internal_f_155();
}
inline void Message6_M5_M8_M27::set_f_155(bool value) {
  _internal_set_f_155(value);
  _impl_._has_bits_[4] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_155)
}
inline bool Message6_M5_M8_M27::_internal_f_155() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_155_;
}
inline void Message6_M5_M8_M27::_internal_set_f_155(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_155_ = value;
}

// optional float f_156 = 236;
inline bool Message6_M5_M8_M27::has_f_156() const {
  bool value = (_impl_._has_bits_[4] & 0x10000000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_156() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_156_ = 0;
  _impl_._has_bits_[4] &= ~0x10000000u;
}
inline float Message6_M5_M8_M27::f_156() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_156)
  return _internal_f_156();
}
inline void Message6_M5_M8_M27::set_f_156(float value) {
  _internal_set_f_156(value);
  _impl_._has_bits_[4] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_156)
}
inline float Message6_M5_M8_M27::_internal_f_156() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_156_;
}
inline void Message6_M5_M8_M27::_internal_set_f_156(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_156_ = value;
}

// optional bytes f_157 = 237;
inline bool Message6_M5_M8_M27::has_f_157() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message6_M5_M8_M27::clear_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_157_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline const std::string& Message6_M5_M8_M27::f_157() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_157)
  return _internal_f_157();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message6_M5_M8_M27::set_f_157(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.f_157_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.M27.f_157)
}
inline std::string* Message6_M5_M8_M27::mutable_f_157() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_157();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_157)
  return _s;
}
inline const std::string& Message6_M5_M8_M27::_internal_f_157() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_157_.Get();
}
inline void Message6_M5_M8_M27::_internal_set_f_157(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.f_157_.Set(value, GetArena());
}
inline std::string* Message6_M5_M8_M27::_internal_mutable_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00001000u;
  return _impl_.f_157_.Mutable( GetArena());
}
inline std::string* Message6_M5_M8_M27::release_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_157)
  if ((_impl_._has_bits_[1] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00001000u;
  auto* released = _impl_.f_157_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_157_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message6_M5_M8_M27::set_allocated_f_157(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  _impl_.f_157_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_157_.IsDefault()) {
          _impl_.f_157_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_157)
}

// repeated .fleetbench.proto.Message6.M5.M8.M27.M34 f_237 = 238;
inline int Message6_M5_M8_M27::_internal_f_237_size() const {
  return _internal_f_237().size();
}
inline int Message6_M5_M8_M27::f_237_size() const {
  return _internal_f_237_size();
}
inline void Message6_M5_M8_M27::clear_f_237() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_237_.Clear();
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34* Message6_M5_M8_M27::mutable_f_237(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_237)
  return _internal_mutable_f_237()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>* Message6_M5_M8_M27::mutable_f_237()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.M8.M27.f_237)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_237();
}
inline const ::fleetbench::proto::Message6_M5_M8_M27_M34& Message6_M5_M8_M27::f_237(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_237)
  return _internal_f_237().Get(index);
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M34* Message6_M5_M8_M27::add_f_237() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M5_M8_M27_M34* _add = _internal_mutable_f_237()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.M8.M27.f_237)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>& Message6_M5_M8_M27::f_237() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.M8.M27.f_237)
  return _internal_f_237();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>&
Message6_M5_M8_M27::_internal_f_237() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_237_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5_M8_M27_M34>*
Message6_M5_M8_M27::_internal_mutable_f_237() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_237_;
}

// optional .fleetbench.proto.Message6.M5.M8.M27.M36 f_238 = 239;
inline bool Message6_M5_M8_M27::has_f_238() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_238_ != nullptr);
  return value;
}
inline void Message6_M5_M8_M27::clear_f_238() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_238_ != nullptr) _impl_.f_238_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline const ::fleetbench::proto::Message6_M5_M8_M27_M36& Message6_M5_M8_M27::_internal_f_238() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M8_M27_M36* p = _impl_.f_238_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M8_M27_M36&>(::fleetbench::proto::_Message6_M5_M8_M27_M36_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M8_M27_M36& Message6_M5_M8_M27::f_238() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.M27.f_238)
  return _internal_f_238();
}
inline void Message6_M5_M8_M27::unsafe_arena_set_allocated_f_238(::fleetbench::proto::Message6_M5_M8_M27_M36* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_238_);
  }
  _impl_.f_238_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_238)
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36* Message6_M5_M8_M27::release_f_238() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[1] &= ~0x00002000u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36* released = _impl_.f_238_;
  _impl_.f_238_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36* Message6_M5_M8_M27::unsafe_arena_release_f_238() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.M27.f_238)

  _impl_._has_bits_[1] &= ~0x00002000u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36* temp = _impl_.f_238_;
  _impl_.f_238_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36* Message6_M5_M8_M27::_internal_mutable_f_238() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_238_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M8_M27_M36>(GetArena());
    _impl_.f_238_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36*>(p);
  }
  return _impl_.f_238_;
}
inline ::fleetbench::proto::Message6_M5_M8_M27_M36* Message6_M5_M8_M27::mutable_f_238() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[1] |= 0x00002000u;
  ::fleetbench::proto::Message6_M5_M8_M27_M36* _msg = _internal_mutable_f_238();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.M27.f_238)
  return _msg;
}
inline void Message6_M5_M8_M27::set_allocated_f_238(::fleetbench::proto::Message6_M5_M8_M27_M36* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_238_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }

  _impl_.f_238_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27_M36*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.M27.f_238)
}

// -------------------------------------------------------------------

// Message6_M5_M8

// optional bool f_0 = 1;
inline bool Message6_M5_M8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message6_M5_M8::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M8::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M8.f_0)
}
inline bool Message6_M5_M8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5_M8::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8.M27 f_1 = 3;
inline bool Message6_M5_M8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M5_M8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M5_M8_M27& Message6_M5_M8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M8_M27* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M8_M27&>(::fleetbench::proto::_Message6_M5_M8_M27_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M8_M27& Message6_M5_M8::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M8.f_1)
  return _internal_f_1();
}
inline void Message6_M5_M8::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M5_M8_M27* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.M8.f_1)
}
inline ::fleetbench::proto::Message6_M5_M8_M27* Message6_M5_M8::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M8_M27* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M8_M27* Message6_M5_M8::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M8.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M8_M27* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M8_M27* Message6_M5_M8::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M8_M27>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M5_M8_M27* Message6_M5_M8::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M5_M8_M27* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M8.f_1)
  return _msg;
}
inline void Message6_M5_M8::set_allocated_f_1(::fleetbench::proto::Message6_M5_M8_M27* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8_M27*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M8.f_1)
}

// -------------------------------------------------------------------

// Message6_M5_M9_M20

// optional bool f_0 = 1;
inline bool Message6_M5_M9_M20::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message6_M5_M9_M20::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message6_M5_M9_M20::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M9.M20.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M9_M20::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M9.M20.f_0)
}
inline bool Message6_M5_M9_M20::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5_M9_M20::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message6_M5_M9

// optional fixed64 f_0 = 1;
inline bool Message6_M5_M9::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6_M5_M9::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message6_M5_M9::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M9.f_0)
  return _internal_f_0();
}
inline void Message6_M5_M9::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.M9.f_0)
}
inline ::uint64_t Message6_M5_M9::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5_M9::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message6.M5.M9.M20 f_1 = 2;
inline bool Message6_M5_M9::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message6_M5_M9::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M5_M9_M20& Message6_M5_M9::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M9_M20* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M9_M20&>(::fleetbench::proto::_Message6_M5_M9_M20_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M9_M20& Message6_M5_M9::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.M9.f_1)
  return _internal_f_1();
}
inline void Message6_M5_M9::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message6_M5_M9_M20* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9_M20*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.M9.f_1)
}
inline ::fleetbench::proto::Message6_M5_M9_M20* Message6_M5_M9::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M9_M20* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M9_M20* Message6_M5_M9::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.M9.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M9_M20* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M9_M20* Message6_M5_M9::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M9_M20>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9_M20*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message6_M5_M9_M20* Message6_M5_M9::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M5_M9_M20* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.M9.f_1)
  return _msg;
}
inline void Message6_M5_M9::set_allocated_f_1(::fleetbench::proto::Message6_M5_M9_M20* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9_M20*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.M9.f_1)
}

// -------------------------------------------------------------------

// Message6_M5

// optional uint32 f_0 = 1;
inline bool Message6_M5::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6_M5::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Message6_M5::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_0)
  return _internal_f_0();
}
inline void Message6_M5::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_0)
}
inline ::uint32_t Message6_M5::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6_M5::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message6.M5.E4 f_1 = 2 [packed = true];
inline int Message6_M5::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message6_M5::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message6_M5::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message6_M5_E4 Message6_M5::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_1)
  return static_cast<::fleetbench::proto::Message6_M5_E4>(_internal_f_1().Get(index));
}
inline void Message6_M5::set_f_1(int index, ::fleetbench::proto::Message6_M5_E4 value) {
  assert(::fleetbench::proto::Message6_M5_E4_IsValid(value));
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_1)
}
inline void Message6_M5::add_f_1(::fleetbench::proto::Message6_M5_E4 value) {
  assert(::fleetbench::proto::Message6_M5_E4_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.f_1)
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M5::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<int>* Message6_M5::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<int>& Message6_M5::_internal_f_1()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<int>* Message6_M5::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message6.M5.E5 f_2 = 4;
inline bool Message6_M5::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6_M5::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_M5_E5 Message6_M5::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_2)
  return _internal_f_2();
}
inline void Message6_M5::set_f_2(::fleetbench::proto::Message6_M5_E5 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_2)
}
inline ::fleetbench::proto::Message6_M5_E5 Message6_M5::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_E5>(_impl_.f_2_);
}
inline void Message6_M5::_internal_set_f_2(::fleetbench::proto::Message6_M5_E5 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_E5_IsValid(value));
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 5;
inline bool Message6_M5::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6_M5::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message6_M5::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_3)
  return _internal_f_3();
}
inline void Message6_M5::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_3)
}
inline ::int32_t Message6_M5::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message6_M5::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message6_M5::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6_M5::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message6_M5::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_4)
  return _internal_f_4();
}
inline void Message6_M5::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_4)
}
inline ::int64_t Message6_M5::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message6_M5::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 8;
inline bool Message6_M5::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6_M5::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message6_M5::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_5)
  return _internal_f_5();
}
inline void Message6_M5::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_5)
}
inline ::int32_t Message6_M5::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6_M5::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 9;
inline bool Message6_M5::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message6_M5::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message6_M5::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_6)
  return _internal_f_6();
}
inline void Message6_M5::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_6)
}
inline ::int64_t Message6_M5::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message6_M5::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional double f_7 = 10;
inline bool Message6_M5::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message6_M5::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Message6_M5::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_7)
  return _internal_f_7();
}
inline void Message6_M5::set_f_7(double value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_7)
}
inline double Message6_M5::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message6_M5::_internal_set_f_7(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// repeated int64 f_8 = 11 [packed = true];
inline int Message6_M5::_internal_f_8_size() const {
  return _internal_f_8().size();
}
inline int Message6_M5::f_8_size() const {
  return _internal_f_8_size();
}
inline void Message6_M5::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.Clear();
}
inline ::int64_t Message6_M5::f_8(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_8)
  return _internal_f_8().Get(index);
}
inline void Message6_M5::set_f_8(int index, ::int64_t value) {
  _internal_mutable_f_8()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_8)
}
inline void Message6_M5::add_f_8(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_8()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.M5.f_8)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message6_M5::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.M5.f_8)
  return _internal_f_8();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M5::mutable_f_8()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.M5.f_8)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_8();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message6_M5::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message6_M5::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_8_;
}

// optional .fleetbench.proto.Message6.M5.E6 f_9 = 12;
inline bool Message6_M5::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message6_M5::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message6_M5_E6 Message6_M5::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_9)
  return _internal_f_9();
}
inline void Message6_M5::set_f_9(::fleetbench::proto::Message6_M5_E6 value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.M5.f_9)
}
inline ::fleetbench::proto::Message6_M5_E6 Message6_M5::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_M5_E6>(_impl_.f_9_);
}
inline void Message6_M5::_internal_set_f_9(::fleetbench::proto::Message6_M5_E6 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_M5_E6_IsValid(value));
  _impl_.f_9_ = value;
}

// optional .fleetbench.proto.Message6.M5.M8 f_12 = 13;
inline bool Message6_M5::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_12_ != nullptr);
  return value;
}
inline void Message6_M5::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ != nullptr) _impl_.f_12_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M5_M8& Message6_M5::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M8* p = _impl_.f_12_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M8&>(::fleetbench::proto::_Message6_M5_M8_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M8& Message6_M5::f_12() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_12)
  return _internal_f_12();
}
inline void Message6_M5::unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message6_M5_M8* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_12_);
  }
  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.f_12)
}
inline ::fleetbench::proto::Message6_M5_M8* Message6_M5::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M8* released = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M8* Message6_M5::unsafe_arena_release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.f_12)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M5_M8* temp = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M8* Message6_M5::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M8>(GetArena());
    _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8*>(p);
  }
  return _impl_.f_12_;
}
inline ::fleetbench::proto::Message6_M5_M8* Message6_M5::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M5_M8* _msg = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.f_12)
  return _msg;
}
inline void Message6_M5::set_allocated_f_12(::fleetbench::proto::Message6_M5_M8* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_12_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M8*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.f_12)
}

// optional .fleetbench.proto.Message6.M5.M9 f_13 = 14;
inline bool Message6_M5::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_13_ != nullptr);
  return value;
}
inline void Message6_M5::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ != nullptr) _impl_.f_13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message6_M5_M9& Message6_M5::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M5_M9* p = _impl_.f_13_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M5_M9&>(::fleetbench::proto::_Message6_M5_M9_default_instance_);
}
inline const ::fleetbench::proto::Message6_M5_M9& Message6_M5::f_13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.M5.f_13)
  return _internal_f_13();
}
inline void Message6_M5::unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message6_M5_M9* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_13_);
  }
  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.M5.f_13)
}
inline ::fleetbench::proto::Message6_M5_M9* Message6_M5::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M5_M9* released = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M5_M9* Message6_M5::unsafe_arena_release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.M5.f_13)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message6_M5_M9* temp = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M5_M9* Message6_M5::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M5_M9>(GetArena());
    _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9*>(p);
  }
  return _impl_.f_13_;
}
inline ::fleetbench::proto::Message6_M5_M9* Message6_M5::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message6_M5_M9* _msg = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.M5.f_13)
  return _msg;
}
inline void Message6_M5::set_allocated_f_13(::fleetbench::proto::Message6_M5_M9* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message6_M5_M9*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.M5.f_13)
}

// -------------------------------------------------------------------

// Message6

// optional bool f_0 = 4;
inline bool Message6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_0)
  return _internal_f_0();
}
inline void Message6::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_0)
}
inline bool Message6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message6::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 6;
inline bool Message6::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message6::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message6::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_1)
  return _internal_f_1();
}
inline void Message6::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_1)
}
inline ::int64_t Message6::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message6::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 8;
inline bool Message6::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message6::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message6::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_2)
  return _internal_f_2();
}
inline void Message6::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_2)
}
inline ::int64_t Message6::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message6::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message6.E1 f_3 = 9;
inline bool Message6::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message6::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message6_E1 Message6::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_3)
  return _internal_f_3();
}
inline void Message6::set_f_3(::fleetbench::proto::Message6_E1 value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_3)
}
inline ::fleetbench::proto::Message6_E1 Message6::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_E1>(_impl_.f_3_);
}
inline void Message6::_internal_set_f_3(::fleetbench::proto::Message6_E1 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_E1_IsValid(value));
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message6.E2 f_4 = 11;
inline bool Message6::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message6::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message6_E2 Message6::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_4)
  return _internal_f_4();
}
inline void Message6::set_f_4(::fleetbench::proto::Message6_E2 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_4)
}
inline ::fleetbench::proto::Message6_E2 Message6::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message6_E2>(_impl_.f_4_);
}
inline void Message6::_internal_set_f_4(::fleetbench::proto::Message6_E2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message6_E2_IsValid(value));
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 14;
inline bool Message6::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message6::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message6::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_5)
  return _internal_f_5();
}
inline void Message6::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message6.f_5)
}
inline ::int64_t Message6::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message6::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// repeated .fleetbench.proto.Message6.M1 f_14 = 16;
inline int Message6::_internal_f_14_size() const {
  return _internal_f_14().size();
}
inline int Message6::f_14_size() const {
  return _internal_f_14_size();
}
inline void Message6::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_.Clear();
}
inline ::fleetbench::proto::Message6_M1* Message6::mutable_f_14(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.f_14)
  return _internal_mutable_f_14()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>* Message6::mutable_f_14()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.f_14)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_14();
}
inline const ::fleetbench::proto::Message6_M1& Message6::f_14(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_14)
  return _internal_f_14().Get(index);
}
inline ::fleetbench::proto::Message6_M1* Message6::add_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M1* _add = _internal_mutable_f_14()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.f_14)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>& Message6::f_14() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.f_14)
  return _internal_f_14();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>&
Message6::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M1>*
Message6::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_14_;
}

// repeated .fleetbench.proto.Message6.M2 f_16 = 18;
inline int Message6::_internal_f_16_size() const {
  return _internal_f_16().size();
}
inline int Message6::f_16_size() const {
  return _internal_f_16_size();
}
inline void Message6::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.Clear();
}
inline ::fleetbench::proto::Message6_M2* Message6::mutable_f_16(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.f_16)
  return _internal_mutable_f_16()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>* Message6::mutable_f_16()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.f_16)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_16();
}
inline const ::fleetbench::proto::Message6_M2& Message6::f_16(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_16)
  return _internal_f_16().Get(index);
}
inline ::fleetbench::proto::Message6_M2* Message6::add_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M2* _add = _internal_mutable_f_16()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.f_16)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>& Message6::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.f_16)
  return _internal_f_16();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>&
Message6::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M2>*
Message6::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_16_;
}

// repeated .fleetbench.proto.Message6.M3 f_18 = 21;
inline int Message6::_internal_f_18_size() const {
  return _internal_f_18().size();
}
inline int Message6::f_18_size() const {
  return _internal_f_18_size();
}
inline void Message6::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.Clear();
}
inline ::fleetbench::proto::Message6_M3* Message6::mutable_f_18(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.f_18)
  return _internal_mutable_f_18()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>* Message6::mutable_f_18()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.f_18)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_18();
}
inline const ::fleetbench::proto::Message6_M3& Message6::f_18(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_18)
  return _internal_f_18().Get(index);
}
inline ::fleetbench::proto::Message6_M3* Message6::add_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M3* _add = _internal_mutable_f_18()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.f_18)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>& Message6::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.f_18)
  return _internal_f_18();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>&
Message6::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M3>*
Message6::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_18_;
}

// optional .fleetbench.proto.Message6.M4 f_21 = 23;
inline bool Message6::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_21_ != nullptr);
  return value;
}
inline void Message6::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ != nullptr) _impl_.f_21_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message6_M4& Message6::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message6_M4* p = _impl_.f_21_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message6_M4&>(::fleetbench::proto::_Message6_M4_default_instance_);
}
inline const ::fleetbench::proto::Message6_M4& Message6::f_21() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_21)
  return _internal_f_21();
}
inline void Message6::unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message6_M4* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_21_);
  }
  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message6_M4*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message6.f_21)
}
inline ::fleetbench::proto::Message6_M4* Message6::release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4* released = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message6_M4* Message6::unsafe_arena_release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message6.f_21)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message6_M4* temp = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message6_M4* Message6::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message6_M4>(GetArena());
    _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message6_M4*>(p);
  }
  return _impl_.f_21_;
}
inline ::fleetbench::proto::Message6_M4* Message6::mutable_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message6_M4* _msg = _internal_mutable_f_21();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.f_21)
  return _msg;
}
inline void Message6::set_allocated_f_21(::fleetbench::proto::Message6_M4* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_21_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message6_M4*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message6.f_21)
}

// repeated .fleetbench.proto.Message6.M5 f_23 = 25;
inline int Message6::_internal_f_23_size() const {
  return _internal_f_23().size();
}
inline int Message6::f_23_size() const {
  return _internal_f_23_size();
}
inline void Message6::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.Clear();
}
inline ::fleetbench::proto::Message6_M5* Message6::mutable_f_23(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message6.f_23)
  return _internal_mutable_f_23()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>* Message6::mutable_f_23()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message6.f_23)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_23();
}
inline const ::fleetbench::proto::Message6_M5& Message6::f_23(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message6.f_23)
  return _internal_f_23().Get(index);
}
inline ::fleetbench::proto::Message6_M5* Message6::add_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message6_M5* _add = _internal_mutable_f_23()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message6.f_23)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>& Message6::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message6.f_23)
  return _internal_f_23();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>&
Message6::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message6_M5>*
Message6::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_23_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fleetbench


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_M55_M57_E80_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M47_E63_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E78_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_M52_E79_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E64_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E65_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E66_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E67_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E68_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E69_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E70_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E71_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E72_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E73_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E74_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E75_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E76_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M44_M50_E77_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E45_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E46_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E47_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E48_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M42_M45_E49_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E38_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E39_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E40_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E41_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E42_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E43_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44>() {
  return ::fleetbench::proto::Message6_M1_M15_M23_M28_M43_E44_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M17_E7> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M17_E7>() {
  return ::fleetbench::proto::Message6_M1_M17_E7_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_M17_E8> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_M17_E8>() {
  return ::fleetbench::proto::Message6_M1_M17_E8_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M1_E3> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M1_E3>() {
  return ::fleetbench::proto::Message6_M1_E3_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M3_M11_M22_M32_E33> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M3_M11_M22_M32_E33>() {
  return ::fleetbench::proto::Message6_M3_M11_M22_M32_E33_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M58_M60_M61_M63_E82_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_M48_M51_M56_M59_E81_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E50_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E51_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E52_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E53_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E54_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E55_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E56_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E57_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E58_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E59_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E60_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E61_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62>() {
  return ::fleetbench::proto::Message6_M4_M6_M18_M29_M41_M46_E62_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M25_M33_E34> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M25_M33_E34>() {
  return ::fleetbench::proto::Message6_M4_M6_M25_M33_E34_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M6_M25_E9> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M6_M25_E9>() {
  return ::fleetbench::proto::Message6_M4_M6_M25_E9_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M13_M26_E10> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M13_M26_E10>() {
  return ::fleetbench::proto::Message6_M4_M13_M26_E10_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M4_M13_M26_E11> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M4_M13_M26_E11>() {
  return ::fleetbench::proto::Message6_M4_M13_M26_E11_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_M34_E35> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_M34_E35>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_M34_E35_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_M34_E36> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_M34_E36>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_M34_E36_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_M36_E37> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_M36_E37>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_M36_E37_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E12> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E12>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E12_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E13> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E13>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E13_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E14> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E14>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E14_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E15> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E15>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E15_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E16> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E16>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E16_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E17> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E17>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E17_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E18> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E18>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E18_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E19> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E19>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E19_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E20> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E20>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E20_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E21> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E21>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E21_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E22> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E22>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E22_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E23> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E23>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E23_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E24> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E24>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E24_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E25> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E25>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E25_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E26> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E26>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E26_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E27> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E27>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E27_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E28> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E28>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E28_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E29> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E29>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E29_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E30> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E30>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E30_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E31> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E31>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E31_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_M8_M27_E32> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_M8_M27_E32>() {
  return ::fleetbench::proto::Message6_M5_M8_M27_E32_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_E4> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_E4>() {
  return ::fleetbench::proto::Message6_M5_E4_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_E5> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_E5>() {
  return ::fleetbench::proto::Message6_M5_E5_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_M5_E6> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_M5_E6>() {
  return ::fleetbench::proto::Message6_M5_E6_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_E1> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_E1>() {
  return ::fleetbench::proto::Message6_E1_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message6_E2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message6_E2>() {
  return ::fleetbench::proto::Message6_E2_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage6_2eproto_2epb_2eh
